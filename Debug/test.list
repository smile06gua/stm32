
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08009dbc  08009dbc  0000adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a130  0800a130  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a130  0800a130  0000b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a138  0800a138  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a138  0800a138  0000b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a144  0800a144  0000b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a148  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000060  0800a1a8  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c3c  0800a1a8  0000cc3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f27  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004404  00000000  00000000  0002efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e8  00000000  00000000  00034bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dbe  00000000  00000000  00035ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efc7  00000000  00000000  00056c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfba1  00000000  00000000  00075c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001457e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  0014582c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009da4 	.word	0x08009da4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08009da4 	.word	0x08009da4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96a 	b.w	8000da0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	460c      	mov	r4, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d14e      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af0:	4694      	mov	ip, r2
 8000af2:	458c      	cmp	ip, r1
 8000af4:	4686      	mov	lr, r0
 8000af6:	fab2 f282 	clz	r2, r2
 8000afa:	d962      	bls.n	8000bc2 <__udivmoddi4+0xde>
 8000afc:	b14a      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000afe:	f1c2 0320 	rsb	r3, r2, #32
 8000b02:	4091      	lsls	r1, r2
 8000b04:	fa20 f303 	lsr.w	r3, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	4319      	orrs	r1, r3
 8000b0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b16:	fa1f f68c 	uxth.w	r6, ip
 8000b1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b22:	fb07 1114 	mls	r1, r7, r4, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb04 f106 	mul.w	r1, r4, r6
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b3a:	f080 8112 	bcs.w	8000d62 <__udivmoddi4+0x27e>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 810f 	bls.w	8000d62 <__udivmoddi4+0x27e>
 8000b44:	3c02      	subs	r4, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b52:	fb07 1110 	mls	r1, r7, r0, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb00 f606 	mul.w	r6, r0, r6
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x94>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6a:	f080 80fc 	bcs.w	8000d66 <__udivmoddi4+0x282>
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	f240 80f9 	bls.w	8000d66 <__udivmoddi4+0x282>
 8000b74:	4463      	add	r3, ip
 8000b76:	3802      	subs	r0, #2
 8000b78:	1b9b      	subs	r3, r3, r6
 8000b7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b7e:	2100      	movs	r1, #0
 8000b80:	b11d      	cbz	r5, 8000b8a <__udivmoddi4+0xa6>
 8000b82:	40d3      	lsrs	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	e9c5 3200 	strd	r3, r2, [r5]
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d905      	bls.n	8000b9e <__udivmoddi4+0xba>
 8000b92:	b10d      	cbz	r5, 8000b98 <__udivmoddi4+0xb4>
 8000b94:	e9c5 0100 	strd	r0, r1, [r5]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	e7f5      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000b9e:	fab3 f183 	clz	r1, r3
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d146      	bne.n	8000c34 <__udivmoddi4+0x150>
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xcc>
 8000baa:	4290      	cmp	r0, r2
 8000bac:	f0c0 80f0 	bcc.w	8000d90 <__udivmoddi4+0x2ac>
 8000bb0:	1a86      	subs	r6, r0, r2
 8000bb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0e6      	beq.n	8000b8a <__udivmoddi4+0xa6>
 8000bbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc0:	e7e3      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	f040 8090 	bne.w	8000ce8 <__udivmoddi4+0x204>
 8000bc8:	eba1 040c 	sub.w	r4, r1, ip
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bde:	fb08 4416 	mls	r4, r8, r6, r4
 8000be2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be6:	fb07 f006 	mul.w	r0, r7, r6
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x11c>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x11a>
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bfe:	4626      	mov	r6, r4
 8000c00:	1a1c      	subs	r4, r3, r0
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb00 f707 	mul.w	r7, r0, r7
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x148>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x146>
 8000c24:	429f      	cmp	r7, r3
 8000c26:	f200 80b0 	bhi.w	8000d8a <__udivmoddi4+0x2a6>
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	1bdb      	subs	r3, r3, r7
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	e7a5      	b.n	8000b80 <__udivmoddi4+0x9c>
 8000c34:	f1c1 0620 	rsb	r6, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c3e:	431f      	orrs	r7, r3
 8000c40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c44:	fa04 f301 	lsl.w	r3, r4, r1
 8000c48:	ea43 030c 	orr.w	r3, r3, ip
 8000c4c:	40f4      	lsrs	r4, r6
 8000c4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c52:	0c38      	lsrs	r0, r7, #16
 8000c54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c58:	fbb4 fef0 	udiv	lr, r4, r0
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fb00 441e 	mls	r4, r0, lr, r4
 8000c64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c68:	fb0e f90c 	mul.w	r9, lr, ip
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x1a6>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c7a:	f080 8084 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8081 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000c84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c88:	443c      	add	r4, r7
 8000c8a:	eba4 0409 	sub.w	r4, r4, r9
 8000c8e:	fa1f f983 	uxth.w	r9, r3
 8000c92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c96:	fb00 4413 	mls	r4, r0, r3, r4
 8000c9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x1d2>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cac:	d267      	bcs.n	8000d7e <__udivmoddi4+0x29a>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	d965      	bls.n	8000d7e <__udivmoddi4+0x29a>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cba:	fba0 9302 	umull	r9, r3, r0, r2
 8000cbe:	eba4 040c 	sub.w	r4, r4, ip
 8000cc2:	429c      	cmp	r4, r3
 8000cc4:	46ce      	mov	lr, r9
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	d351      	bcc.n	8000d6e <__udivmoddi4+0x28a>
 8000cca:	d04e      	beq.n	8000d6a <__udivmoddi4+0x286>
 8000ccc:	b155      	cbz	r5, 8000ce4 <__udivmoddi4+0x200>
 8000cce:	ebb8 030e 	subs.w	r3, r8, lr
 8000cd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cda:	40cb      	lsrs	r3, r1
 8000cdc:	431e      	orrs	r6, r3
 8000cde:	40cc      	lsrs	r4, r1
 8000ce0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e750      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	430c      	orrs	r4, r1
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d16:	fb00 f107 	mul.w	r1, r0, r7
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x24c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d26:	d22c      	bcs.n	8000d82 <__udivmoddi4+0x29e>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d92a      	bls.n	8000d82 <__udivmoddi4+0x29e>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d38:	fb08 3311 	mls	r3, r8, r1, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb01 f307 	mul.w	r3, r1, r7
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x276>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d50:	d213      	bcs.n	8000d7a <__udivmoddi4+0x296>
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	d911      	bls.n	8000d7a <__udivmoddi4+0x296>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	1ae4      	subs	r4, r4, r3
 8000d5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d60:	e739      	b.n	8000bd6 <__udivmoddi4+0xf2>
 8000d62:	4604      	mov	r4, r0
 8000d64:	e6f0      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e706      	b.n	8000b78 <__udivmoddi4+0x94>
 8000d6a:	45c8      	cmp	r8, r9
 8000d6c:	d2ae      	bcs.n	8000ccc <__udivmoddi4+0x1e8>
 8000d6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d76:	3801      	subs	r0, #1
 8000d78:	e7a8      	b.n	8000ccc <__udivmoddi4+0x1e8>
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e7ed      	b.n	8000d5a <__udivmoddi4+0x276>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	e799      	b.n	8000cb6 <__udivmoddi4+0x1d2>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e7d4      	b.n	8000d30 <__udivmoddi4+0x24c>
 8000d86:	46d6      	mov	lr, sl
 8000d88:	e77f      	b.n	8000c8a <__udivmoddi4+0x1a6>
 8000d8a:	4463      	add	r3, ip
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	e74d      	b.n	8000c2c <__udivmoddi4+0x148>
 8000d90:	4606      	mov	r6, r0
 8000d92:	4623      	mov	r3, r4
 8000d94:	4608      	mov	r0, r1
 8000d96:	e70f      	b.n	8000bb8 <__udivmoddi4+0xd4>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	e730      	b.n	8000c00 <__udivmoddi4+0x11c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0a5a      	lsrs	r2, r3, #9
 8000db4:	490f      	ldr	r1, [pc, #60]	@ (8000df4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000db6:	fba1 1202 	umull	r1, r2, r1, r2
 8000dba:	09d2      	lsrs	r2, r2, #7
 8000dbc:	490e      	ldr	r1, [pc, #56]	@ (8000df8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000dbe:	fb01 f202 	mul.w	r2, r1, r2
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0a5b      	lsrs	r3, r3, #9
 8000dcc:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	09db      	lsrs	r3, r3, #7
 8000dd4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	441a      	add	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	00044b83 	.word	0x00044b83
 8000df8:	3b9aca00 	.word	0x3b9aca00

08000dfc <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000dfc:	b5b0      	push	{r4, r5, r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	ed93 7a08 	vldr	s14, [r3, #32]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7e:	d503      	bpl.n	8000e88 <_ZN8DC_motor6PI_runEv+0x8c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	e012      	b.n	8000eae <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e92:	eef1 7a67 	vneg.f32	s15, s15
 8000e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d506      	bpl.n	8000eae <_ZN8DC_motor6PI_runEv+0xb2>
 8000ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea4:	eef1 7a67 	vneg.f32	s15, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	ed93 7a00 	vldr	s14, [r3]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8000ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	dd03      	ble.n	8000f0c <_ZN8DC_motor6PI_runEv+0x110>
 8000f04:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e00a      	b.n	8000f22 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 8000f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f10:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d501      	bpl.n	8000f22 <_ZN8DC_motor6PI_runEv+0x126>
 8000f1e:	4b56      	ldr	r3, [pc, #344]	@ (8001078 <_ZN8DC_motor6PI_runEv+0x27c>)
 8000f20:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8000f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f26:	eef0 7ae7 	vabs.f32	s15, s15
 8000f2a:	ee17 0a90 	vmov	r0, s15
 8000f2e:	f7ff fadf 	bl	80004f0 <__aeabi_f2d>
 8000f32:	4604      	mov	r4, r0
 8000f34:	460d      	mov	r5, r1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fac6 	bl	80004cc <__aeabi_i2d>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff fb2a 	bl	80005a0 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fd36 	bl	80009c4 <__aeabi_d2iz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d124      	bne.n	8000fb0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8000f66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd09      	ble.n	8000f88 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f004 fafb 	bl	800557c <HAL_GPIO_WritePin>
 8000f86:	e03c      	b.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d509      	bpl.n	8000faa <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f004 faea 	bl	800557c <HAL_GPIO_WritePin>
 8000fa8:	e02b      	b.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e028      	b.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d123      	bne.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 8000fba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc6:	dd09      	ble.n	8000fdc <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f004 fad1 	bl	800557c <HAL_GPIO_WritePin>
 8000fda:	e012      	b.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d509      	bpl.n	8000ffe <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f004 fac0 	bl	800557c <HAL_GPIO_WritePin>
 8000ffc:	e001      	b.n	8001002 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <_ZN8DC_motor6PI_runEv+0x21a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001014:	e02c      	b.n	8001070 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	2b04      	cmp	r3, #4
 800101c:	d105      	bne.n	800102a <_ZN8DC_motor6PI_runEv+0x22e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001028:	e022      	b.n	8001070 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	2b08      	cmp	r3, #8
 8001030:	d105      	bne.n	800103e <_ZN8DC_motor6PI_runEv+0x242>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800103c:	e018      	b.n	8001070 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d105      	bne.n	8001052 <_ZN8DC_motor6PI_runEv+0x256>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001050:	e00e      	b.n	8001070 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	2b10      	cmp	r3, #16
 8001058:	d105      	bne.n	8001066 <_ZN8DC_motor6PI_runEv+0x26a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001064:	e004      	b.n	8001070 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}
 8001078:	bf800000 	.word	0xbf800000

0800107c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	621a      	str	r2, [r3, #32]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80010dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    __HAL_TIM_SetCounter(enc_htim,0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	4619      	mov	r1, r3
 800113c:	4610      	mov	r0, r2
 800113e:	f005 fd99 	bl	8006c74 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f005 ff85 	bl	8007058 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f005 ff7f 	bl	8007058 <HAL_TIM_Encoder_Start>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f003 fbbc 	bl	80048e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f818 	bl	800119e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f000 fb95 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8001172:	f000 fb61 	bl	8001838 <MX_DMA_Init>
  MX_TIM1_Init();
 8001176:	f000 f893 	bl	80012a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800117a:	f000 f949 	bl	8001410 <MX_TIM2_Init>
  MX_TIM3_Init();
 800117e:	f000 f995 	bl	80014ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001182:	f000 f9ed 	bl	8001560 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001186:	f000 fa77 	bl	8001678 <MX_TIM8_Init>
  MX_I2C1_Init();
 800118a:	f000 f849 	bl	8001220 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800118e:	f000 fb07 	bl	80017a0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001192:	f000 fa3b 	bl	800160c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001196:	f000 fd47 	bl	8001c28 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <main+0x38>

0800119e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b094      	sub	sp, #80	@ 0x50
 80011a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	2238      	movs	r2, #56	@ 0x38
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f008 fca7 	bl	8009b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011c4:	f004 fb3c 	bl	8005840 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d2:	2340      	movs	r3, #64	@ 0x40
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fbe2 	bl	80059a8 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011ea:	f000 fbfb 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f2:	2301      	movs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fee0 	bl	8005fcc <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001212:	f000 fbe7 	bl	80019e4 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	@ 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <MX_I2C1_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_I2C1_Init+0x74>)
 800122c:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <MX_I2C1_Init+0x7c>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	@ (8001294 <MX_I2C1_Init+0x74>)
 800125c:	f004 f9be 	bl	80055dc <HAL_I2C_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001266:	f000 fbbd 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4809      	ldr	r0, [pc, #36]	@ (8001294 <MX_I2C1_Init+0x74>)
 800126e:	f004 fa50 	bl	8005712 <HAL_I2CEx_ConfigAnalogFilter>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001278:	f000 fbb4 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_I2C1_Init+0x74>)
 8001280:	f004 fa92 	bl	80057a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 fbab 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000007c 	.word	0x2000007c
 8001298:	40005400 	.word	0x40005400
 800129c:	00503d58 	.word	0x00503d58

080012a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b098      	sub	sp, #96	@ 0x60
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2234      	movs	r2, #52	@ 0x34
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 fc17 	bl	8009b00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012d4:	4a4d      	ldr	r2, [pc, #308]	@ (800140c <MX_TIM1_Init+0x16c>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80012d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012da:	220f      	movs	r2, #15
 80012dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012e6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b46      	ldr	r3, [pc, #280]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f2:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <MX_TIM1_Init+0x168>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012fe:	4842      	ldr	r0, [pc, #264]	@ (8001408 <MX_TIM1_Init+0x168>)
 8001300:	f005 fb61 	bl	80069c6 <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 fb6b 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800131e:	4619      	mov	r1, r3
 8001320:	4839      	ldr	r0, [pc, #228]	@ (8001408 <MX_TIM1_Init+0x168>)
 8001322:	f006 ff01 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800132c:	f000 fb5a 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	@ 0x60
 8001332:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	482c      	ldr	r0, [pc, #176]	@ (8001408 <MX_TIM1_Init+0x168>)
 8001356:	f006 f85d 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001360:	f000 fb40 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001364:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001368:	2204      	movs	r2, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4826      	ldr	r0, [pc, #152]	@ (8001408 <MX_TIM1_Init+0x168>)
 800136e:	f006 f851 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001378:	f000 fb34 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800137c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001380:	2208      	movs	r2, #8
 8001382:	4619      	mov	r1, r3
 8001384:	4820      	ldr	r0, [pc, #128]	@ (8001408 <MX_TIM1_Init+0x168>)
 8001386:	f006 f845 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001390:	f000 fb28 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001394:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001398:	220c      	movs	r2, #12
 800139a:	4619      	mov	r1, r3
 800139c:	481a      	ldr	r0, [pc, #104]	@ (8001408 <MX_TIM1_Init+0x168>)
 800139e:	f006 f839 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80013a8:	f000 fb1c 	bl	80019e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	@ (8001408 <MX_TIM1_Init+0x168>)
 80013ea:	f006 ff1f 	bl	800822c <HAL_TIMEx_ConfigBreakDeadTime>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80013f4:	f000 faf6 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <MX_TIM1_Init+0x168>)
 80013fa:	f003 f833 	bl	8004464 <HAL_TIM_MspPostInit>

}
 80013fe:	bf00      	nop
 8001400:	3760      	adds	r7, #96	@ 0x60
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000d0 	.word	0x200000d0
 800140c:	40012c00 	.word	0x40012c00

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001430:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001438:	220f      	movs	r2, #15
 800143a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_TIM2_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001456:	4814      	ldr	r0, [pc, #80]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001458:	f005 f9c4 	bl	80067e4 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001462:	f000 fabf 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001474:	f006 f8e2 	bl	800763c <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800147e:	f000 fab1 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM2_Init+0x98>)
 8001490:	f006 fe4a 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800149a:	f000 faa3 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000011c 	.word	0x2000011c

080014ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d0:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014d2:	4a22      	ldr	r2, [pc, #136]	@ (800155c <MX_TIM3_Init+0xb0>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014d8:	220f      	movs	r2, #15
 80014da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f6:	4818      	ldr	r0, [pc, #96]	@ (8001558 <MX_TIM3_Init+0xac>)
 80014f8:	f005 fa65 	bl	80069c6 <HAL_TIM_PWM_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001502:	f000 fa6f 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	@ (8001558 <MX_TIM3_Init+0xac>)
 8001516:	f006 fe07 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001520:	f000 fa60 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	@ 0x60
 8001526:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_TIM3_Init+0xac>)
 800153c:	f005 ff6a 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001546:	f000 fa4d 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154a:	4803      	ldr	r0, [pc, #12]	@ (8001558 <MX_TIM3_Init+0xac>)
 800154c:	f002 ff8a 	bl	8004464 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000168 	.word	0x20000168
 800155c:	40000400 	.word	0x40000400

08001560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	@ 0x30
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f008 fac6 	bl	8009b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <MX_TIM4_Init+0xa4>)
 8001580:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <MX_TIM4_Init+0xa8>)
 8001582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <MX_TIM4_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <MX_TIM4_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <MX_TIM4_Init+0xa4>)
 8001592:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_TIM4_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <MX_TIM4_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015a4:	2303      	movs	r3, #3
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ac:	2301      	movs	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015bc:	2301      	movs	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	@ (8001604 <MX_TIM4_Init+0xa4>)
 80015d0:	f005 fc9c 	bl	8006f0c <HAL_TIM_Encoder_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015da:	f000 fa03 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	@ (8001604 <MX_TIM4_Init+0xa4>)
 80015ec:	f006 fd9c 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015f6:	f000 f9f5 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3730      	adds	r7, #48	@ 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200001b4 	.word	0x200001b4
 8001608:	40000800 	.word	0x40000800

0800160c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_TIM6_Init+0x64>)
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <MX_TIM6_Init+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_TIM6_Init+0x64>)
 8001624:	220f      	movs	r2, #15
 8001626:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_TIM6_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_TIM6_Init+0x64>)
 8001630:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001634:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_TIM6_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <MX_TIM6_Init+0x64>)
 800163e:	f005 f8d1 	bl	80067e4 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001648:	f000 f9cc 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM6_Init+0x64>)
 800165a:	f006 fd65 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 f9be 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000200 	.word	0x20000200
 8001674:	40001000 	.word	0x40001000

08001678 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b098      	sub	sp, #96	@ 0x60
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2234      	movs	r2, #52	@ 0x34
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 fa2b 	bl	8009b00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016ac:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <MX_TIM8_Init+0x124>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016b2:	220f      	movs	r2, #15
 80016b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ca:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016d6:	4830      	ldr	r0, [pc, #192]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016d8:	f005 f975 	bl	80069c6 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 f97f 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016f6:	4619      	mov	r1, r3
 80016f8:	4827      	ldr	r0, [pc, #156]	@ (8001798 <MX_TIM8_Init+0x120>)
 80016fa:	f006 fd15 	bl	8008128 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001704:	f000 f96e 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	@ 0x60
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001724:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001728:	2204      	movs	r2, #4
 800172a:	4619      	mov	r1, r3
 800172c:	481a      	ldr	r0, [pc, #104]	@ (8001798 <MX_TIM8_Init+0x120>)
 800172e:	f005 fe71 	bl	8007414 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001738:	f000 f954 	bl	80019e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM8_Init+0x120>)
 800177a:	f006 fd57 	bl	800822c <HAL_TIMEx_ConfigBreakDeadTime>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001784:	f000 f92e 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM8_Init+0x120>)
 800178a:	f002 fe6b 	bl	8004464 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3760      	adds	r7, #96	@ 0x60
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000024c 	.word	0x2000024c
 800179c:	40013400 	.word	0x40013400

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <MX_USART2_UART_Init+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017ea:	f006 fdf1 	bl	80083d0 <HAL_UART_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 f8f6 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 80017fc:	f008 f87f 	bl	80098fe <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001806:	f000 f8ed 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 800180e:	f008 f8b4 	bl	800997a <HAL_UARTEx_SetRxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001818:	f000 f8e4 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_USART2_UART_Init+0x90>)
 800181e:	f008 f835 	bl	800988c <HAL_UARTEx_DisableFifoMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f8dc 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000298 	.word	0x20000298
 8001834:	40004400 	.word	0x40004400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_DMA_Init+0x60>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <MX_DMA_Init+0x60>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6493      	str	r3, [r2, #72]	@ 0x48
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_DMA_Init+0x60>)
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_DMA_Init+0x60>)
 8001858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <MX_DMA_Init+0x60>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6493      	str	r3, [r2, #72]	@ 0x48
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_DMA_Init+0x60>)
 8001864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200d      	movs	r0, #13
 8001874:	f003 f981 	bl	8004b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001878:	200d      	movs	r0, #13
 800187a:	f003 f998 	bl	8004bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	200e      	movs	r0, #14
 8001884:	f003 f979 	bl	8004b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001888:	200e      	movs	r0, #14
 800188a:	f003 f990 	bl	8004bae <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	4b49      	ldr	r3, [pc, #292]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ca:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a42      	ldr	r2, [pc, #264]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	4a3c      	ldr	r2, [pc, #240]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ee:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001906:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f240 6109 	movw	r1, #1545	@ 0x609
 8001918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191c:	f003 fe2e 	bl	800557c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001920:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001926:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4829      	ldr	r0, [pc, #164]	@ (80019dc <MX_GPIO_Init+0x140>)
 8001938:	f003 fc86 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 800193c:	f240 6309 	movw	r3, #1545	@ 0x609
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f003 fc76 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800195c:	2306      	movs	r3, #6
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f003 fc68 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001978:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <MX_GPIO_Init+0x144>)
 8001990:	f003 fc5a 	bl	8005248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001994:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480c      	ldr	r0, [pc, #48]	@ (80019dc <MX_GPIO_Init+0x140>)
 80019ac:	f003 fc4c 	bl	8005248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2017      	movs	r0, #23
 80019b6:	f003 f8e0 	bl	8004b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ba:	2017      	movs	r0, #23
 80019bc:	f003 f8f7 	bl	8004bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2028      	movs	r0, #40	@ 0x28
 80019c6:	f003 f8d8 	bl	8004b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ca:	2028      	movs	r0, #40	@ 0x28
 80019cc:	f003 f8ef 	bl	8004bae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000800 	.word	0x48000800
 80019e0:	48000400 	.word	0x48000400

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <Error_Handler+0x8>

080019f0 <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d82a      	bhi.n	8001a58 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001a02:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a29 	.word	0x08001a29
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	08001a49 	.word	0x08001a49
			case GBD300T:
				return {300,500,2500,0.25};
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001a1c:	461c      	mov	r4, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a26:	e01d      	b.n	8001a64 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a36:	e015      	b.n	8001a64 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	4613      	mov	r3, r2
 8001a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a46:	e00d      	b.n	8001a64 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4613      	mov	r3, r2
 8001a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a56:	e005      	b.n	8001a64 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ffc7 	bl	80019f0 <_ZN5Servo12getServoInfoENS_4typeE>
 8001a62:	bf00      	nop
			}
		}
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	08009dbc 	.word	0x08009dbc
 8001a70:	08009dcc 	.word	0x08009dcc
 8001a74:	08009ddc 	.word	0x08009ddc
 8001a78:	08009dec 	.word	0x08009dec

08001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	61f8      	str	r0, [r7, #28]
 8001a84:	61b9      	str	r1, [r7, #24]
 8001a86:	617a      	str	r2, [r7, #20]
 8001a88:	74fb      	strb	r3, [r7, #19]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001a8e:	f103 040c 	add.w	r4, r3, #12
 8001a92:	4613      	mov	r3, r2
 8001a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	771a      	strb	r2, [r3, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001ab2:	69fc      	ldr	r4, [r7, #28]
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	7cfa      	ldrb	r2, [r7, #19]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff98 	bl	80019f0 <_ZN5Servo12getServoInfoENS_4typeE>
 8001ac0:	340c      	adds	r4, #12
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3724      	adds	r7, #36	@ 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	08009dbc 	.word	0x08009dbc

08001ad8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void setspeed(float target_speed);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);


	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6178      	str	r0, [r7, #20]
 8001ae0:	6139      	str	r1, [r7, #16]
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ae8:	edc7 0a00 	vstr	s1, [r7]
 8001aec:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xe4>)
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2264      	movs	r2, #100	@ 0x64
 8001b48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2200      	movs	r2, #0
 8001b56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44
		enc_htim = _enc_htim;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPort = _dirPort;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	64da      	str	r2, [r3, #76]	@ 0x4c
		dirPin = _dirPin;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	897a      	ldrh	r2, [r7, #10]
 8001b86:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		PWM_htim = _PWM_htim;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	659a      	str	r2, [r3, #88]	@ 0x58
		dir_pin = _dirpin;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		kp = _kp;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	605a      	str	r2, [r3, #4]
	};
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	3a83126f 	.word	0x3a83126f

08001bc0 <_Z9setup_allv>:
int gripperLowest = 0;
int ms = 0;
int32_t total_steps = 0;  // 用來記錄總步數


void setup_all(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	servo_gripper.setup(0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4810      	ldr	r0, [pc, #64]	@ (8001c08 <_Z9setup_allv+0x48>)
 8001bc8:	f002 f943 	bl	8003e52 <_ZN5Servo5setupEi>
	servo_right.setup(0);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	480f      	ldr	r0, [pc, #60]	@ (8001c0c <_Z9setup_allv+0x4c>)
 8001bd0:	f002 f93f 	bl	8003e52 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <_Z9setup_allv+0x50>)
 8001bd8:	f002 f93b 	bl	8003e52 <_ZN5Servo5setupEi>
	servo_forward.setup(90);
 8001bdc:	215a      	movs	r1, #90	@ 0x5a
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <_Z9setup_allv+0x54>)
 8001be0:	f002 f937 	bl	8003e52 <_ZN5Servo5setupEi>
	servo_turn.setup(0);
 8001be4:	2100      	movs	r1, #0
 8001be6:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <_Z9setup_allv+0x58>)
 8001be8:	f002 f933 	bl	8003e52 <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8001bec:	480b      	ldr	r0, [pc, #44]	@ (8001c1c <_Z9setup_allv+0x5c>)
 8001bee:	f7ff fa9c 	bl	800112a <_ZN8DC_motor5setupEv>
	HAL_TIM_Base_Start_IT(&htim6);
 8001bf2:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <_Z9setup_allv+0x60>)
 8001bf4:	f004 fe4e 	bl	8006894 <HAL_TIM_Base_Start_IT>
	ms++;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <_Z9setup_allv+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <_Z9setup_allv+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000468 	.word	0x20000468
 8001c0c:	200004a8 	.word	0x200004a8
 8001c10:	20000488 	.word	0x20000488
 8001c14:	200004c8 	.word	0x200004c8
 8001c18:	20000448 	.word	0x20000448
 8001c1c:	200003ec 	.word	0x200003ec
 8001c20:	20000200 	.word	0x20000200
 8001c24:	200004f8 	.word	0x200004f8

08001c28 <main_function>:
void main_function(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	setup_all();
 8001c2c:	f7ff ffc8 	bl	8001bc0 <_Z9setup_allv>

	while(1){
		mission_3();
 8001c30:	f000 f8fc 	bl	8001e2c <_Z9mission_3v>
 8001c34:	e7fc      	b.n	8001c30 <main_function+0x8>
	...

08001c38 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f004 fe26 	bl	8006894 <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001c48:	bf00      	nop
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dcfa      	bgt.n	8001c4a <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8001c54:	6838      	ldr	r0, [r7, #0]
 8001c56:	f004 fe87 	bl	8006968 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8001c5a:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200004f4 	.word	0x200004f4

08001c6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7c:	d104      	bne.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c86:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d113      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x4e>
		Motor_updown.PI_run();
 8001c92:	480e      	ldr	r0, [pc, #56]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c94:	f7ff f8b2 	bl	8000dfc <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(1);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c9c:	f7ff f9fd 	bl	800109a <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cac:	f7ff f9e6 	bl	800107c <_ZN8DC_motor8setspeedEf>
		ms++;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cb8:	6013      	str	r3, [r2, #0]

	}
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200004f4 	.word	0x200004f4
 8001cc8:	40001000 	.word	0x40001000
 8001ccc:	200003ec 	.word	0x200003ec
 8001cd0:	200004e8 	.word	0x200004e8
 8001cd4:	200004f8 	.word	0x200004f8

08001cd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce8:	d019      	beq.n	8001d1e <HAL_GPIO_EXTI_Callback+0x46>
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cee:	d133      	bne.n	8001d58 <HAL_GPIO_EXTI_Callback+0x80>
		case GPIO_PIN_13:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481a      	ldr	r0, [pc, #104]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cf6:	f003 fc29 	bl	800554c <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d023      	beq.n	8001d52 <HAL_GPIO_EXTI_Callback+0x7a>
				speeds = 0;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
				wait(5000, &htim2);
 8001d12:	4915      	ldr	r1, [pc, #84]	@ (8001d68 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d14:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d18:	f7ff ff8e 	bl	8001c38 <_Z4waitiP17TIM_HandleTypeDef>
			}
			//Motor_updown.setspeed(speeds);
			break;
 8001d1c:	e019      	b.n	8001d52 <HAL_GPIO_EXTI_Callback+0x7a>
		case GPIO_PIN_12:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4619      	mov	r1, r3
 8001d22:	480f      	ldr	r0, [pc, #60]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0x88>)
 8001d24:	f003 fc12 	bl	800554c <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <HAL_GPIO_EXTI_Callback+0x7e>
				initialized = false;  // 重置初始化狀態
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_GPIO_EXTI_Callback+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
				wait(5000, &htim2);
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d48:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d4c:	f7ff ff74 	bl	8001c38 <_Z4waitiP17TIM_HandleTypeDef>
				//HAL_Delay(1000);
			}

			//Motor_updown.setspeed(speeds);
			break;
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_EXTI_Callback+0x7e>
			break;
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_EXTI_Callback+0x80>
			break;
 8001d56:	bf00      	nop

	}
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	48000800 	.word	0x48000800
 8001d64:	200004e8 	.word	0x200004e8
 8001d68:	2000011c 	.word	0x2000011c
 8001d6c:	20000000 	.word	0x20000000

08001d70 <_Z41__static_initialization_and_destruction_0ii>:
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af04      	add	r7, sp, #16
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d134      	bne.n	8001dea <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12f      	bne.n	8001dea <_Z41__static_initialization_and_destruction_0ii+0x7a>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,1,4,12};
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	2304      	movs	r3, #4
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001d9a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001da6:	4914      	ldr	r1, [pc, #80]	@ (8001df8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001da8:	4814      	ldr	r0, [pc, #80]	@ (8001dfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001daa:	f7ff fe95 	bl	8001ad8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_3, Servo::GBD1800T};
 8001dae:	2302      	movs	r3, #2
 8001db0:	2208      	movs	r2, #8
 8001db2:	4913      	ldr	r1, [pc, #76]	@ (8001e00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001db6:	f7ff fe61 	bl	8001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD300T};
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4912      	ldr	r1, [pc, #72]	@ (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001dc0:	4812      	ldr	r0, [pc, #72]	@ (8001e0c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001dc2:	f7ff fe5b 	bl	8001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	220c      	movs	r2, #12
 8001dca:	490f      	ldr	r1, [pc, #60]	@ (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001dcc:	4810      	ldr	r0, [pc, #64]	@ (8001e10 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001dce:	f7ff fe55 	bl	8001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_1, Servo::GBD300T};
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001dd8:	480e      	ldr	r0, [pc, #56]	@ (8001e14 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001dda:	f7ff fe4f 	bl	8001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 8001dde:	2302      	movs	r3, #2
 8001de0:	2200      	movs	r2, #0
 8001de2:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001de6:	f7ff fe49 	bl	8001a7c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000024c 	.word	0x2000024c
 8001df8:	200001b4 	.word	0x200001b4
 8001dfc:	200003ec 	.word	0x200003ec
 8001e00:	20000168 	.word	0x20000168
 8001e04:	20000448 	.word	0x20000448
 8001e08:	200000d0 	.word	0x200000d0
 8001e0c:	20000468 	.word	0x20000468
 8001e10:	20000488 	.word	0x20000488
 8001e14:	200004a8 	.word	0x200004a8
 8001e18:	200004c8 	.word	0x200004c8

08001e1c <_GLOBAL__sub_I_Motor_updown>:
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff ffa3 	bl	8001d70 <_Z41__static_initialization_and_destruction_0ii>
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_Z9mission_3v>:
	servo_gripper.turnTo(300);  //open
	wait(2000, &htim2);


}
void mission_3(){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

	//竹簍
	//servo_right.update_pos(angle_2, 5);
	servo_right.turnTo(angle);  // 0~55
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <_Z9mission_3v+0x34>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	ee17 1a90 	vmov	r1, s15
 8001e40:	4808      	ldr	r0, [pc, #32]	@ (8001e64 <_Z9mission_3v+0x38>)
 8001e42:	f002 f8cd 	bl	8003fe0 <_ZN5Servo6turnToEii>
	servo_left.turnTo(angle_2);
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <_Z9mission_3v+0x3c>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e50:	2200      	movs	r2, #0
 8001e52:	ee17 1a90 	vmov	r1, s15
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <_Z9mission_3v+0x40>)
 8001e58:	f002 f8c2 	bl	8003fe0 <_ZN5Servo6turnToEii>


    // Motor_updown.PI_run();
    // 更新encoder計數

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200004ec 	.word	0x200004ec
 8001e64:	200004a8 	.word	0x200004a8
 8001e68:	200004f0 	.word	0x200004f0
 8001e6c:	20000488 	.word	0x20000488

08001e70 <_Z14gripperControlb>:
void mission_4(){

}

void gripperControl(bool open){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
	if(open){
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <_Z14gripperControlb+0x24>
		servo_gripper.turnTo(300);  //open
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <_Z14gripperControlb+0x3c>)
 8001e88:	f002 f8aa 	bl	8003fe0 <_ZN5Servo6turnToEii>
		_gripperFinish = 1; //
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <_Z14gripperControlb+0x40>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //off
		_gripperFinish = 0;
	}
}
 8001e92:	e007      	b.n	8001ea4 <_Z14gripperControlb+0x34>
		servo_gripper.turnTo(0); //off
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <_Z14gripperControlb+0x3c>)
 8001e9a:	f002 f8a1 	bl	8003fe0 <_ZN5Servo6turnToEii>
		_gripperFinish = 0;
 8001e9e:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <_Z14gripperControlb+0x40>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000468 	.word	0x20000468
 8001eb0:	200004fc 	.word	0x200004fc

08001eb4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	0800a0e0 	.word	0x0800a0e0

08001ef8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
      data()
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffe8 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ffce 	bl	8001eb4 <_ZN3ros4TimeC1Ev>
    {
    }
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	0800a0c8 	.word	0x0800a0c8

08001f28 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	0a19      	lsrs	r1, r3, #8
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0c19      	lsrs	r1, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	0e19      	lsrs	r1, r3, #24
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3303      	adds	r3, #3
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	b2ca      	uxtb	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a19      	lsrs	r1, r3, #8
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	0c19      	lsrs	r1, r3, #16
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0e19      	lsrs	r1, r3, #24
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3303      	adds	r3, #3
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b2ca      	uxtb	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fca:	68fb      	ldr	r3, [r7, #12]
    }
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	440b      	add	r3, r1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3302      	adds	r3, #2
 8002012:	6839      	ldr	r1, [r7, #0]
 8002014:	440b      	add	r3, r1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3303      	adds	r3, #3
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	440b      	add	r3, r1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	440b      	add	r3, r1
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3302      	adds	r3, #2
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	440b      	add	r3, r1
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	041b      	lsls	r3, r3, #16
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3303      	adds	r3, #3
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	440b      	add	r3, r1
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
     return offset;
 8002092:	68fb      	ldr	r3, [r7, #12]
    }
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	4b03      	ldr	r3, [pc, #12]	@ (80020b8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	08009dfc 	.word	0x08009dfc

080020bc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	08009e0c 	.word	0x08009e0c

080020d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fef8 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 80020e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002118 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80020f8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a07      	ldr	r2, [pc, #28]	@ (800211c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80020fe:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a06      	ldr	r2, [pc, #24]	@ (800211c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002104:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
    {
    }
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	0800a0b0 	.word	0x0800a0b0
 800211c:	08009e30 	.word	0x08009e30

08002120 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8899      	ldrh	r1, [r3, #4]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	b2ca      	uxtb	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b299      	uxth	r1, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	b2ca      	uxtb	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3302      	adds	r3, #2
 8002154:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f85c 	bl	8000218 <strlen>
 8002160:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	69b9      	ldr	r1, [r7, #24]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 ff53 	bl	8003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3304      	adds	r3, #4
 8002174:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	18d0      	adds	r0, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4619      	mov	r1, r3
 8002184:	f007 fcf0 	bl	8009b68 <memcpy>
      offset += length_topic_name;
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4413      	add	r3, r2
 800218e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f83f 	bl	8000218 <strlen>
 800219a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	6979      	ldr	r1, [r7, #20]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ff36 	bl	8003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	18d0      	adds	r0, r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4619      	mov	r1, r3
 80021be:	f007 fcd3 	bl	8009b68 <memcpy>
      offset += length_message_type;
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f822 	bl	8000218 <strlen>
 80021d4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	6939      	ldr	r1, [r7, #16]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 ff19 	bl	8003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3304      	adds	r3, #4
 80021e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	18d0      	adds	r0, r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4619      	mov	r1, r3
 80021f8:	f007 fcb6 	bl	8009b68 <memcpy>
      offset += length_md5sum;
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0a19      	lsrs	r1, r3, #8
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4413      	add	r3, r2
 8002222:	b2ca      	uxtb	r2, r1
 8002224:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0c19      	lsrs	r1, r3, #16
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3302      	adds	r3, #2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0e19      	lsrs	r1, r3, #24
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3303      	adds	r3, #3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4413      	add	r3, r2
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	61fb      	str	r3, [r7, #28]
      return offset;
 800224c:	69fb      	ldr	r3, [r7, #28]
    }
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002256:	b580      	push	{r7, lr}
 8002258:	b08a      	sub	sp, #40	@ 0x28
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	b21a      	sxth	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	440b      	add	r3, r1
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b21b      	sxth	r3, r3
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	3302      	adds	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	441a      	add	r2, r3
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fed6 	bl	8003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	3304      	adds	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b2:	e00b      	b.n	80022cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	3b01      	subs	r3, #1
 80022be:	6839      	ldr	r1, [r7, #0]
 80022c0:	440b      	add	r3, r1
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4413      	add	r3, r2
 80022d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3ed      	bcc.n	80022b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4413      	add	r3, r2
 80022de:	3b01      	subs	r3, #1
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	441a      	add	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4413      	add	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	441a      	add	r2, r3
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fea3 	bl	8003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3304      	adds	r3, #4
 8002312:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	e00b      	b.n	8002332 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	441a      	add	r2, r3
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	3b01      	subs	r3, #1
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	440b      	add	r3, r1
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	3301      	adds	r3, #1
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3ed      	bcc.n	800231a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	3b01      	subs	r3, #1
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4413      	add	r3, r2
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3b01      	subs	r3, #1
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	441a      	add	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	441a      	add	r2, r3
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fe70 	bl	8003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3304      	adds	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e00b      	b.n	8002398 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	441a      	add	r2, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b01      	subs	r3, #1
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	440b      	add	r3, r1
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3ed      	bcc.n	8002380 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	3b01      	subs	r3, #1
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4413      	add	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	440a      	add	r2, r1
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	3301      	adds	r3, #1
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	440b      	add	r3, r1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3302      	adds	r3, #2
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	440b      	add	r3, r1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3303      	adds	r3, #3
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	440b      	add	r3, r1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	4313      	orrs	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3304      	adds	r3, #4
 800241a:	61bb      	str	r3, [r7, #24]
     return offset;
 800241c:	69bb      	ldr	r3, [r7, #24]
    }
 800241e:	4618      	mov	r0, r3
 8002420:	3728      	adds	r7, #40	@ 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	08009e34 	.word	0x08009e34

08002444 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	08009e50 	.word	0x08009e50

08002460 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fd34 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 8002470:	4a06      	ldr	r2, [pc, #24]	@ (800248c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
      level(0),
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	711a      	strb	r2, [r3, #4]
      msg("")
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002480:	609a      	str	r2, [r3, #8]
    {
    }
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	0800a098 	.word	0x0800a098
 8002490:	08009e30 	.word	0x08009e30

08002494 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	7912      	ldrb	r2, [r2, #4]
 80024ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3301      	adds	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fead 	bl	8000218 <strlen>
 80024be:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fda4 	bl	8003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	18d0      	adds	r0, r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f007 fb41 	bl	8009b68 <memcpy>
      offset += length_msg;
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80024ee:	68fb      	ldr	r3, [r7, #12]
    }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	3301      	adds	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	441a      	add	r2, r3
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fd95 	bl	8003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	3304      	adds	r3, #4
 800252e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00b      	b.n	800254e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	441a      	add	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3b01      	subs	r3, #1
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	440b      	add	r3, r1
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3ed      	bcc.n	8002536 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	3b01      	subs	r3, #1
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3b01      	subs	r3, #1
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	441a      	add	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
     return offset;
 800257e:	693b      	ldr	r3, [r7, #16]
    }
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	08009e74 	.word	0x08009e74

080025a4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	08009e88 	.word	0x08009e88

080025c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fc84 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 80025d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002604 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0800a080 	.word	0x0800a080

08002608 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	b2ca      	uxtb	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	0a19      	lsrs	r1, r3, #8
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	3301      	adds	r3, #1
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	b2ca      	uxtb	r2, r1
 8002634:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0c19      	lsrs	r1, r3, #16
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	3302      	adds	r3, #2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0e19      	lsrs	r1, r3, #24
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	3303      	adds	r3, #3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	3304      	adds	r3, #4
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	e02a      	b.n	80026bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002674:	6939      	ldr	r1, [r7, #16]
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	0a19      	lsrs	r1, r3, #8
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	3301      	adds	r3, #1
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b2ca      	uxtb	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	0c19      	lsrs	r1, r3, #16
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	3302      	adds	r3, #2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	b2ca      	uxtb	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	0e19      	lsrs	r1, r3, #24
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	3303      	adds	r3, #3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	3304      	adds	r3, #4
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	3301      	adds	r3, #1
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d3cf      	bcc.n	8002666 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2ca      	uxtb	r2, r1
 80026d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	0a19      	lsrs	r1, r3, #8
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	3301      	adds	r3, #1
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	0c19      	lsrs	r1, r3, #16
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	3302      	adds	r3, #2
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	0e19      	lsrs	r1, r3, #24
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	3303      	adds	r3, #3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4413      	add	r3, r2
 8002706:	b2ca      	uxtb	r2, r1
 8002708:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	3304      	adds	r3, #4
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e02a      	b.n	800276c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	0a19      	lsrs	r1, r3, #8
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	3301      	adds	r3, #1
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0c19      	lsrs	r1, r3, #16
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	3302      	adds	r3, #2
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4413      	add	r3, r2
 800274c:	b2ca      	uxtb	r2, r1
 800274e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0e19      	lsrs	r1, r3, #24
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	3303      	adds	r3, #3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	b2ca      	uxtb	r2, r1
 800275e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	3304      	adds	r3, #4
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3cf      	bcc.n	8002716 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69d9      	ldr	r1, [r3, #28]
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	0a19      	lsrs	r1, r3, #8
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	0c19      	lsrs	r1, r3, #16
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	3302      	adds	r3, #2
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	0e19      	lsrs	r1, r3, #24
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	3303      	adds	r3, #3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	3304      	adds	r3, #4
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e027      	b.n	8002816 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fd20 	bl	8000218 <strlen>
 80027d8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc17 	bl	8003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	3304      	adds	r3, #4
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	18d0      	adds	r0, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4619      	mov	r1, r3
 8002804:	f007 f9b0 	bl	8009b68 <memcpy>
      offset += length_stringsi;
 8002808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	4413      	add	r3, r2
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3301      	adds	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3d2      	bcc.n	80027c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002822:	4618      	mov	r0, r3
 8002824:	3728      	adds	r7, #40	@ 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800282a:	b580      	push	{r7, lr}
 800282c:	b08e      	sub	sp, #56	@ 0x38
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002844:	3301      	adds	r3, #1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	6a3a      	ldr	r2, [r7, #32]
 8002850:	4313      	orrs	r3, r2
 8002852:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	3302      	adds	r3, #2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	4313      	orrs	r3, r2
 8002864:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002868:	3303      	adds	r3, #3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	4313      	orrs	r3, r2
 8002876:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287a:	3304      	adds	r3, #4
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d90a      	bls.n	800289e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f007 f8fe 	bl	8009a94 <realloc>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a8:	e035      	b.n	8002916 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	440a      	add	r2, r1
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c0:	3301      	adds	r3, #1
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	440b      	add	r3, r1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d2:	3302      	adds	r3, #2
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	440b      	add	r3, r1
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e4:	3303      	adds	r3, #3
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	440b      	add	r3, r1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80028f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fa:	3304      	adds	r3, #4
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002912:	3301      	adds	r3, #1
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800291c:	429a      	cmp	r2, r3
 800291e:	d3c4      	bcc.n	80028aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800292a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4313      	orrs	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800293c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293e:	3302      	adds	r3, #2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	4313      	orrs	r3, r2
 800294c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800294e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002950:	3303      	adds	r3, #3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	4313      	orrs	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002962:	3304      	adds	r3, #4
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	d90a      	bls.n	8002986 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f007 f88a 	bl	8009a94 <realloc>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002990:	e035      	b.n	80029fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	440a      	add	r2, r1
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a8:	3301      	adds	r3, #1
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440b      	add	r3, r1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ba:	3302      	adds	r3, #2
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	440b      	add	r3, r1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029cc:	3303      	adds	r3, #3
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	440b      	add	r3, r1
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80029e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e2:	3304      	adds	r3, #4
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	3214      	adds	r2, #20
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	3301      	adds	r3, #1
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3c4      	bcc.n	8002992 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a14:	3301      	adds	r3, #1
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a26:	3302      	adds	r3, #2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	3303      	adds	r3, #3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d90a      	bls.n	8002a6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f007 f816 	bl	8009a94 <realloc>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a74:	2300      	movs	r3, #0
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a78:	e03e      	b.n	8002af8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	441a      	add	r2, r3
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fae4 	bl	8003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8e:	3304      	adds	r3, #4
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a96:	e00b      	b.n	8002ab0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	441a      	add	r2, r3
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3ed      	bcc.n	8002a98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002abc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	441a      	add	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002ad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	3220      	adds	r2, #32
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af4:	3301      	adds	r3, #1
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d3bb      	bcc.n	8002a7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002b04:	4618      	mov	r0, r3
 8002b06:	3738      	adds	r7, #56	@ 0x38
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	08009fbc 	.word	0x08009fbc

08002b28 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	08009eac 	.word	0x08009eac

08002b44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
  }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf0 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	60d3      	str	r3, [r2, #12]
    }
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000298 	.word	0x20000298

08002bf4 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffbe 	bl	8002b8a <_ZN13STM32Hardware10getRdmaIndEv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	429c      	cmp	r4, r3
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002c24:	1c59      	adds	r1, r3, #1
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002c3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 8002c44:	68fb      	ldr	r3, [r7, #12]
    }
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
	...

08002c50 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d108      	bne.n	8002c76 <_ZN13STM32Hardware5flushEv+0x26>
 8002c64:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <_ZN13STM32Hardware5flushEv+0x26>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <_ZN13STM32Hardware5flushEv+0x28>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d049      	beq.n	8002d10 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002c7c:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d039      	beq.n	8002d0a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <_ZN13STM32Hardware5flushEv+0x74>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	e007      	b.n	8002cd4 <_ZN13STM32Hardware5flushEv+0x84>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	89fa      	ldrh	r2, [r7, #14]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f005 fbbf 	bl	8008470 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d08:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002d0a:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200004fd 	.word	0x200004fd

08002d1c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
      int n = length;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d32:	bfa8      	it	ge
 8002d34:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8002d38:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bf28      	it	cs
 8002d4c:	4613      	movcs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f006 feff 	bl	8009b68 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4413      	add	r3, r2
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d80:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d00b      	beq.n	8002da2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	18d1      	adds	r1, r2, r3
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f006 fee3 	bl	8009b68 <memcpy>
      }

      flush();
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff ff54 	bl	8002c50 <_ZN13STM32Hardware5flushEv>
    }
 8002da8:	bf00      	nop
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	f001 fdf8 	bl	80049ac <HAL_GetTick>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
      data(0)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f880 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 8002dd8:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <_ZN8std_msgs5Int32C1Ev+0x28>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
    {
    }
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	0800a03c 	.word	0x0800a03c

08002df4 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	0a19      	lsrs	r1, r3, #8
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	0c19      	lsrs	r1, r3, #16
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	b2ca      	uxtb	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	0e19      	lsrs	r1, r3, #24
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3303      	adds	r3, #3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	b2ca      	uxtb	r2, r1
 8002e42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3304      	adds	r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
      return offset;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
    }
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	6839      	ldr	r1, [r7, #0]
 8002e70:	440a      	add	r2, r1
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	440b      	add	r3, r1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3302      	adds	r3, #2
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	440b      	add	r3, r1
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3303      	adds	r3, #3
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
     return offset;
 8002eba:	68fb      	ldr	r3, [r7, #12]
    }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	08009ed0 	.word	0x08009ed0

08002ee4 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	08009ee0 	.word	0x08009ee0

08002f00 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
      data(0)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe ffe4 	bl	8001ed8 <_ZN3ros3MsgC1Ev>
 8002f10:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	711a      	strb	r2, [r3, #4]
    {
    }
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	0800a024 	.word	0x0800a024

08002f2c <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	791b      	ldrb	r3, [r3, #4]
 8002f3e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	7a3a      	ldrb	r2, [r7, #8]
 8002f48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f50:	68fb      	ldr	r3, [r7, #12]
    }
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f70:	7a3a      	ldrb	r2, [r7, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	440b      	add	r3, r1
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002f80:	7a3a      	ldrb	r2, [r7, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
     return offset;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	08009f04 	.word	0x08009f04

08002fb8 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	08009f14 	.word	0x08009f14

08002fd4 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:

  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ff45 	bl	8001e70 <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8002fe6:	bf00      	nop
  }
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
    // runElevator = msg.data;
    return;
 8002ff6:	bf00      	nop
  }
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 800300a:	bf00      	nop
  }
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	fa22 f103 	lsr.w	r1, r2, r3
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3301      	adds	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d9ef      	bls.n	8003026 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e010      	b.n	800308c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	440a      	add	r2, r1
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	4611      	mov	r1, r2
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	00d2      	lsls	r2, r2, #3
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d9eb      	bls.n	800306a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	0800a06c 	.word	0x0800a06c

080030c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ffe8 	bl	80030a0 <_ZN3ros15NodeHandleBase_C1Ev>
 80030d0:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fd6a 	bl	8002bb4 <_ZN13STM32HardwareC1Ev>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80030f2:	3314      	adds	r3, #20
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fa63 	bl	80025c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e00a      	b.n	8003116 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3301      	adds	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b18      	cmp	r3, #24
 800311a:	d9f1      	bls.n	8003100 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e009      	b.n	8003136 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800312a:	2100      	movs	r1, #0
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3301      	adds	r3, #1
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b18      	cmp	r3, #24
 800313a:	d9f2      	bls.n	8003122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e00a      	b.n	8003158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800314c:	3304      	adds	r3, #4
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315e:	d3f0      	bcc.n	8003142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	e00a      	b.n	800317c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4413      	add	r3, r2
 800316c:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003170:	3304      	adds	r3, #4
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003182:	d3f0      	bcc.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800318a:	461a      	mov	r2, r3
 800318c:	2300      	movs	r3, #0
 800318e:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003198:	461a      	mov	r2, r3
 800319a:	2300      	movs	r3, #0
 800319c:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a6:	461a      	mov	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b4:	461a      	mov	r2, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c2:	461a      	mov	r2, r3
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031de:	461a      	mov	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	6213      	str	r3, [r2, #32]
  }
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	0800a010 	.word	0x0800a010

080031f4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	0800a054 	.word	0x0800a054

08003214 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ffe5 	bl	80031f4 <_ZN3ros11Subscriber_C1Ev>
 800322a:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	330c      	adds	r3, #12
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe63 	bl	8002f00 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
  };
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	08009ff8 	.word	0x08009ff8

0800325c <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ffc1 	bl	80031f4 <_ZN3ros11Subscriber_C1Ev>
 8003272:	4a0b      	ldr	r2, [pc, #44]	@ (80032a0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	330c      	adds	r3, #12
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fda3 	bl	8002dc8 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
  };
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	08009fe0 	.word	0x08009fe0

080032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fd7d 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 80032b6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d905      	bls.n	80032da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
    {
      configured_ = false;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ee:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d906      	bls.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fe:	461a      	mov	r2, r3
 8003300:	2300      	movs	r3, #0
 8003302:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fd4a 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad2      	subs	r2, r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	429a      	cmp	r2, r3
 800332c:	bf8c      	ite	hi
 800332e:	2301      	movhi	r3, #1
 8003330:	2300      	movls	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8003338:	f06f 0301 	mvn.w	r3, #1
 800333c:	e226      	b.n	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      int data = hardware_.read();
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fc56 	bl	8002bf4 <_ZN13STM32Hardware4readEv>
 8003348:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f2c0 81ff 	blt.w	8003750 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        break;
      checksum_ += data;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003358:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4413      	add	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003366:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003370:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003374:	2b07      	cmp	r3, #7
 8003376:	d12d      	bne.n	80033d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
      {
        message_in[index_++] = data;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800338a:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	b2d1      	uxtb	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800339a:	3304      	adds	r3, #4
 800339c:	460a      	mov	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80033aa:	3b01      	subs	r3, #1
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033b2:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033bc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1a0      	bne.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ca:	461a      	mov	r2, r3
 80033cc:	2308      	movs	r3, #8
 80033ce:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80033d2:	e798      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033da:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d130      	bne.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
      {
        if (data == 0xff)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2bff      	cmp	r3, #255	@ 0xff
 80033e6:	d112      	bne.n	800340e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
        {
          mode_++;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80033f2:	3301      	adds	r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033fa:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3314      	adds	r3, #20
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003408:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 800340c:	e77b      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fccc 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	bf8c      	ite	hi
 8003426:	2301      	movhi	r3, #1
 8003428:	2300      	movls	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	f43f af6a 	beq.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 800343e:	f06f 0301 	mvn.w	r3, #1
 8003442:	e1a3      	b.n	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800344e:	2b01      	cmp	r3, #1
 8003450:	d121      	bne.n	8003496 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
      {
        if (data == PROTOCOL_VER)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2bfe      	cmp	r3, #254	@ 0xfe
 8003456:	d10b      	bne.n	8003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
        {
          mode_++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800345e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800346a:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800346e:	e74a      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003476:	461a      	mov	r2, r3
 8003478:	2300      	movs	r3, #0
 800347a:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003484:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f af3c 	bne.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f980 	bl	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003494:	e737      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d120      	bne.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
      {
        bytes_ = data;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b8:	461a      	mov	r2, r3
 80034ba:	2300      	movs	r3, #0
 80034bc:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80034ca:	3301      	adds	r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034d2:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80034e4:	e70f      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d118      	bne.n	8003526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
      {
        bytes_ += data << 8;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034fa:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4413      	add	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800350a:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003514:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003518:	3301      	adds	r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003520:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003524:	e6ef      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11f      	bne.n	8003574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      {
        if ((checksum_ % 256) == 255)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800353e:	425a      	negs	r2, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	bf58      	it	pl
 8003546:	4253      	negpl	r3, r2
 8003548:	2bff      	cmp	r3, #255	@ 0xff
 800354a:	d10b      	bne.n	8003564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003552:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003556:	3301      	adds	r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800355e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003562:	e6d0      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356a:	461a      	mov	r2, r3
 800356c:	2300      	movs	r3, #0
 800356e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003572:	e6c8      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800357a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800357e:	2b05      	cmp	r3, #5
 8003580:	d119      	bne.n	80035b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
      {
        topic_ = data;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003596:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800359a:	3301      	adds	r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035a2:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80035b4:	e6a7      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80035c0:	2b06      	cmp	r3, #6
 80035c2:	d123      	bne.n	800360c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
      {
        topic_ += data << 8;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ca:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	4413      	add	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035da:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e4:	461a      	mov	r2, r3
 80035e6:	2307      	movs	r3, #7
 80035e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f47f ae85 	bne.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003602:	461a      	mov	r2, r3
 8003604:	2308      	movs	r3, #8
 8003606:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800360a:	e67c      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003612:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003616:	2b08      	cmp	r3, #8
 8003618:	f47f ae75 	bne.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003630:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003634:	425a      	negs	r2, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	bf58      	it	pl
 800363c:	4253      	negpl	r3, r2
 800363e:	2bff      	cmp	r3, #255	@ 0xff
 8003640:	f47f ae61 	bne.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800364a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
          {
            requestSyncTime();
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f89e 	bl	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8ba 	bl	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003664:	461a      	mov	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	e085      	b.n	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003686:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d108      	bne.n	80036a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
          {
            syncTime(message_in);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f97b 	bl	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800369e:	e632      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d112      	bne.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
          {
            req_param_resp.deserialize(message_in);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80036b4:	3314      	adds	r3, #20
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 80036bc:	3204      	adds	r2, #4
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f8b2 	bl	800282a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 80036d2:	e618      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036da:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80036de:	2b0b      	cmp	r3, #11
 80036e0:	d106      	bne.n	80036f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
          {
            configured_ = false;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80036ee:	e60a      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80036fa:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f43f adfc 	beq.w	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003714:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003718:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003722:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800372c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003730:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800373a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003748:	3304      	adds	r3, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4790      	blx	r2
    while (true)
 800374e:	e5da      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003750:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003758:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800375c:	2b00      	cmp	r3, #0
 800375e:	d014      	beq.n	800378a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003766:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003772:	4293      	cmp	r3, r2
 8003774:	d909      	bls.n	800378a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
    {
      requestSyncTime();
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f80c 	bl	8003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    }

    return SPIN_OK;
 800378a:	2300      	movs	r3, #0
  }
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fba9 	bl	8001ef8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f107 020c 	add.w	r2, r7, #12
 80037b0:	210a      	movs	r1, #10
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
    rt_time = hardware_.time();
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff faf8 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 80037c0:	4602      	mov	r2, r0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c8:	615a      	str	r2, [r3, #20]
  }
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b08b      	sub	sp, #44	@ 0x2c
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fc7a 	bl	80020d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e8:	e062      	b.n	80038b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d056      	beq.n	80038aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	b29b      	uxth	r3, r3
 800380e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4608      	mov	r0, r1
 800384a:	4798      	blx	r3
 800384c:	4603      	mov	r3, r0
 800384e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4608      	mov	r0, r1
 8003878:	4798      	blx	r3
 800387a:	4603      	mov	r3, r0
 800387c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800387e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003882:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f96a 	bl	8002b72 <_ZN3ros9Publisher15getEndpointTypeEv>
 800389e:	4601      	mov	r1, r0
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	461a      	mov	r2, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	3301      	adds	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	2b18      	cmp	r3, #24
 80038b4:	dd99      	ble.n	80037ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	e05e      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c0:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d053      	beq.n	8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d0:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80038d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80038f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4608      	mov	r0, r1
 800390e:	4798      	blx	r3
 8003910:	4603      	mov	r3, r0
 8003912:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003918:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800391c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003924:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4608      	mov	r0, r1
 8003934:	4798      	blx	r3
 8003936:	4603      	mov	r3, r0
 8003938:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800393a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800393e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681c      	ldr	r4, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800394e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003956:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800395a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3304      	adds	r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4608      	mov	r0, r1
 8003966:	4798      	blx	r3
 8003968:	4601      	mov	r1, r0
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	461a      	mov	r2, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	3301      	adds	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	2b18      	cmp	r3, #24
 800397e:	dd9d      	ble.n	80038bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 800398c:	bf00      	nop
 800398e:	372c      	adds	r7, #44	@ 0x2c
 8003990:	46bd      	mov	sp, r7
 8003992:	bd90      	pop	{r4, r7, pc}

08003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe faa8 	bl	8001ef8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff f9ff 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80039c0:	f107 0308 	add.w	r3, r7, #8
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fb06 	bl	8001fd8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	4915      	ldr	r1, [pc, #84]	@ (8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80039d2:	fba1 1303 	umull	r1, r3, r1, r3
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	4413      	add	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80039dc:	6939      	ldr	r1, [r7, #16]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80039e2:	fba3 0302 	umull	r0, r3, r3, r2
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	440b      	add	r3, r1
 80039fa:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80039fc:	f107 0308 	add.w	r3, r7, #8
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8bf 	bl	8003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff f9ce 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a1c:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	000f4240 	.word	0x000f4240

08003a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b63      	cmp	r3, #99	@ 0x63
 8003a40:	dd0b      	ble.n	8003a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a48:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003a4c:	f083 0301 	eor.w	r3, r3, #1
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e090      	b.n	8003b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003a66:	3304      	adds	r3, #4
 8003a68:	3307      	adds	r3, #7
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4790      	blx	r2
 8003a70:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a78:	22ff      	movs	r2, #255	@ 0xff
 8003a7a:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a84:	22fe      	movs	r2, #254	@ 0xfe
 8003a86:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a94:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aa8:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ab2:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abc:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8003ac0:	4413      	add	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ace:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003adc:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	121b      	asrs	r3, r3, #8
 8003ae6:	b21b      	sxth	r3, r3
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af0:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003af8:	2305      	movs	r3, #5
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e00d      	b.n	8003b1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003b08:	3304      	adds	r3, #4
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3306      	adds	r3, #6
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	ddec      	ble.n	8003afe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3307      	adds	r3, #7
 8003b28:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	425a      	negs	r2, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	bf58      	it	pl
 8003b34:	4253      	negpl	r3, r2
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	6179      	str	r1, [r7, #20]
 8003b3e:	43d2      	mvns	r2, r2
 8003b40:	b2d1      	uxtb	r1, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b56:	dc0b      	bgt.n	8003b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1d18      	adds	r0, r3, #4
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003b62:	3304      	adds	r3, #4
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7ff f8d8 	bl	8002d1c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e005      	b.n	8003b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003b70:	4904      	ldr	r1, [pc, #16]	@ (8003b84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f84c 	bl	8003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	08009f38 	.word	0x08009f38

08003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff f90a 	bl	8002db0 <_ZN13STM32Hardware4timeEv>
 8003b9c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4917      	ldr	r1, [pc, #92]	@ (8003c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003ba6:	fba1 1303 	umull	r1, r3, r1, r3
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bb6:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4b11      	ldr	r3, [pc, #68]	@ (8003c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003bc0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	1aca      	subs	r2, r1, r3
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003be2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bea:	3318      	adds	r3, #24
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bf2:	321c      	adds	r2, #28
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd f8d4 	bl	8000da4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	10624dd3 	.word	0x10624dd3
 8003c08:	000f4240 	.word	0x000f4240
 8003c0c:	3b9aca00 	.word	0x3b9aca00

08003c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	2103      	movs	r1, #3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f804 	bl	8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	460b      	mov	r3, r1
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fc0e 	bl	8002460 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f107 0214 	add.w	r2, r7, #20
 8003c56:	2107      	movs	r1, #7
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	4798      	blx	r3
  }
 8003c5c:	bf00      	nop
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <_Z41__static_initialization_and_destruction_0ii>:
}
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d134      	bne.n	8003cde <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d12f      	bne.n	8003cde <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8003c7e:	481a      	ldr	r0, [pc, #104]	@ (8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003c80:	f7ff fa1e 	bl	80030c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8003c84:	4819      	ldr	r0, [pc, #100]	@ (8003cec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003c86:	f7ff f93b 	bl	8002f00 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003c8e:	4918      	ldr	r1, [pc, #96]	@ (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003c90:	4818      	ldr	r0, [pc, #96]	@ (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003c92:	f7fe ff57 	bl	8002b44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 8003c96:	4818      	ldr	r0, [pc, #96]	@ (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003c98:	f7ff f932 	bl	8002f00 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003ca0:	4916      	ldr	r1, [pc, #88]	@ (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003ca2:	4817      	ldr	r0, [pc, #92]	@ (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003ca4:	f7fe ff4e 	bl	8002b44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int32 elevator;
 8003ca8:	4816      	ldr	r0, [pc, #88]	@ (8003d04 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003caa:	f7ff f88d 	bl	8002dc8 <_ZN8std_msgs5Int32C1Ev>
ros::Publisher pub_elevator("/gripper", &elevator);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003cb2:	490f      	ldr	r1, [pc, #60]	@ (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003cb4:	4814      	ldr	r0, [pc, #80]	@ (8003d08 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003cb6:	f7fe ff45 	bl	8002b44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003cbe:	4914      	ldr	r1, [pc, #80]	@ (8003d10 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003cc0:	4814      	ldr	r0, [pc, #80]	@ (8003d14 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003cc2:	f7ff faa7 	bl	8003214 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevatorHigh("/cmd_elevator", ROS1::callback_Elevator);
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003cca:	4914      	ldr	r1, [pc, #80]	@ (8003d1c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003ccc:	4814      	ldr	r0, [pc, #80]	@ (8003d20 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003cce:	f7ff fac5 	bl	800325c <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003cd6:	4914      	ldr	r1, [pc, #80]	@ (8003d28 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003cd8:	4814      	ldr	r0, [pc, #80]	@ (8003d2c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003cda:	f7ff fa9b 	bl	8003214 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000500 	.word	0x20000500
 8003cec:	20001a3c 	.word	0x20001a3c
 8003cf0:	08009f74 	.word	0x08009f74
 8003cf4:	20001a44 	.word	0x20001a44
 8003cf8:	20001a58 	.word	0x20001a58
 8003cfc:	08009f80 	.word	0x08009f80
 8003d00:	20001a60 	.word	0x20001a60
 8003d04:	20001a74 	.word	0x20001a74
 8003d08:	20001a7c 	.word	0x20001a7c
 8003d0c:	08002fd5 	.word	0x08002fd5
 8003d10:	08009f88 	.word	0x08009f88
 8003d14:	20001a90 	.word	0x20001a90
 8003d18:	08002fef 	.word	0x08002fef
 8003d1c:	08009f9c 	.word	0x08009f9c
 8003d20:	20001aac 	.word	0x20001aac
 8003d24:	08003003 	.word	0x08003003
 8003d28:	08009fac 	.word	0x08009fac
 8003d2c:	20001ac8 	.word	0x20001ac8

08003d30 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff f889 	bl	8002e58 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	320c      	adds	r2, #12
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4798      	blx	r3
  }
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
  }
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f8a2 	bl	8002ec8 <_ZN8std_msgs5Int327getTypeEv>
 8003d84:	4603      	mov	r3, r0
  }
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff f8a2 	bl	8002ee4 <_ZN8std_msgs5Int326getMD5Ev>
 8003da0:	4603      	mov	r3, r0
  }
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	330c      	adds	r3, #12
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f8cf 	bl	8002f5e <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	320c      	adds	r2, #12
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
  }
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
  }
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	330c      	adds	r3, #12
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f8cf 	bl	8002f9c <_ZN8std_msgs4Bool7getTypeEv>
 8003dfe:	4603      	mov	r3, r0
  }
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	330c      	adds	r3, #12
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f8cf 	bl	8002fb8 <_ZN8std_msgs4Bool6getMD5Ev>
 8003e1a:	4603      	mov	r3, r0
  }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e32:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_GLOBAL__sub_I_nh>:
 8003e42:	b580      	push	{r7, lr}
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff ff0a 	bl	8003c64 <_Z41__static_initialization_and_destruction_0ii>
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f002 fe04 	bl	8006a74 <HAL_TIM_PWM_Start>
	write(startAngle);
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f804 	bl	8003e7c <_ZN5Servo5writeEi>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	angle = ang;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	ee07 3a90 	vmov	s15, r3
 8003ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ec8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	dd08      	ble.n	8003f00 <_ZN5Servo5writeEi+0x84>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efa:	edc7 7a03 	vstr	s15, [r7, #12]
 8003efe:	e014      	b.n	8003f2a <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	d507      	bpl.n	8003f2a <_ZN5Servo5writeEi+0xae>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f26:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <_ZN5Servo5writeEi+0xcc>
 8003f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	ee17 2a90 	vmov	r2, s15
 8003f44:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003f46:	e045      	b.n	8003fd4 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d10a      	bne.n	8003f66 <_ZN5Servo5writeEi+0xea>
 8003f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	ee17 2a90 	vmov	r2, s15
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003f64:	e036      	b.n	8003fd4 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d10a      	bne.n	8003f84 <_ZN5Servo5writeEi+0x108>
 8003f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	ee17 2a90 	vmov	r2, s15
 8003f80:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003f82:	e027      	b.n	8003fd4 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d10a      	bne.n	8003fa2 <_ZN5Servo5writeEi+0x126>
 8003f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	ee17 2a90 	vmov	r2, s15
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003fa0:	e018      	b.n	8003fd4 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d10a      	bne.n	8003fc0 <_ZN5Servo5writeEi+0x144>
 8003faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	ee17 2a90 	vmov	r2, s15
 8003fbc:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003fbe:	e009      	b.n	8003fd4 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	@ 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	f300 80b0 	bgt.w	8004158 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f2c0 80ae 	blt.w	800415c <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004010:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 8004014:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401c:	ee17 3a90 	vmov	r3, s15
 8004020:	2b00      	cmp	r3, #0
 8004022:	bfb8      	it	lt
 8004024:	425b      	neglt	r3, r3
 8004026:	ee07 3a90 	vmov	s15, r3
 800402a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	edd3 7a06 	vldr	s15, [r3, #24]
 8004034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004038:	ee17 0a90 	vmov	r0, s15
 800403c:	f7fc fa58 	bl	80004f0 <__aeabi_f2d>
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b4a      	ldr	r3, [pc, #296]	@ (8004170 <_ZN5Servo6turnToEii+0x190>)
 8004046:	f7fc fbd5 	bl	80007f4 <__aeabi_ddiv>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <_ZN5Servo6turnToEii+0x194>)
 8004058:	f7fc faa2 	bl	80005a0 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	f7fc fcd6 	bl	8000a14 <__aeabi_d2f>
 8004068:	4603      	mov	r3, r0
 800406a:	4a43      	ldr	r2, [pc, #268]	@ (8004178 <_ZN5Servo6turnToEii+0x198>)
 800406c:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 800406e:	4b42      	ldr	r3, [pc, #264]	@ (8004178 <_ZN5Servo6turnToEii+0x198>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa3c 	bl	80004f0 <__aeabi_f2d>
 8004078:	a33b      	add	r3, pc, #236	@ (adr r3, 8004168 <_ZN5Servo6turnToEii+0x188>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fa8f 	bl	80005a0 <__aeabi_dmul>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fcc3 	bl	8000a14 <__aeabi_d2f>
 800408e:	4603      	mov	r3, r0
 8004090:	4a39      	ldr	r2, [pc, #228]	@ (8004178 <_ZN5Servo6turnToEii+0x198>)
 8004092:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800409e:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <_ZN5Servo6turnToEii+0x198>)
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ac:	d510      	bpl.n	80040d0 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 80040ae:	4b32      	ldr	r3, [pc, #200]	@ (8004178 <_ZN5Servo6turnToEii+0x198>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b8:	ee17 3a90 	vmov	r3, s15
 80040bc:	607b      	str	r3, [r7, #4]
		write(ang);
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff fedb 	bl	8003e7c <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 80040c6:	492d      	ldr	r1, [pc, #180]	@ (800417c <_ZN5Servo6turnToEii+0x19c>)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fd fdb5 	bl	8001c38 <_Z4waitiP17TIM_HandleTypeDef>
		return;
 80040ce:	e046      	b.n	800415e <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 80040d0:	230a      	movs	r3, #10
 80040d2:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	61fb      	str	r3, [r7, #28]
	t = 0;
 80040da:	4b29      	ldr	r3, [pc, #164]	@ (8004180 <_ZN5Servo6turnToEii+0x1a0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1a3 0209 	sub.w	r2, r3, #9
 80040e6:	4b26      	ldr	r3, [pc, #152]	@ (8004180 <_ZN5Servo6turnToEii+0x1a0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	dd2e      	ble.n	800414c <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 80040ee:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <_ZN5Servo6turnToEii+0x1a0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	ee07 3a90 	vmov	s15, r3
 8004100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004108:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004116:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800411a:	edd7 7a06 	vldr	s15, [r7, #24]
 800411e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	617b      	str	r3, [r7, #20]
		write(a);
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fea2 	bl	8003e7c <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 8004138:	4910      	ldr	r1, [pc, #64]	@ (800417c <_ZN5Servo6turnToEii+0x19c>)
 800413a:	200a      	movs	r0, #10
 800413c:	f7fd fd7c 	bl	8001c38 <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <_ZN5Servo6turnToEii+0x1a0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330a      	adds	r3, #10
 8004146:	4a0e      	ldr	r2, [pc, #56]	@ (8004180 <_ZN5Servo6turnToEii+0x1a0>)
 8004148:	6013      	str	r3, [r2, #0]
	}
 800414a:	e7c9      	b.n	80040e0 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 800414c:	bf00      	nop
	write(ang);
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fe93 	bl	8003e7c <_ZN5Servo5writeEi>
 8004156:	e002      	b.n	800415e <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 800415c:	bf00      	nop
}
 800415e:	3728      	adds	r7, #40	@ 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	f3af 8000 	nop.w
 8004168:	9999999a 	.word	0x9999999a
 800416c:	3ff19999 	.word	0x3ff19999
 8004170:	404e0000 	.word	0x404e0000
 8004174:	408f4000 	.word	0x408f4000
 8004178:	20001ae4 	.word	0x20001ae4
 800417c:	2000011c 	.word	0x2000011c
 8004180:	20001ae8 	.word	0x20001ae8

08004184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418a:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_MspInit+0x54>)
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_MspInit+0x54>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6613      	str	r3, [r2, #96]	@ 0x60
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_MspInit+0x54>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <HAL_MspInit+0x54>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	4a0c      	ldr	r2, [pc, #48]	@ (80041d8 <HAL_MspInit+0x54>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_MspInit+0x54>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2100      	movs	r1, #0
 80041be:	2005      	movs	r0, #5
 80041c0:	f000 fcdb 	bl	8004b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041c4:	2005      	movs	r0, #5
 80041c6:	f000 fcf2 	bl	8004bae <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80041ca:	f001 fbdd 	bl	8005988 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b09c      	sub	sp, #112	@ 0x70
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041f4:	f107 0318 	add.w	r3, r7, #24
 80041f8:	2244      	movs	r2, #68	@ 0x44
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f005 fc7f 	bl	8009b00 <memset>
  if(hi2c->Instance==I2C1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2e      	ldr	r2, [pc, #184]	@ (80042c0 <HAL_I2C_MspInit+0xe4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d154      	bne.n	80042b6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800420c:	2340      	movs	r3, #64	@ 0x40
 800420e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004210:	2300      	movs	r3, #0
 8004212:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004214:	f107 0318 	add.w	r3, r7, #24
 8004218:	4618      	mov	r0, r3
 800421a:	f002 f8f3 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004224:	f7fd fbde 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004228:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 800422a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422c:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004234:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 8004236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 8004242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004244:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 800424e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800425e:	2312      	movs	r3, #18
 8004260:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	2300      	movs	r3, #0
 8004268:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800426a:	2304      	movs	r3, #4
 800426c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004272:	4619      	mov	r1, r3
 8004274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004278:	f000 ffe6 	bl	8005248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800427c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004280:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004282:	2312      	movs	r3, #18
 8004284:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800428e:	2304      	movs	r3, #4
 8004290:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004292:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004296:	4619      	mov	r1, r3
 8004298:	480b      	ldr	r0, [pc, #44]	@ (80042c8 <HAL_I2C_MspInit+0xec>)
 800429a:	f000 ffd5 	bl	8005248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 80042a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <HAL_I2C_MspInit+0xe8>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80042b6:	bf00      	nop
 80042b8:	3770      	adds	r7, #112	@ 0x70
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40005400 	.word	0x40005400
 80042c4:	40021000 	.word	0x40021000
 80042c8:	48000400 	.word	0x48000400

080042cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_TIM_PWM_MspInit+0x80>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10c      	bne.n	80042f8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042de:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ea:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 80042ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042f6:	e022      	b.n	800433e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <HAL_TIM_PWM_MspInit+0x88>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10c      	bne.n	800431c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004302:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	4a12      	ldr	r2, [pc, #72]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	6593      	str	r3, [r2, #88]	@ 0x58
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
}
 800431a:	e010      	b.n	800433e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <HAL_TIM_PWM_MspInit+0x8c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10b      	bne.n	800433e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004326:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 8004328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 800432c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004330:	6613      	str	r3, [r2, #96]	@ 0x60
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <HAL_TIM_PWM_MspInit+0x84>)
 8004334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40021000 	.word	0x40021000
 8004354:	40000400 	.word	0x40000400
 8004358:	40013400 	.word	0x40013400

0800435c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436c:	d114      	bne.n	8004398 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800436e:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004372:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6593      	str	r3, [r2, #88]	@ 0x58
 800437a:	4b16      	ldr	r3, [pc, #88]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2100      	movs	r1, #0
 800438a:	201c      	movs	r0, #28
 800438c:	f000 fbf5 	bl	8004b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004390:	201c      	movs	r0, #28
 8004392:	f000 fc0c 	bl	8004bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004396:	e018      	b.n	80043ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0e      	ldr	r2, [pc, #56]	@ (80043d8 <HAL_TIM_Base_MspInit+0x7c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 80043a8:	f043 0310 	orr.w	r3, r3, #16
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_TIM_Base_MspInit+0x78>)
 80043b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2036      	movs	r0, #54	@ 0x36
 80043c0:	f000 fbdb 	bl	8004b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043c4:	2036      	movs	r0, #54	@ 0x36
 80043c6:	f000 fbf2 	bl	8004bae <HAL_NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40001000 	.word	0x40001000

080043dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	@ 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	@ (800445c <HAL_TIM_Encoder_MspInit+0x80>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d129      	bne.n	8004452 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043fe:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6593      	str	r3, [r2, #88]	@ 0x58
 800440a:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004416:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	4a11      	ldr	r2, [pc, #68]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x84>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800442e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004434:	2302      	movs	r3, #2
 8004436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004440:	230a      	movs	r3, #10
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	4619      	mov	r1, r3
 800444a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800444e:	f000 fefb 	bl	8005248 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8004452:	bf00      	nop
 8004454:	3728      	adds	r7, #40	@ 0x28
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40000800 	.word	0x40000800
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	@ (8004550 <HAL_TIM_MspPostInit+0xec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d11c      	bne.n	80044c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004486:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448a:	4a32      	ldr	r2, [pc, #200]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004492:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800449e:	230f      	movs	r3, #15
 80044a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	2302      	movs	r3, #2
 80044a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80044ae:	2302      	movs	r3, #2
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	4619      	mov	r1, r3
 80044b8:	4827      	ldr	r0, [pc, #156]	@ (8004558 <HAL_TIM_MspPostInit+0xf4>)
 80044ba:	f000 fec5 	bl	8005248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80044be:	e043      	b.n	8004548 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a25      	ldr	r2, [pc, #148]	@ (800455c <HAL_TIM_MspPostInit+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d11d      	bne.n	8004506 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ca:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 80044cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ce:	4a21      	ldr	r2, [pc, #132]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044e2:	2340      	movs	r3, #64	@ 0x40
 80044e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e6:	2302      	movs	r3, #2
 80044e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044f2:	2302      	movs	r3, #2
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	4619      	mov	r1, r3
 80044fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004500:	f000 fea2 	bl	8005248 <HAL_GPIO_Init>
}
 8004504:	e020      	b.n	8004548 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_TIM_MspPostInit+0xfc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	4a0f      	ldr	r2, [pc, #60]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800451c:	4b0d      	ldr	r3, [pc, #52]	@ (8004554 <HAL_TIM_MspPostInit+0xf0>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004538:	2304      	movs	r3, #4
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	4619      	mov	r1, r3
 8004542:	4805      	ldr	r0, [pc, #20]	@ (8004558 <HAL_TIM_MspPostInit+0xf4>)
 8004544:	f000 fe80 	bl	8005248 <HAL_GPIO_Init>
}
 8004548:	bf00      	nop
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40021000 	.word	0x40021000
 8004558:	48000800 	.word	0x48000800
 800455c:	40000400 	.word	0x40000400
 8004560:	40013400 	.word	0x40013400

08004564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b09a      	sub	sp, #104	@ 0x68
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800457c:	f107 0310 	add.w	r3, r7, #16
 8004580:	2244      	movs	r2, #68	@ 0x44
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f005 fabb 	bl	8009b00 <memset>
  if(huart->Instance==USART2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4d      	ldr	r2, [pc, #308]	@ (80046c4 <HAL_UART_MspInit+0x160>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f040 8093 	bne.w	80046bc <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004596:	2302      	movs	r3, #2
 8004598:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800459e:	f107 0310 	add.w	r3, r7, #16
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 ff2e 	bl	8006404 <HAL_RCCEx_PeriphCLKConfig>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80045ae:	f7fd fa19 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045b2:	4b45      	ldr	r3, [pc, #276]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	4a44      	ldr	r2, [pc, #272]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045be:	4b42      	ldr	r3, [pc, #264]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	4b3f      	ldr	r3, [pc, #252]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	4a3e      	ldr	r2, [pc, #248]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045d6:	4b3c      	ldr	r3, [pc, #240]	@ (80046c8 <HAL_UART_MspInit+0x164>)
 80045d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80045e2:	2318      	movs	r3, #24
 80045e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ee:	2300      	movs	r3, #0
 80045f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045f2:	2307      	movs	r3, #7
 80045f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80045fa:	4619      	mov	r1, r3
 80045fc:	4833      	ldr	r0, [pc, #204]	@ (80046cc <HAL_UART_MspInit+0x168>)
 80045fe:	f000 fe23 	bl	8005248 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004602:	4b33      	ldr	r3, [pc, #204]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004604:	4a33      	ldr	r2, [pc, #204]	@ (80046d4 <HAL_UART_MspInit+0x170>)
 8004606:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004608:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 800460a:	221b      	movs	r2, #27
 800460c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800460e:	4b30      	ldr	r3, [pc, #192]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004610:	2210      	movs	r2, #16
 8004612:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004614:	4b2e      	ldr	r3, [pc, #184]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004616:	2200      	movs	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800461a:	4b2d      	ldr	r3, [pc, #180]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004622:	2200      	movs	r2, #0
 8004624:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004626:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800462c:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004632:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004638:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800463a:	4825      	ldr	r0, [pc, #148]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 800463c:	f000 fad2 	bl	8004be4 <HAL_DMA_Init>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004646:	f7fd f9cd 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a20      	ldr	r2, [pc, #128]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 800464e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004650:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <HAL_UART_MspInit+0x16c>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel4;
 8004656:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004658:	4a20      	ldr	r2, [pc, #128]	@ (80046dc <HAL_UART_MspInit+0x178>)
 800465a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800465c:	4b1e      	ldr	r3, [pc, #120]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 800465e:	221a      	movs	r2, #26
 8004660:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004662:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004668:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800466e:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004670:	2280      	movs	r2, #128	@ 0x80
 8004672:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004674:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800467a:	4b17      	ldr	r3, [pc, #92]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004680:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800468c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800468e:	4812      	ldr	r0, [pc, #72]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 8004690:	f000 faa8 	bl	8004be4 <HAL_DMA_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800469a:	f7fd f9a3 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 80046a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80046a6:	4a0c      	ldr	r2, [pc, #48]	@ (80046d8 <HAL_UART_MspInit+0x174>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	2026      	movs	r0, #38	@ 0x26
 80046b2:	f000 fa62 	bl	8004b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046b6:	2026      	movs	r0, #38	@ 0x26
 80046b8:	f000 fa79 	bl	8004bae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80046bc:	bf00      	nop
 80046be:	3768      	adds	r7, #104	@ 0x68
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40004400 	.word	0x40004400
 80046c8:	40021000 	.word	0x40021000
 80046cc:	48000400 	.word	0x48000400
 80046d0:	2000032c 	.word	0x2000032c
 80046d4:	40020030 	.word	0x40020030
 80046d8:	2000038c 	.word	0x2000038c
 80046dc:	40020044 	.word	0x40020044

080046e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <NMI_Handler+0x4>

080046e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <HardFault_Handler+0x4>

080046f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <MemManage_Handler+0x4>

080046f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <BusFault_Handler+0x4>

08004700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <UsageFault_Handler+0x4>

08004708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004736:	f000 f927 	bl	8004988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}

0800473e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004750:	4802      	ldr	r0, [pc, #8]	@ (800475c <DMA1_Channel3_IRQHandler+0x10>)
 8004752:	f000 fc2a 	bl	8004faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	2000032c 	.word	0x2000032c

08004760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004764:	4802      	ldr	r0, [pc, #8]	@ (8004770 <DMA1_Channel4_IRQHandler+0x10>)
 8004766:	f000 fc20 	bl	8004faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	2000038c 	.word	0x2000038c

08004774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004778:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800477c:	f000 ff16 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004780:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004784:	f000 ff12 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}

0800478c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004790:	4802      	ldr	r0, [pc, #8]	@ (800479c <TIM2_IRQHandler+0x10>)
 8004792:	f002 fcef 	bl	8007174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000011c 	.word	0x2000011c

080047a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80047a4:	4802      	ldr	r0, [pc, #8]	@ (80047b0 <USART2_IRQHandler+0x10>)
 80047a6:	f003 fee3 	bl	8008570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000298 	.word	0x20000298

080047b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80047b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80047bc:	f000 fef6 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80047c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80047c4:	f000 fef2 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80047c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80047cc:	f000 feee 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80047d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80047d4:	f000 feea 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80047d8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80047dc:	f000 fee6 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80047e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80047e4:	f000 fee2 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}

080047ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80047f0:	4802      	ldr	r0, [pc, #8]	@ (80047fc <TIM6_DAC_IRQHandler+0x10>)
 80047f2:	f002 fcbf 	bl	8007174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000200 	.word	0x20000200

08004800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004808:	4a14      	ldr	r2, [pc, #80]	@ (800485c <_sbrk+0x5c>)
 800480a:	4b15      	ldr	r3, [pc, #84]	@ (8004860 <_sbrk+0x60>)
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004814:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <_sbrk+0x64>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <_sbrk+0x64>)
 800481e:	4a12      	ldr	r2, [pc, #72]	@ (8004868 <_sbrk+0x68>)
 8004820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004822:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <_sbrk+0x64>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	429a      	cmp	r2, r3
 800482e:	d207      	bcs.n	8004840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004830:	f005 f96e 	bl	8009b10 <__errno>
 8004834:	4603      	mov	r3, r0
 8004836:	220c      	movs	r2, #12
 8004838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	e009      	b.n	8004854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <_sbrk+0x64>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <_sbrk+0x64>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	4a05      	ldr	r2, [pc, #20]	@ (8004864 <_sbrk+0x64>)
 8004850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20008000 	.word	0x20008000
 8004860:	00000400 	.word	0x00000400
 8004864:	20001aec 	.word	0x20001aec
 8004868:	20001c40 	.word	0x20001c40

0800486c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <SystemInit+0x20>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004876:	4a05      	ldr	r2, [pc, #20]	@ (800488c <SystemInit+0x20>)
 8004878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800487c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004890:	480d      	ldr	r0, [pc, #52]	@ (80048c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004892:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004894:	f7ff ffea 	bl	800486c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004898:	480c      	ldr	r0, [pc, #48]	@ (80048cc <LoopForever+0x6>)
  ldr r1, =_edata
 800489a:	490d      	ldr	r1, [pc, #52]	@ (80048d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800489c:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <LoopForever+0xe>)
  movs r3, #0
 800489e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80048a0:	e002      	b.n	80048a8 <LoopCopyDataInit>

080048a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048a6:	3304      	adds	r3, #4

080048a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048ac:	d3f9      	bcc.n	80048a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ae:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048b0:	4c0a      	ldr	r4, [pc, #40]	@ (80048dc <LoopForever+0x16>)
  movs r3, #0
 80048b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048b4:	e001      	b.n	80048ba <LoopFillZerobss>

080048b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048b8:	3204      	adds	r2, #4

080048ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048bc:	d3fb      	bcc.n	80048b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80048be:	f005 f92d 	bl	8009b1c <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80048c2:	f7fc fc4e 	bl	8001162 <main>

080048c6 <LoopForever>:

LoopForever:
    b LoopForever
 80048c6:	e7fe      	b.n	80048c6 <LoopForever>
  ldr   r0, =_estack
 80048c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80048cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80048d4:	0800a148 	.word	0x0800a148
  ldr r2, =_sbss
 80048d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80048dc:	20001c3c 	.word	0x20001c3c

080048e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048e0:	e7fe      	b.n	80048e0 <ADC1_2_IRQHandler>

080048e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ec:	2003      	movs	r0, #3
 80048ee:	f000 f939 	bl	8004b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048f2:	200f      	movs	r0, #15
 80048f4:	f000 f80e 	bl	8004914 <HAL_InitTick>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	71fb      	strb	r3, [r7, #7]
 8004902:	e001      	b.n	8004908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004904:	f7ff fc3e 	bl	8004184 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004908:	79fb      	ldrb	r3, [r7, #7]

}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004920:	4b16      	ldr	r3, [pc, #88]	@ (800497c <HAL_InitTick+0x68>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004928:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <HAL_InitTick+0x6c>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b13      	ldr	r3, [pc, #76]	@ (800497c <HAL_InitTick+0x68>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004934:	fbb1 f3f3 	udiv	r3, r1, r3
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f944 	bl	8004bca <HAL_SYSTICK_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d809      	bhi.n	8004962 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800494e:	2200      	movs	r2, #0
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	f000 f910 	bl	8004b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <HAL_InitTick+0x70>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e007      	b.n	8004972 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e004      	b.n	8004972 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e001      	b.n	8004972 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	2000000c 	.word	0x2000000c
 8004980:	20000004 	.word	0x20000004
 8004984:	20000008 	.word	0x20000008

08004988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_IncTick+0x1c>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_IncTick+0x20>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4413      	add	r3, r2
 8004996:	4a03      	ldr	r2, [pc, #12]	@ (80049a4 <HAL_IncTick+0x1c>)
 8004998:	6013      	str	r3, [r2, #0]
}
 800499a:	bf00      	nop
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	20001af0 	.word	0x20001af0
 80049a8:	2000000c 	.word	0x2000000c

080049ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return uwTick;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_GetTick+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20001af0 	.word	0x20001af0

080049c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <__NVIC_SetPriorityGrouping+0x44>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049f6:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <__NVIC_SetPriorityGrouping+0x44>)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	60d3      	str	r3, [r2, #12]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__NVIC_GetPriorityGrouping+0x18>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 0307 	and.w	r3, r3, #7
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db0b      	blt.n	8004a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <__NVIC_EnableIRQ+0x38>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2001      	movs	r0, #1
 8004a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e100 	.word	0xe000e100

08004a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	6039      	str	r1, [r7, #0]
 8004a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db0a      	blt.n	8004a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	490c      	ldr	r1, [pc, #48]	@ (8004ab0 <__NVIC_SetPriority+0x4c>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	440b      	add	r3, r1
 8004a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a8c:	e00a      	b.n	8004aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	4908      	ldr	r1, [pc, #32]	@ (8004ab4 <__NVIC_SetPriority+0x50>)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	0112      	lsls	r2, r2, #4
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	761a      	strb	r2, [r3, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000e100 	.word	0xe000e100
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	@ 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f1c3 0307 	rsb	r3, r3, #7
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	bf28      	it	cs
 8004ad6:	2304      	movcs	r3, #4
 8004ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2b06      	cmp	r3, #6
 8004ae0:	d902      	bls.n	8004ae8 <NVIC_EncodePriority+0x30>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3b03      	subs	r3, #3
 8004ae6:	e000      	b.n	8004aea <NVIC_EncodePriority+0x32>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	401a      	ands	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b00:	f04f 31ff 	mov.w	r1, #4294967295
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	43d9      	mvns	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	4313      	orrs	r3, r2
         );
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	@ 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b30:	d301      	bcc.n	8004b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00f      	b.n	8004b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b36:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <SysTick_Config+0x40>)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b3e:	210f      	movs	r1, #15
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	f7ff ff8e 	bl	8004a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b48:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <SysTick_Config+0x40>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b4e:	4b04      	ldr	r3, [pc, #16]	@ (8004b60 <SysTick_Config+0x40>)
 8004b50:	2207      	movs	r2, #7
 8004b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	e000e010 	.word	0xe000e010

08004b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff29 	bl	80049c4 <__NVIC_SetPriorityGrouping>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b88:	f7ff ff40 	bl	8004a0c <__NVIC_GetPriorityGrouping>
 8004b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	6978      	ldr	r0, [r7, #20]
 8004b94:	f7ff ff90 	bl	8004ab8 <NVIC_EncodePriority>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff ff5f 	bl	8004a64 <__NVIC_SetPriority>
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff ff33 	bl	8004a28 <__NVIC_EnableIRQ>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ffa4 	bl	8004b20 <SysTick_Config>
 8004bd8:	4603      	mov	r3, r0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e08d      	b.n	8004d12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_DMA_Init+0x138>)
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d80f      	bhi.n	8004c22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b45      	ldr	r3, [pc, #276]	@ (8004d20 <HAL_DMA_Init+0x13c>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a45      	ldr	r2, [pc, #276]	@ (8004d24 <HAL_DMA_Init+0x140>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	009a      	lsls	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a42      	ldr	r2, [pc, #264]	@ (8004d28 <HAL_DMA_Init+0x144>)
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c20:	e00e      	b.n	8004c40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b40      	ldr	r3, [pc, #256]	@ (8004d2c <HAL_DMA_Init+0x148>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d24 <HAL_DMA_Init+0x140>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <HAL_DMA_Init+0x14c>)
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa76 	bl	8005184 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ca0:	d102      	bne.n	8004ca8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cbc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_DMA_Init+0x104>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d80c      	bhi.n	8004ce8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa96 	bl	8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e008      	b.n	8004cfa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40020407 	.word	0x40020407
 8004d20:	bffdfff8 	.word	0xbffdfff8
 8004d24:	cccccccd 	.word	0xcccccccd
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	bffdfbf8 	.word	0xbffdfbf8
 8004d30:	40020400 	.word	0x40020400

08004d34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_DMA_Start_IT+0x20>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e066      	b.n	8004e22 <HAL_DMA_Start_IT+0xee>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d155      	bne.n	8004e14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f9bb 	bl	8005108 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 020e 	orr.w	r2, r2, #14
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e00f      	b.n	8004dcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 020a 	orr.w	r2, r2, #10
 8004dca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e005      	b.n	8004e20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d005      	beq.n	8004e4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e037      	b.n	8004ebe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 020e 	bic.w	r2, r2, #14
 8004e5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f003 021f 	and.w	r2, r3, #31
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ebc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d00d      	beq.n	8004f10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	e047      	b.n	8004fa0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 020e 	bic.w	r2, r2, #14
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
    }
  }
  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2204      	movs	r2, #4
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d026      	beq.n	8005024 <HAL_DMA_IRQHandler+0x7a>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d021      	beq.n	8005024 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0204 	bic.w	r2, r2, #4
 8004ffc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f003 021f 	and.w	r2, r3, #31
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	2104      	movs	r1, #4
 800500c:	fa01 f202 	lsl.w	r2, r1, r2
 8005010:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005016:	2b00      	cmp	r3, #0
 8005018:	d071      	beq.n	80050fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005022:	e06c      	b.n	80050fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2202      	movs	r2, #2
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02e      	beq.n	8005096 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d029      	beq.n	8005096 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 020a 	bic.w	r2, r2, #10
 800505e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	f003 021f 	and.w	r2, r3, #31
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	2102      	movs	r1, #2
 8005076:	fa01 f202 	lsl.w	r2, r1, r2
 800507a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d038      	beq.n	80050fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005094:	e033      	b.n	80050fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2208      	movs	r2, #8
 80050a0:	409a      	lsls	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02a      	beq.n	8005100 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d025      	beq.n	8005100 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 020e 	bic.w	r2, r2, #14
 80050c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	f003 021f 	and.w	r2, r3, #31
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f202 	lsl.w	r2, r1, r2
 80050d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
}
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800511e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f003 021f 	and.w	r2, r3, #31
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f202 	lsl.w	r2, r1, r2
 8005144:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b10      	cmp	r3, #16
 8005154:	d108      	bne.n	8005168 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005166:	e007      	b.n	8005178 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	4b16      	ldr	r3, [pc, #88]	@ (80051ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005194:	429a      	cmp	r2, r3
 8005196:	d802      	bhi.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005198:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e001      	b.n	80051a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	3b08      	subs	r3, #8
 80051ae:	4a12      	ldr	r2, [pc, #72]	@ (80051f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	009a      	lsls	r2, r3, #2
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a0b      	ldr	r2, [pc, #44]	@ (80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80051ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40020407 	.word	0x40020407
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020820 	.word	0x40020820
 80051f8:	cccccccd 	.word	0xcccccccd
 80051fc:	40020880 	.word	0x40020880

08005200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005222:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b01      	subs	r3, #1
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2201      	movs	r2, #1
 800522e:	409a      	lsls	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	1000823f 	.word	0x1000823f
 8005244:	40020940 	.word	0x40020940

08005248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005256:	e15a      	b.n	800550e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	2101      	movs	r1, #1
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 814c 	beq.w	8005508 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d005      	beq.n	8005288 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005284:	2b02      	cmp	r3, #2
 8005286:	d130      	bne.n	80052ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	2203      	movs	r2, #3
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052be:	2201      	movs	r2, #1
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	f003 0201 	and.w	r2, r3, #1
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d017      	beq.n	8005326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	2203      	movs	r2, #3
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d123      	bne.n	800537a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	08da      	lsrs	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3208      	adds	r2, #8
 800533a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	220f      	movs	r2, #15
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4013      	ands	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	08da      	lsrs	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3208      	adds	r2, #8
 8005374:	6939      	ldr	r1, [r7, #16]
 8005376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	2203      	movs	r2, #3
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0203 	and.w	r2, r3, #3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a6 	beq.w	8005508 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053bc:	4b5b      	ldr	r3, [pc, #364]	@ (800552c <HAL_GPIO_Init+0x2e4>)
 80053be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c0:	4a5a      	ldr	r2, [pc, #360]	@ (800552c <HAL_GPIO_Init+0x2e4>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80053c8:	4b58      	ldr	r3, [pc, #352]	@ (800552c <HAL_GPIO_Init+0x2e4>)
 80053ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053d4:	4a56      	ldr	r2, [pc, #344]	@ (8005530 <HAL_GPIO_Init+0x2e8>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	3302      	adds	r3, #2
 80053dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	220f      	movs	r2, #15
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4013      	ands	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80053fe:	d01f      	beq.n	8005440 <HAL_GPIO_Init+0x1f8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a4c      	ldr	r2, [pc, #304]	@ (8005534 <HAL_GPIO_Init+0x2ec>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d019      	beq.n	800543c <HAL_GPIO_Init+0x1f4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a4b      	ldr	r2, [pc, #300]	@ (8005538 <HAL_GPIO_Init+0x2f0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_GPIO_Init+0x1f0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a4a      	ldr	r2, [pc, #296]	@ (800553c <HAL_GPIO_Init+0x2f4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00d      	beq.n	8005434 <HAL_GPIO_Init+0x1ec>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a49      	ldr	r2, [pc, #292]	@ (8005540 <HAL_GPIO_Init+0x2f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d007      	beq.n	8005430 <HAL_GPIO_Init+0x1e8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <HAL_GPIO_Init+0x2fc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d101      	bne.n	800542c <HAL_GPIO_Init+0x1e4>
 8005428:	2305      	movs	r3, #5
 800542a:	e00a      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 800542c:	2306      	movs	r3, #6
 800542e:	e008      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 8005430:	2304      	movs	r3, #4
 8005432:	e006      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 8005434:	2303      	movs	r3, #3
 8005436:	e004      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 8005438:	2302      	movs	r3, #2
 800543a:	e002      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_GPIO_Init+0x1fa>
 8005440:	2300      	movs	r3, #0
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	f002 0203 	and.w	r2, r2, #3
 8005448:	0092      	lsls	r2, r2, #2
 800544a:	4093      	lsls	r3, r2
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005452:	4937      	ldr	r1, [pc, #220]	@ (8005530 <HAL_GPIO_Init+0x2e8>)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	3302      	adds	r3, #2
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005460:	4b39      	ldr	r3, [pc, #228]	@ (8005548 <HAL_GPIO_Init+0x300>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	43db      	mvns	r3, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005484:	4a30      	ldr	r2, [pc, #192]	@ (8005548 <HAL_GPIO_Init+0x300>)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <HAL_GPIO_Init+0x300>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <HAL_GPIO_Init+0x300>)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80054b4:	4b24      	ldr	r3, [pc, #144]	@ (8005548 <HAL_GPIO_Init+0x300>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	43db      	mvns	r3, r3
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80054d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <HAL_GPIO_Init+0x300>)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80054de:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <HAL_GPIO_Init+0x300>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005502:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <HAL_GPIO_Init+0x300>)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f ae9d 	bne.w	8005258 <HAL_GPIO_Init+0x10>
  }
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40021000 	.word	0x40021000
 8005530:	40010000 	.word	0x40010000
 8005534:	48000400 	.word	0x48000400
 8005538:	48000800 	.word	0x48000800
 800553c:	48000c00 	.word	0x48000c00
 8005540:	48001000 	.word	0x48001000
 8005544:	48001400 	.word	0x48001400
 8005548:	40010400 	.word	0x40010400

0800554c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
 8005568:	e001      	b.n	800556e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
 8005588:	4613      	mov	r3, r2
 800558a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800558c:	787b      	ldrb	r3, [r7, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005598:	e002      	b.n	80055a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c2:	4a05      	ldr	r2, [pc, #20]	@ (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fc fb84 	bl	8001cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40010400 	.word	0x40010400

080055dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e08d      	b.n	800570a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fe fdea 	bl	80041dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800562c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800563c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	e006      	b.n	8005664 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005662:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d108      	bne.n	800567e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e007      	b.n	800568e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800568c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800569c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b20      	cmp	r3, #32
 8005726:	d138      	bne.n	800579a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005732:	2302      	movs	r3, #2
 8005734:	e032      	b.n	800579c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	@ 0x24
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005764:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6819      	ldr	r1, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d139      	bne.n	8005832 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e033      	b.n	8005834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2224      	movs	r2, #36	@ 0x24
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d141      	bne.n	80058d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800584e:	4b4b      	ldr	r3, [pc, #300]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800585a:	d131      	bne.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800585c:	4b47      	ldr	r3, [pc, #284]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800585e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005862:	4a46      	ldr	r2, [pc, #280]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800586c:	4b43      	ldr	r3, [pc, #268]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005874:	4a41      	ldr	r2, [pc, #260]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800587a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800587c:	4b40      	ldr	r3, [pc, #256]	@ (8005980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2232      	movs	r2, #50	@ 0x32
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	4a3f      	ldr	r2, [pc, #252]	@ (8005984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	0c9b      	lsrs	r3, r3, #18
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005892:	e002      	b.n	800589a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3b01      	subs	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589a:	4b38      	ldr	r3, [pc, #224]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a6:	d102      	bne.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f2      	bne.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058ae:	4b33      	ldr	r3, [pc, #204]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d158      	bne.n	800596e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e057      	b.n	8005970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c0:	4b2e      	ldr	r3, [pc, #184]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c6:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058d0:	e04d      	b.n	800596e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d8:	d141      	bne.n	800595e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058da:	4b28      	ldr	r3, [pc, #160]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e6:	d131      	bne.n	800594c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058e8:	4b24      	ldr	r3, [pc, #144]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ee:	4a23      	ldr	r2, [pc, #140]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005900:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005906:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005908:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2232      	movs	r2, #50	@ 0x32
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	4a1c      	ldr	r2, [pc, #112]	@ (8005984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	0c9b      	lsrs	r3, r3, #18
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800591e:	e002      	b.n	8005926 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3b01      	subs	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005926:	4b15      	ldr	r3, [pc, #84]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005932:	d102      	bne.n	800593a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f2      	bne.n	8005920 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005946:	d112      	bne.n	800596e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e011      	b.n	8005970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800594c:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005952:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005958:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800595c:	e007      	b.n	800596e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800595e:	4b07      	ldr	r3, [pc, #28]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005966:	4a05      	ldr	r2, [pc, #20]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005968:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800596c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40007000 	.word	0x40007000
 8005980:	20000004 	.word	0x20000004
 8005984:	431bde83 	.word	0x431bde83

08005988 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005996:	6093      	str	r3, [r2, #8]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40007000 	.word	0x40007000

080059a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e2fe      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d075      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c6:	4b97      	ldr	r3, [pc, #604]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d0:	4b94      	ldr	r3, [pc, #592]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d102      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3e>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d002      	beq.n	80059ec <HAL_RCC_OscConfig+0x44>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d10b      	bne.n	8005a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ec:	4b8d      	ldr	r3, [pc, #564]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d05b      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x108>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d157      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e2d9      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0c:	d106      	bne.n	8005a1c <HAL_RCC_OscConfig+0x74>
 8005a0e:	4b85      	ldr	r3, [pc, #532]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a84      	ldr	r2, [pc, #528]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e01d      	b.n	8005a58 <HAL_RCC_OscConfig+0xb0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCC_OscConfig+0x98>
 8005a26:	4b7f      	ldr	r3, [pc, #508]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b7c      	ldr	r3, [pc, #496]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a7b      	ldr	r2, [pc, #492]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e00b      	b.n	8005a58 <HAL_RCC_OscConfig+0xb0>
 8005a40:	4b78      	ldr	r3, [pc, #480]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a77      	ldr	r2, [pc, #476]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	4b75      	ldr	r3, [pc, #468]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a74      	ldr	r2, [pc, #464]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d013      	beq.n	8005a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fe ffa4 	bl	80049ac <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a68:	f7fe ffa0 	bl	80049ac <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	@ 0x64
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e29e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0xc0>
 8005a86:	e014      	b.n	8005ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fe ff90 	bl	80049ac <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fe ff8c 	bl	80049ac <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	@ 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e28a      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aa2:	4b60      	ldr	r3, [pc, #384]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0xe8>
 8005aae:	e000      	b.n	8005ab2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d075      	beq.n	8005baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005abe:	4b59      	ldr	r3, [pc, #356]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac8:	4b56      	ldr	r3, [pc, #344]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d102      	bne.n	8005ade <HAL_RCC_OscConfig+0x136>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d002      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x13c>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d11f      	bne.n	8005b24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_OscConfig+0x154>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e25d      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b49      	ldr	r3, [pc, #292]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	4946      	ldr	r1, [pc, #280]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b10:	4b45      	ldr	r3, [pc, #276]	@ (8005c28 <HAL_RCC_OscConfig+0x280>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fefd 	bl	8004914 <HAL_InitTick>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d043      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e249      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d023      	beq.n	8005b74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3c      	ldr	r2, [pc, #240]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fe ff38 	bl	80049ac <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b40:	f7fe ff34 	bl	80049ac <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e232      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b52:	4b34      	ldr	r3, [pc, #208]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5e:	4b31      	ldr	r3, [pc, #196]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	492d      	ldr	r1, [pc, #180]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	604b      	str	r3, [r1, #4]
 8005b72:	e01a      	b.n	8005baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b74:	4b2b      	ldr	r3, [pc, #172]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a2a      	ldr	r2, [pc, #168]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fe ff14 	bl	80049ac <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b88:	f7fe ff10 	bl	80049ac <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e20e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x1e0>
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d041      	beq.n	8005c3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bbe:	4b19      	ldr	r3, [pc, #100]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc4:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fe feed 	bl	80049ac <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fe fee9 	bl	80049ac <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1e7      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0ef      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x22e>
 8005bf6:	e020      	b.n	8005c3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bfe:	4a09      	ldr	r2, [pc, #36]	@ (8005c24 <HAL_RCC_OscConfig+0x27c>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fe fed0 	bl	80049ac <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c0e:	e00d      	b.n	8005c2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c10:	f7fe fecc 	bl	80049ac <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d906      	bls.n	8005c2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e1ca      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ea      	bne.n	8005c10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80a6 	beq.w	8005d94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c4c:	4b84      	ldr	r3, [pc, #528]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_OscConfig+0x2b4>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x2b6>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c62:	4b7f      	ldr	r3, [pc, #508]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c66:	4a7e      	ldr	r2, [pc, #504]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7e:	4b79      	ldr	r3, [pc, #484]	@ (8005e64 <HAL_RCC_OscConfig+0x4bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d118      	bne.n	8005cbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8a:	4b76      	ldr	r3, [pc, #472]	@ (8005e64 <HAL_RCC_OscConfig+0x4bc>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a75      	ldr	r2, [pc, #468]	@ (8005e64 <HAL_RCC_OscConfig+0x4bc>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c96:	f7fe fe89 	bl	80049ac <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9e:	f7fe fe85 	bl	80049ac <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e183      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005e64 <HAL_RCC_OscConfig+0x4bc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d108      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x32e>
 8005cc4:	4b66      	ldr	r3, [pc, #408]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cca:	4a65      	ldr	r2, [pc, #404]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cd4:	e024      	b.n	8005d20 <HAL_RCC_OscConfig+0x378>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d110      	bne.n	8005d00 <HAL_RCC_OscConfig+0x358>
 8005cde:	4b60      	ldr	r3, [pc, #384]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f043 0304 	orr.w	r3, r3, #4
 8005cea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cee:	4b5c      	ldr	r3, [pc, #368]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cfe:	e00f      	b.n	8005d20 <HAL_RCC_OscConfig+0x378>
 8005d00:	4b57      	ldr	r3, [pc, #348]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	4a56      	ldr	r2, [pc, #344]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d10:	4b53      	ldr	r3, [pc, #332]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	4a52      	ldr	r2, [pc, #328]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fe fe40 	bl	80049ac <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fe fe3c 	bl	80049ac <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e138      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d46:	4b46      	ldr	r3, [pc, #280]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0ed      	beq.n	8005d30 <HAL_RCC_OscConfig+0x388>
 8005d54:	e015      	b.n	8005d82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d56:	f7fe fe29 	bl	80049ac <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d5c:	e00a      	b.n	8005d74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5e:	f7fe fe25 	bl	80049ac <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e121      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d74:	4b3a      	ldr	r3, [pc, #232]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ed      	bne.n	8005d5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d82:	7ffb      	ldrb	r3, [r7, #31]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d105      	bne.n	8005d94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d88:	4b35      	ldr	r3, [pc, #212]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8c:	4a34      	ldr	r2, [pc, #208]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d03c      	beq.n	8005e1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005da8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dae:	4a2c      	ldr	r2, [pc, #176]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fe fdf8 	bl	80049ac <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dc0:	f7fe fdf4 	bl	80049ac <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0f2      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005dd2:	4b23      	ldr	r3, [pc, #140]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ef      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x418>
 8005de0:	e01b      	b.n	8005e1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005de2:	4b1f      	ldr	r3, [pc, #124]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df2:	f7fe fddb 	bl	80049ac <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dfa:	f7fe fdd7 	bl	80049ac <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e0d5      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e0c:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ef      	bne.n	8005dfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80c9 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e24:	4b0e      	ldr	r3, [pc, #56]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 030c 	and.w	r3, r3, #12
 8005e2c:	2b0c      	cmp	r3, #12
 8005e2e:	f000 8083 	beq.w	8005f38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d15e      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <HAL_RCC_OscConfig+0x4b8>)
 8005e40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fe fdb1 	bl	80049ac <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4c:	e00c      	b.n	8005e68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4e:	f7fe fdad 	bl	80049ac <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d905      	bls.n	8005e68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e0ab      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e68:	4b55      	ldr	r3, [pc, #340]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ec      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e74:	4b52      	ldr	r3, [pc, #328]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	4b52      	ldr	r3, [pc, #328]	@ (8005fc4 <HAL_RCC_OscConfig+0x61c>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6a11      	ldr	r1, [r2, #32]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e84:	3a01      	subs	r2, #1
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	4311      	orrs	r1, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005e8e:	0212      	lsls	r2, r2, #8
 8005e90:	4311      	orrs	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e96:	0852      	lsrs	r2, r2, #1
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	0552      	lsls	r2, r2, #21
 8005e9c:	4311      	orrs	r1, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ea2:	0852      	lsrs	r2, r2, #1
 8005ea4:	3a01      	subs	r2, #1
 8005ea6:	0652      	lsls	r2, r2, #25
 8005ea8:	4311      	orrs	r1, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005eae:	06d2      	lsls	r2, r2, #27
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	4943      	ldr	r1, [pc, #268]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb8:	4b41      	ldr	r3, [pc, #260]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a40      	ldr	r2, [pc, #256]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ec2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ece:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fe fd6c 	bl	80049ac <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed8:	f7fe fd68 	bl	80049ac <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e066      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eea:	4b35      	ldr	r3, [pc, #212]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x530>
 8005ef6:	e05e      	b.n	8005fb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef8:	4b31      	ldr	r3, [pc, #196]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a30      	ldr	r2, [pc, #192]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fe fd52 	bl	80049ac <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fe fd4e 	bl	80049ac <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e04c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f2a:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	4924      	ldr	r1, [pc, #144]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005f30:	4b25      	ldr	r3, [pc, #148]	@ (8005fc8 <HAL_RCC_OscConfig+0x620>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60cb      	str	r3, [r1, #12]
 8005f36:	e03e      	b.n	8005fb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e039      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005f44:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc0 <HAL_RCC_OscConfig+0x618>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0203 	and.w	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d12c      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	3b01      	subs	r3, #1
 8005f64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d123      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d11b      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d113      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f94:	085b      	lsrs	r3, r3, #1
 8005f96:	3b01      	subs	r3, #1
 8005f98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	3b01      	subs	r3, #1
 8005fac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	019f800c 	.word	0x019f800c
 8005fc8:	feeefffc 	.word	0xfeeefffc

08005fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e11e      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b91      	ldr	r3, [pc, #580]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d910      	bls.n	8006014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 020f 	bic.w	r2, r3, #15
 8005ffa:	498c      	ldr	r1, [pc, #560]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006002:	4b8a      	ldr	r3, [pc, #552]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d001      	beq.n	8006014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e106      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d073      	beq.n	8006108 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d129      	bne.n	800607c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006028:	4b81      	ldr	r3, [pc, #516]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0f4      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006038:	f000 f99e 	bl	8006378 <RCC_GetSysClockFreqFromPLLSource>
 800603c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4a7c      	ldr	r2, [pc, #496]	@ (8006234 <HAL_RCC_ClockConfig+0x268>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d93f      	bls.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006046:	4b7a      	ldr	r3, [pc, #488]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800605a:	2b00      	cmp	r3, #0
 800605c:	d033      	beq.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006062:	2b00      	cmp	r3, #0
 8006064:	d12f      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006066:	4b72      	ldr	r3, [pc, #456]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800606e:	4a70      	ldr	r2, [pc, #448]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006074:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006076:	2380      	movs	r3, #128	@ 0x80
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e024      	b.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d107      	bne.n	8006094 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006084:	4b6a      	ldr	r3, [pc, #424]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0c6      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006094:	4b66      	ldr	r3, [pc, #408]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0be      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80060a4:	f000 f8ce 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4a61      	ldr	r2, [pc, #388]	@ (8006234 <HAL_RCC_ClockConfig+0x268>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d909      	bls.n	80060c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060b2:	4b5f      	ldr	r3, [pc, #380]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ba:	4a5d      	ldr	r2, [pc, #372]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	4b5a      	ldr	r3, [pc, #360]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4957      	ldr	r1, [pc, #348]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d8:	f7fe fc68 	bl	80049ac <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fe fc64 	bl	80049ac <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e095      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	4b4e      	ldr	r3, [pc, #312]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 020c 	and.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	429a      	cmp	r2, r3
 8006106:	d1eb      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d023      	beq.n	800615c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006120:	4b43      	ldr	r3, [pc, #268]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a42      	ldr	r2, [pc, #264]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006126:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800612a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d007      	beq.n	8006148 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006138:	4b3d      	ldr	r3, [pc, #244]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006140:	4a3b      	ldr	r2, [pc, #236]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006148:	4b39      	ldr	r3, [pc, #228]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4936      	ldr	r1, [pc, #216]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
 800615a:	e008      	b.n	800616e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b80      	cmp	r3, #128	@ 0x80
 8006160:	d105      	bne.n	800616e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006162:	4b33      	ldr	r3, [pc, #204]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4a32      	ldr	r2, [pc, #200]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 8006168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800616c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800616e:	4b2f      	ldr	r3, [pc, #188]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d21d      	bcs.n	80061b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617c:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 020f 	bic.w	r2, r3, #15
 8006184:	4929      	ldr	r1, [pc, #164]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800618c:	f7fe fc0e 	bl	80049ac <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	e00a      	b.n	80061aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006194:	f7fe fc0a 	bl	80049ac <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e03b      	b.n	8006222 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061aa:	4b20      	ldr	r3, [pc, #128]	@ (800622c <HAL_RCC_ClockConfig+0x260>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d1ed      	bne.n	8006194 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4917      	ldr	r1, [pc, #92]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	490f      	ldr	r1, [pc, #60]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061f6:	f000 f825 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80061fa:	4602      	mov	r2, r0
 80061fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <HAL_RCC_ClockConfig+0x264>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	490c      	ldr	r1, [pc, #48]	@ (8006238 <HAL_RCC_ClockConfig+0x26c>)
 8006208:	5ccb      	ldrb	r3, [r1, r3]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	fa22 f303 	lsr.w	r3, r2, r3
 8006212:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <HAL_RCC_ClockConfig+0x270>)
 8006214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006216:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <HAL_RCC_ClockConfig+0x274>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fb7a 	bl	8004914 <HAL_InitTick>
 8006220:	4603      	mov	r3, r0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40022000 	.word	0x40022000
 8006230:	40021000 	.word	0x40021000
 8006234:	04c4b400 	.word	0x04c4b400
 8006238:	0800a0f0 	.word	0x0800a0f0
 800623c:	20000004 	.word	0x20000004
 8006240:	20000008 	.word	0x20000008

08006244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800624a:	4b2c      	ldr	r3, [pc, #176]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b04      	cmp	r3, #4
 8006254:	d102      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006256:	4b2a      	ldr	r3, [pc, #168]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e047      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800625c:	4b27      	ldr	r3, [pc, #156]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b08      	cmp	r3, #8
 8006266:	d102      	bne.n	800626e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006268:	4b26      	ldr	r3, [pc, #152]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	e03e      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800626e:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 030c 	and.w	r3, r3, #12
 8006276:	2b0c      	cmp	r3, #12
 8006278:	d136      	bne.n	80062e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800627a:	4b20      	ldr	r3, [pc, #128]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006284:	4b1d      	ldr	r3, [pc, #116]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	3301      	adds	r3, #1
 8006290:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d10c      	bne.n	80062b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006298:	4a1a      	ldr	r2, [pc, #104]	@ (8006304 <HAL_RCC_GetSysClockFreq+0xc0>)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062a2:	68d2      	ldr	r2, [r2, #12]
 80062a4:	0a12      	lsrs	r2, r2, #8
 80062a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	617b      	str	r3, [r7, #20]
      break;
 80062b0:	e00c      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062b2:	4a13      	ldr	r2, [pc, #76]	@ (8006300 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	4a10      	ldr	r2, [pc, #64]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062bc:	68d2      	ldr	r2, [r2, #12]
 80062be:	0a12      	lsrs	r2, r2, #8
 80062c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]
      break;
 80062ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062cc:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	0e5b      	lsrs	r3, r3, #25
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	3301      	adds	r3, #1
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e001      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80062ec:	693b      	ldr	r3, [r7, #16]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40021000 	.word	0x40021000
 8006300:	00f42400 	.word	0x00f42400
 8006304:	007a1200 	.word	0x007a1200

08006308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_RCC_GetHCLKFreq+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000004 	.word	0x20000004

08006320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006324:	f7ff fff0 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4904      	ldr	r1, [pc, #16]	@ (8006348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	0800a100 	.word	0x0800a100

0800634c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006350:	f7ff ffda 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006354:	4602      	mov	r2, r0
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	0adb      	lsrs	r3, r3, #11
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	4904      	ldr	r1, [pc, #16]	@ (8006374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006362:	5ccb      	ldrb	r3, [r1, r3]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40021000 	.word	0x40021000
 8006374:	0800a100 	.word	0x0800a100

08006378 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006388:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d10c      	bne.n	80063b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800639c:	4a17      	ldr	r2, [pc, #92]	@ (80063fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	4a14      	ldr	r2, [pc, #80]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063a6:	68d2      	ldr	r2, [r2, #12]
 80063a8:	0a12      	lsrs	r2, r2, #8
 80063aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063ae:	fb02 f303 	mul.w	r3, r2, r3
 80063b2:	617b      	str	r3, [r7, #20]
    break;
 80063b4:	e00c      	b.n	80063d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063b6:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	4a0e      	ldr	r2, [pc, #56]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063c0:	68d2      	ldr	r2, [r2, #12]
 80063c2:	0a12      	lsrs	r2, r2, #8
 80063c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
    break;
 80063ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063d0:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	0e5b      	lsrs	r3, r3, #25
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80063ea:	687b      	ldr	r3, [r7, #4]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40021000 	.word	0x40021000
 80063fc:	007a1200 	.word	0x007a1200
 8006400:	00f42400 	.word	0x00f42400

08006404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800640c:	2300      	movs	r3, #0
 800640e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006410:	2300      	movs	r3, #0
 8006412:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8098 	beq.w	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b40      	ldr	r3, [pc, #256]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	4a3f      	ldr	r2, [pc, #252]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800643c:	6593      	str	r3, [r2, #88]	@ 0x58
 800643e:	4b3d      	ldr	r3, [pc, #244]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644a:	2301      	movs	r3, #1
 800644c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800644e:	4b3a      	ldr	r3, [pc, #232]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a39      	ldr	r2, [pc, #228]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800645a:	f7fe faa7 	bl	80049ac <HAL_GetTick>
 800645e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	e009      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006462:	f7fe faa3 	bl	80049ac <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d902      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	74fb      	strb	r3, [r7, #19]
        break;
 8006474:	e005      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006476:	4b30      	ldr	r3, [pc, #192]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0ef      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006482:	7cfb      	ldrb	r3, [r7, #19]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d159      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006488:	4b2a      	ldr	r3, [pc, #168]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006492:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01e      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d019      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064a4:	4b23      	ldr	r3, [pc, #140]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064b0:	4b20      	ldr	r3, [pc, #128]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064d0:	4a18      	ldr	r2, [pc, #96]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fe fa63 	bl	80049ac <HAL_GetTick>
 80064e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e8:	e00b      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fe fa5f 	bl	80049ac <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d902      	bls.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006500:	e006      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0ec      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	4903      	ldr	r1, [pc, #12]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	74bb      	strb	r3, [r7, #18]
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006534:	40021000 	.word	0x40021000
 8006538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006540:	7c7b      	ldrb	r3, [r7, #17]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006546:	4ba6      	ldr	r3, [pc, #664]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654a:	4aa5      	ldr	r2, [pc, #660]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800654c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006550:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800655e:	4ba0      	ldr	r3, [pc, #640]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f023 0203 	bic.w	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	499c      	ldr	r1, [pc, #624]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006580:	4b97      	ldr	r3, [pc, #604]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f023 020c 	bic.w	r2, r3, #12
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	4994      	ldr	r1, [pc, #592]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065a2:	4b8f      	ldr	r3, [pc, #572]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	498b      	ldr	r1, [pc, #556]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065c4:	4b86      	ldr	r3, [pc, #536]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	4983      	ldr	r1, [pc, #524]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065e6:	4b7e      	ldr	r3, [pc, #504]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	497a      	ldr	r1, [pc, #488]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006608:	4b75      	ldr	r3, [pc, #468]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	4972      	ldr	r1, [pc, #456]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800662a:	4b6d      	ldr	r3, [pc, #436]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006630:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4969      	ldr	r1, [pc, #420]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800664c:	4b64      	ldr	r3, [pc, #400]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006652:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4961      	ldr	r1, [pc, #388]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800666e:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	4958      	ldr	r1, [pc, #352]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006690:	4b53      	ldr	r3, [pc, #332]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	4950      	ldr	r1, [pc, #320]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ae:	d105      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066b0:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a4a      	ldr	r2, [pc, #296]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066c8:	4b45      	ldr	r3, [pc, #276]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	4942      	ldr	r1, [pc, #264]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e6:	d105      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e8:	4b3d      	ldr	r3, [pc, #244]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4a3c      	ldr	r2, [pc, #240]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006700:	4b37      	ldr	r3, [pc, #220]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	4934      	ldr	r1, [pc, #208]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800671e:	d105      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b2f      	ldr	r3, [pc, #188]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a2e      	ldr	r2, [pc, #184]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d015      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006738:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006746:	4926      	ldr	r1, [pc, #152]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006756:	d105      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006758:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a20      	ldr	r2, [pc, #128]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006762:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	4918      	ldr	r1, [pc, #96]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006790:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a12      	ldr	r2, [pc, #72]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800679a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80067a8:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b6:	490a      	ldr	r1, [pc, #40]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067c6:	d105      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067c8:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a04      	ldr	r2, [pc, #16]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e049      	b.n	800688a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fd fda6 	bl	800435c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f001 f82c 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d001      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e04a      	b.n	8006942 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a21      	ldr	r2, [pc, #132]	@ (8006950 <HAL_TIM_Base_Start_IT+0xbc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d6:	d013      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006954 <HAL_TIM_Base_Start_IT+0xc0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006958 <HAL_TIM_Base_Start_IT+0xc4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1a      	ldr	r2, [pc, #104]	@ (800695c <HAL_TIM_Base_Start_IT+0xc8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <HAL_TIM_Base_Start_IT+0xcc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d115      	bne.n	800692c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	4b17      	ldr	r3, [pc, #92]	@ (8006964 <HAL_TIM_Base_Start_IT+0xd0>)
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b06      	cmp	r3, #6
 8006910:	d015      	beq.n	800693e <HAL_TIM_Base_Start_IT+0xaa>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006918:	d011      	beq.n	800693e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692a:	e008      	b.n	800693e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e000      	b.n	8006940 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40013400 	.word	0x40013400
 8006960:	40014000 	.word	0x40014000
 8006964:	00010007 	.word	0x00010007

08006968 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	f241 1311 	movw	r3, #4369	@ 0x1111
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10f      	bne.n	80069b0 <HAL_TIM_Base_Stop_IT+0x48>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a1a      	ldr	r2, [r3, #32]
 8006996:	f244 4344 	movw	r3, #17476	@ 0x4444
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d107      	bne.n	80069b0 <HAL_TIM_Base_Stop_IT+0x48>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e049      	b.n	8006a6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fd fc6d 	bl	80042cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 ff3b 	bl	8007880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_TIM_PWM_Start+0x24>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	bf14      	ite	ne
 8006a90:	2301      	movne	r3, #1
 8006a92:	2300      	moveq	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	e03c      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d109      	bne.n	8006ab2 <HAL_TIM_PWM_Start+0x3e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	e02f      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d109      	bne.n	8006acc <HAL_TIM_PWM_Start+0x58>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e022      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d109      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x72>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	bf14      	ite	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	2300      	moveq	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	e015      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_PWM_Start+0x8c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e008      	b.n	8006b12 <HAL_TIM_PWM_Start+0x9e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e097      	b.n	8006c4a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xb6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b28:	e023      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xc6>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b38:	e01b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start+0xd6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b48:	e013      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xe6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b58:	e00b      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xf6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b68:	e003      	b.n	8006b72 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 faae 	bl	80080dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a33      	ldr	r2, [pc, #204]	@ (8006c54 <HAL_TIM_PWM_Start+0x1e0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a32      	ldr	r2, [pc, #200]	@ (8006c58 <HAL_TIM_PWM_Start+0x1e4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a30      	ldr	r2, [pc, #192]	@ (8006c5c <HAL_TIM_PWM_Start+0x1e8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8006c60 <HAL_TIM_PWM_Start+0x1ec>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x13e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a2d      	ldr	r2, [pc, #180]	@ (8006c64 <HAL_TIM_PWM_Start+0x1f0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_PWM_Start+0x142>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <HAL_TIM_PWM_Start+0x144>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	@ (8006c54 <HAL_TIM_PWM_Start+0x1e0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d018      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x194>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bde:	d013      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x194>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a20      	ldr	r2, [pc, #128]	@ (8006c68 <HAL_TIM_PWM_Start+0x1f4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x194>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <HAL_TIM_PWM_Start+0x1f8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x194>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a17      	ldr	r2, [pc, #92]	@ (8006c58 <HAL_TIM_PWM_Start+0x1e4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIM_PWM_Start+0x194>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <HAL_TIM_PWM_Start+0x1e8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d115      	bne.n	8006c34 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	4b18      	ldr	r3, [pc, #96]	@ (8006c70 <HAL_TIM_PWM_Start+0x1fc>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b06      	cmp	r3, #6
 8006c18:	d015      	beq.n	8006c46 <HAL_TIM_PWM_Start+0x1d2>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c20:	d011      	beq.n	8006c46 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c32:	e008      	b.n	8006c46 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e000      	b.n	8006c48 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40013400 	.word	0x40013400
 8006c5c:	40014000 	.word	0x40014000
 8006c60:	40014400 	.word	0x40014400
 8006c64:	40014800 	.word	0x40014800
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	00010007 	.word	0x00010007

08006c74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_TIM_PWM_Start_IT+0x28>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e03c      	b.n	8006d16 <HAL_TIM_PWM_Start_IT+0xa2>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d109      	bne.n	8006cb6 <HAL_TIM_PWM_Start_IT+0x42>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	bf14      	ite	ne
 8006cae:	2301      	movne	r3, #1
 8006cb0:	2300      	moveq	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e02f      	b.n	8006d16 <HAL_TIM_PWM_Start_IT+0xa2>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d109      	bne.n	8006cd0 <HAL_TIM_PWM_Start_IT+0x5c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e022      	b.n	8006d16 <HAL_TIM_PWM_Start_IT+0xa2>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d109      	bne.n	8006cea <HAL_TIM_PWM_Start_IT+0x76>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	bf14      	ite	ne
 8006ce2:	2301      	movne	r3, #1
 8006ce4:	2300      	moveq	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e015      	b.n	8006d16 <HAL_TIM_PWM_Start_IT+0xa2>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d109      	bne.n	8006d04 <HAL_TIM_PWM_Start_IT+0x90>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e008      	b.n	8006d16 <HAL_TIM_PWM_Start_IT+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e0e2      	b.n	8006ee4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Start_IT+0xba>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d2c:	e023      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x102>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Start_IT+0xca>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d3c:	e01b      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x102>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start_IT+0xda>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d4c:	e013      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x102>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Start_IT+0xea>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d5c:	e00b      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x102>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_PWM_Start_IT+0xfa>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d6c:	e003      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x102>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b0c      	cmp	r3, #12
 8006d7a:	d841      	bhi.n	8006e00 <HAL_TIM_PWM_Start_IT+0x18c>
 8006d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <HAL_TIM_PWM_Start_IT+0x110>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006e01 	.word	0x08006e01
 8006d8c:	08006e01 	.word	0x08006e01
 8006d90:	08006e01 	.word	0x08006e01
 8006d94:	08006dcb 	.word	0x08006dcb
 8006d98:	08006e01 	.word	0x08006e01
 8006d9c:	08006e01 	.word	0x08006e01
 8006da0:	08006e01 	.word	0x08006e01
 8006da4:	08006ddd 	.word	0x08006ddd
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006e01 	.word	0x08006e01
 8006db0:	08006e01 	.word	0x08006e01
 8006db4:	08006def 	.word	0x08006def
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0202 	orr.w	r2, r2, #2
 8006dc6:	60da      	str	r2, [r3, #12]
      break;
 8006dc8:	e01d      	b.n	8006e06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0204 	orr.w	r2, r2, #4
 8006dd8:	60da      	str	r2, [r3, #12]
      break;
 8006dda:	e014      	b.n	8006e06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0208 	orr.w	r2, r2, #8
 8006dea:	60da      	str	r2, [r3, #12]
      break;
 8006dec:	e00b      	b.n	8006e06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0210 	orr.w	r2, r2, #16
 8006dfc:	60da      	str	r2, [r3, #12]
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      break;
 8006e04:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d16a      	bne.n	8006ee2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f001 f961 	bl	80080dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a33      	ldr	r2, [pc, #204]	@ (8006eec <HAL_TIM_PWM_Start_IT+0x278>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d013      	beq.n	8006e4c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a31      	ldr	r2, [pc, #196]	@ (8006ef0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a30      	ldr	r2, [pc, #192]	@ (8006ef4 <HAL_TIM_PWM_Start_IT+0x280>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef8 <HAL_TIM_PWM_Start_IT+0x284>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2d      	ldr	r2, [pc, #180]	@ (8006efc <HAL_TIM_PWM_Start_IT+0x288>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIM_PWM_Start_IT+0x1dc>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <HAL_TIM_PWM_Start_IT+0x1de>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a20      	ldr	r2, [pc, #128]	@ (8006eec <HAL_TIM_PWM_Start_IT+0x278>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e78:	d013      	beq.n	8006ea2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a20      	ldr	r2, [pc, #128]	@ (8006f00 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <HAL_TIM_PWM_Start_IT+0x290>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a17      	ldr	r2, [pc, #92]	@ (8006ef0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_TIM_PWM_Start_IT+0x22e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <HAL_TIM_PWM_Start_IT+0x280>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d115      	bne.n	8006ece <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	4b17      	ldr	r3, [pc, #92]	@ (8006f08 <HAL_TIM_PWM_Start_IT+0x294>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b06      	cmp	r3, #6
 8006eb2:	d015      	beq.n	8006ee0 <HAL_TIM_PWM_Start_IT+0x26c>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eba:	d011      	beq.n	8006ee0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	e008      	b.n	8006ee0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0201 	orr.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e000      	b.n	8006ee2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40013400 	.word	0x40013400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	00010007 	.word	0x00010007

08006f0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e097      	b.n	8007050 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fd fa51 	bl	80043dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6812      	ldr	r2, [r2, #0]
 8006f4c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006f50:	f023 0307 	bic.w	r3, r3, #7
 8006f54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 fc8d 	bl	8007880 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006fac:	f023 030c 	bic.w	r3, r3, #12
 8006fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	011a      	lsls	r2, r3, #4
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	031b      	lsls	r3, r3, #12
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006fea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	4313      	orrs	r3, r2
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007068:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007070:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007078:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007080:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d110      	bne.n	80070aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d102      	bne.n	8007094 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800708e:	7b7b      	ldrb	r3, [r7, #13]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d001      	beq.n	8007098 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e069      	b.n	800716c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a8:	e031      	b.n	800710e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d110      	bne.n	80070d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d102      	bne.n	80070bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070b6:	7b3b      	ldrb	r3, [r7, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e055      	b.n	800716c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070d0:	e01d      	b.n	800710e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d108      	bne.n	80070ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d105      	bne.n	80070ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070de:	7b7b      	ldrb	r3, [r7, #13]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d102      	bne.n	80070ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e4:	7b3b      	ldrb	r3, [r7, #12]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e03e      	b.n	800716c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_TIM_Encoder_Start+0xc4>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d008      	beq.n	800712c <HAL_TIM_Encoder_Start+0xd4>
 800711a:	e00f      	b.n	800713c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ffd9 	bl	80080dc <TIM_CCxChannelCmd>
      break;
 800712a:	e016      	b.n	800715a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2201      	movs	r2, #1
 8007132:	2104      	movs	r1, #4
 8007134:	4618      	mov	r0, r3
 8007136:	f000 ffd1 	bl	80080dc <TIM_CCxChannelCmd>
      break;
 800713a:	e00e      	b.n	800715a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2201      	movs	r2, #1
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ffc9 	bl	80080dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2201      	movs	r2, #1
 8007150:	2104      	movs	r1, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f000 ffc2 	bl	80080dc <TIM_CCxChannelCmd>
      break;
 8007158:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0201 	orr.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d020      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0202 	mvn.w	r2, #2
 80071a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb40 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 80071c4:	e005      	b.n	80071d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb32 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fb43 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d020      	beq.n	8007224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01b      	beq.n	8007224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0204 	mvn.w	r2, #4
 80071f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fb1a 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb0c 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb1d 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d020      	beq.n	8007270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01b      	beq.n	8007270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0208 	mvn.w	r2, #8
 8007240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 faf4 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 800725c:	e005      	b.n	800726a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fae6 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 faf7 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0310 	and.w	r3, r3, #16
 8007276:	2b00      	cmp	r3, #0
 8007278:	d020      	beq.n	80072bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01b      	beq.n	80072bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0210 	mvn.w	r2, #16
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2208      	movs	r2, #8
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 face 	bl	8007844 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fac0 	bl	8007830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fad1 	bl	8007858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0201 	mvn.w	r2, #1
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fa fcc6 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00c      	beq.n	800730e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 f825 	bl	8008358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f81d 	bl	800836c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800734e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa8b 	bl	800786c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0220 	mvn.w	r2, #32
 8007372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 ffe5 	bl	8008344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00c      	beq.n	800739e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fff1 	bl	8008380 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00c      	beq.n	80073c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80073ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 ffe9 	bl	8008394 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00c      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d007      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80073de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ffe1 	bl	80083a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00c      	beq.n	800740a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 ffd9 	bl	80083bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800742e:	2302      	movs	r3, #2
 8007430:	e0ff      	b.n	8007632 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b14      	cmp	r3, #20
 800743e:	f200 80f0 	bhi.w	8007622 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007442:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	0800749d 	.word	0x0800749d
 800744c:	08007623 	.word	0x08007623
 8007450:	08007623 	.word	0x08007623
 8007454:	08007623 	.word	0x08007623
 8007458:	080074dd 	.word	0x080074dd
 800745c:	08007623 	.word	0x08007623
 8007460:	08007623 	.word	0x08007623
 8007464:	08007623 	.word	0x08007623
 8007468:	0800751f 	.word	0x0800751f
 800746c:	08007623 	.word	0x08007623
 8007470:	08007623 	.word	0x08007623
 8007474:	08007623 	.word	0x08007623
 8007478:	0800755f 	.word	0x0800755f
 800747c:	08007623 	.word	0x08007623
 8007480:	08007623 	.word	0x08007623
 8007484:	08007623 	.word	0x08007623
 8007488:	080075a1 	.word	0x080075a1
 800748c:	08007623 	.word	0x08007623
 8007490:	08007623 	.word	0x08007623
 8007494:	08007623 	.word	0x08007623
 8007498:	080075e1 	.word	0x080075e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fa88 	bl	80079b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699a      	ldr	r2, [r3, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0208 	orr.w	r2, r2, #8
 80074b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0204 	bic.w	r2, r2, #4
 80074c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6999      	ldr	r1, [r3, #24]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	619a      	str	r2, [r3, #24]
      break;
 80074da:	e0a5      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 faf8 	bl	8007ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6999      	ldr	r1, [r3, #24]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	021a      	lsls	r2, r3, #8
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	619a      	str	r2, [r3, #24]
      break;
 800751c:	e084      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fb61 	bl	8007bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0208 	orr.w	r2, r2, #8
 8007538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0204 	bic.w	r2, r2, #4
 8007548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	61da      	str	r2, [r3, #28]
      break;
 800755c:	e064      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fbc9 	bl	8007cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69da      	ldr	r2, [r3, #28]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69d9      	ldr	r1, [r3, #28]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	021a      	lsls	r2, r3, #8
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	61da      	str	r2, [r3, #28]
      break;
 800759e:	e043      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fc32 	bl	8007e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0208 	orr.w	r2, r2, #8
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0204 	bic.w	r2, r2, #4
 80075ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075de:	e023      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fc76 	bl	8007ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800760a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	021a      	lsls	r2, r3, #8
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007620:	e002      	b.n	8007628 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
      break;
 8007626:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop

0800763c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0x1c>
 8007654:	2302      	movs	r3, #2
 8007656:	e0de      	b.n	8007816 <HAL_TIM_ConfigClockSource+0x1da>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007676:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800767a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a63      	ldr	r2, [pc, #396]	@ (8007820 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	f000 80a9 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 8007698:	4a61      	ldr	r2, [pc, #388]	@ (8007820 <HAL_TIM_ConfigClockSource+0x1e4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	f200 80ae 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076a0:	4a60      	ldr	r2, [pc, #384]	@ (8007824 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	f000 80a1 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 80076a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007824 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	f200 80a6 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007828 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	f000 8099 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 80076b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007828 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	f200 809e 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076c0:	4a5a      	ldr	r2, [pc, #360]	@ (800782c <HAL_TIM_ConfigClockSource+0x1f0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	f000 8091 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 80076c8:	4a58      	ldr	r2, [pc, #352]	@ (800782c <HAL_TIM_ConfigClockSource+0x1f0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	f200 8096 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076d4:	f000 8089 	beq.w	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 80076d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076dc:	f200 808e 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e4:	d03e      	beq.n	8007764 <HAL_TIM_ConfigClockSource+0x128>
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ea:	f200 8087 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f2:	f000 8086 	beq.w	8007802 <HAL_TIM_ConfigClockSource+0x1c6>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d87f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 80076fc:	2b70      	cmp	r3, #112	@ 0x70
 80076fe:	d01a      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xfa>
 8007700:	2b70      	cmp	r3, #112	@ 0x70
 8007702:	d87b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 8007704:	2b60      	cmp	r3, #96	@ 0x60
 8007706:	d050      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x16e>
 8007708:	2b60      	cmp	r3, #96	@ 0x60
 800770a:	d877      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 800770c:	2b50      	cmp	r3, #80	@ 0x50
 800770e:	d03c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x14e>
 8007710:	2b50      	cmp	r3, #80	@ 0x50
 8007712:	d873      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 8007714:	2b40      	cmp	r3, #64	@ 0x40
 8007716:	d058      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x18e>
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d86f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 800771c:	2b30      	cmp	r3, #48	@ 0x30
 800771e:	d064      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d86b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d060      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d867      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d05a      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x1ae>
 8007734:	e062      	b.n	80077fc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007746:	f000 fca9 	bl	800809c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	609a      	str	r2, [r3, #8]
      break;
 8007762:	e04f      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007774:	f000 fc92 	bl	800809c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e03c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007796:	461a      	mov	r2, r3
 8007798:	f000 fc04 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2150      	movs	r1, #80	@ 0x50
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fc5d 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 80077a8:	e02c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b6:	461a      	mov	r2, r3
 80077b8:	f000 fc23 	bl	8008002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2160      	movs	r1, #96	@ 0x60
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fc4d 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 80077c8:	e01c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d6:	461a      	mov	r2, r3
 80077d8:	f000 fbe4 	bl	8007fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2140      	movs	r1, #64	@ 0x40
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fc3d 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 80077e8:	e00c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f000 fc34 	bl	8008062 <TIM_ITRx_SetConfig>
      break;
 80077fa:	e003      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	e000      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	00100070 	.word	0x00100070
 8007824:	00100040 	.word	0x00100040
 8007828:	00100030 	.word	0x00100030
 800782c:	00100020 	.word	0x00100020

08007830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a42      	ldr	r2, [pc, #264]	@ (800799c <TIM_Base_SetConfig+0x11c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00f      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789e:	d00b      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3f      	ldr	r2, [pc, #252]	@ (80079a0 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3e      	ldr	r2, [pc, #248]	@ (80079a4 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_Base_SetConfig+0x38>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	@ (80079a8 <TIM_Base_SetConfig+0x128>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d108      	bne.n	80078ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a33      	ldr	r2, [pc, #204]	@ (800799c <TIM_Base_SetConfig+0x11c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d01b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d8:	d017      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a30      	ldr	r2, [pc, #192]	@ (80079a0 <TIM_Base_SetConfig+0x120>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2f      	ldr	r2, [pc, #188]	@ (80079a4 <TIM_Base_SetConfig+0x124>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00f      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2e      	ldr	r2, [pc, #184]	@ (80079a8 <TIM_Base_SetConfig+0x128>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2d      	ldr	r2, [pc, #180]	@ (80079ac <TIM_Base_SetConfig+0x12c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2c      	ldr	r2, [pc, #176]	@ (80079b0 <TIM_Base_SetConfig+0x130>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0x8a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2b      	ldr	r2, [pc, #172]	@ (80079b4 <TIM_Base_SetConfig+0x134>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d108      	bne.n	800791c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a16      	ldr	r2, [pc, #88]	@ (800799c <TIM_Base_SetConfig+0x11c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <TIM_Base_SetConfig+0x128>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <TIM_Base_SetConfig+0x12c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a15      	ldr	r2, [pc, #84]	@ (80079b0 <TIM_Base_SetConfig+0x130>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xe8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a14      	ldr	r2, [pc, #80]	@ (80079b4 <TIM_Base_SetConfig+0x134>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b01      	cmp	r3, #1
 8007980:	d105      	bne.n	800798e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	611a      	str	r2, [r3, #16]
  }
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40000400 	.word	0x40000400
 80079a4:	40000800 	.word	0x40000800
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f023 0201 	bic.w	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 0302 	bic.w	r3, r3, #2
 8007a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a2c      	ldr	r2, [pc, #176]	@ (8007ac4 <TIM_OC1_SetConfig+0x10c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00f      	beq.n	8007a38 <TIM_OC1_SetConfig+0x80>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac8 <TIM_OC1_SetConfig+0x110>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_OC1_SetConfig+0x80>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a2a      	ldr	r2, [pc, #168]	@ (8007acc <TIM_OC1_SetConfig+0x114>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_OC1_SetConfig+0x80>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a29      	ldr	r2, [pc, #164]	@ (8007ad0 <TIM_OC1_SetConfig+0x118>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_OC1_SetConfig+0x80>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a28      	ldr	r2, [pc, #160]	@ (8007ad4 <TIM_OC1_SetConfig+0x11c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d10c      	bne.n	8007a52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f023 0308 	bic.w	r3, r3, #8
 8007a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f023 0304 	bic.w	r3, r3, #4
 8007a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac4 <TIM_OC1_SetConfig+0x10c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00f      	beq.n	8007a7a <TIM_OC1_SetConfig+0xc2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ac8 <TIM_OC1_SetConfig+0x110>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00b      	beq.n	8007a7a <TIM_OC1_SetConfig+0xc2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <TIM_OC1_SetConfig+0x114>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d007      	beq.n	8007a7a <TIM_OC1_SetConfig+0xc2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a18      	ldr	r2, [pc, #96]	@ (8007ad0 <TIM_OC1_SetConfig+0x118>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d003      	beq.n	8007a7a <TIM_OC1_SetConfig+0xc2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <TIM_OC1_SetConfig+0x11c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d111      	bne.n	8007a9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40013400 	.word	0x40013400
 8007acc:	40014000 	.word	0x40014000
 8007ad0:	40014400 	.word	0x40014400
 8007ad4:	40014800 	.word	0x40014800

08007ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	f023 0210 	bic.w	r2, r3, #16
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0320 	bic.w	r3, r3, #32
 8007b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a28      	ldr	r2, [pc, #160]	@ (8007bd8 <TIM_OC2_SetConfig+0x100>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_OC2_SetConfig+0x6c>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a27      	ldr	r2, [pc, #156]	@ (8007bdc <TIM_OC2_SetConfig+0x104>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10d      	bne.n	8007b60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a1d      	ldr	r2, [pc, #116]	@ (8007bd8 <TIM_OC2_SetConfig+0x100>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00f      	beq.n	8007b88 <TIM_OC2_SetConfig+0xb0>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bdc <TIM_OC2_SetConfig+0x104>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00b      	beq.n	8007b88 <TIM_OC2_SetConfig+0xb0>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1b      	ldr	r2, [pc, #108]	@ (8007be0 <TIM_OC2_SetConfig+0x108>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_OC2_SetConfig+0xb0>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007be4 <TIM_OC2_SetConfig+0x10c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_OC2_SetConfig+0xb0>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <TIM_OC2_SetConfig+0x110>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d113      	bne.n	8007bb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40013400 	.word	0x40013400
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400
 8007be8:	40014800 	.word	0x40014800

08007bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a27      	ldr	r2, [pc, #156]	@ (8007ce8 <TIM_OC3_SetConfig+0xfc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x6a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a26      	ldr	r2, [pc, #152]	@ (8007cec <TIM_OC3_SetConfig+0x100>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10d      	bne.n	8007c72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce8 <TIM_OC3_SetConfig+0xfc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00f      	beq.n	8007c9a <TIM_OC3_SetConfig+0xae>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cec <TIM_OC3_SetConfig+0x100>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00b      	beq.n	8007c9a <TIM_OC3_SetConfig+0xae>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf0 <TIM_OC3_SetConfig+0x104>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <TIM_OC3_SetConfig+0xae>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	@ (8007cf4 <TIM_OC3_SetConfig+0x108>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_OC3_SetConfig+0xae>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a18      	ldr	r2, [pc, #96]	@ (8007cf8 <TIM_OC3_SetConfig+0x10c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d113      	bne.n	8007cc2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	621a      	str	r2, [r3, #32]
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800

08007cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	031b      	lsls	r3, r3, #12
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a28      	ldr	r2, [pc, #160]	@ (8007dfc <TIM_OC4_SetConfig+0x100>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC4_SetConfig+0x6c>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a27      	ldr	r2, [pc, #156]	@ (8007e00 <TIM_OC4_SetConfig+0x104>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10d      	bne.n	8007d84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1d      	ldr	r2, [pc, #116]	@ (8007dfc <TIM_OC4_SetConfig+0x100>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00f      	beq.n	8007dac <TIM_OC4_SetConfig+0xb0>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e00 <TIM_OC4_SetConfig+0x104>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00b      	beq.n	8007dac <TIM_OC4_SetConfig+0xb0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <TIM_OC4_SetConfig+0x108>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d007      	beq.n	8007dac <TIM_OC4_SetConfig+0xb0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e08 <TIM_OC4_SetConfig+0x10c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_OC4_SetConfig+0xb0>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a19      	ldr	r2, [pc, #100]	@ (8007e0c <TIM_OC4_SetConfig+0x110>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d113      	bne.n	8007dd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007db2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	019b      	lsls	r3, r3, #6
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40012c00 	.word	0x40012c00
 8007e00:	40013400 	.word	0x40013400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800

08007e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <TIM_OC5_SetConfig+0xb4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <TIM_OC5_SetConfig+0x7a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <TIM_OC5_SetConfig+0xb8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <TIM_OC5_SetConfig+0x7a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_OC5_SetConfig+0xbc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_OC5_SetConfig+0x7a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ed0 <TIM_OC5_SetConfig+0xc0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC5_SetConfig+0x7a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a13      	ldr	r2, [pc, #76]	@ (8007ed4 <TIM_OC5_SetConfig+0xc4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d109      	bne.n	8007e9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	40012c00 	.word	0x40012c00
 8007ec8:	40013400 	.word	0x40013400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	40014800 	.word	0x40014800

08007ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	051b      	lsls	r3, r3, #20
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	@ (8007f90 <TIM_OC6_SetConfig+0xb8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00f      	beq.n	8007f54 <TIM_OC6_SetConfig+0x7c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a17      	ldr	r2, [pc, #92]	@ (8007f94 <TIM_OC6_SetConfig+0xbc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_OC6_SetConfig+0x7c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a16      	ldr	r2, [pc, #88]	@ (8007f98 <TIM_OC6_SetConfig+0xc0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_OC6_SetConfig+0x7c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a15      	ldr	r2, [pc, #84]	@ (8007f9c <TIM_OC6_SetConfig+0xc4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_OC6_SetConfig+0x7c>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a14      	ldr	r2, [pc, #80]	@ (8007fa0 <TIM_OC6_SetConfig+0xc8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d109      	bne.n	8007f68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	029b      	lsls	r3, r3, #10
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	621a      	str	r2, [r3, #32]
}
 8007f82:	bf00      	nop
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40013400 	.word	0x40013400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40014400 	.word	0x40014400
 8007fa0:	40014800 	.word	0x40014800

08007fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	f023 0201 	bic.w	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f023 030a 	bic.w	r3, r3, #10
 8007fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	f023 0210 	bic.w	r2, r3, #16
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800802c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800803e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	4313      	orrs	r3, r2
 8008048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	f043 0307 	orr.w	r3, r3, #7
 8008088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	609a      	str	r2, [r3, #8]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	021a      	lsls	r2, r3, #8
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	431a      	orrs	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	609a      	str	r2, [r3, #8]
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 031f 	and.w	r3, r3, #31
 80080ee:	2201      	movs	r2, #1
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6a1a      	ldr	r2, [r3, #32]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	43db      	mvns	r3, r3
 80080fe:	401a      	ands	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1a      	ldr	r2, [r3, #32]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	fa01 f303 	lsl.w	r3, r1, r3
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800813c:	2302      	movs	r3, #2
 800813e:	e065      	b.n	800820c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2c      	ldr	r2, [pc, #176]	@ (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2b      	ldr	r2, [pc, #172]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d108      	bne.n	8008186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800817a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800818c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d018      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b6:	d013      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a18      	ldr	r2, [pc, #96]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00e      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a17      	ldr	r2, [pc, #92]	@ (8008224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d009      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a12      	ldr	r2, [pc, #72]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a13      	ldr	r2, [pc, #76]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10c      	bne.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40013400 	.word	0x40013400
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800
 8008228:	40014000 	.word	0x40014000

0800822c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008244:	2302      	movs	r3, #2
 8008246:	e073      	b.n	8008330 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	041b      	lsls	r3, r3, #16
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a19      	ldr	r2, [pc, #100]	@ (800833c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a18      	ldr	r2, [pc, #96]	@ (8008340 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d11c      	bne.n	800831e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ee:	051b      	lsls	r3, r3, #20
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40013400 	.word	0x40013400

08008344 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e042      	b.n	8008468 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fc f8b5 	bl	8004564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2224      	movs	r2, #36	@ 0x24
 80083fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fee0 	bl	80091e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc11 	bl	8008c48 <UART_SetConfig>
 8008426:	4603      	mov	r3, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e01b      	b.n	8008468 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800843e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800844e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 ff5f 	bl	8009324 <UART_CheckIdleState>
 8008466:	4603      	mov	r3, r0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008484:	2b20      	cmp	r3, #32
 8008486:	d167      	bne.n	8008558 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_UART_Transmit_DMA+0x24>
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e060      	b.n	800855a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	88fa      	ldrh	r2, [r7, #6]
 80084aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2221      	movs	r2, #33	@ 0x21
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d028      	beq.n	8008518 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ca:	4a26      	ldr	r2, [pc, #152]	@ (8008564 <HAL_UART_Transmit_DMA+0xf4>)
 80084cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084d2:	4a25      	ldr	r2, [pc, #148]	@ (8008568 <HAL_UART_Transmit_DMA+0xf8>)
 80084d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084da:	4a24      	ldr	r2, [pc, #144]	@ (800856c <HAL_UART_Transmit_DMA+0xfc>)
 80084dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084e2:	2200      	movs	r2, #0
 80084e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ee:	4619      	mov	r1, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3328      	adds	r3, #40	@ 0x28
 80084f6:	461a      	mov	r2, r3
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	f7fc fc1b 	bl	8004d34 <HAL_DMA_Start_IT>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2210      	movs	r2, #16
 8008508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e020      	b.n	800855a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2240      	movs	r2, #64	@ 0x40
 800851e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	613b      	str	r3, [r7, #16]
   return(result);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008536:	627b      	str	r3, [r7, #36]	@ 0x24
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008540:	623a      	str	r2, [r7, #32]
 8008542:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	69f9      	ldr	r1, [r7, #28]
 8008546:	6a3a      	ldr	r2, [r7, #32]
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	61bb      	str	r3, [r7, #24]
   return(result);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	e000      	b.n	800855a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008558:	2302      	movs	r3, #2
  }
}
 800855a:	4618      	mov	r0, r3
 800855c:	3728      	adds	r7, #40	@ 0x28
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	080096a1 	.word	0x080096a1
 8008568:	0800973b 	.word	0x0800973b
 800856c:	08009757 	.word	0x08009757

08008570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b0ba      	sub	sp, #232	@ 0xe8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800859a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800859e:	4013      	ands	r3, r2
 80085a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80085a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11b      	bne.n	80085e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d015      	beq.n	80085e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8300 	beq.w	8008bda <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
      }
      return;
 80085e2:	e2fa      	b.n	8008bda <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8123 	beq.w	8008834 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008828 <HAL_UART_IRQHandler+0x2b8>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085fe:	4b8b      	ldr	r3, [pc, #556]	@ (800882c <HAL_UART_IRQHandler+0x2bc>)
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8116 	beq.w	8008834 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_UART_IRQHandler+0xc8>
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2201      	movs	r2, #1
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862e:	f043 0201 	orr.w	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d011      	beq.n	8008668 <HAL_UART_IRQHandler+0xf8>
 8008644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2202      	movs	r2, #2
 8008656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865e:	f043 0204 	orr.w	r2, r3, #4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d011      	beq.n	8008698 <HAL_UART_IRQHandler+0x128>
 8008674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2204      	movs	r2, #4
 8008686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868e:	f043 0202 	orr.w	r2, r3, #2
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d017      	beq.n	80086d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d105      	bne.n	80086bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80086b4:	4b5c      	ldr	r3, [pc, #368]	@ (8008828 <HAL_UART_IRQHandler+0x2b8>)
 80086b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2208      	movs	r2, #8
 80086c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	f043 0208 	orr.w	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d012      	beq.n	8008706 <HAL_UART_IRQHandler+0x196>
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00c      	beq.n	8008706 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fc:	f043 0220 	orr.w	r2, r3, #32
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8266 	beq.w	8008bde <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d013      	beq.n	8008746 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800872a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875a:	2b40      	cmp	r3, #64	@ 0x40
 800875c:	d005      	beq.n	800876a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800875e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008766:	2b00      	cmp	r3, #0
 8008768:	d054      	beq.n	8008814 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 ff32 	bl	80095d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877a:	2b40      	cmp	r3, #64	@ 0x40
 800877c:	d146      	bne.n	800880c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800879c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1d9      	bne.n	800877e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d017      	beq.n	8008804 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087da:	4a15      	ldr	r2, [pc, #84]	@ (8008830 <HAL_UART_IRQHandler+0x2c0>)
 80087dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fc fb79 	bl	8004edc <HAL_DMA_Abort_IT>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d019      	beq.n	8008824 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087fe:	4610      	mov	r0, r2
 8008800:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	e00f      	b.n	8008824 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa09 	bl	8008c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880a:	e00b      	b.n	8008824 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa05 	bl	8008c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008812:	e007      	b.n	8008824 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa01 	bl	8008c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008822:	e1dc      	b.n	8008bde <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008824:	bf00      	nop
    return;
 8008826:	e1da      	b.n	8008bde <HAL_UART_IRQHandler+0x66e>
 8008828:	10000001 	.word	0x10000001
 800882c:	04000120 	.word	0x04000120
 8008830:	080097d7 	.word	0x080097d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008838:	2b01      	cmp	r3, #1
 800883a:	f040 8170 	bne.w	8008b1e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8169 	beq.w	8008b1e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800884c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 8162 	beq.w	8008b1e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2210      	movs	r2, #16
 8008860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886c:	2b40      	cmp	r3, #64	@ 0x40
 800886e:	f040 80d8 	bne.w	8008a22 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80af 	beq.w	80089e8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008890:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008894:	429a      	cmp	r2, r3
 8008896:	f080 80a7 	bcs.w	80089e8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 8087 	bne.w	80089c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1da      	bne.n	80088b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008914:	f023 0301 	bic.w	r3, r3, #1
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008926:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800892a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800892e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e1      	bne.n	8008902 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800894e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008964:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008968:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e3      	bne.n	800893e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008994:	f023 0310 	bic.w	r3, r3, #16
 8008998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e4      	bne.n	8008984 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fc fa32 	bl	8004e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f925 	bl	8008c30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80089e6:	e0fc      	b.n	8008be2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089f2:	429a      	cmp	r2, r3
 80089f4:	f040 80f5 	bne.w	8008be2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	f040 80eb 	bne.w	8008be2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f908 	bl	8008c30 <HAL_UARTEx_RxEventCallback>
      return;
 8008a20:	e0df      	b.n	8008be2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 80d1 	beq.w	8008be6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80cc 	beq.w	8008be6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e4      	bne.n	8008a4e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	623b      	str	r3, [r7, #32]
   return(result);
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008aac:	633a      	str	r2, [r7, #48]	@ 0x30
 8008aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e1      	bne.n	8008a84 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f023 0310 	bic.w	r3, r3, #16
 8008ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	617b      	str	r3, [r7, #20]
   return(result);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e4      	bne.n	8008ad4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f88a 	bl	8008c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b1c:	e063      	b.n	8008be6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <HAL_UART_IRQHandler+0x5d8>
 8008b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d008      	beq.n	8008b48 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fe85 	bl	8009850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b46:	e051      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d014      	beq.n	8008b7e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d03a      	beq.n	8008bea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
    }
    return;
 8008b7c:	e035      	b.n	8008bea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <HAL_UART_IRQHandler+0x62e>
 8008b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fe2f 	bl	80097fa <UART_EndTransmit_IT>
    return;
 8008b9c:	e026      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <HAL_UART_IRQHandler+0x64e>
 8008baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fe5e 	bl	8009878 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bbc:	e016      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <HAL_UART_IRQHandler+0x67c>
 8008bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da0c      	bge.n	8008bec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fe46 	bl	8009864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bd8:	e008      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
      return;
 8008bda:	bf00      	nop
 8008bdc:	e006      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
    return;
 8008bde:	bf00      	nop
 8008be0:	e004      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
      return;
 8008be2:	bf00      	nop
 8008be4:	e002      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
      return;
 8008be6:	bf00      	nop
 8008be8:	e000      	b.n	8008bec <HAL_UART_IRQHandler+0x67c>
    return;
 8008bea:	bf00      	nop
  }
}
 8008bec:	37e8      	adds	r7, #232	@ 0xe8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c4c:	b08c      	sub	sp, #48	@ 0x30
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	431a      	orrs	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4bab      	ldr	r3, [pc, #684]	@ (8008f24 <UART_SetConfig+0x2dc>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	6812      	ldr	r2, [r2, #0]
 8008c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c80:	430b      	orrs	r3, r1
 8008c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4aa0      	ldr	r2, [pc, #640]	@ (8008f28 <UART_SetConfig+0x2e0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d004      	beq.n	8008cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008cbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	6812      	ldr	r2, [r2, #0]
 8008cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	f023 010f 	bic.w	r1, r3, #15
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a91      	ldr	r2, [pc, #580]	@ (8008f2c <UART_SetConfig+0x2e4>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d125      	bne.n	8008d38 <UART_SetConfig+0xf0>
 8008cec:	4b90      	ldr	r3, [pc, #576]	@ (8008f30 <UART_SetConfig+0x2e8>)
 8008cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d81a      	bhi.n	8008d30 <UART_SetConfig+0xe8>
 8008cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <UART_SetConfig+0xb8>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d11 	.word	0x08008d11
 8008d04:	08008d21 	.word	0x08008d21
 8008d08:	08008d19 	.word	0x08008d19
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d16:	e0d6      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d1e:	e0d2      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d26:	e0ce      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d2e:	e0ca      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d36:	e0c6      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8008f34 <UART_SetConfig+0x2ec>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d138      	bne.n	8008db4 <UART_SetConfig+0x16c>
 8008d42:	4b7b      	ldr	r3, [pc, #492]	@ (8008f30 <UART_SetConfig+0x2e8>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d48:	f003 030c 	and.w	r3, r3, #12
 8008d4c:	2b0c      	cmp	r3, #12
 8008d4e:	d82d      	bhi.n	8008dac <UART_SetConfig+0x164>
 8008d50:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <UART_SetConfig+0x110>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008dad 	.word	0x08008dad
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008d9d 	.word	0x08008d9d
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008dad 	.word	0x08008dad
 8008d74:	08008dad 	.word	0x08008dad
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008dad 	.word	0x08008dad
 8008d80:	08008dad 	.word	0x08008dad
 8008d84:	08008dad 	.word	0x08008dad
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d92:	e098      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d94:	2302      	movs	r3, #2
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d9a:	e094      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008da2:	e090      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008da4:	2308      	movs	r3, #8
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008daa:	e08c      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008dac:	2310      	movs	r3, #16
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008db2:	e088      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a5f      	ldr	r2, [pc, #380]	@ (8008f38 <UART_SetConfig+0x2f0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d125      	bne.n	8008e0a <UART_SetConfig+0x1c2>
 8008dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8008f30 <UART_SetConfig+0x2e8>)
 8008dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008dc8:	2b30      	cmp	r3, #48	@ 0x30
 8008dca:	d016      	beq.n	8008dfa <UART_SetConfig+0x1b2>
 8008dcc:	2b30      	cmp	r3, #48	@ 0x30
 8008dce:	d818      	bhi.n	8008e02 <UART_SetConfig+0x1ba>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d00a      	beq.n	8008dea <UART_SetConfig+0x1a2>
 8008dd4:	2b20      	cmp	r3, #32
 8008dd6:	d814      	bhi.n	8008e02 <UART_SetConfig+0x1ba>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <UART_SetConfig+0x19a>
 8008ddc:	2b10      	cmp	r3, #16
 8008dde:	d008      	beq.n	8008df2 <UART_SetConfig+0x1aa>
 8008de0:	e00f      	b.n	8008e02 <UART_SetConfig+0x1ba>
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de8:	e06d      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008dea:	2302      	movs	r3, #2
 8008dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df0:	e069      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008df2:	2304      	movs	r3, #4
 8008df4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df8:	e065      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e00:	e061      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e02:	2310      	movs	r3, #16
 8008e04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e08:	e05d      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a4b      	ldr	r2, [pc, #300]	@ (8008f3c <UART_SetConfig+0x2f4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d125      	bne.n	8008e60 <UART_SetConfig+0x218>
 8008e14:	4b46      	ldr	r3, [pc, #280]	@ (8008f30 <UART_SetConfig+0x2e8>)
 8008e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e20:	d016      	beq.n	8008e50 <UART_SetConfig+0x208>
 8008e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e24:	d818      	bhi.n	8008e58 <UART_SetConfig+0x210>
 8008e26:	2b80      	cmp	r3, #128	@ 0x80
 8008e28:	d00a      	beq.n	8008e40 <UART_SetConfig+0x1f8>
 8008e2a:	2b80      	cmp	r3, #128	@ 0x80
 8008e2c:	d814      	bhi.n	8008e58 <UART_SetConfig+0x210>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <UART_SetConfig+0x1f0>
 8008e32:	2b40      	cmp	r3, #64	@ 0x40
 8008e34:	d008      	beq.n	8008e48 <UART_SetConfig+0x200>
 8008e36:	e00f      	b.n	8008e58 <UART_SetConfig+0x210>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	e042      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e40:	2302      	movs	r3, #2
 8008e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e46:	e03e      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e4e:	e03a      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e50:	2308      	movs	r3, #8
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e56:	e036      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e5e:	e032      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a30      	ldr	r2, [pc, #192]	@ (8008f28 <UART_SetConfig+0x2e0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d12a      	bne.n	8008ec0 <UART_SetConfig+0x278>
 8008e6a:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <UART_SetConfig+0x2e8>)
 8008e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e78:	d01a      	beq.n	8008eb0 <UART_SetConfig+0x268>
 8008e7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e7e:	d81b      	bhi.n	8008eb8 <UART_SetConfig+0x270>
 8008e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e84:	d00c      	beq.n	8008ea0 <UART_SetConfig+0x258>
 8008e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e8a:	d815      	bhi.n	8008eb8 <UART_SetConfig+0x270>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <UART_SetConfig+0x250>
 8008e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e94:	d008      	beq.n	8008ea8 <UART_SetConfig+0x260>
 8008e96:	e00f      	b.n	8008eb8 <UART_SetConfig+0x270>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e012      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e00e      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008ea8:	2304      	movs	r3, #4
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e00a      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb6:	e006      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008eb8:	2310      	movs	r3, #16
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ebe:	e002      	b.n	8008ec6 <UART_SetConfig+0x27e>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a17      	ldr	r2, [pc, #92]	@ (8008f28 <UART_SetConfig+0x2e0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	f040 80a8 	bne.w	8009022 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d834      	bhi.n	8008f44 <UART_SetConfig+0x2fc>
 8008eda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <UART_SetConfig+0x298>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f45 	.word	0x08008f45
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f45 	.word	0x08008f45
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f45 	.word	0x08008f45
 8008f00:	08008f1b 	.word	0x08008f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fd fa0c 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8008f08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f0a:	e021      	b.n	8008f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <UART_SetConfig+0x2f8>)
 8008f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f10:	e01e      	b.n	8008f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f12:	f7fd f997 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8008f16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f18:	e01a      	b.n	8008f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f20:	e016      	b.n	8008f50 <UART_SetConfig+0x308>
 8008f22:	bf00      	nop
 8008f24:	cfff69f3 	.word	0xcfff69f3
 8008f28:	40008000 	.word	0x40008000
 8008f2c:	40013800 	.word	0x40013800
 8008f30:	40021000 	.word	0x40021000
 8008f34:	40004400 	.word	0x40004400
 8008f38:	40004800 	.word	0x40004800
 8008f3c:	40004c00 	.word	0x40004c00
 8008f40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 812a 	beq.w	80091ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	4a9e      	ldr	r2, [pc, #632]	@ (80091d8 <UART_SetConfig+0x590>)
 8008f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f62:	461a      	mov	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	4613      	mov	r3, r2
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	4413      	add	r3, r2
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d305      	bcc.n	8008f88 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f8e:	e10d      	b.n	80091ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	2200      	movs	r2, #0
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	60fa      	str	r2, [r7, #12]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9c:	4a8e      	ldr	r2, [pc, #568]	@ (80091d8 <UART_SetConfig+0x590>)
 8008f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fb2:	f7f7 fd7f 	bl	8000ab4 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	020b      	lsls	r3, r1, #8
 8008fc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fcc:	0202      	lsls	r2, r0, #8
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	6849      	ldr	r1, [r1, #4]
 8008fd2:	0849      	lsrs	r1, r1, #1
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	4605      	mov	r5, r0
 8008fda:	eb12 0804 	adds.w	r8, r2, r4
 8008fde:	eb43 0905 	adc.w	r9, r3, r5
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	469a      	mov	sl, r3
 8008fea:	4693      	mov	fp, r2
 8008fec:	4652      	mov	r2, sl
 8008fee:	465b      	mov	r3, fp
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 fd5e 	bl	8000ab4 <__aeabi_uldivmod>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009006:	d308      	bcc.n	800901a <UART_SetConfig+0x3d2>
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800900e:	d204      	bcs.n	800901a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6a3a      	ldr	r2, [r7, #32]
 8009016:	60da      	str	r2, [r3, #12]
 8009018:	e0c8      	b.n	80091ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009020:	e0c4      	b.n	80091ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800902a:	d167      	bne.n	80090fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800902c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009030:	2b08      	cmp	r3, #8
 8009032:	d828      	bhi.n	8009086 <UART_SetConfig+0x43e>
 8009034:	a201      	add	r2, pc, #4	@ (adr r2, 800903c <UART_SetConfig+0x3f4>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	08009061 	.word	0x08009061
 8009040:	08009069 	.word	0x08009069
 8009044:	08009071 	.word	0x08009071
 8009048:	08009087 	.word	0x08009087
 800904c:	08009077 	.word	0x08009077
 8009050:	08009087 	.word	0x08009087
 8009054:	08009087 	.word	0x08009087
 8009058:	08009087 	.word	0x08009087
 800905c:	0800907f 	.word	0x0800907f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fd f95e 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8009064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009066:	e014      	b.n	8009092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009068:	f7fd f970 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 800906c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800906e:	e010      	b.n	8009092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009070:	4b5a      	ldr	r3, [pc, #360]	@ (80091dc <UART_SetConfig+0x594>)
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009074:	e00d      	b.n	8009092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009076:	f7fd f8e5 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 800907a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800907c:	e009      	b.n	8009092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009084:	e005      	b.n	8009092 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8089 	beq.w	80091ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909e:	4a4e      	ldr	r2, [pc, #312]	@ (80091d8 <UART_SetConfig+0x590>)
 80090a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ac:	005a      	lsls	r2, r3, #1
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	441a      	add	r2, r3
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d916      	bls.n	80090f4 <UART_SetConfig+0x4ac>
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090cc:	d212      	bcs.n	80090f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f023 030f 	bic.w	r3, r3, #15
 80090d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b29b      	uxth	r3, r3
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	8bfb      	ldrh	r3, [r7, #30]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	8bfa      	ldrh	r2, [r7, #30]
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	e05b      	b.n	80091ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090fa:	e057      	b.n	80091ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009100:	2b08      	cmp	r3, #8
 8009102:	d828      	bhi.n	8009156 <UART_SetConfig+0x50e>
 8009104:	a201      	add	r2, pc, #4	@ (adr r2, 800910c <UART_SetConfig+0x4c4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009131 	.word	0x08009131
 8009110:	08009139 	.word	0x08009139
 8009114:	08009141 	.word	0x08009141
 8009118:	08009157 	.word	0x08009157
 800911c:	08009147 	.word	0x08009147
 8009120:	08009157 	.word	0x08009157
 8009124:	08009157 	.word	0x08009157
 8009128:	08009157 	.word	0x08009157
 800912c:	0800914f 	.word	0x0800914f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009130:	f7fd f8f6 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8009134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009136:	e014      	b.n	8009162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009138:	f7fd f908 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 800913c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800913e:	e010      	b.n	8009162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009140:	4b26      	ldr	r3, [pc, #152]	@ (80091dc <UART_SetConfig+0x594>)
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009144:	e00d      	b.n	8009162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009146:	f7fd f87d 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 800914a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800914c:	e009      	b.n	8009162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800914e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009154:	e005      	b.n	8009162 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009160:	bf00      	nop
    }

    if (pclk != 0U)
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	2b00      	cmp	r3, #0
 8009166:	d021      	beq.n	80091ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	4a1a      	ldr	r2, [pc, #104]	@ (80091d8 <UART_SetConfig+0x590>)
 800916e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009172:	461a      	mov	r2, r3
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	fbb3 f2f2 	udiv	r2, r3, r2
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	441a      	add	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d909      	bls.n	80091a6 <UART_SetConfig+0x55e>
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009198:	d205      	bcs.n	80091a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	b29a      	uxth	r2, r3
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60da      	str	r2, [r3, #12]
 80091a4:	e002      	b.n	80091ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2200      	movs	r2, #0
 80091c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2200      	movs	r2, #0
 80091c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3730      	adds	r7, #48	@ 0x30
 80091d0:	46bd      	mov	sp, r7
 80091d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091d6:	bf00      	nop
 80091d8:	0800a108 	.word	0x0800a108
 80091dc:	00f42400 	.word	0x00f42400

080091e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01a      	beq.n	80092f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092de:	d10a      	bne.n	80092f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	605a      	str	r2, [r3, #4]
  }
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b098      	sub	sp, #96	@ 0x60
 8009328:	af02      	add	r7, sp, #8
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009334:	f7fb fb3a 	bl	80049ac <HAL_GetTick>
 8009338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b08      	cmp	r3, #8
 8009346:	d12f      	bne.n	80093a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009350:	2200      	movs	r2, #0
 8009352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f88e 	bl	8009478 <UART_WaitOnFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d022      	beq.n	80093a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009376:	653b      	str	r3, [r7, #80]	@ 0x50
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009380:	647b      	str	r3, [r7, #68]	@ 0x44
 8009382:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e063      	b.n	8009470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d149      	bne.n	800944a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093be:	2200      	movs	r2, #0
 80093c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f857 	bl	8009478 <UART_WaitOnFlagUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d03c      	beq.n	800944a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	623b      	str	r3, [r7, #32]
   return(result);
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80093f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e6      	bne.n	80093d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	60fb      	str	r3, [r7, #12]
   return(result);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009422:	61fa      	str	r2, [r7, #28]
 8009424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	69b9      	ldr	r1, [r7, #24]
 8009428:	69fa      	ldr	r2, [r7, #28]
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	617b      	str	r3, [r7, #20]
   return(result);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e5      	bne.n	8009402 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e012      	b.n	8009470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2220      	movs	r2, #32
 800944e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3758      	adds	r7, #88	@ 0x58
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009488:	e04f      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d04b      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009492:	f7fb fa8b 	bl	80049ac <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e04e      	b.n	800954a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d037      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b80      	cmp	r3, #128	@ 0x80
 80094be:	d034      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b40      	cmp	r3, #64	@ 0x40
 80094c4:	d031      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f003 0308 	and.w	r3, r3, #8
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d110      	bne.n	80094f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2208      	movs	r2, #8
 80094da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 f879 	bl	80095d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2208      	movs	r2, #8
 80094e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e029      	b.n	800954a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009504:	d111      	bne.n	800952a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800950e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f85f 	bl	80095d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e00f      	b.n	800954a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	4013      	ands	r3, r2
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	429a      	cmp	r2, r3
 8009538:	bf0c      	ite	eq
 800953a:	2301      	moveq	r3, #1
 800953c:	2300      	movne	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	461a      	mov	r2, r3
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	429a      	cmp	r2, r3
 8009546:	d0a0      	beq.n	800948a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009552:	b480      	push	{r7}
 8009554:	b08f      	sub	sp, #60	@ 0x3c
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	61fb      	str	r3, [r7, #28]
   return(result);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800956e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800957a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800957e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e6      	bne.n	800955a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	60bb      	str	r3, [r7, #8]
   return(result);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80095a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ac:	61ba      	str	r2, [r7, #24]
 80095ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6979      	ldr	r1, [r7, #20]
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80095c8:	bf00      	nop
 80095ca:	373c      	adds	r7, #60	@ 0x3c
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b095      	sub	sp, #84	@ 0x54
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80095fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e6      	bne.n	80095dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	61fb      	str	r3, [r7, #28]
   return(result);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e3      	bne.n	800960e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800964a:	2b01      	cmp	r3, #1
 800964c:	d118      	bne.n	8009680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	60bb      	str	r3, [r7, #8]
   return(result);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f023 0310 	bic.w	r3, r3, #16
 8009662:	647b      	str	r3, [r7, #68]	@ 0x44
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	613b      	str	r3, [r7, #16]
   return(result);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e6      	bne.n	800964e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009694:	bf00      	nop
 8009696:	3754      	adds	r7, #84	@ 0x54
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b090      	sub	sp, #64	@ 0x40
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d137      	bne.n	800972c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80096bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096be:	2200      	movs	r2, #0
 80096c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	623b      	str	r3, [r7, #32]
   return(result);
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80096dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e5      	bne.n	80096c4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	60fb      	str	r3, [r7, #12]
   return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
 800970e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	617b      	str	r3, [r7, #20]
   return(result);
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e6      	bne.n	80096f8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800972a:	e002      	b.n	8009732 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800972c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800972e:	f7ff fa61 	bl	8008bf4 <HAL_UART_TxCpltCallback>
}
 8009732:	bf00      	nop
 8009734:	3740      	adds	r7, #64	@ 0x40
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009746:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff fa5d 	bl	8008c08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009772:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800977e:	2b80      	cmp	r3, #128	@ 0x80
 8009780:	d109      	bne.n	8009796 <UART_DMAError+0x40>
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b21      	cmp	r3, #33	@ 0x21
 8009786:	d106      	bne.n	8009796 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009790:	6978      	ldr	r0, [r7, #20]
 8009792:	f7ff fede 	bl	8009552 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a0:	2b40      	cmp	r3, #64	@ 0x40
 80097a2:	d109      	bne.n	80097b8 <UART_DMAError+0x62>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b22      	cmp	r3, #34	@ 0x22
 80097a8:	d106      	bne.n	80097b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f7ff ff0e 	bl	80095d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097be:	f043 0210 	orr.w	r2, r3, #16
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097c8:	6978      	ldr	r0, [r7, #20]
 80097ca:	f7ff fa27 	bl	8008c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff fa15 	bl	8008c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6979      	ldr	r1, [r7, #20]
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	613b      	str	r3, [r7, #16]
   return(result);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff f9d6 	bl	8008bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009848:	bf00      	nop
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800989e:	2302      	movs	r3, #2
 80098a0:	e027      	b.n	80098f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2224      	movs	r2, #36	@ 0x24
 80098ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009912:	2302      	movs	r3, #2
 8009914:	e02d      	b.n	8009972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2224      	movs	r2, #36	@ 0x24
 8009922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0201 	bic.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f850 	bl	80099f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998e:	2302      	movs	r3, #2
 8009990:	e02d      	b.n	80099ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	@ 0x24
 800999e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f812 	bl	80099f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d108      	bne.n	8009a1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a18:	e031      	b.n	8009a7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a1e:	2308      	movs	r3, #8
 8009a20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	0e5b      	lsrs	r3, r3, #25
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 0307 	and.w	r3, r3, #7
 8009a30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	0f5b      	lsrs	r3, r3, #29
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	7b3a      	ldrb	r2, [r7, #12]
 8009a46:	4911      	ldr	r1, [pc, #68]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x94>)
 8009a48:	5c8a      	ldrb	r2, [r1, r2]
 8009a4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a4e:	7b3a      	ldrb	r2, [r7, #12]
 8009a50:	490f      	ldr	r1, [pc, #60]	@ (8009a90 <UARTEx_SetNbDataToProcess+0x98>)
 8009a52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	7b7a      	ldrb	r2, [r7, #13]
 8009a64:	4909      	ldr	r1, [pc, #36]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x94>)
 8009a66:	5c8a      	ldrb	r2, [r1, r2]
 8009a68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a6c:	7b7a      	ldrb	r2, [r7, #13]
 8009a6e:	4908      	ldr	r1, [pc, #32]	@ (8009a90 <UARTEx_SetNbDataToProcess+0x98>)
 8009a70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a72:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	0800a120 	.word	0x0800a120
 8009a90:	0800a128 	.word	0x0800a128

08009a94 <realloc>:
 8009a94:	4b02      	ldr	r3, [pc, #8]	@ (8009aa0 <realloc+0xc>)
 8009a96:	460a      	mov	r2, r1
 8009a98:	4601      	mov	r1, r0
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	f000 b802 	b.w	8009aa4 <_realloc_r>
 8009aa0:	20000010 	.word	0x20000010

08009aa4 <_realloc_r>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	4615      	mov	r5, r2
 8009aac:	460c      	mov	r4, r1
 8009aae:	b921      	cbnz	r1, 8009aba <_realloc_r+0x16>
 8009ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	f000 b8d1 	b.w	8009c5c <_malloc_r>
 8009aba:	b92a      	cbnz	r2, 8009ac8 <_realloc_r+0x24>
 8009abc:	f000 f862 	bl	8009b84 <_free_r>
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac8:	f000 f954 	bl	8009d74 <_malloc_usable_size_r>
 8009acc:	4285      	cmp	r5, r0
 8009ace:	4606      	mov	r6, r0
 8009ad0:	d802      	bhi.n	8009ad8 <_realloc_r+0x34>
 8009ad2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ad6:	d8f4      	bhi.n	8009ac2 <_realloc_r+0x1e>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4640      	mov	r0, r8
 8009adc:	f000 f8be 	bl	8009c5c <_malloc_r>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d0ec      	beq.n	8009ac0 <_realloc_r+0x1c>
 8009ae6:	42b5      	cmp	r5, r6
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4621      	mov	r1, r4
 8009aec:	bf28      	it	cs
 8009aee:	4632      	movcs	r2, r6
 8009af0:	f000 f83a 	bl	8009b68 <memcpy>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4640      	mov	r0, r8
 8009af8:	f000 f844 	bl	8009b84 <_free_r>
 8009afc:	463c      	mov	r4, r7
 8009afe:	e7e0      	b.n	8009ac2 <_realloc_r+0x1e>

08009b00 <memset>:
 8009b00:	4402      	add	r2, r0
 8009b02:	4603      	mov	r3, r0
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d100      	bne.n	8009b0a <memset+0xa>
 8009b08:	4770      	bx	lr
 8009b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0e:	e7f9      	b.n	8009b04 <memset+0x4>

08009b10 <__errno>:
 8009b10:	4b01      	ldr	r3, [pc, #4]	@ (8009b18 <__errno+0x8>)
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20000010 	.word	0x20000010

08009b1c <__libc_init_array>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b54 <__libc_init_array+0x38>)
 8009b20:	4c0d      	ldr	r4, [pc, #52]	@ (8009b58 <__libc_init_array+0x3c>)
 8009b22:	1b64      	subs	r4, r4, r5
 8009b24:	10a4      	asrs	r4, r4, #2
 8009b26:	2600      	movs	r6, #0
 8009b28:	42a6      	cmp	r6, r4
 8009b2a:	d109      	bne.n	8009b40 <__libc_init_array+0x24>
 8009b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b5c <__libc_init_array+0x40>)
 8009b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b60 <__libc_init_array+0x44>)
 8009b30:	f000 f938 	bl	8009da4 <_init>
 8009b34:	1b64      	subs	r4, r4, r5
 8009b36:	10a4      	asrs	r4, r4, #2
 8009b38:	2600      	movs	r6, #0
 8009b3a:	42a6      	cmp	r6, r4
 8009b3c:	d105      	bne.n	8009b4a <__libc_init_array+0x2e>
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b44:	4798      	blx	r3
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7ee      	b.n	8009b28 <__libc_init_array+0xc>
 8009b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4e:	4798      	blx	r3
 8009b50:	3601      	adds	r6, #1
 8009b52:	e7f2      	b.n	8009b3a <__libc_init_array+0x1e>
 8009b54:	0800a138 	.word	0x0800a138
 8009b58:	0800a138 	.word	0x0800a138
 8009b5c:	0800a138 	.word	0x0800a138
 8009b60:	0800a144 	.word	0x0800a144

08009b64 <__retarget_lock_acquire_recursive>:
 8009b64:	4770      	bx	lr

08009b66 <__retarget_lock_release_recursive>:
 8009b66:	4770      	bx	lr

08009b68 <memcpy>:
 8009b68:	440a      	add	r2, r1
 8009b6a:	4291      	cmp	r1, r2
 8009b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b70:	d100      	bne.n	8009b74 <memcpy+0xc>
 8009b72:	4770      	bx	lr
 8009b74:	b510      	push	{r4, lr}
 8009b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b7e:	4291      	cmp	r1, r2
 8009b80:	d1f9      	bne.n	8009b76 <memcpy+0xe>
 8009b82:	bd10      	pop	{r4, pc}

08009b84 <_free_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4605      	mov	r5, r0
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	d041      	beq.n	8009c10 <_free_r+0x8c>
 8009b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b90:	1f0c      	subs	r4, r1, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bfb8      	it	lt
 8009b96:	18e4      	addlt	r4, r4, r3
 8009b98:	f000 f8e0 	bl	8009d5c <__malloc_lock>
 8009b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c14 <_free_r+0x90>)
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	b933      	cbnz	r3, 8009bb0 <_free_r+0x2c>
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	6014      	str	r4, [r2, #0]
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bac:	f000 b8dc 	b.w	8009d68 <__malloc_unlock>
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d908      	bls.n	8009bc6 <_free_r+0x42>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	1821      	adds	r1, r4, r0
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf01      	itttt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	1809      	addeq	r1, r1, r0
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	e7ed      	b.n	8009ba2 <_free_r+0x1e>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	b10b      	cbz	r3, 8009bd0 <_free_r+0x4c>
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	d9fa      	bls.n	8009bc6 <_free_r+0x42>
 8009bd0:	6811      	ldr	r1, [r2, #0]
 8009bd2:	1850      	adds	r0, r2, r1
 8009bd4:	42a0      	cmp	r0, r4
 8009bd6:	d10b      	bne.n	8009bf0 <_free_r+0x6c>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	4401      	add	r1, r0
 8009bdc:	1850      	adds	r0, r2, r1
 8009bde:	4283      	cmp	r3, r0
 8009be0:	6011      	str	r1, [r2, #0]
 8009be2:	d1e0      	bne.n	8009ba6 <_free_r+0x22>
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	6053      	str	r3, [r2, #4]
 8009bea:	4408      	add	r0, r1
 8009bec:	6010      	str	r0, [r2, #0]
 8009bee:	e7da      	b.n	8009ba6 <_free_r+0x22>
 8009bf0:	d902      	bls.n	8009bf8 <_free_r+0x74>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	e7d6      	b.n	8009ba6 <_free_r+0x22>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	1821      	adds	r1, r4, r0
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf04      	itt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	bf04      	itt	eq
 8009c08:	1809      	addeq	r1, r1, r0
 8009c0a:	6021      	streq	r1, [r4, #0]
 8009c0c:	6054      	str	r4, [r2, #4]
 8009c0e:	e7ca      	b.n	8009ba6 <_free_r+0x22>
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	bf00      	nop
 8009c14:	20001c38 	.word	0x20001c38

08009c18 <sbrk_aligned>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8009c58 <sbrk_aligned+0x40>)
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	6831      	ldr	r1, [r6, #0]
 8009c20:	4605      	mov	r5, r0
 8009c22:	b911      	cbnz	r1, 8009c2a <sbrk_aligned+0x12>
 8009c24:	f000 f8ae 	bl	8009d84 <_sbrk_r>
 8009c28:	6030      	str	r0, [r6, #0]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f000 f8a9 	bl	8009d84 <_sbrk_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	d103      	bne.n	8009c3e <sbrk_aligned+0x26>
 8009c36:	f04f 34ff 	mov.w	r4, #4294967295
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
 8009c3e:	1cc4      	adds	r4, r0, #3
 8009c40:	f024 0403 	bic.w	r4, r4, #3
 8009c44:	42a0      	cmp	r0, r4
 8009c46:	d0f8      	beq.n	8009c3a <sbrk_aligned+0x22>
 8009c48:	1a21      	subs	r1, r4, r0
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f000 f89a 	bl	8009d84 <_sbrk_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	d1f2      	bne.n	8009c3a <sbrk_aligned+0x22>
 8009c54:	e7ef      	b.n	8009c36 <sbrk_aligned+0x1e>
 8009c56:	bf00      	nop
 8009c58:	20001c34 	.word	0x20001c34

08009c5c <_malloc_r>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	1ccd      	adds	r5, r1, #3
 8009c62:	f025 0503 	bic.w	r5, r5, #3
 8009c66:	3508      	adds	r5, #8
 8009c68:	2d0c      	cmp	r5, #12
 8009c6a:	bf38      	it	cc
 8009c6c:	250c      	movcc	r5, #12
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	4606      	mov	r6, r0
 8009c72:	db01      	blt.n	8009c78 <_malloc_r+0x1c>
 8009c74:	42a9      	cmp	r1, r5
 8009c76:	d904      	bls.n	8009c82 <_malloc_r+0x26>
 8009c78:	230c      	movs	r3, #12
 8009c7a:	6033      	str	r3, [r6, #0]
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d58 <_malloc_r+0xfc>
 8009c86:	f000 f869 	bl	8009d5c <__malloc_lock>
 8009c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c8e:	461c      	mov	r4, r3
 8009c90:	bb44      	cbnz	r4, 8009ce4 <_malloc_r+0x88>
 8009c92:	4629      	mov	r1, r5
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff ffbf 	bl	8009c18 <sbrk_aligned>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	d158      	bne.n	8009d52 <_malloc_r+0xf6>
 8009ca0:	f8d8 4000 	ldr.w	r4, [r8]
 8009ca4:	4627      	mov	r7, r4
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	d143      	bne.n	8009d32 <_malloc_r+0xd6>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	d04b      	beq.n	8009d46 <_malloc_r+0xea>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	eb04 0903 	add.w	r9, r4, r3
 8009cb8:	f000 f864 	bl	8009d84 <_sbrk_r>
 8009cbc:	4581      	cmp	r9, r0
 8009cbe:	d142      	bne.n	8009d46 <_malloc_r+0xea>
 8009cc0:	6821      	ldr	r1, [r4, #0]
 8009cc2:	1a6d      	subs	r5, r5, r1
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff ffa6 	bl	8009c18 <sbrk_aligned>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d03a      	beq.n	8009d46 <_malloc_r+0xea>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	442b      	add	r3, r5
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	bb62      	cbnz	r2, 8009d38 <_malloc_r+0xdc>
 8009cde:	f8c8 7000 	str.w	r7, [r8]
 8009ce2:	e00f      	b.n	8009d04 <_malloc_r+0xa8>
 8009ce4:	6822      	ldr	r2, [r4, #0]
 8009ce6:	1b52      	subs	r2, r2, r5
 8009ce8:	d420      	bmi.n	8009d2c <_malloc_r+0xd0>
 8009cea:	2a0b      	cmp	r2, #11
 8009cec:	d917      	bls.n	8009d1e <_malloc_r+0xc2>
 8009cee:	1961      	adds	r1, r4, r5
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	6025      	str	r5, [r4, #0]
 8009cf4:	bf18      	it	ne
 8009cf6:	6059      	strne	r1, [r3, #4]
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	bf08      	it	eq
 8009cfc:	f8c8 1000 	streq.w	r1, [r8]
 8009d00:	5162      	str	r2, [r4, r5]
 8009d02:	604b      	str	r3, [r1, #4]
 8009d04:	4630      	mov	r0, r6
 8009d06:	f000 f82f 	bl	8009d68 <__malloc_unlock>
 8009d0a:	f104 000b 	add.w	r0, r4, #11
 8009d0e:	1d23      	adds	r3, r4, #4
 8009d10:	f020 0007 	bic.w	r0, r0, #7
 8009d14:	1ac2      	subs	r2, r0, r3
 8009d16:	bf1c      	itt	ne
 8009d18:	1a1b      	subne	r3, r3, r0
 8009d1a:	50a3      	strne	r3, [r4, r2]
 8009d1c:	e7af      	b.n	8009c7e <_malloc_r+0x22>
 8009d1e:	6862      	ldr	r2, [r4, #4]
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	bf0c      	ite	eq
 8009d24:	f8c8 2000 	streq.w	r2, [r8]
 8009d28:	605a      	strne	r2, [r3, #4]
 8009d2a:	e7eb      	b.n	8009d04 <_malloc_r+0xa8>
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	6864      	ldr	r4, [r4, #4]
 8009d30:	e7ae      	b.n	8009c90 <_malloc_r+0x34>
 8009d32:	463c      	mov	r4, r7
 8009d34:	687f      	ldr	r7, [r7, #4]
 8009d36:	e7b6      	b.n	8009ca6 <_malloc_r+0x4a>
 8009d38:	461a      	mov	r2, r3
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d1fb      	bne.n	8009d38 <_malloc_r+0xdc>
 8009d40:	2300      	movs	r3, #0
 8009d42:	6053      	str	r3, [r2, #4]
 8009d44:	e7de      	b.n	8009d04 <_malloc_r+0xa8>
 8009d46:	230c      	movs	r3, #12
 8009d48:	6033      	str	r3, [r6, #0]
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 f80c 	bl	8009d68 <__malloc_unlock>
 8009d50:	e794      	b.n	8009c7c <_malloc_r+0x20>
 8009d52:	6005      	str	r5, [r0, #0]
 8009d54:	e7d6      	b.n	8009d04 <_malloc_r+0xa8>
 8009d56:	bf00      	nop
 8009d58:	20001c38 	.word	0x20001c38

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	@ (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f7ff bf01 	b.w	8009b64 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20001c30 	.word	0x20001c30

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	@ (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f7ff befc 	b.w	8009b66 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20001c30 	.word	0x20001c30

08009d74 <_malloc_usable_size_r>:
 8009d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d78:	1f18      	subs	r0, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bfbc      	itt	lt
 8009d7e:	580b      	ldrlt	r3, [r1, r0]
 8009d80:	18c0      	addlt	r0, r0, r3
 8009d82:	4770      	bx	lr

08009d84 <_sbrk_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4d06      	ldr	r5, [pc, #24]	@ (8009da0 <_sbrk_r+0x1c>)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7fa fd36 	bl	8004800 <_sbrk>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_sbrk_r+0x1a>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_sbrk_r+0x1a>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	20001c2c 	.word	0x20001c2c

08009da4 <_init>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr

08009db0 <_fini>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	bf00      	nop
 8009db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db6:	bc08      	pop	{r3}
 8009db8:	469e      	mov	lr, r3
 8009dba:	4770      	bx	lr
