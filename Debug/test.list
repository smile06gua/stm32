
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004228  08004228  00005228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004238  08004238  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004238  08004238  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004238  08004238  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004238  08004238  00005238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004244  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000010  08004254  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004254  0000630c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113bb  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286a  00000000  00000000  000173fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00019c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccc  00000000  00000000  0001ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042c6  00000000  00000000  0001b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138b1  00000000  00000000  0001fc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c534b  00000000  00000000  0003352b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  000f88bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fcde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004210 	.word	0x08004210

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004210 	.word	0x08004210

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fff7 	bl	800120e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f812 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fae2 	bl	80007ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f88e 	bl	8000348 <MX_TIM1_Init>
  MX_TIM2_Init();
 800022c:	f000 f944 	bl	80004b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000230:	f000 f990 	bl	8000554 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000234:	f000 f9e4 	bl	8000600 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000238:	f000 fa38 	bl	80006ac <MX_TIM8_Init>
  MX_I2C1_Init();
 800023c:	f000 f844 	bl	80002c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000240:	f000 fbf2 	bl	8000a28 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	bf00      	nop
 8000246:	e7fd      	b.n	8000244 <main+0x2c>

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	@ 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2238      	movs	r2, #56	@ 0x38
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 ffae 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800026e:	f001 fc1b 	bl	8001aa8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2340      	movs	r3, #64	@ 0x40
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fcc1 	bl	8001c10 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000294:	f000 fb22 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 ffbf 	bl	8002234 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002bc:	f000 fb0e 	bl	80008dc <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	@ 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <MX_I2C1_Init+0x74>)
 80002d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000344 <MX_I2C1_Init+0x7c>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	@ (800033c <MX_I2C1_Init+0x74>)
 8000304:	f001 fa9e 	bl	8001844 <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 fae5 	bl	80008dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <MX_I2C1_Init+0x74>)
 8000316:	f001 fb30 	bl	800197a <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 fadc 	bl	80008dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_I2C1_Init+0x74>)
 8000328:	f001 fb72 	bl	8001a10 <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 fad3 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000002c 	.word	0x2000002c
 8000340:	40005400 	.word	0x40005400
 8000344:	00503d58 	.word	0x00503d58

08000348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b098      	sub	sp, #96	@ 0x60
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800035a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
 800036a:	615a      	str	r2, [r3, #20]
 800036c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2234      	movs	r2, #52	@ 0x34
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f003 ff1f 	bl	80041b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800037a:	4b4d      	ldr	r3, [pc, #308]	@ (80004b0 <MX_TIM1_Init+0x168>)
 800037c:	4a4d      	ldr	r2, [pc, #308]	@ (80004b4 <MX_TIM1_Init+0x16c>)
 800037e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000380:	4b4b      	ldr	r3, [pc, #300]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000382:	220f      	movs	r2, #15
 8000384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	4b4a      	ldr	r3, [pc, #296]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800038c:	4b48      	ldr	r3, [pc, #288]	@ (80004b0 <MX_TIM1_Init+0x168>)
 800038e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000392:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000394:	4b46      	ldr	r3, [pc, #280]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800039a:	4b45      	ldr	r3, [pc, #276]	@ (80004b0 <MX_TIM1_Init+0x168>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <MX_TIM1_Init+0x168>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003a6:	4842      	ldr	r0, [pc, #264]	@ (80004b0 <MX_TIM1_Init+0x168>)
 80003a8:	f002 fbda 	bl	8002b60 <HAL_TIM_PWM_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 fa93 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b6:	2300      	movs	r3, #0
 80003b8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003ba:	2300      	movs	r3, #0
 80003bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003c6:	4619      	mov	r1, r3
 80003c8:	4839      	ldr	r0, [pc, #228]	@ (80004b0 <MX_TIM1_Init+0x168>)
 80003ca:	f003 fda1 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003d4:	f000 fa82 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d8:	2360      	movs	r3, #96	@ 0x60
 80003da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003e0:	2300      	movs	r3, #0
 80003e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003e4:	2300      	movs	r3, #0
 80003e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003f8:	2200      	movs	r2, #0
 80003fa:	4619      	mov	r1, r3
 80003fc:	482c      	ldr	r0, [pc, #176]	@ (80004b0 <MX_TIM1_Init+0x168>)
 80003fe:	f002 fefd 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000408:	f000 fa68 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800040c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000410:	2204      	movs	r2, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4826      	ldr	r0, [pc, #152]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000416:	f002 fef1 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000420:	f000 fa5c 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000424:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000428:	2208      	movs	r2, #8
 800042a:	4619      	mov	r1, r3
 800042c:	4820      	ldr	r0, [pc, #128]	@ (80004b0 <MX_TIM1_Init+0x168>)
 800042e:	f002 fee5 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000438:	f000 fa50 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800043c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000440:	220c      	movs	r2, #12
 8000442:	4619      	mov	r1, r3
 8000444:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000446:	f002 fed9 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000450:	f000 fa44 	bl	80008dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800047a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800047e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <MX_TIM1_Init+0x168>)
 8000492:	f003 fdbf 	bl	8004014 <HAL_TIMEx_ConfigBreakDeadTime>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800049c:	f000 fa1e 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004a0:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <MX_TIM1_Init+0x168>)
 80004a2:	f000 fdad 	bl	8001000 <HAL_TIM_MspPostInit>

}
 80004a6:	bf00      	nop
 80004a8:	3760      	adds	r7, #96	@ 0x60
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000080 	.word	0x20000080
 80004b4:	40012c00 	.word	0x40012c00

080004b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004e0:	220f      	movs	r2, #15
 80004e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_TIM2_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004fe:	4814      	ldr	r0, [pc, #80]	@ (8000550 <MX_TIM2_Init+0x98>)
 8000500:	f002 fa6c 	bl	80029dc <HAL_TIM_Base_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800050a:	f000 f9e7 	bl	80008dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800050e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000512:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	480d      	ldr	r0, [pc, #52]	@ (8000550 <MX_TIM2_Init+0x98>)
 800051c:	f002 ff82 	bl	8003424 <HAL_TIM_ConfigClockSource>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000526:	f000 f9d9 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	@ (8000550 <MX_TIM2_Init+0x98>)
 8000538:	f003 fcea 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000542:	f000 f9cb 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000cc 	.word	0x200000cc

08000554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	@ 0x30
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2224      	movs	r2, #36	@ 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fe28 	bl	80041b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_TIM3_Init+0xa8>)
 8000576:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 8000586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800058a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000598:	2301      	movs	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 80005c4:	f002 fc24 	bl	8002e10 <HAL_TIM_Encoder_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80005ce:	f000 f985 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	@ (80005f8 <MX_TIM3_Init+0xa4>)
 80005e0:	f003 fc96 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80005ea:	f000 f977 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3730      	adds	r7, #48	@ 0x30
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000118 	.word	0x20000118
 80005fc:	40000400 	.word	0x40000400

08000600 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	@ 0x30
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2224      	movs	r2, #36	@ 0x24
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fdd2 	bl	80041b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_TIM4_Init+0xa8>)
 8000622:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 8000632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000636:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000644:	2301      	movs	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800064c:	2301      	movs	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800065c:	2301      	movs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 8000670:	f002 fbce 	bl	8002e10 <HAL_TIM_Encoder_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800067a:	f000 f92f 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_TIM4_Init+0xa4>)
 800068c:	f003 fc40 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000696:	f000 f921 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000164 	.word	0x20000164
 80006a8:	40000800 	.word	0x40000800

080006ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b098      	sub	sp, #96	@ 0x60
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2234      	movs	r2, #52	@ 0x34
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fd6d 	bl	80041b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80006e0:	4a41      	ldr	r2, [pc, #260]	@ (80007e8 <MX_TIM8_Init+0x13c>)
 80006e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80006e4:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80006e6:	220f      	movs	r2, #15
 80006e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b3e      	ldr	r3, [pc, #248]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80006f0:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80006f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006fe:	4b39      	ldr	r3, [pc, #228]	@ (80007e4 <MX_TIM8_Init+0x138>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b37      	ldr	r3, [pc, #220]	@ (80007e4 <MX_TIM8_Init+0x138>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800070a:	4836      	ldr	r0, [pc, #216]	@ (80007e4 <MX_TIM8_Init+0x138>)
 800070c:	f002 fa28 	bl	8002b60 <HAL_TIM_PWM_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f8e1 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000726:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800072a:	4619      	mov	r1, r3
 800072c:	482d      	ldr	r0, [pc, #180]	@ (80007e4 <MX_TIM8_Init+0x138>)
 800072e:	f003 fbef 	bl	8003f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 f8d0 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073c:	2360      	movs	r3, #96	@ 0x60
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000748:	2300      	movs	r3, #0
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000758:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	4820      	ldr	r0, [pc, #128]	@ (80007e4 <MX_TIM8_Init+0x138>)
 8000762:	f002 fd4b 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800076c:	f000 f8b6 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000770:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000774:	2204      	movs	r2, #4
 8000776:	4619      	mov	r1, r3
 8000778:	481a      	ldr	r0, [pc, #104]	@ (80007e4 <MX_TIM8_Init+0x138>)
 800077a:	f002 fd3f 	bl	80031fc <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000784:	f000 f8aa 	bl	80008dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80007c6:	f003 fc25 	bl	8004014 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80007d0:	f000 f884 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <MX_TIM8_Init+0x138>)
 80007d6:	f000 fc13 	bl	8001000 <HAL_TIM_MspPostInit>

}
 80007da:	bf00      	nop
 80007dc:	3760      	adds	r7, #96	@ 0x60
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001b0 	.word	0x200001b0
 80007e8:	40013400 	.word	0x40013400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b33      	ldr	r3, [pc, #204]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a32      	ldr	r2, [pc, #200]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a2c      	ldr	r2, [pc, #176]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	4a26      	ldr	r2, [pc, #152]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083e:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 ffde 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10
 8000858:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800085c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0xe8>)
 800086e:	f000 fe4f 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000872:	2303      	movs	r3, #3
 8000874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000888:	f000 fe42 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800088c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_GPIO_Init+0xec>)
 80008a2:	f000 fe35 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f000 fe25 	bl	8001510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000800 	.word	0x48000800
 80008d8:	48000400 	.word	0x48000400

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <_ZN5servoC1EP17TIM_HandleTypeDefm>:
public:
    void setup();
    void update_pos(float goalpos,int responseTime);
    void run();

    servo(TIM_HandleTypeDef *_servo_htim, uint32_t _servo_TIM_CHANNEL){
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <_ZN5servoC1EP17TIM_HandleTypeDefm+0x70>)
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2200      	movs	r2, #0
 800092c:	771a      	strb	r2, [r3, #28]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
    	servo_htim = _servo_htim;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
    	servo_TIM_CHANNEL = _servo_TIM_CHANNEL;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
    	updateFreqency = 1000;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000946:	621a      	str	r2, [r3, #32]
    };
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	43960000 	.word	0x43960000

0800095c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
	void PI_run();
	void update_speed(int sign);
	float get_speed() const { return speed; }
	void setspeed(float target_speed);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim, uint32_t _PWM_TIM_CHANNEL) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	807b      	strh	r3, [r7, #2]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4a25      	ldr	r2, [pc, #148]	@ (8000a04 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xa8>)
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a25      	ldr	r2, [pc, #148]	@ (8000a08 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xac>)
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb0>)
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb4>)
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
		enc_htim = _enc_htim;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	63da      	str	r2, [r3, #60]	@ 0x3c
		dirPort = _dirPort;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
		dirPin = _dirPin;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	887a      	ldrh	r2, [r7, #2]
 80009e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		PWM_htim = _PWM_htim;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	649a      	str	r2, [r3, #72]	@ 0x48
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	64da      	str	r2, [r3, #76]	@ 0x4c
	};
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	3e570a3d 	.word	0x3e570a3d
 8000a08:	3a03126f 	.word	0x3a03126f
 8000a0c:	3a83126f 	.word	0x3a83126f
 8000a10:	41c00000 	.word	0x41c00000

08000a14 <_Z9setup_allv>:
float speeds = 0;
float range = 1;
float add = 0.01;
float angle = 30;

void setup_all(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	servo_gripper.setup();
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <_Z9setup_allv+0x10>)
 8000a1a:	f000 f87f 	bl	8000b1c <_ZN5servo5setupEv>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000029c 	.word	0x2000029c

08000a28 <main_function>:
void main_function(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	setup_all();
 8000a2c:	f7ff fff2 	bl	8000a14 <_Z9setup_allv>

	while(1){
		servo_gripper.update_pos(angle, 1);
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <main_function+0x4c>)
 8000a32:	edd3 7a00 	vldr	s15, [r3]
 8000a36:	2101      	movs	r1, #1
 8000a38:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3c:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <main_function+0x50>)
 8000a3e:	f000 f87d 	bl	8000b3c <_ZN5servo10update_posEfi>
		servo_gripper.run();
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <main_function+0x50>)
 8000a44:	f000 f890 	bl	8000b68 <_ZN5servo3runEv>
		wait(3000, &htim2);
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <main_function+0x54>)
 8000a4a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a4e:	f000 fb7f 	bl	8001150 <_Z4waitiP17TIM_HandleTypeDef>
		servo_gripper.update_pos(300, 1);
 8000a52:	2101      	movs	r1, #1
 8000a54:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000a80 <main_function+0x58>
 8000a58:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <main_function+0x50>)
 8000a5a:	f000 f86f 	bl	8000b3c <_ZN5servo10update_posEfi>
		servo_gripper.run();
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <main_function+0x50>)
 8000a60:	f000 f882 	bl	8000b68 <_ZN5servo3runEv>
		wait(3000, &htim2);
 8000a64:	4905      	ldr	r1, [pc, #20]	@ (8000a7c <main_function+0x54>)
 8000a66:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a6a:	f000 fb71 	bl	8001150 <_Z4waitiP17TIM_HandleTypeDef>
		servo_gripper.update_pos(angle, 1);
 8000a6e:	bf00      	nop
 8000a70:	e7de      	b.n	8000a30 <main_function+0x8>
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000
 8000a78:	2000029c 	.word	0x2000029c
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	43960000 	.word	0x43960000

08000a84 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d126      	bne.n	8000ae2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d121      	bne.n	8000ae2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
DC_motor Motor_forword = {&htim3, GPIOA, GPIO_PIN_9, &htim8, TIM_CHANNEL_1};
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aaa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000aae:	4910      	ldr	r1, [pc, #64]	@ (8000af0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000ab0:	4810      	ldr	r0, [pc, #64]	@ (8000af4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000ab2:	f7ff ff53 	bl	800095c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2};
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ac6:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000aca:	f7ff ff47 	bl	800095c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
servo servo_gripper = {&htim1, TIM_CHANNEL_3};
 8000ace:	2208      	movs	r2, #8
 8000ad0:	490b      	ldr	r1, [pc, #44]	@ (8000b00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000ad4:	f7ff ff08 	bl	80008e8 <_ZN5servoC1EP17TIM_HandleTypeDefm>
servo servo_trun = {&htim1, TIM_CHANNEL_2};
 8000ad8:	2204      	movs	r2, #4
 8000ada:	4909      	ldr	r1, [pc, #36]	@ (8000b00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000adc:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000ade:	f7ff ff03 	bl	80008e8 <_ZN5servoC1EP17TIM_HandleTypeDefm>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200001b0 	.word	0x200001b0
 8000af0:	20000118 	.word	0x20000118
 8000af4:	200001fc 	.word	0x200001fc
 8000af8:	20000164 	.word	0x20000164
 8000afc:	2000024c 	.word	0x2000024c
 8000b00:	20000080 	.word	0x20000080
 8000b04:	2000029c 	.word	0x2000029c
 8000b08:	200002c8 	.word	0x200002c8

08000b0c <_GLOBAL__sub_I_Motor_forword>:
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffb5 	bl	8000a84 <_Z41__static_initialization_and_destruction_0ii>
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN5servo5setupEv>:
#include "stm32g4xx_hal.h"
int pulse = 0;
float pos = 0;
float distance = 0;

void servo::setup(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(servo_htim, servo_TIM_CHANNEL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f002 f86e 	bl	8002c10 <HAL_TIM_PWM_Start>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZN5servo10update_posEfi>:
void servo::update_pos(float _goalPos,int _responseTime){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b48:	6079      	str	r1, [r7, #4]
    goalPos = _goalPos;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	68ba      	ldr	r2, [r7, #8]
 8000b4e:	605a      	str	r2, [r3, #4]
    responseTime = _responseTime;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	619a      	str	r2, [r3, #24]
    move = true;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	771a      	strb	r2, [r3, #28]
    //run();
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_ZN5servo3runEv>:
void servo::run(){//updateFreq = timer interrupt frequency Hz
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	if (move == true){
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7f1b      	ldrb	r3, [r3, #28]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	f040 80cc 	bne.w	8000d12 <_ZN5servo3runEv+0x1aa>
		if (((currentPos >= goalPos && goalPos >= lastPos) || (currentPos <= goalPos && goalPos<=lastPos))){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	ed93 7a00 	vldr	s14, [r3]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	db0a      	blt.n	8000ba6 <_ZN5servo3runEv+0x3e>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba4:	da15      	bge.n	8000bd2 <_ZN5servo3runEv+0x6a>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	ed93 7a00 	vldr	s14, [r3]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bba:	d816      	bhi.n	8000bea <_ZN5servo3runEv+0x82>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd0:	d80b      	bhi.n	8000bea <_ZN5servo3runEv+0x82>
    	 move = false;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	771a      	strb	r2, [r3, #28]
    	 lastPos =  goalPos;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	609a      	str	r2, [r3, #8]
    	 pos = goalPos;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d20 <_ZN5servo3runEv+0x1b8>)
 8000be6:	6013      	str	r3, [r2, #0]
//         run();
         //t++;
        }

	}
}
 8000be8:	e093      	b.n	8000d12 <_ZN5servo3runEv+0x1aa>
         distance = goalPos -  lastPos;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <_ZN5servo3runEv+0x1bc>)
 8000bfc:	edc3 7a00 	vstr	s15, [r3]
         pos += distance/( responseTime * updateFreqency / 1000);
 8000c00:	4b48      	ldr	r3, [pc, #288]	@ (8000d24 <_ZN5servo3runEv+0x1bc>)
 8000c02:	edd3 6a00 	vldr	s13, [r3]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6a12      	ldr	r2, [r2, #32]
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	4a45      	ldr	r2, [pc, #276]	@ (8000d28 <_ZN5servo3runEv+0x1c0>)
 8000c14:	fb82 1203 	smull	r1, r2, r2, r3
 8000c18:	1192      	asrs	r2, r2, #6
 8000c1a:	17db      	asrs	r3, r3, #31
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <_ZN5servo3runEv+0x1b8>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c34:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <_ZN5servo3runEv+0x1b8>)
 8000c36:	edc3 7a00 	vstr	s15, [r3]
         pulse = pos / maxAngle * ( maxPulse - minPulse );
 8000c3a:	4b39      	ldr	r3, [pc, #228]	@ (8000d20 <_ZN5servo3runEv+0x1b8>)
 8000c3c:	edd3 6a00 	vldr	s13, [r3]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c64:	ee17 2a90 	vmov	r2, s15
 8000c68:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000c6a:	601a      	str	r2, [r3, #0]
         __HAL_TIM_SET_COMPARE(servo_htim, servo_TIM_CHANNEL, minPulse + pulse);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <_ZN5servo3runEv+0x120>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	441a      	add	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c86:	e040      	b.n	8000d0a <_ZN5servo3runEv+0x1a2>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d109      	bne.n	8000ca4 <_ZN5servo3runEv+0x13c>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	441a      	add	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ca2:	e032      	b.n	8000d0a <_ZN5servo3runEv+0x1a2>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d109      	bne.n	8000cc0 <_ZN5servo3runEv+0x158>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	441a      	add	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cbe:	e024      	b.n	8000d0a <_ZN5servo3runEv+0x1a2>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	2b0c      	cmp	r3, #12
 8000cc6:	d109      	bne.n	8000cdc <_ZN5servo3runEv+0x174>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cda:	e016      	b.n	8000d0a <_ZN5servo3runEv+0x1a2>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	2b10      	cmp	r3, #16
 8000ce2:	d109      	bne.n	8000cf8 <_ZN5servo3runEv+0x190>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	441a      	add	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	649a      	str	r2, [r3, #72]	@ 0x48
 8000cf6:	e008      	b.n	8000d0a <_ZN5servo3runEv+0x1a2>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <_ZN5servo3runEv+0x1c4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	441a      	add	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	64da      	str	r2, [r3, #76]	@ 0x4c
         currentPos = pos;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <_ZN5servo3runEv+0x1b8>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200002f8 	.word	0x200002f8
 8000d24:	200002fc 	.word	0x200002fc
 8000d28:	10624dd3 	.word	0x10624dd3
 8000d2c:	200002f4 	.word	0x200002f4

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d66:	f000 ff43 	bl	8001bf0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09c      	sub	sp, #112	@ 0x70
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	2244      	movs	r2, #68	@ 0x44
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fa0d 	bl	80041b8 <memset>
  if(hi2c->Instance==I2C1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e5c <HAL_I2C_MspInit+0xe4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d154      	bne.n	8000e52 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fc21 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f7ff fd8c 	bl	80008dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a25      	ldr	r2, [pc, #148]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e06:	2304      	movs	r3, #4
 8000e08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e14:	f000 fb7c 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <HAL_I2C_MspInit+0xec>)
 8000e36:	f000 fb6b 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_I2C_MspInit+0xe8>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e52:	bf00      	nop
 8000e54:	3770      	adds	r7, #112	@ 0x70
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d10c      	bne.n	8000e94 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000e80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e92:	e010      	b.n	8000eb6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <HAL_TIM_PWM_MspInit+0x64>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000ea4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_TIM_PWM_MspInit+0x60>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40013400 	.word	0x40013400

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee0:	d113      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	201c      	movs	r0, #28
 8000f00:	f000 fad1 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f04:	201c      	movs	r0, #28
 8000f06:	f000 fae8 	bl	80014da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d129      	bne.n	8000f8e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a28      	ldr	r2, [pc, #160]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f6a:	2350      	movs	r3, #80	@ 0x50
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f88:	f000 fac2 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f8c:	e02e      	b.n	8000fec <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1a      	ldr	r2, [pc, #104]	@ (8000ffc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d129      	bne.n	8000fec <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	4a16      	ldr	r2, [pc, #88]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f9e:	f043 0304 	orr.w	r3, r3, #4
 8000fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000fda:	230a      	movs	r3, #10
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe8:	f000 fa92 	bl	8001510 <HAL_GPIO_Init>
}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	@ 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40000800 	.word	0x40000800

08001000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d11c      	bne.n	800105c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800103a:	230f      	movs	r3, #15
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800104a:	2302      	movs	r3, #2
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4816      	ldr	r0, [pc, #88]	@ (80010b0 <HAL_TIM_MspPostInit+0xb0>)
 8001056:	f000 fa5b 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800105a:	e020      	b.n	800109e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <HAL_TIM_MspPostInit+0xb4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d11b      	bne.n	800109e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23c0      	movs	r3, #192	@ 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_TIM_MspPostInit+0xb0>)
 800109a:	f000 fa39 	bl	8001510 <HAL_GPIO_Init>
}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800
 80010b4:	40013400 	.word	0x40013400

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f000 f8d1 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <TIM2_IRQHandler+0x10>)
 800111e:	f001 ff1d 	bl	8002f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000cc 	.word	0x200000cc

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <_Z4waitiP17TIM_HandleTypeDef>:

#include "timer.h"
#include "stm32g4xx_hal.h"
static int delay_count = 0;
int t_ms = 0;
void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]

	while(delay_count < time){
 800115a:	e002      	b.n	8001162 <_Z4waitiP17TIM_HandleTypeDef+0x12>
		HAL_TIM_Base_Start_IT(htim);
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f001 fc95 	bl	8002a8c <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <_Z4waitiP17TIM_HandleTypeDef+0x2c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dcf7      	bgt.n	800115c <_Z4waitiP17TIM_HandleTypeDef+0xc>
		//delay_count++;
	}
	//HAL_TIM_Base_Stop_IT(htim);
	delay_count = 0;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <_Z4waitiP17TIM_HandleTypeDef+0x2c>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000300 	.word	0x20000300

08001180 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001190:	d109      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x26>
		t_ms++;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a06      	ldr	r2, [pc, #24]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800119a:	6013      	str	r3, [r2, #0]
		delay_count++;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011a4:	6013      	str	r3, [r2, #0]
	}
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000304 	.word	0x20000304
 80011b8:	20000300 	.word	0x20000300

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011bc:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff ffb4 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f002 ffed 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff f813 	bl	8000218 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   r0, =_estack
 80011f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001200:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8001204:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001208:	2000030c 	.word	0x2000030c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>

0800120e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f939 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f80e 	bl	8001240 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e001      	b.n	8001234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001230:	f7ff fd7e 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001234:	79fb      	ldrb	r3, [r7, #7]

}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_InitTick+0x68>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d022      	beq.n	800129a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_InitTick+0x6c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_InitTick+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f944 	bl	80014f6 <HAL_SYSTICK_Config>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10f      	bne.n	8001294 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	d809      	bhi.n	800128e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f04f 30ff 	mov.w	r0, #4294967295
 8001282:	f000 f910 	bl	80014a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_InitTick+0x70>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e007      	b.n	800129e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e004      	b.n	800129e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e001      	b.n	800129e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x20>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a03      	ldr	r2, [pc, #12]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000308 	.word	0x20000308
 80012d4:	2000000c 	.word	0x2000000c

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000308 	.word	0x20000308

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff40 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa4 	bl	800144c <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800151e:	e15a      	b.n	80017d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 814c 	beq.w	80017d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d005      	beq.n	8001550 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800154c:	2b02      	cmp	r3, #2
 800154e:	d130      	bne.n	80015b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001586:	2201      	movs	r2, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	f003 0201 	and.w	r2, r3, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d017      	beq.n	80015ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d123      	bne.n	8001642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0203 	and.w	r2, r3, #3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001684:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <HAL_GPIO_Init+0x2e4>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001688:	4a5a      	ldr	r2, [pc, #360]	@ (80017f4 <HAL_GPIO_Init+0x2e4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001690:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <HAL_GPIO_Init+0x2e4>)
 8001692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169c:	4a56      	ldr	r2, [pc, #344]	@ (80017f8 <HAL_GPIO_Init+0x2e8>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016c6:	d01f      	beq.n	8001708 <HAL_GPIO_Init+0x1f8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <HAL_GPIO_Init+0x2ec>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d019      	beq.n	8001704 <HAL_GPIO_Init+0x1f4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_GPIO_Init+0x2f0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1f0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4a      	ldr	r2, [pc, #296]	@ (8001804 <HAL_GPIO_Init+0x2f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a49      	ldr	r2, [pc, #292]	@ (8001808 <HAL_GPIO_Init+0x2f8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a48      	ldr	r2, [pc, #288]	@ (800180c <HAL_GPIO_Init+0x2fc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016f0:	2305      	movs	r3, #5
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016f4:	2306      	movs	r3, #6
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_GPIO_Init+0x2e8>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <HAL_GPIO_Init+0x300>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a30      	ldr	r2, [pc, #192]	@ (8001810 <HAL_GPIO_Init+0x300>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <HAL_GPIO_Init+0x300>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a26      	ldr	r2, [pc, #152]	@ (8001810 <HAL_GPIO_Init+0x300>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_GPIO_Init+0x300>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001810 <HAL_GPIO_Init+0x300>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_GPIO_Init+0x300>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <HAL_GPIO_Init+0x300>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae9d 	bne.w	8001520 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	48001400 	.word	0x48001400
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e002      	b.n	8001838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e08d      	b.n	8001972 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fa84 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e006      	b.n	80018cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d108      	bne.n	80018e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	e007      	b.n	80018f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69d9      	ldr	r1, [r3, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b20      	cmp	r3, #32
 800198e:	d138      	bne.n	8001a02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800199a:	2302      	movs	r3, #2
 800199c:	e032      	b.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2224      	movs	r2, #36	@ 0x24
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d139      	bne.n	8001a9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e033      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	@ 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d141      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac2:	d131      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac4:	4b47      	ldr	r3, [pc, #284]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aca:	4a46      	ldr	r2, [pc, #280]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ad0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001adc:	4a41      	ldr	r2, [pc, #260]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae4:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2232      	movs	r2, #50	@ 0x32
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	4a3f      	ldr	r2, [pc, #252]	@ (8001bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	0c9b      	lsrs	r3, r3, #18
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afa:	e002      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0e:	d102      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f2      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b22:	d158      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e057      	b.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b38:	e04d      	b.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b40:	d141      	bne.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4e:	d131      	bne.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b60:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b68:	4a1e      	ldr	r2, [pc, #120]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2232      	movs	r2, #50	@ 0x32
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	3301      	adds	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b86:	e002      	b.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f2      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bae:	d112      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e011      	b.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bc4:	e007      	b.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40007000 	.word	0x40007000
 8001be8:	20000004 	.word	0x20000004
 8001bec:	431bde83 	.word	0x431bde83

08001bf0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfe:	6093      	str	r3, [r2, #8]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40007000 	.word	0x40007000

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e2fe      	b.n	8002220 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d075      	beq.n	8001d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b97      	ldr	r3, [pc, #604]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b94      	ldr	r3, [pc, #592]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3e>
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d002      	beq.n	8001c54 <HAL_RCC_OscConfig+0x44>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b8d      	ldr	r3, [pc, #564]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d05b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d157      	bne.n	8001d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e2d9      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x74>
 8001c76:	4b85      	ldr	r3, [pc, #532]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a84      	ldr	r2, [pc, #528]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7e      	ldr	r2, [pc, #504]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	4b78      	ldr	r3, [pc, #480]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a77      	ldr	r2, [pc, #476]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b75      	ldr	r3, [pc, #468]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a74      	ldr	r2, [pc, #464]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb06 	bl	80012d8 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fb02 	bl	80012d8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e29e      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xc0>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff faf2 	bl	80012d8 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff faee 	bl	80012d8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	@ 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e28a      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0a:	4b60      	ldr	r3, [pc, #384]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xe8>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b59      	ldr	r3, [pc, #356]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x136>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_OscConfig+0x13c>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d11f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x154>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e25d      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b49      	ldr	r3, [pc, #292]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	4946      	ldr	r1, [pc, #280]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d78:	4b45      	ldr	r3, [pc, #276]	@ (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa5f 	bl	8001240 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d043      	beq.n	8001e10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e249      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d023      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3c      	ldr	r2, [pc, #240]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa9a 	bl	80012d8 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff fa96 	bl	80012d8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e232      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dba:	4b34      	ldr	r3, [pc, #208]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	061b      	lsls	r3, r3, #24
 8001dd4:	492d      	ldr	r1, [pc, #180]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
 8001dda:	e01a      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fa76 	bl	80012d8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fa72 	bl	80012d8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e20e      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1e0>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d041      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff fa4f 	bl	80012d8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fa4b 	bl	80012d8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1e7      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e50:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ef      	beq.n	8001e3e <HAL_RCC_OscConfig+0x22e>
 8001e5e:	e020      	b.n	8001ea2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa32 	bl	80012d8 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e76:	e00d      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fa2e 	bl	80012d8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d906      	bls.n	8001e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1ca      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e94:	4b8c      	ldr	r3, [pc, #560]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ea      	bne.n	8001e78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80a6 	beq.w	8001ffc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eb4:	4b84      	ldr	r3, [pc, #528]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2b4>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2b6>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	4a7e      	ldr	r2, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b79      	ldr	r3, [pc, #484]	@ (80020cc <HAL_RCC_OscConfig+0x4bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef2:	4b76      	ldr	r3, [pc, #472]	@ (80020cc <HAL_RCC_OscConfig+0x4bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	@ (80020cc <HAL_RCC_OscConfig+0x4bc>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f9eb 	bl	80012d8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff f9e7 	bl	80012d8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e183      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f18:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <HAL_RCC_OscConfig+0x4bc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_RCC_OscConfig+0x32e>
 8001f2c:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	4a65      	ldr	r2, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f3c:	e024      	b.n	8001f88 <HAL_RCC_OscConfig+0x378>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d110      	bne.n	8001f68 <HAL_RCC_OscConfig+0x358>
 8001f46:	4b60      	ldr	r3, [pc, #384]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f56:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5c:	4a5a      	ldr	r2, [pc, #360]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x378>
 8001f68:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6e:	4a56      	ldr	r2, [pc, #344]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7e:	4a52      	ldr	r2, [pc, #328]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d016      	beq.n	8001fbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f9a2 	bl	80012d8 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff f99e 	bl	80012d8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e138      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ed      	beq.n	8001f98 <HAL_RCC_OscConfig+0x388>
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f98b 	bl	80012d8 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f987 	bl	80012d8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e121      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ed      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	4a34      	ldr	r2, [pc, #208]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03c      	beq.n	8002082 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8002012:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002016:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f95a 	bl	80012d8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002028:	f7ff f956 	bl	80012d8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0f2      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203a:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCC_OscConfig+0x418>
 8002048:	e01b      	b.n	8002082 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002050:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff f93d 	bl	80012d8 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002062:	f7ff f939 	bl	80012d8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0d5      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 8002076:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ef      	bne.n	8002062 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80c9 	beq.w	800221e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208c:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b0c      	cmp	r3, #12
 8002096:	f000 8083 	beq.w	80021a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d15e      	bne.n	8002160 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <HAL_RCC_OscConfig+0x4b8>)
 80020a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7ff f913 	bl	80012d8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b4:	e00c      	b.n	80020d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff f90f 	bl	80012d8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d905      	bls.n	80020d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0ab      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d0:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ec      	bne.n	80020b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b52      	ldr	r3, [pc, #328]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4b52      	ldr	r3, [pc, #328]	@ (800222c <HAL_RCC_OscConfig+0x61c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6a11      	ldr	r1, [r2, #32]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020f6:	0212      	lsls	r2, r2, #8
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020fe:	0852      	lsrs	r2, r2, #1
 8002100:	3a01      	subs	r2, #1
 8002102:	0552      	lsls	r2, r2, #21
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800210a:	0852      	lsrs	r2, r2, #1
 800210c:	3a01      	subs	r2, #1
 800210e:	0652      	lsls	r2, r2, #25
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002116:	06d2      	lsls	r2, r2, #27
 8002118:	430a      	orrs	r2, r1
 800211a:	4943      	ldr	r1, [pc, #268]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 800211c:	4313      	orrs	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a40      	ldr	r2, [pc, #256]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800212c:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a3d      	ldr	r2, [pc, #244]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002136:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f8ce 	bl	80012d8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f8ca 	bl	80012d8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e066      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	4b35      	ldr	r3, [pc, #212]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x530>
 800215e:	e05e      	b.n	800221e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a30      	ldr	r2, [pc, #192]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f8b4 	bl	80012d8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f8b0 	bl	80012d8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e04c      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002192:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4924      	ldr	r1, [pc, #144]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 8002198:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_RCC_OscConfig+0x620>)
 800219a:	4013      	ands	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]
 800219e:	e03e      	b.n	800221e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e039      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_RCC_OscConfig+0x618>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d12c      	bne.n	800221a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	3b01      	subs	r3, #1
 80021cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d123      	bne.n	800221a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d11b      	bne.n	800221a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d113      	bne.n	800221a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d109      	bne.n	800221a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	019f800c 	.word	0x019f800c
 8002230:	feeefffc 	.word	0xfeeefffc

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e11e      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b91      	ldr	r3, [pc, #580]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b8e      	ldr	r3, [pc, #568]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 020f 	bic.w	r2, r3, #15
 8002262:	498c      	ldr	r1, [pc, #560]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b8a      	ldr	r3, [pc, #552]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e106      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d073      	beq.n	8002370 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d129      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0f4      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022a0:	f000 f966 	bl	8002570 <RCC_GetSysClockFreqFromPLLSource>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4a7c      	ldr	r2, [pc, #496]	@ (800249c <HAL_RCC_ClockConfig+0x268>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d93f      	bls.n	800232e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d033      	beq.n	800232e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d12f      	bne.n	800232e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ce:	4b72      	ldr	r3, [pc, #456]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022d6:	4a70      	ldr	r2, [pc, #448]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e024      	b.n	800232e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0c6      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fc:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0be      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800230c:	f000 f8ce 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8002310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a61      	ldr	r2, [pc, #388]	@ (800249c <HAL_RCC_ClockConfig+0x268>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d909      	bls.n	800232e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800231a:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002322:	4a5d      	ldr	r2, [pc, #372]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002328:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b5a      	ldr	r3, [pc, #360]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4957      	ldr	r1, [pc, #348]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe ffca 	bl	80012d8 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe ffc6 	bl	80012d8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e095      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d023      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800238e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002392:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4936      	ldr	r1, [pc, #216]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b80      	cmp	r3, #128	@ 0x80
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4a32      	ldr	r2, [pc, #200]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d21d      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 020f 	bic.w	r2, r3, #15
 80023ec:	4929      	ldr	r1, [pc, #164]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f4:	f7fe ff70 	bl	80012d8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe ff6c 	bl	80012d8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e03b      	b.n	800248a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCC_ClockConfig+0x260>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d1ed      	bne.n	80023fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4917      	ldr	r1, [pc, #92]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490f      	ldr	r1, [pc, #60]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245e:	f000 f825 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <HAL_RCC_ClockConfig+0x26c>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <HAL_RCC_ClockConfig+0x270>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800247e:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <HAL_RCC_ClockConfig+0x274>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fedc 	bl	8001240 <HAL_InitTick>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	04c4b400 	.word	0x04c4b400
 80024a0:	08004228 	.word	0x08004228
 80024a4:	20000004 	.word	0x20000004
 80024a8:	20000008 	.word	0x20000008

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d102      	bne.n	80024c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	e047      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024c4:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d0:	4b26      	ldr	r3, [pc, #152]	@ (800256c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e03e      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024d6:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d136      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002500:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	4a16      	ldr	r2, [pc, #88]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250a:	68d2      	ldr	r2, [r2, #12]
 800250c:	0a12      	lsrs	r2, r2, #8
 800250e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
      break;
 8002518:	e00c      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xbc>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4a10      	ldr	r2, [pc, #64]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	0a12      	lsrs	r2, r2, #8
 8002528:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
      break;
 8002532:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0e5b      	lsrs	r3, r3, #25
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e001      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002554:	693b      	ldr	r3, [r7, #16]
}
 8002556:	4618      	mov	r0, r3
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200

08002570 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d10c      	bne.n	80025ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002594:	4a17      	ldr	r2, [pc, #92]	@ (80025f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800259e:	68d2      	ldr	r2, [r2, #12]
 80025a0:	0a12      	lsrs	r2, r2, #8
 80025a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
    break;
 80025ac:	e00c      	b.n	80025c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ae:	4a12      	ldr	r2, [pc, #72]	@ (80025f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025b8:	68d2      	ldr	r2, [r2, #12]
 80025ba:	0a12      	lsrs	r2, r2, #8
 80025bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    break;
 80025c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c8:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	007a1200 	.word	0x007a1200
 80025f8:	00f42400 	.word	0x00f42400

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002604:	2300      	movs	r3, #0
 8002606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002608:	2300      	movs	r3, #0
 800260a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8098 	beq.w	800274a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b43      	ldr	r3, [pc, #268]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10d      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b40      	ldr	r3, [pc, #256]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a3f      	ldr	r2, [pc, #252]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	2301      	movs	r3, #1
 8002644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a39      	ldr	r2, [pc, #228]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002652:	f7fe fe41 	bl	80012d8 <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002658:	e009      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fe3d 	bl	80012d8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d902      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	74fb      	strb	r3, [r7, #19]
        break;
 800266c:	e005      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266e:	4b30      	ldr	r3, [pc, #192]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ef      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d159      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	d019      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a8:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a1f      	ldr	r2, [pc, #124]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c8:	4a18      	ldr	r2, [pc, #96]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fdfd 	bl	80012d8 <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e0:	e00b      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fdf9 	bl	80012d8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d902      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	74fb      	strb	r3, [r7, #19]
            break;
 80026f8:	e006      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ec      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	4903      	ldr	r1, [pc, #12]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002724:	e008      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	74bb      	strb	r3, [r7, #18]
 800272a:	e005      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d105      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4ba6      	ldr	r3, [pc, #664]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	4aa5      	ldr	r2, [pc, #660]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002748:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002756:	4ba0      	ldr	r3, [pc, #640]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275c:	f023 0203 	bic.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	499c      	ldr	r1, [pc, #624]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002778:	4b97      	ldr	r3, [pc, #604]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f023 020c 	bic.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4994      	ldr	r1, [pc, #592]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279a:	4b8f      	ldr	r3, [pc, #572]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	498b      	ldr	r1, [pc, #556]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027bc:	4b86      	ldr	r3, [pc, #536]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	4983      	ldr	r1, [pc, #524]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027de:	4b7e      	ldr	r3, [pc, #504]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	497a      	ldr	r1, [pc, #488]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002800:	4b75      	ldr	r3, [pc, #468]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4972      	ldr	r1, [pc, #456]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002822:	4b6d      	ldr	r3, [pc, #436]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4969      	ldr	r1, [pc, #420]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4961      	ldr	r1, [pc, #388]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002866:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	4958      	ldr	r1, [pc, #352]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	4950      	ldr	r1, [pc, #320]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a4a      	ldr	r2, [pc, #296]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c0:	4b45      	ldr	r3, [pc, #276]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	4942      	ldr	r1, [pc, #264]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a3c      	ldr	r2, [pc, #240]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028f8:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4934      	ldr	r1, [pc, #208]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002916:	d105      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a2e      	ldr	r2, [pc, #184]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002930:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293e:	4926      	ldr	r1, [pc, #152]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002950:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a20      	ldr	r2, [pc, #128]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002976:	4918      	ldr	r1, [pc, #96]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	490a      	ldr	r1, [pc, #40]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e049      	b.n	8002a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fa64 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fe24 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e04a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ace:	d013      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d115      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d015      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0xaa>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b10:	d011      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e008      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e000      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40013400 	.word	0x40013400
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	00010007 	.word	0x00010007

08002b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e049      	b.n	8002c06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f96e 	bl	8000e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fd62 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x24>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e03c      	b.n	8002cae <HAL_TIM_PWM_Start+0x9e>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d109      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x3e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e02f      	b.n	8002cae <HAL_TIM_PWM_Start+0x9e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x58>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e022      	b.n	8002cae <HAL_TIM_PWM_Start+0x9e>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d109      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x72>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e015      	b.n	8002cae <HAL_TIM_PWM_Start+0x9e>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x8c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e008      	b.n	8002cae <HAL_TIM_PWM_Start+0x9e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e097      	b.n	8002de6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0xb6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc4:	e023      	b.n	8002d0e <HAL_TIM_PWM_Start+0xfe>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0xc6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cd4:	e01b      	b.n	8002d0e <HAL_TIM_PWM_Start+0xfe>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0xd6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce4:	e013      	b.n	8002d0e <HAL_TIM_PWM_Start+0xfe>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0xe6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cf4:	e00b      	b.n	8002d0e <HAL_TIM_PWM_Start+0xfe>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d104      	bne.n	8002d06 <HAL_TIM_PWM_Start+0xf6>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d04:	e003      	b.n	8002d0e <HAL_TIM_PWM_Start+0xfe>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2201      	movs	r2, #1
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f8d4 	bl	8003ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a33      	ldr	r2, [pc, #204]	@ (8002df0 <HAL_TIM_PWM_Start+0x1e0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x13e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a32      	ldr	r2, [pc, #200]	@ (8002df4 <HAL_TIM_PWM_Start+0x1e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x13e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_TIM_PWM_Start+0x1e8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x13e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002dfc <HAL_TIM_PWM_Start+0x1ec>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x13e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2d      	ldr	r2, [pc, #180]	@ (8002e00 <HAL_TIM_PWM_Start+0x1f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x142>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_TIM_PWM_Start+0x144>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_TIM_PWM_Start+0x1e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_PWM_Start+0x194>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_PWM_Start+0x194>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	@ (8002e04 <HAL_TIM_PWM_Start+0x1f4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_PWM_Start+0x194>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e08 <HAL_TIM_PWM_Start+0x1f8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_PWM_Start+0x194>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_TIM_PWM_Start+0x1e4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_PWM_Start+0x194>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <HAL_TIM_PWM_Start+0x1e8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d115      	bne.n	8002dd0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <HAL_TIM_PWM_Start+0x1fc>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d015      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x1d2>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d011      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e008      	b.n	8002de2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40013400 	.word	0x40013400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	00010007 	.word	0x00010007

08002e10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e097      	b.n	8002f54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe f86d 	bl	8000f18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002e54:	f023 0307 	bic.w	r3, r3, #7
 8002e58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f000 fbff 	bl	8003668 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002eb0:	f023 030c 	bic.w	r3, r3, #12
 8002eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	011a      	lsls	r2, r3, #4
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	031b      	lsls	r3, r3, #12
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002ef6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4313      	orrs	r3, r2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d020      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0202 	mvn.w	r2, #2
 8002f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fb40 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fb32 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fb43 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0204 	mvn.w	r2, #4
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fb1a 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fb0c 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb1d 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0208 	mvn.w	r2, #8
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2204      	movs	r2, #4
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 faf4 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fae6 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 faf7 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d020      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0210 	mvn.w	r2, #16
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2208      	movs	r2, #8
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 face 	bl	800362c <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fac0 	bl	8003618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fad1 	bl	8003640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0201 	mvn.w	r2, #1
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f85c 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f001 f825 	bl	8004140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f001 f81d 	bl	8004154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa8b 	bl	8003654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0220 	mvn.w	r2, #32
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 ffe5 	bl	800412c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fff1 	bl	8004168 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80031a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 ffe9 	bl	800417c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00c      	beq.n	80031ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80031c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 ffe1 	bl	8004190 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80031ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 ffd9 	bl	80041a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003216:	2302      	movs	r3, #2
 8003218:	e0ff      	b.n	800341a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b14      	cmp	r3, #20
 8003226:	f200 80f0 	bhi.w	800340a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003285 	.word	0x08003285
 8003234:	0800340b 	.word	0x0800340b
 8003238:	0800340b 	.word	0x0800340b
 800323c:	0800340b 	.word	0x0800340b
 8003240:	080032c5 	.word	0x080032c5
 8003244:	0800340b 	.word	0x0800340b
 8003248:	0800340b 	.word	0x0800340b
 800324c:	0800340b 	.word	0x0800340b
 8003250:	08003307 	.word	0x08003307
 8003254:	0800340b 	.word	0x0800340b
 8003258:	0800340b 	.word	0x0800340b
 800325c:	0800340b 	.word	0x0800340b
 8003260:	08003347 	.word	0x08003347
 8003264:	0800340b 	.word	0x0800340b
 8003268:	0800340b 	.word	0x0800340b
 800326c:	0800340b 	.word	0x0800340b
 8003270:	08003389 	.word	0x08003389
 8003274:	0800340b 	.word	0x0800340b
 8003278:	0800340b 	.word	0x0800340b
 800327c:	0800340b 	.word	0x0800340b
 8003280:	080033c9 	.word	0x080033c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa88 	bl	80037a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0204 	bic.w	r2, r2, #4
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	619a      	str	r2, [r3, #24]
      break;
 80032c2:	e0a5      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 faf8 	bl	80038c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	619a      	str	r2, [r3, #24]
      break;
 8003304:	e084      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fb61 	bl	80039d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0208 	orr.w	r2, r2, #8
 8003320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0204 	bic.w	r2, r2, #4
 8003330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69d9      	ldr	r1, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	61da      	str	r2, [r3, #28]
      break;
 8003344:	e064      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fbc9 	bl	8003ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69d9      	ldr	r1, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
      break;
 8003386:	e043      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fc32 	bl	8003bf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0208 	orr.w	r2, r2, #8
 80033a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80033c6:	e023      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fc76 	bl	8003cc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	021a      	lsls	r2, r3, #8
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003408:	e002      	b.n	8003410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
      break;
 800340e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop

08003424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIM_ConfigClockSource+0x1c>
 800343c:	2302      	movs	r3, #2
 800343e:	e0de      	b.n	80035fe <HAL_TIM_ConfigClockSource+0x1da>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800345e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800346a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a63      	ldr	r2, [pc, #396]	@ (8003608 <HAL_TIM_ConfigClockSource+0x1e4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	f000 80a9 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003480:	4a61      	ldr	r2, [pc, #388]	@ (8003608 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	f200 80ae 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003488:	4a60      	ldr	r2, [pc, #384]	@ (800360c <HAL_TIM_ConfigClockSource+0x1e8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	f000 80a1 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003490:	4a5e      	ldr	r2, [pc, #376]	@ (800360c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f200 80a6 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003498:	4a5d      	ldr	r2, [pc, #372]	@ (8003610 <HAL_TIM_ConfigClockSource+0x1ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f000 8099 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80034a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_TIM_ConfigClockSource+0x1ec>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	f200 809e 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_TIM_ConfigClockSource+0x1f0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f000 8091 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_TIM_ConfigClockSource+0x1f0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f200 8096 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034bc:	f000 8089 	beq.w	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80034c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034c4:	f200 808e 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034cc:	d03e      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x128>
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	f200 8087 	bhi.w	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034da:	f000 8086 	beq.w	80035ea <HAL_TIM_ConfigClockSource+0x1c6>
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e2:	d87f      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e4:	2b70      	cmp	r3, #112	@ 0x70
 80034e6:	d01a      	beq.n	800351e <HAL_TIM_ConfigClockSource+0xfa>
 80034e8:	2b70      	cmp	r3, #112	@ 0x70
 80034ea:	d87b      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034ec:	2b60      	cmp	r3, #96	@ 0x60
 80034ee:	d050      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x16e>
 80034f0:	2b60      	cmp	r3, #96	@ 0x60
 80034f2:	d877      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034f4:	2b50      	cmp	r3, #80	@ 0x50
 80034f6:	d03c      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x14e>
 80034f8:	2b50      	cmp	r3, #80	@ 0x50
 80034fa:	d873      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80034fc:	2b40      	cmp	r3, #64	@ 0x40
 80034fe:	d058      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x18e>
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d86f      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003504:	2b30      	cmp	r3, #48	@ 0x30
 8003506:	d064      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003508:	2b30      	cmp	r3, #48	@ 0x30
 800350a:	d86b      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 800350c:	2b20      	cmp	r3, #32
 800350e:	d060      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003510:	2b20      	cmp	r3, #32
 8003512:	d867      	bhi.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05c      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8003518:	2b10      	cmp	r3, #16
 800351a:	d05a      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x1ae>
 800351c:	e062      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	f000 fca9 	bl	8003e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	609a      	str	r2, [r3, #8]
      break;
 800354a:	e04f      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	f000 fc92 	bl	8003e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800356e:	609a      	str	r2, [r3, #8]
      break;
 8003570:	e03c      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	461a      	mov	r2, r3
 8003580:	f000 fc04 	bl	8003d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2150      	movs	r1, #80	@ 0x50
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fc5d 	bl	8003e4a <TIM_ITRx_SetConfig>
      break;
 8003590:	e02c      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 fc23 	bl	8003dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2160      	movs	r1, #96	@ 0x60
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fc4d 	bl	8003e4a <TIM_ITRx_SetConfig>
      break;
 80035b0:	e01c      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 fbe4 	bl	8003d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2140      	movs	r1, #64	@ 0x40
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fc3d 	bl	8003e4a <TIM_ITRx_SetConfig>
      break;
 80035d0:	e00c      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f000 fc34 	bl	8003e4a <TIM_ITRx_SetConfig>
      break;
 80035e2:	e003      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e000      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80035ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	00100070 	.word	0x00100070
 800360c:	00100040 	.word	0x00100040
 8003610:	00100030 	.word	0x00100030
 8003614:	00100020 	.word	0x00100020

08003618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <TIM_Base_SetConfig+0x11c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3f      	ldr	r2, [pc, #252]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3e      	ldr	r2, [pc, #248]	@ (800378c <TIM_Base_SetConfig+0x124>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3d      	ldr	r2, [pc, #244]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a33      	ldr	r2, [pc, #204]	@ (8003784 <TIM_Base_SetConfig+0x11c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c0:	d017      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a30      	ldr	r2, [pc, #192]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	@ (800378c <TIM_Base_SetConfig+0x124>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00f      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00b      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <TIM_Base_SetConfig+0x134>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d108      	bne.n	8003704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a16      	ldr	r2, [pc, #88]	@ (8003784 <TIM_Base_SetConfig+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00f      	beq.n	8003750 <TIM_Base_SetConfig+0xe8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00b      	beq.n	8003750 <TIM_Base_SetConfig+0xe8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <TIM_Base_SetConfig+0xe8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_Base_SetConfig+0xe8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a14      	ldr	r2, [pc, #80]	@ (800379c <TIM_Base_SetConfig+0x134>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d103      	bne.n	8003758 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f023 0201 	bic.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]
  }
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40013400 	.word	0x40013400
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800

080037a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 0201 	bic.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 0302 	bic.w	r3, r3, #2
 80037ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <TIM_OC1_SetConfig+0x10c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00f      	beq.n	8003820 <TIM_OC1_SetConfig+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <TIM_OC1_SetConfig+0x110>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_OC1_SetConfig+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <TIM_OC1_SetConfig+0x114>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_OC1_SetConfig+0x80>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <TIM_OC1_SetConfig+0x118>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_OC1_SetConfig+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a28      	ldr	r2, [pc, #160]	@ (80038bc <TIM_OC1_SetConfig+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10c      	bne.n	800383a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0308 	bic.w	r3, r3, #8
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <TIM_OC1_SetConfig+0x10c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_OC1_SetConfig+0xc2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <TIM_OC1_SetConfig+0x110>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_OC1_SetConfig+0xc2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a19      	ldr	r2, [pc, #100]	@ (80038b4 <TIM_OC1_SetConfig+0x114>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_OC1_SetConfig+0xc2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a18      	ldr	r2, [pc, #96]	@ (80038b8 <TIM_OC1_SetConfig+0x118>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_OC1_SetConfig+0xc2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <TIM_OC1_SetConfig+0x11c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	621a      	str	r2, [r3, #32]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40013400 	.word	0x40013400
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800

080038c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 0210 	bic.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0320 	bic.w	r3, r3, #32
 800390e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <TIM_OC2_SetConfig+0x100>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC2_SetConfig+0x6c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <TIM_OC2_SetConfig+0x104>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10d      	bne.n	8003948 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <TIM_OC2_SetConfig+0x100>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_OC2_SetConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <TIM_OC2_SetConfig+0x104>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_OC2_SetConfig+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1b      	ldr	r2, [pc, #108]	@ (80039c8 <TIM_OC2_SetConfig+0x108>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_OC2_SetConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <TIM_OC2_SetConfig+0x10c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC2_SetConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <TIM_OC2_SetConfig+0x110>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d113      	bne.n	8003998 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800

080039d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <TIM_OC3_SetConfig+0xfc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_OC3_SetConfig+0x6a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_OC3_SetConfig+0x100>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10d      	bne.n	8003a5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <TIM_OC3_SetConfig+0xfc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_OC3_SetConfig+0xae>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <TIM_OC3_SetConfig+0x100>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_OC3_SetConfig+0xae>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <TIM_OC3_SetConfig+0x104>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_OC3_SetConfig+0xae>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a19      	ldr	r2, [pc, #100]	@ (8003adc <TIM_OC3_SetConfig+0x108>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_OC3_SetConfig+0xae>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <TIM_OC3_SetConfig+0x10c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d113      	bne.n	8003aaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40013400 	.word	0x40013400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a28      	ldr	r2, [pc, #160]	@ (8003be4 <TIM_OC4_SetConfig+0x100>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC4_SetConfig+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	@ (8003be8 <TIM_OC4_SetConfig+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	031b      	lsls	r3, r3, #12
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <TIM_OC4_SetConfig+0x100>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00f      	beq.n	8003b94 <TIM_OC4_SetConfig+0xb0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <TIM_OC4_SetConfig+0x104>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <TIM_OC4_SetConfig+0xb0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <TIM_OC4_SetConfig+0x108>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <TIM_OC4_SetConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <TIM_OC4_SetConfig+0x10c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_OC4_SetConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <TIM_OC4_SetConfig+0x110>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d113      	bne.n	8003bbc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ba2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	019b      	lsls	r3, r3, #6
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40013400 	.word	0x40013400
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800

08003bf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <TIM_OC5_SetConfig+0xb4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00f      	beq.n	8003c72 <TIM_OC5_SetConfig+0x7a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <TIM_OC5_SetConfig+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_OC5_SetConfig+0x7a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <TIM_OC5_SetConfig+0xbc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_OC5_SetConfig+0x7a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <TIM_OC5_SetConfig+0xc0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC5_SetConfig+0x7a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <TIM_OC5_SetConfig+0xc4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d109      	bne.n	8003c86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40013400 	.word	0x40013400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40014400 	.word	0x40014400
 8003cbc:	40014800 	.word	0x40014800

08003cc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	051b      	lsls	r3, r3, #20
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <TIM_OC6_SetConfig+0xb8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00f      	beq.n	8003d3c <TIM_OC6_SetConfig+0x7c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	@ (8003d7c <TIM_OC6_SetConfig+0xbc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_OC6_SetConfig+0x7c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <TIM_OC6_SetConfig+0xc0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_OC6_SetConfig+0x7c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a15      	ldr	r2, [pc, #84]	@ (8003d84 <TIM_OC6_SetConfig+0xc4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC6_SetConfig+0x7c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a14      	ldr	r2, [pc, #80]	@ (8003d88 <TIM_OC6_SetConfig+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d109      	bne.n	8003d50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40013400 	.word	0x40013400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f023 030a 	bic.w	r3, r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b087      	sub	sp, #28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 0210 	bic.w	r2, r3, #16
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	031b      	lsls	r3, r3, #12
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f043 0307 	orr.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e065      	b.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d108      	bne.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d018      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9e:	d013      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	@ (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40014000 	.word	0x40014000

08004014 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e073      	b.n	8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d11c      	bne.n	8004106 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	051b      	lsls	r3, r3, #20
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40013400 	.word	0x40013400

0800412c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004200 <__libc_init_array+0x38>)
 80041cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004204 <__libc_init_array+0x3c>)
 80041ce:	1b64      	subs	r4, r4, r5
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2600      	movs	r6, #0
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004208 <__libc_init_array+0x40>)
 80041da:	4c0c      	ldr	r4, [pc, #48]	@ (800420c <__libc_init_array+0x44>)
 80041dc:	f000 f818 	bl	8004210 <_init>
 80041e0:	1b64      	subs	r4, r4, r5
 80041e2:	10a4      	asrs	r4, r4, #2
 80041e4:	2600      	movs	r6, #0
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004238 	.word	0x08004238
 8004204:	08004238 	.word	0x08004238
 8004208:	08004238 	.word	0x08004238
 800420c:	08004240 	.word	0x08004240

08004210 <_init>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr

0800421c <_fini>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	bf00      	nop
 8004220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004222:	bc08      	pop	{r3}
 8004224:	469e      	mov	lr, r3
 8004226:	4770      	bx	lr
