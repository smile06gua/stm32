
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000464c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004834  08004834  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004834  08004834  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004834  08004834  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004834  08004834  00005834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004840  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000010  08004850  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004850  0000632c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e41  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00018e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d24  00000000  00000000  0001ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115f  00000000  00000000  0001d76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014208  00000000  00000000  0003e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5734  00000000  00000000  00052ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  0011824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800480c 	.word	0x0800480c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800480c 	.word	0x0800480c

08000218 <_ZN8DC_motor6PI_runEv>:
#include <cstdlib>
#include <cmath>

float uuuuuu = 0;

void DC_motor::PI_run() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    float p, i, d;
    float max_integral = 100.0f;
 8000220:	4b7f      	ldr	r3, [pc, #508]	@ (8000420 <_ZN8DC_motor6PI_runEv+0x208>)
 8000222:	61bb      	str	r3, [r7, #24]
    error = sp - speed;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	ed93 7a08 	vldr	s14, [r3, #32]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	edc3 7a03 	vstr	s15, [r3, #12]

    // 不禁止 error，只禁止積分
    if (fabsf(error) < 0.f) {
        // 小誤差不累積積分
    } else {
        integral += error;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	edd3 7a03 	vldr	s15, [r3, #12]
 8000246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    if (integral > max_integral) integral = max_integral;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	edd3 7a05 	vldr	s15, [r3, #20]
 8000256:	ed97 7a06 	vldr	s14, [r7, #24]
 800025a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000262:	d503      	bpl.n	800026c <_ZN8DC_motor6PI_runEv+0x54>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	69ba      	ldr	r2, [r7, #24]
 8000268:	615a      	str	r2, [r3, #20]
 800026a:	e012      	b.n	8000292 <_ZN8DC_motor6PI_runEv+0x7a>
    else if (integral < -max_integral) integral = -max_integral;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	ed93 7a05 	vldr	s14, [r3, #20]
 8000272:	edd7 7a06 	vldr	s15, [r7, #24]
 8000276:	eef1 7a67 	vneg.f32	s15, s15
 800027a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800027e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000282:	d506      	bpl.n	8000292 <_ZN8DC_motor6PI_runEv+0x7a>
 8000284:	edd7 7a06 	vldr	s15, [r7, #24]
 8000288:	eef1 7a67 	vneg.f32	s15, s15
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	edc3 7a05 	vstr	s15, [r3, #20]

    differential = error - pre_error;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	ed93 7a03 	vldr	s14, [r3, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	edd3 7a04 	vldr	s15, [r3, #16]
 800029e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	edc3 7a06 	vstr	s15, [r3, #24]
    pre_error = error;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	611a      	str	r2, [r3, #16]

    p = kp * error;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	ed93 7a00 	vldr	s14, [r3]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80002bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002c0:	edc7 7a05 	vstr	s15, [r7, #20]
    i = ki * integral;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80002d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002d4:	edc7 7a04 	vstr	s15, [r7, #16]
    d = kd * differential;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	ed93 7a02 	vldr	s14, [r3, #8]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80002e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002e8:	edc7 7a03 	vstr	s15, [r7, #12]

    float u = p + i + d;
 80002ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80002f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80002f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80002fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000300:	edc7 7a07 	vstr	s15, [r7, #28]
    uuuuuu = u;
 8000304:	4a47      	ldr	r2, [pc, #284]	@ (8000424 <_ZN8DC_motor6PI_runEv+0x20c>)
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	6013      	str	r3, [r2, #0]

    if (u > 1.0f) u = 1.0f;
 800030a:	edd7 7a07 	vldr	s15, [r7, #28]
 800030e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031a:	dd03      	ble.n	8000324 <_ZN8DC_motor6PI_runEv+0x10c>
 800031c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000320:	61fb      	str	r3, [r7, #28]
 8000322:	e00a      	b.n	800033a <_ZN8DC_motor6PI_runEv+0x122>
    else if (u < -1.0f) u = -1.0f;
 8000324:	edd7 7a07 	vldr	s15, [r7, #28]
 8000328:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800032c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000334:	d501      	bpl.n	800033a <_ZN8DC_motor6PI_runEv+0x122>
 8000336:	4b3c      	ldr	r3, [pc, #240]	@ (8000428 <_ZN8DC_motor6PI_runEv+0x210>)
 8000338:	61fb      	str	r3, [r7, #28]

    pulse = fabsf(u) * arr;
 800033a:	edd7 7a07 	vldr	s15, [r7, #28]
 800033e:	eeb0 7ae7 	vabs.f32	s14, s15
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000346:	ee07 3a90 	vmov	s15, r3
 800034a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000356:	ee17 2a90 	vmov	r2, s15
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	639a      	str	r2, [r3, #56]	@ 0x38

    if (u > 0) {
 800035e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800036a:	dd09      	ble.n	8000380 <_ZN8DC_motor6PI_runEv+0x168>
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	f001 fbc3 	bl	8001b04 <HAL_GPIO_WritePin>
 800037e:	e008      	b.n	8000392 <_ZN8DC_motor6PI_runEv+0x17a>
    } else {
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800038a:	2201      	movs	r2, #1
 800038c:	4619      	mov	r1, r3
 800038e:	f001 fbb9 	bl	8001b04 <HAL_GPIO_WritePin>
    }

    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	2b00      	cmp	r3, #0
 8000398:	d107      	bne.n	80003aa <_ZN8DC_motor6PI_runEv+0x192>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800039e:	b29a      	uxth	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80003a8:	e036      	b.n	8000418 <_ZN8DC_motor6PI_runEv+0x200>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d107      	bne.n	80003c2 <_ZN8DC_motor6PI_runEv+0x1aa>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80003c0:	e02a      	b.n	8000418 <_ZN8DC_motor6PI_runEv+0x200>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d107      	bne.n	80003da <_ZN8DC_motor6PI_runEv+0x1c2>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003d8:	e01e      	b.n	8000418 <_ZN8DC_motor6PI_runEv+0x200>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003de:	2b0c      	cmp	r3, #12
 80003e0:	d107      	bne.n	80003f2 <_ZN8DC_motor6PI_runEv+0x1da>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80003f0:	e012      	b.n	8000418 <_ZN8DC_motor6PI_runEv+0x200>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f6:	2b10      	cmp	r3, #16
 80003f8:	d107      	bne.n	800040a <_ZN8DC_motor6PI_runEv+0x1f2>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003fe:	b29a      	uxth	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000408:	e006      	b.n	8000418 <_ZN8DC_motor6PI_runEv+0x200>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, (uint16_t)pulse);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800040e:	b29a      	uxth	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	42c80000 	.word	0x42c80000
 8000424:	2000002c 	.word	0x2000002c
 8000428:	bf800000 	.word	0xbf800000

0800042c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	621a      	str	r2, [r3, #32]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <_ZN8DC_motor12update_speedEi>:


void DC_motor::update_speed(int sign){
 800044a:	b480      	push	{r7}
 800044c:	b085      	sub	sp, #20
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
    int16_t enc ;
    enc = __HAL_TIM_GetCounter(enc_htim);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045c:	81fb      	strh	r3, [r7, #14]
    speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	ee07 3a90 	vmov	s15, r3
 8000464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800046c:	ee07 3a90 	vmov	s15, r3
 8000470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000474:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	ee07 3a90 	vmov	s15, r3
 8000482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800048c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800049a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	edc3 7a07 	vstr	s15, [r3, #28]
    total_encoder_count += sign * enc;  // 累加encoder計數，注意正負方向
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80004a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004ac:	6839      	ldr	r1, [r7, #0]
 80004ae:	fb01 f303 	mul.w	r3, r1, r3
 80004b2:	441a      	add	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	651a      	str	r2, [r3, #80]	@ 0x50
    __HAL_TIM_SetCounter(enc_htim,0);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	4619      	mov	r1, r3
 80004e0:	4610      	mov	r0, r2
 80004e2:	f002 fdb9 	bl	8003058 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 ffa5 	bl	800343c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004f6:	2104      	movs	r1, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 ff9f 	bl	800343c <HAL_TIM_Encoder_Start>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <_ZN8DC_motor19mark_start_positionEv>:
float DC_motor::get_current_height() const {
    return total_encoder_count * mm_per_step;
}

// 記錄起始位置
void DC_motor::mark_start_position() {
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
    start_position = total_encoder_count;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_ZNK8DC_motor20get_steps_from_startEv>:

// 取得從起始位置走了多少步
int32_t DC_motor::get_steps_from_start() const {
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    return total_encoder_count - start_position;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000532:	1ad3      	subs	r3, r2, r3
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 ffc3 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f812 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fae2 	bl	8000b14 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000550:	f000 f88e 	bl	8000670 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000554:	f000 f944 	bl	80007e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000558:	f000 f990 	bl	800087c <MX_TIM3_Init>
  MX_TIM4_Init();
 800055c:	f000 f9e4 	bl	8000928 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000560:	f000 fa38 	bl	80009d4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000564:	f000 f844 	bl	80005f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000568:	f000 fc2c 	bl	8000dc4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <main+0x2c>

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2238      	movs	r2, #56	@ 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f918 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000596:	f001 fc17 	bl	8001dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	2302      	movs	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2340      	movs	r3, #64	@ 0x40
 80005a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fcbd 	bl	8001f30 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005bc:	f000 fb42 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 ffbb 	bl	8002554 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005e4:	f000 fb2e 	bl	8000c44 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f001 fa9a 	bl	8001b64 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 fb05 	bl	8000c44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f001 fb2c 	bl	8001c9a <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 fafc 	bl	8000c44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f001 fb6e 	bl	8001d30 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 faf3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000030 	.word	0x20000030
 8000668:	40005400 	.word	0x40005400
 800066c:	00503d58 	.word	0x00503d58

08000670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b098      	sub	sp, #96	@ 0x60
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000676:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000682:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2234      	movs	r2, #52	@ 0x34
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f004 f889 	bl	80047b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a2:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006a4:	4a4d      	ldr	r2, [pc, #308]	@ (80007dc <MX_TIM1_Init+0x16c>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80006a8:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006aa:	220f      	movs	r2, #15
 80006ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b4a      	ldr	r3, [pc, #296]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80006b4:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006b6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b46      	ldr	r3, [pc, #280]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c2:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b43      	ldr	r3, [pc, #268]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ce:	4842      	ldr	r0, [pc, #264]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006d0:	f002 fb6b 	bl	8002daa <HAL_TIM_PWM_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 fab3 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e2:	2300      	movs	r3, #0
 80006e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ee:	4619      	mov	r1, r3
 80006f0:	4839      	ldr	r0, [pc, #228]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80006f2:	f003 ff0b 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006fc:	f000 faa2 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000700:	2360      	movs	r3, #96	@ 0x60
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000708:	2300      	movs	r3, #0
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800071c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	482c      	ldr	r0, [pc, #176]	@ (80007d8 <MX_TIM1_Init+0x168>)
 8000726:	f003 f867 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000730:	f000 fa88 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000734:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000738:	2204      	movs	r2, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4826      	ldr	r0, [pc, #152]	@ (80007d8 <MX_TIM1_Init+0x168>)
 800073e:	f003 f85b 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000748:	f000 fa7c 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800074c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000750:	2208      	movs	r2, #8
 8000752:	4619      	mov	r1, r3
 8000754:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <MX_TIM1_Init+0x168>)
 8000756:	f003 f84f 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000760:	f000 fa70 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000764:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000768:	220c      	movs	r2, #12
 800076a:	4619      	mov	r1, r3
 800076c:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <MX_TIM1_Init+0x168>)
 800076e:	f003 f843 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000778:	f000 fa64 	bl	8000c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80007ba:	f003 ff29 	bl	8004610 <HAL_TIMEx_ConfigBreakDeadTime>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80007c4:	f000 fa3e 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_TIM1_Init+0x168>)
 80007ca:	f000 fd87 	bl	80012dc <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3760      	adds	r7, #96	@ 0x60
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000804:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000808:	220f      	movs	r2, #15
 800080a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_TIM2_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000814:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000818:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_TIM2_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000826:	4814      	ldr	r0, [pc, #80]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000828:	f002 fa68 	bl	8002cfc <HAL_TIM_Base_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000832:	f000 fa07 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000844:	f003 f8ec 	bl	8003a20 <HAL_TIM_ConfigClockSource>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800084e:	f000 f9f9 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <MX_TIM2_Init+0x98>)
 8000860:	f003 fe54 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800086a:	f000 f9eb 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000d0 	.word	0x200000d0

0800087c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2224      	movs	r2, #36	@ 0x24
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 ff92 	bl	80047b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_TIM3_Init+0xa4>)
 800089c:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <MX_TIM3_Init+0xa8>)
 800089e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_TIM3_Init+0xa4>)
 80008ec:	f002 fd00 	bl	80032f0 <HAL_TIM_Encoder_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008f6:	f000 f9a5 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_TIM3_Init+0xa4>)
 8000908:	f003 fe00 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000912:	f000 f997 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	@ 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000011c 	.word	0x2000011c
 8000924:	40000400 	.word	0x40000400

08000928 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2224      	movs	r2, #36	@ 0x24
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f003 ff3c 	bl	80047b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_TIM4_Init+0xa4>)
 8000948:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <MX_TIM4_Init+0xa8>)
 800094a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_TIM4_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_TIM4_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_TIM4_Init+0xa4>)
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_TIM4_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <MX_TIM4_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800096c:	2301      	movs	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_TIM4_Init+0xa4>)
 8000998:	f002 fcaa 	bl	80032f0 <HAL_TIM_Encoder_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009a2:	f000 f94f 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <MX_TIM4_Init+0xa4>)
 80009b4:	f003 fdaa 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009be:	f000 f941 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	@ 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000168 	.word	0x20000168
 80009d0:	40000800 	.word	0x40000800

080009d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b098      	sub	sp, #96	@ 0x60
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2234      	movs	r2, #52	@ 0x34
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fed7 	bl	80047b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a06:	4b41      	ldr	r3, [pc, #260]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a08:	4a41      	ldr	r2, [pc, #260]	@ (8000b10 <MX_TIM8_Init+0x13c>)
 8000a0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a0e:	220f      	movs	r2, #15
 8000a10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000a18:	4b3c      	ldr	r3, [pc, #240]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b3a      	ldr	r3, [pc, #232]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a26:	4b39      	ldr	r3, [pc, #228]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a32:	4836      	ldr	r0, [pc, #216]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a34:	f002 f9b9 	bl	8002daa <HAL_TIM_PWM_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f901 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a52:	4619      	mov	r1, r3
 8000a54:	482d      	ldr	r0, [pc, #180]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a56:	f003 fd59 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a60:	f000 f8f0 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a64:	2360      	movs	r3, #96	@ 0x60
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	4820      	ldr	r0, [pc, #128]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000a8a:	f002 feb5 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a94:	f000 f8d6 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481a      	ldr	r0, [pc, #104]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000aa2:	f002 fea9 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000aac:	f000 f8ca 	bl	8000c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000aee:	f003 fd8f 	bl	8004610 <HAL_TIMEx_ConfigBreakDeadTime>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000af8:	f000 f8a4 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <MX_TIM8_Init+0x138>)
 8000afe:	f000 fbed 	bl	80012dc <HAL_TIM_MspPostInit>

}
 8000b02:	bf00      	nop
 8000b04:	3760      	adds	r7, #96	@ 0x60
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001b4 	.word	0x200001b4
 8000b10:	40013400 	.word	0x40013400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b43      	ldr	r3, [pc, #268]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a42      	ldr	r2, [pc, #264]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a3c      	ldr	r2, [pc, #240]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a36      	ldr	r2, [pc, #216]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b34      	ldr	r3, [pc, #208]	@ (8000c38 <MX_GPIO_Init+0x124>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f240 6109 	movw	r1, #1545	@ 0x609
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f000 ffc2 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000b80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	4829      	ldr	r0, [pc, #164]	@ (8000c3c <MX_GPIO_Init+0x128>)
 8000b98:	f000 fe1a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 8000b9c:	f240 6309 	movw	r3, #1545	@ 0x609
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f000 fe0a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd4:	f000 fdfc 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bd8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	@ (8000c40 <MX_GPIO_Init+0x12c>)
 8000bf0:	f000 fdee 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000bf4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_GPIO_Init+0x128>)
 8000c0c:	f000 fde0 	bl	80017d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2017      	movs	r0, #23
 8000c16:	f000 fda6 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f000 fdbd 	bl	800179a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2028      	movs	r0, #40	@ 0x28
 8000c26:	f000 fd9e 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c2a:	2028      	movs	r0, #40	@ 0x28
 8000c2c:	f000 fdb5 	bl	800179a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000400 	.word	0x48000400

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <_ZN5servoC1EP17TIM_HandleTypeDefm>:
public:
    void setup();
    void update_pos(float goalpos,int responseTime);
    void run();

    servo(TIM_HandleTypeDef *_servo_htim, uint32_t _servo_TIM_CHANNEL){
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_ZN5servoC1EP17TIM_HandleTypeDefm+0x70>)
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	771a      	strb	r2, [r3, #28]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c9c:	621a      	str	r2, [r3, #32]
    	servo_htim = _servo_htim;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    	servo_TIM_CHANNEL = _servo_TIM_CHANNEL;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28
    	updateFreqency = 1000;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb0:	621a      	str	r2, [r3, #32]
    };
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	43960000 	.word	0x43960000

08000cc4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
    void mark_start_position();
    
    // 取得從起始位置走了多少步
    int32_t get_steps_from_start() const;

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim, uint32_t _PWM_TIM_CHANNEL) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	807b      	strh	r3, [r7, #2]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8000d90 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xcc>)
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4a2e      	ldr	r2, [pc, #184]	@ (8000d94 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xd0>)
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xd4>)
 8000d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2264      	movs	r2, #100	@ 0x64
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d36:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2200      	movs	r2, #0
 8000d42:	651a      	str	r2, [r3, #80]	@ 0x50
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	@ 0x58
		enc_htim = _enc_htim;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	63da      	str	r2, [r3, #60]	@ 0x3c
		dirPort = _dirPort;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
		dirPin = _dirPin;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	887a      	ldrh	r2, [r7, #2]
 8000d62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		PWM_htim = _PWM_htim;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	649a      	str	r2, [r3, #72]	@ 0x48
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	64da      	str	r2, [r3, #76]	@ 0x4c
		total_encoder_count = 0;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	651a      	str	r2, [r3, #80]	@ 0x50
        mm_per_step = 0;  // 初始化每步對應的高度
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	655a      	str	r2, [r3, #84]	@ 0x54
	};
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	3e570a3d 	.word	0x3e570a3d
 8000d94:	3a03126f 	.word	0x3a03126f
 8000d98:	3a83126f 	.word	0x3a83126f

08000d9c <_Z9setup_allv>:
int gripperLowest = 0;
static int32_t total_steps = 0;  // 用來記錄總步數
void wait(int ,TIM_HandleTypeDef*);
void mission_3();

void setup_all(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	servo_gripper.setup();
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <_Z9setup_allv+0x1c>)
 8000da2:	f000 f923 	bl	8000fec <_ZN5servo5setupEv>
	Motor_forword.setup();
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <_Z9setup_allv+0x20>)
 8000da8:	f7ff fb91 	bl	80004ce <_ZN8DC_motor5setupEv>
	Motor_updown.setup();
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <_Z9setup_allv+0x24>)
 8000dae:	f7ff fb8e 	bl	80004ce <_ZN8DC_motor5setupEv>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200002b8 	.word	0x200002b8
 8000dbc:	20000200 	.word	0x20000200
 8000dc0:	2000025c 	.word	0x2000025c

08000dc4 <main_function>:
void main_function(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	setup_all();
 8000dc8:	f7ff ffe8 	bl	8000d9c <_Z9setup_allv>

	while(1){
		mission_3();
 8000dcc:	f000 f802 	bl	8000dd4 <_Z9mission_3v>
 8000dd0:	e7fc      	b.n	8000dcc <main_function+0x8>
	...

08000dd4 <_Z9mission_3v>:
	servo_gripper.update_pos(300, 1);  //open
	servo_gripper.run();
	wait(1000, &htim2);

}
void mission_3(){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    
    // 第一次執行時初始化
    if (!initialized) {
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <_Z9mission_3v+0x74>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f083 0301 	eor.w	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d008      	beq.n	8000dfa <_Z9mission_3v+0x26>
        Motor_updown.mark_start_position();  // 記錄起始位置
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <_Z9mission_3v+0x78>)
 8000dea:	f7ff fb8c 	bl	8000506 <_ZN8DC_motor19mark_start_positionEv>
        initialized = true;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <_Z9mission_3v+0x74>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
        total_steps = 0;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <_Z9mission_3v+0x7c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
    }

    // 執行馬達控制
    Motor_updown.PI_run();
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <_Z9mission_3v+0x78>)
 8000dfc:	f7ff fa0c 	bl	8000218 <_ZN8DC_motor6PI_runEv>
    Motor_updown.setspeed(speeds);
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <_Z9mission_3v+0x80>)
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0a:	4810      	ldr	r0, [pc, #64]	@ (8000e4c <_Z9mission_3v+0x78>)
 8000e0c:	f7ff fb0e 	bl	800042c <_ZN8DC_motor8setspeedEf>
    Motor_updown.update_speed(1);  // 更新encoder計數
 8000e10:	2101      	movs	r1, #1
 8000e12:	480e      	ldr	r0, [pc, #56]	@ (8000e4c <_Z9mission_3v+0x78>)
 8000e14:	f7ff fb19 	bl	800044a <_ZN8DC_motor12update_speedEi>
    
    // 取得走了多少步
    int32_t steps = Motor_updown.get_steps_from_start();
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <_Z9mission_3v+0x78>)
 8000e1a:	f7ff fb82 	bl	8000522 <_ZNK8DC_motor20get_steps_from_startEv>
 8000e1e:	6078      	str	r0, [r7, #4]
    total_steps = abs(steps);  // 更新總步數
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb8      	it	lt
 8000e26:	425b      	neglt	r3, r3
 8000e28:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <_Z9mission_3v+0x7c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    
    // 顯示目前步數
    high = (float)total_steps;  // 使用high變數來顯示步數
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_Z9mission_3v+0x7c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_Z9mission_3v+0x84>)
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
    
    // 當碰到限位開關時，記錄最終步數並停止
    /*if (gripperHighest || gripperLowest) {
        speeds = 0;
    }*/
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	2000025c 	.word	0x2000025c
 8000e50:	20000324 	.word	0x20000324
 8000e54:	20000310 	.word	0x20000310
 8000e58:	20000314 	.word	0x20000314

08000e5c <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Stop_IT(htim);

	delay_count = 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e6c:	d108      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x24>
		delay_count++;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e76:	6013      	str	r3, [r2, #0]
        Motor_updown.update_speed(1);  // 定期更新encoder計數
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e7c:	f7ff fae5 	bl	800044a <_ZN8DC_motor12update_speedEi>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000318 	.word	0x20000318
 8000e8c:	2000025c 	.word	0x2000025c

08000e90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ea0:	d01d      	beq.n	8000ede <HAL_GPIO_EXTI_Callback+0x4e>
 8000ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ea6:	d13e      	bne.n	8000f26 <HAL_GPIO_EXTI_Callback+0x96>
		case GPIO_PIN_13:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4820      	ldr	r0, [pc, #128]	@ (8000f30 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000eae:	f000 fe11 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d02e      	beq.n	8000f20 <HAL_GPIO_EXTI_Callback+0x90>
				speeds = 0;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
				gripperHighest = 1;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
				gripperLowest = 0;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_GPIO_EXTI_Callback+0xac>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
				high = 100;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000eda:	601a      	str	r2, [r3, #0]
			}
			//Motor_updown.setspeed(speeds);
			break;
 8000edc:	e020      	b.n	8000f20 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_12:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ee4:	f000 fdf6 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf0c      	ite	eq
 8000eee:	2301      	moveq	r3, #1
 8000ef0:	2300      	movne	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d015      	beq.n	8000f24 <HAL_GPIO_EXTI_Callback+0x94>
				initialized = false;  // 重置初始化狀態
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
				speeds = -1;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0xbc>)
 8000f02:	601a      	str	r2, [r3, #0]
				gripperHighest = 0;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
				gripperLowest = 1;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_GPIO_EXTI_Callback+0xac>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
				high = 0;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
				total_steps = 0;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
				//HAL_Delay(1000);
			}

			//Motor_updown.setspeed(speeds);
			break;
 8000f1e:	e001      	b.n	8000f24 <HAL_GPIO_EXTI_Callback+0x94>
			break;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_EXTI_Callback+0x96>
			break;
 8000f24:	bf00      	nop

	}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	48000800 	.word	0x48000800
 8000f34:	20000310 	.word	0x20000310
 8000f38:	2000031c 	.word	0x2000031c
 8000f3c:	20000320 	.word	0x20000320
 8000f40:	20000314 	.word	0x20000314
 8000f44:	42c80000 	.word	0x42c80000
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	bf800000 	.word	0xbf800000
 8000f50:	20000324 	.word	0x20000324

08000f54 <_Z41__static_initialization_and_destruction_0ii>:
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d126      	bne.n	8000fb2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d121      	bne.n	8000fb2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
DC_motor Motor_forword = {&htim3, GPIOA, GPIO_PIN_9, &htim8, TIM_CHANNEL_1};
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f7a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f7e:	4910      	ldr	r1, [pc, #64]	@ (8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000f80:	4810      	ldr	r0, [pc, #64]	@ (8000fc4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000f82:	f7ff fe9f 	bl	8000cc4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2};
 8000f86:	2304      	movs	r3, #4
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f96:	490c      	ldr	r1, [pc, #48]	@ (8000fc8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000f9a:	f7ff fe93 	bl	8000cc4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
servo servo_gripper = {&htim1, TIM_CHANNEL_3};
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	490b      	ldr	r1, [pc, #44]	@ (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000fa2:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000fa4:	f7ff fe54 	bl	8000c50 <_ZN5servoC1EP17TIM_HandleTypeDefm>
servo servo_trun = {&htim1, TIM_CHANNEL_2};
 8000fa8:	2204      	movs	r2, #4
 8000faa:	4909      	ldr	r1, [pc, #36]	@ (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000fac:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000fae:	f7ff fe4f 	bl	8000c50 <_ZN5servoC1EP17TIM_HandleTypeDefm>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001b4 	.word	0x200001b4
 8000fc0:	2000011c 	.word	0x2000011c
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	20000168 	.word	0x20000168
 8000fcc:	2000025c 	.word	0x2000025c
 8000fd0:	20000084 	.word	0x20000084
 8000fd4:	200002b8 	.word	0x200002b8
 8000fd8:	200002e4 	.word	0x200002e4

08000fdc <_GLOBAL__sub_I_Motor_forword>:
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff ffb5 	bl	8000f54 <_Z41__static_initialization_and_destruction_0ii>
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN5servo5setupEv>:
#include "stm32g4xx_hal.h"
int pulse = 0;
float pos = 0;
float distance = 0;

void servo::setup(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(servo_htim, servo_TIM_CHANNEL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f001 ff2a 	bl	8002e58 <HAL_TIM_PWM_Start>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	@ 0x60
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_MspInit+0x44>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_MspInit+0x44>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	@ 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_MspInit+0x44>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001042:	f000 ff65 	bl	8001f10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09c      	sub	sp, #112	@ 0x70
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	2244      	movs	r2, #68	@ 0x44
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fb9d 	bl	80047b4 <memset>
  if(hi2c->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2e      	ldr	r2, [pc, #184]	@ (8001138 <HAL_I2C_MspInit+0xe4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d154      	bne.n	800112e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001084:	2340      	movs	r3, #64	@ 0x40
 8001086:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fc43 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800109c:	f7ff fdd2 	bl	8000c44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	4a25      	ldr	r2, [pc, #148]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a1f      	ldr	r2, [pc, #124]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d6:	2312      	movs	r3, #18
 80010d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e2:	2304      	movs	r3, #4
 80010e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f000 fb6e 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001106:	2304      	movs	r3, #4
 8001108:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800110e:	4619      	mov	r1, r3
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <HAL_I2C_MspInit+0xec>)
 8001112:	f000 fb5d 	bl	80017d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 800111c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_I2C_MspInit+0xe8>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800112e:	bf00      	nop
 8001130:	3770      	adds	r7, #112	@ 0x70
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40005400 	.word	0x40005400
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400

08001144 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10c      	bne.n	8001170 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 800115c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800116e:	e010      	b.n	8001192 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10b      	bne.n	8001192 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001180:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001184:	6613      	str	r3, [r2, #96]	@ 0x60
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40013400 	.word	0x40013400

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011bc:	d113      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fac3 	bl	8001766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fada 	bl	800179a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2f      	ldr	r2, [pc, #188]	@ (80012d0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d129      	bne.n	800126a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001216:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	4a2e      	ldr	r2, [pc, #184]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6593      	str	r3, [r2, #88]	@ 0x58
 8001222:	4b2c      	ldr	r3, [pc, #176]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001246:	2350      	movs	r3, #80	@ 0x50
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001256:	2302      	movs	r3, #2
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001264:	f000 fab4 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001268:	e02e      	b.n	80012c8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d129      	bne.n	80012c8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80012b6:	230a      	movs	r3, #10
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c4:	f000 fa84 	bl	80017d0 <HAL_GPIO_Init>
}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	@ 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40000400 	.word	0x40000400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40000800 	.word	0x40000800

080012dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <HAL_TIM_MspPostInit+0xa8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11c      	bne.n	8001338 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001316:	230f      	movs	r3, #15
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001326:	2302      	movs	r3, #2
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4816      	ldr	r0, [pc, #88]	@ (800138c <HAL_TIM_MspPostInit+0xb0>)
 8001332:	f000 fa4d 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001336:	e020      	b.n	800137a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <HAL_TIM_MspPostInit+0xb4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11b      	bne.n	800137a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_TIM_MspPostInit+0xac>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135a:	23c0      	movs	r3, #192	@ 0xc0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800136a:	2304      	movs	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <HAL_TIM_MspPostInit+0xb0>)
 8001376:	f000 fa2b 	bl	80017d0 <HAL_GPIO_Init>
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40021000 	.word	0x40021000
 800138c:	48000800 	.word	0x48000800
 8001390:	40013400 	.word	0x40013400

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f8c3 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013fa:	f000 fb9b 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80013fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001402:	f000 fb97 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <TIM2_IRQHandler+0x10>)
 8001412:	f002 f8a1 	bl	8003558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000d0 	.word	0x200000d0

08001420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001424:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001428:	f000 fb84 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800142c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001430:	f000 fb80 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001434:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001438:	f000 fb7c 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800143c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001440:	f000 fb78 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001444:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001448:	f000 fb74 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800144c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001450:	f000 fb70 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800147c:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ffea 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f003 f98b 	bl	80047c4 <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80014ae:	f7ff f847 	bl	8000540 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   r0, =_estack
 80014b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014c0:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 80014c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014c8:	2000032c 	.word	0x2000032c

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f939 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f80e 	bl	8001500 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fd8c 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]

}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_InitTick+0x68>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d022      	beq.n	800155a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_InitTick+0x6c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_InitTick+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f944 	bl	80017b6 <HAL_SYSTICK_Config>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d809      	bhi.n	800154e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153a:	2200      	movs	r2, #0
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	f04f 30ff 	mov.w	r0, #4294967295
 8001542:	f000 f910 	bl	8001766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_InitTick+0x70>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e007      	b.n	800155e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e004      	b.n	800155e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000004 	.word	0x20000004
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_IncTick+0x1c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_IncTick+0x20>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <HAL_IncTick+0x1c>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000328 	.word	0x20000328
 8001594:	2000000c 	.word	0x2000000c

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000328 	.word	0x20000328

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	@ (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	@ (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	@ 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff8e 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff29 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff40 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff90 	bl	80016a4 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5f 	bl	8001650 <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff33 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa4 	bl	800170c <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017de:	e15a      	b.n	8001a96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 814c 	beq.w	8001a90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a6 	beq.w	8001a90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab4 <HAL_GPIO_Init+0x2e4>)
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab4 <HAL_GPIO_Init+0x2e4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001950:	4b58      	ldr	r3, [pc, #352]	@ (8001ab4 <HAL_GPIO_Init+0x2e4>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_GPIO_Init+0x2e8>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001986:	d01f      	beq.n	80019c8 <HAL_GPIO_Init+0x1f8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4c      	ldr	r2, [pc, #304]	@ (8001abc <HAL_GPIO_Init+0x2ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d019      	beq.n	80019c4 <HAL_GPIO_Init+0x1f4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac4 <HAL_GPIO_Init+0x2f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1ec>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a49      	ldr	r2, [pc, #292]	@ (8001ac8 <HAL_GPIO_Init+0x2f8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1e8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a48      	ldr	r2, [pc, #288]	@ (8001acc <HAL_GPIO_Init+0x2fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1e4>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e00a      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019b4:	2306      	movs	r3, #6
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	@ (8001ab8 <HAL_GPIO_Init+0x2e8>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e8:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0c:	4a30      	ldr	r2, [pc, #192]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a36:	4a26      	ldr	r2, [pc, #152]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a60:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f ae9d 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	48001400 	.word	0x48001400
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f99c 	bl	8000e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e08d      	b.n	8001c92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fa62 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	@ 0x24
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d108      	bne.n	8001c06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	e007      	b.n	8001c16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d138      	bne.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e032      	b.n	8001d24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2224      	movs	r2, #36	@ 0x24
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d139      	bne.n	8001dba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e033      	b.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2224      	movs	r2, #36	@ 0x24
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d141      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de2:	d131      	bne.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de4:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dea:	4a46      	ldr	r2, [pc, #280]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df4:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dfc:	4a41      	ldr	r2, [pc, #260]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e04:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2232      	movs	r2, #50	@ 0x32
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1a:	e002      	b.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e22:	4b38      	ldr	r3, [pc, #224]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2e:	d102      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f2      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e36:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e42:	d158      	bne.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e057      	b.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e48:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e58:	e04d      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e60:	d141      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	d131      	bne.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2232      	movs	r2, #50	@ 0x32
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea6:	e002      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d102      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d112      	bne.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e011      	b.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ee4:	e007      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eee:	4a05      	ldr	r2, [pc, #20]	@ (8001f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40007000 	.word	0x40007000
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1e:	6093      	str	r3, [r2, #8]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40007000 	.word	0x40007000

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e2fe      	b.n	8002540 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4e:	4b97      	ldr	r3, [pc, #604]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	4b94      	ldr	r3, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3e>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_OscConfig+0x44>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b8d      	ldr	r3, [pc, #564]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e2d9      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x74>
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a84      	ldr	r2, [pc, #528]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b7f      	ldr	r3, [pc, #508]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b7c      	ldr	r3, [pc, #496]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7b      	ldr	r2, [pc, #492]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	4b78      	ldr	r3, [pc, #480]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a77      	ldr	r2, [pc, #476]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b75      	ldr	r3, [pc, #468]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a74      	ldr	r2, [pc, #464]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fad6 	bl	8001598 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fad2 	bl	8001598 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e29e      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fac2 	bl	8001598 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fabe 	bl	8001598 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	@ 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e28a      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202a:	4b60      	ldr	r3, [pc, #384]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002050:	4b56      	ldr	r3, [pc, #344]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0x136>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d002      	beq.n	800206c <HAL_RCC_OscConfig+0x13c>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11f      	bne.n	80020ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206c:	4b4f      	ldr	r3, [pc, #316]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_OscConfig+0x154>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e25d      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	4946      	ldr	r1, [pc, #280]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002098:	4b45      	ldr	r3, [pc, #276]	@ (80021b0 <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fa2f 	bl	8001500 <HAL_InitTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d043      	beq.n	8002130 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e249      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3c      	ldr	r2, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff fa6a 	bl	8001598 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7ff fa66 	bl	8001598 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e232      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020da:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	492d      	ldr	r1, [pc, #180]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
 80020fa:	e01a      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002102:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fa46 	bl	8001598 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002110:	f7ff fa42 	bl	8001598 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e20e      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x1e0>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d041      	beq.n	80021c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01c      	beq.n	8002180 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fa1f 	bl	8001598 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7ff fa1b 	bl	8001598 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1e7      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ef      	beq.n	800215e <HAL_RCC_OscConfig+0x22e>
 800217e:	e020      	b.n	80021c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <HAL_RCC_OscConfig+0x27c>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff fa02 	bl	8001598 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002196:	e00d      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f9fe 	bl	8001598 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d906      	bls.n	80021b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1ca      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b4:	4b8c      	ldr	r3, [pc, #560]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ea      	bne.n	8002198 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a6 	beq.w	800231c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d4:	4b84      	ldr	r3, [pc, #528]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2b4>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x2b6>
 80021e4:	2300      	movs	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	4a7e      	ldr	r2, [pc, #504]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f6:	4b7c      	ldr	r3, [pc, #496]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002206:	4b79      	ldr	r3, [pc, #484]	@ (80023ec <HAL_RCC_OscConfig+0x4bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002212:	4b76      	ldr	r3, [pc, #472]	@ (80023ec <HAL_RCC_OscConfig+0x4bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a75      	ldr	r2, [pc, #468]	@ (80023ec <HAL_RCC_OscConfig+0x4bc>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7ff f9bb 	bl	8001598 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff f9b7 	bl	8001598 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e183      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002238:	4b6c      	ldr	r3, [pc, #432]	@ (80023ec <HAL_RCC_OscConfig+0x4bc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_RCC_OscConfig+0x32e>
 800224c:	4b66      	ldr	r3, [pc, #408]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	4a65      	ldr	r2, [pc, #404]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225c:	e024      	b.n	80022a8 <HAL_RCC_OscConfig+0x378>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d110      	bne.n	8002288 <HAL_RCC_OscConfig+0x358>
 8002266:	4b60      	ldr	r3, [pc, #384]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226c:	4a5e      	ldr	r2, [pc, #376]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002276:	4b5c      	ldr	r3, [pc, #368]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227c:	4a5a      	ldr	r2, [pc, #360]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002286:	e00f      	b.n	80022a8 <HAL_RCC_OscConfig+0x378>
 8002288:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	4a56      	ldr	r2, [pc, #344]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002298:	4b53      	ldr	r3, [pc, #332]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229e:	4a52      	ldr	r2, [pc, #328]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d016      	beq.n	80022de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f972 	bl	8001598 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7ff f96e 	bl	8001598 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e138      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ce:	4b46      	ldr	r3, [pc, #280]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ed      	beq.n	80022b8 <HAL_RCC_OscConfig+0x388>
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f95b 	bl	8001598 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff f957 	bl	8001598 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e121      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022fc:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ed      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230a:	7ffb      	ldrb	r3, [r7, #31]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d03c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01c      	beq.n	800236a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002336:	4a2c      	ldr	r2, [pc, #176]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff f92a 	bl	8001598 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002348:	f7ff f926 	bl	8001598 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0f2      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ef      	beq.n	8002348 <HAL_RCC_OscConfig+0x418>
 8002368:	e01b      	b.n	80023a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800236a:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 800236c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002370:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f90d 	bl	8001598 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002382:	f7ff f909 	bl	8001598 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0d5      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 8002396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ef      	bne.n	8002382 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80c9 	beq.w	800253e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	f000 8083 	beq.w	80024c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d15e      	bne.n	8002480 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff f8e3 	bl	8001598 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	e00c      	b.n	80023f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff f8df 	bl	8001598 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d905      	bls.n	80023f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0ab      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b55      	ldr	r3, [pc, #340]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ec      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b52      	ldr	r3, [pc, #328]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b52      	ldr	r3, [pc, #328]	@ (800254c <HAL_RCC_OscConfig+0x61c>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a11      	ldr	r1, [r2, #32]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800240c:	3a01      	subs	r2, #1
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002416:	0212      	lsls	r2, r2, #8
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800241e:	0852      	lsrs	r2, r2, #1
 8002420:	3a01      	subs	r2, #1
 8002422:	0552      	lsls	r2, r2, #21
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800242a:	0852      	lsrs	r2, r2, #1
 800242c:	3a01      	subs	r2, #1
 800242e:	0652      	lsls	r2, r2, #25
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	4943      	ldr	r1, [pc, #268]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a40      	ldr	r2, [pc, #256]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800244c:	4b3e      	ldr	r3, [pc, #248]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff f89e 	bl	8001598 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff f89a 	bl	8001598 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e066      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x530>
 800247e:	e05e      	b.n	800253e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff f884 	bl	8001598 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff f880 	bl	8001598 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04c      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a6:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024b2:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4924      	ldr	r1, [pc, #144]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_RCC_OscConfig+0x620>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	60cb      	str	r3, [r1, #12]
 80024be:	e03e      	b.n	800253e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e039      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_OscConfig+0x618>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d12c      	bne.n	800253a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d123      	bne.n	800253a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d11b      	bne.n	800253a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d113      	bne.n	800253a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d109      	bne.n	800253a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	019f800c 	.word	0x019f800c
 8002550:	feeefffc 	.word	0xfeeefffc

08002554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e11e      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b91      	ldr	r3, [pc, #580]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d910      	bls.n	800259c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b8e      	ldr	r3, [pc, #568]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	498c      	ldr	r1, [pc, #560]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b8a      	ldr	r3, [pc, #552]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e106      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d073      	beq.n	8002690 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d129      	bne.n	8002604 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b0:	4b81      	ldr	r3, [pc, #516]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0f4      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025c0:	f000 f966 	bl	8002890 <RCC_GetSysClockFreqFromPLLSource>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4a7c      	ldr	r2, [pc, #496]	@ (80027bc <HAL_RCC_ClockConfig+0x268>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d93f      	bls.n	800264e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ce:	4b7a      	ldr	r3, [pc, #488]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d033      	beq.n	800264e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d12f      	bne.n	800264e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ee:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025f6:	4a70      	ldr	r2, [pc, #448]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80025f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e024      	b.n	800264e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d107      	bne.n	800261c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260c:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0c6      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0be      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800262c:	f000 f8ce 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4a61      	ldr	r2, [pc, #388]	@ (80027bc <HAL_RCC_ClockConfig+0x268>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d909      	bls.n	800264e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800263a:	4b5f      	ldr	r3, [pc, #380]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002642:	4a5d      	ldr	r2, [pc, #372]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 8002644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002648:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4957      	ldr	r1, [pc, #348]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe ff9a 	bl	8001598 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe ff96 	bl	8001598 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e095      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d023      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a42      	ldr	r2, [pc, #264]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026c0:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026c8:	4a3b      	ldr	r2, [pc, #236]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4936      	ldr	r1, [pc, #216]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b80      	cmp	r3, #128	@ 0x80
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026ea:	4b33      	ldr	r3, [pc, #204]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a32      	ldr	r2, [pc, #200]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f6:	4b2f      	ldr	r3, [pc, #188]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d21d      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002704:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 020f 	bic.w	r2, r3, #15
 800270c:	4929      	ldr	r1, [pc, #164]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002714:	f7fe ff40 	bl	8001598 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe ff3c 	bl	8001598 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e03b      	b.n	80027aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d1ed      	bne.n	800271c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4917      	ldr	r1, [pc, #92]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490f      	ldr	r1, [pc, #60]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800277e:	f000 f825 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490c      	ldr	r1, [pc, #48]	@ (80027c0 <HAL_RCC_ClockConfig+0x26c>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x270>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_RCC_ClockConfig+0x274>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe feac 	bl	8001500 <HAL_InitTick>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	04c4b400 	.word	0x04c4b400
 80027c0:	08004824 	.word	0x08004824
 80027c4:	20000004 	.word	0x20000004
 80027c8:	20000008 	.word	0x20000008

080027cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027de:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e047      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027e4:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d102      	bne.n	80027f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e03e      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d136      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d10c      	bne.n	800283a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002820:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282a:	68d2      	ldr	r2, [r2, #12]
 800282c:	0a12      	lsrs	r2, r2, #8
 800282e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
      break;
 8002838:	e00c      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	0a12      	lsrs	r2, r2, #8
 8002848:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
      break;
 8002852:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0e5b      	lsrs	r3, r3, #25
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e001      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002874:	693b      	ldr	r3, [r7, #16]
}
 8002876:	4618      	mov	r0, r3
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d10c      	bne.n	80028ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b4:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	0a12      	lsrs	r2, r2, #8
 80028c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
    break;
 80028cc:	e00c      	b.n	80028e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0a12      	lsrs	r2, r2, #8
 80028dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    break;
 80028e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0e5b      	lsrs	r3, r3, #25
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002902:	687b      	ldr	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	00f42400 	.word	0x00f42400

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002924:	2300      	movs	r3, #0
 8002926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002928:	2300      	movs	r3, #0
 800292a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8098 	beq.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	@ 0x58
 8002956:	4b3d      	ldr	r3, [pc, #244]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002966:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a39      	ldr	r2, [pc, #228]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002972:	f7fe fe11 	bl	8001598 <HAL_GetTick>
 8002976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002978:	e009      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fe0d 	bl	8001598 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	74fb      	strb	r3, [r7, #19]
        break;
 800298c:	e005      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298e:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d159      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01e      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d019      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	4a1f      	ldr	r2, [pc, #124]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a1b      	ldr	r2, [pc, #108]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e8:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fdcd 	bl	8001598 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a00:	e00b      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fdc9 	bl	8001598 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d902      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	74fb      	strb	r3, [r7, #19]
            break;
 8002a18:	e006      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ec      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	74bb      	strb	r3, [r7, #18]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a58:	7c7b      	ldrb	r3, [r7, #17]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4ba6      	ldr	r3, [pc, #664]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	4aa5      	ldr	r2, [pc, #660]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a76:	4ba0      	ldr	r3, [pc, #640]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	f023 0203 	bic.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	499c      	ldr	r1, [pc, #624]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a98:	4b97      	ldr	r3, [pc, #604]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	f023 020c 	bic.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4994      	ldr	r1, [pc, #592]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aba:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	498b      	ldr	r1, [pc, #556]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002adc:	4b86      	ldr	r3, [pc, #536]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	4983      	ldr	r1, [pc, #524]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002afe:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	497a      	ldr	r1, [pc, #488]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b20:	4b75      	ldr	r3, [pc, #468]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	4972      	ldr	r1, [pc, #456]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b42:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4969      	ldr	r1, [pc, #420]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b64:	4b64      	ldr	r3, [pc, #400]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4961      	ldr	r1, [pc, #388]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	4958      	ldr	r1, [pc, #352]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba8:	4b53      	ldr	r3, [pc, #332]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb6:	4950      	ldr	r1, [pc, #320]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be0:	4b45      	ldr	r3, [pc, #276]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	4942      	ldr	r1, [pc, #264]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c18:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4934      	ldr	r1, [pc, #208]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c50:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5e:	4926      	ldr	r1, [pc, #152]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b21      	ldr	r3, [pc, #132]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a20      	ldr	r2, [pc, #128]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	4918      	ldr	r1, [pc, #96]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e049      	b.n	8002da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fa42 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 ff92 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e049      	b.n	8002e50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fe f9b7 	bl	8001144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f000 ff3b 	bl	8003c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_TIM_PWM_Start+0x24>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e03c      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x9e>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d109      	bne.n	8002e96 <HAL_TIM_PWM_Start+0x3e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e02f      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x9e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x58>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e022      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x9e>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d109      	bne.n	8002eca <HAL_TIM_PWM_Start+0x72>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e015      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x9e>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x8c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x9e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e097      	b.n	800302e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xb6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f0c:	e023      	b.n	8002f56 <HAL_TIM_PWM_Start+0xfe>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xc6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f1c:	e01b      	b.n	8002f56 <HAL_TIM_PWM_Start+0xfe>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xd6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f2c:	e013      	b.n	8002f56 <HAL_TIM_PWM_Start+0xfe>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_PWM_Start+0xe6>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f3c:	e00b      	b.n	8002f56 <HAL_TIM_PWM_Start+0xfe>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_PWM_Start+0xf6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f4c:	e003      	b.n	8002f56 <HAL_TIM_PWM_Start+0xfe>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 faae 	bl	80044c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a33      	ldr	r2, [pc, #204]	@ (8003038 <HAL_TIM_PWM_Start+0x1e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x13e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a32      	ldr	r2, [pc, #200]	@ (800303c <HAL_TIM_PWM_Start+0x1e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x13e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a30      	ldr	r2, [pc, #192]	@ (8003040 <HAL_TIM_PWM_Start+0x1e8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x13e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2f      	ldr	r2, [pc, #188]	@ (8003044 <HAL_TIM_PWM_Start+0x1ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x13e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2d      	ldr	r2, [pc, #180]	@ (8003048 <HAL_TIM_PWM_Start+0x1f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x142>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_TIM_PWM_Start+0x144>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a20      	ldr	r2, [pc, #128]	@ (8003038 <HAL_TIM_PWM_Start+0x1e0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_TIM_PWM_Start+0x194>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc2:	d013      	beq.n	8002fec <HAL_TIM_PWM_Start+0x194>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	@ (800304c <HAL_TIM_PWM_Start+0x1f4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_TIM_PWM_Start+0x194>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <HAL_TIM_PWM_Start+0x1f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_TIM_PWM_Start+0x194>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	@ (800303c <HAL_TIM_PWM_Start+0x1e4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_PWM_Start+0x194>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	@ (8003040 <HAL_TIM_PWM_Start+0x1e8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d115      	bne.n	8003018 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <HAL_TIM_PWM_Start+0x1fc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d015      	beq.n	800302a <HAL_TIM_PWM_Start+0x1d2>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003004:	d011      	beq.n	800302a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e008      	b.n	800302a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e000      	b.n	800302c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	00010007 	.word	0x00010007

08003058 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_TIM_PWM_Start_IT+0x28>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e03c      	b.n	80030fa <HAL_TIM_PWM_Start_IT+0xa2>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d109      	bne.n	800309a <HAL_TIM_PWM_Start_IT+0x42>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e02f      	b.n	80030fa <HAL_TIM_PWM_Start_IT+0xa2>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d109      	bne.n	80030b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e022      	b.n	80030fa <HAL_TIM_PWM_Start_IT+0xa2>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d109      	bne.n	80030ce <HAL_TIM_PWM_Start_IT+0x76>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e015      	b.n	80030fa <HAL_TIM_PWM_Start_IT+0xa2>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d109      	bne.n	80030e8 <HAL_TIM_PWM_Start_IT+0x90>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e008      	b.n	80030fa <HAL_TIM_PWM_Start_IT+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e2      	b.n	80032c8 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Start_IT+0xba>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003110:	e023      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x102>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Start_IT+0xca>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003120:	e01b      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x102>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start_IT+0xda>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003130:	e013      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x102>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start_IT+0xea>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003140:	e00b      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x102>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start_IT+0xfa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003150:	e003      	b.n	800315a <HAL_TIM_PWM_Start_IT+0x102>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d841      	bhi.n	80031e4 <HAL_TIM_PWM_Start_IT+0x18c>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_TIM_PWM_Start_IT+0x110>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	080031e5 	.word	0x080031e5
 8003170:	080031e5 	.word	0x080031e5
 8003174:	080031e5 	.word	0x080031e5
 8003178:	080031af 	.word	0x080031af
 800317c:	080031e5 	.word	0x080031e5
 8003180:	080031e5 	.word	0x080031e5
 8003184:	080031e5 	.word	0x080031e5
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031e5 	.word	0x080031e5
 8003190:	080031e5 	.word	0x080031e5
 8003194:	080031e5 	.word	0x080031e5
 8003198:	080031d3 	.word	0x080031d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0202 	orr.w	r2, r2, #2
 80031aa:	60da      	str	r2, [r3, #12]
      break;
 80031ac:	e01d      	b.n	80031ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0204 	orr.w	r2, r2, #4
 80031bc:	60da      	str	r2, [r3, #12]
      break;
 80031be:	e014      	b.n	80031ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0208 	orr.w	r2, r2, #8
 80031ce:	60da      	str	r2, [r3, #12]
      break;
 80031d0:	e00b      	b.n	80031ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0210 	orr.w	r2, r2, #16
 80031e0:	60da      	str	r2, [r3, #12]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d16a      	bne.n	80032c6 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 f961 	bl	80044c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	@ (80032d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	@ (80032d8 <HAL_TIM_PWM_Start_IT+0x280>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_TIM_PWM_Start_IT+0x1d8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	@ (80032dc <HAL_TIM_PWM_Start_IT+0x284>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	@ (80032e0 <HAL_TIM_PWM_Start_IT+0x288>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_TIM_PWM_Start_IT+0x1dc>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_TIM_PWM_Start_IT+0x1de>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a20      	ldr	r2, [pc, #128]	@ (80032d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0x22e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325c:	d013      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0x22e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a20      	ldr	r2, [pc, #128]	@ (80032e4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0x22e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_TIM_PWM_Start_IT+0x290>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0x22e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	@ (80032d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIM_PWM_Start_IT+0x22e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <HAL_TIM_PWM_Start_IT+0x280>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d115      	bne.n	80032b2 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <HAL_TIM_PWM_Start_IT+0x294>)
 800328e:	4013      	ands	r3, r2
 8003290:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d015      	beq.n	80032c4 <HAL_TIM_PWM_Start_IT+0x26c>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d011      	beq.n	80032c4 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	e008      	b.n	80032c4 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e000      	b.n	80032c6 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40013400 	.word	0x40013400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	00010007 	.word	0x00010007

080032f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e097      	b.n	8003434 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd ff6b 	bl	80011f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f000 fc8d 	bl	8003c64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	4313      	orrs	r3, r2
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003390:	f023 030c 	bic.w	r3, r3, #12
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800339c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4313      	orrs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	011a      	lsls	r2, r3, #4
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	4313      	orrs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4313      	orrs	r3, r2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800344c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003454:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800345c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003464:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d110      	bne.n	800348e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e069      	b.n	8003550 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800348c:	e031      	b.n	80034f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d110      	bne.n	80034b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003494:	7bbb      	ldrb	r3, [r7, #14]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800349a:	7b3b      	ldrb	r3, [r7, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e055      	b.n	8003550 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b4:	e01d      	b.n	80034f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d108      	bne.n	80034ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c2:	7b7b      	ldrb	r3, [r7, #13]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034c8:	7b3b      	ldrb	r3, [r7, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e03e      	b.n	8003550 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_TIM_Encoder_Start+0xc4>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d008      	beq.n	8003510 <HAL_TIM_Encoder_Start+0xd4>
 80034fe:	e00f      	b.n	8003520 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ffd9 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 800350e:	e016      	b.n	800353e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	2104      	movs	r1, #4
 8003518:	4618      	mov	r0, r3
 800351a:	f000 ffd1 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 800351e:	e00e      	b.n	800353e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ffc9 	bl	80044c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	2104      	movs	r1, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f000 ffc2 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 800353c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0202 	mvn.w	r2, #2
 800358c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fb40 	bl	8003c28 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fb32 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fb43 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0204 	mvn.w	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fb1a 	bl	8003c28 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fb0c 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fb1d 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0208 	mvn.w	r2, #8
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2204      	movs	r2, #4
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 faf4 	bl	8003c28 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fae6 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 faf7 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 face 	bl	8003c28 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fac0 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fad1 	bl	8003c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0201 	mvn.w	r2, #1
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fbcc 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00c      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 f825 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f001 f81d 	bl	8004750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa8b 	bl	8003c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0220 	mvn.w	r2, #32
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 ffe5 	bl	8004728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800377a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fff1 	bl	8004764 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800379e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 ffe9 	bl	8004778 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80037c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 ffe1 	bl	800478c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 ffd9 	bl	80047a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003812:	2302      	movs	r3, #2
 8003814:	e0ff      	b.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b14      	cmp	r3, #20
 8003822:	f200 80f0 	bhi.w	8003a06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003826:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	08003881 	.word	0x08003881
 8003830:	08003a07 	.word	0x08003a07
 8003834:	08003a07 	.word	0x08003a07
 8003838:	08003a07 	.word	0x08003a07
 800383c:	080038c1 	.word	0x080038c1
 8003840:	08003a07 	.word	0x08003a07
 8003844:	08003a07 	.word	0x08003a07
 8003848:	08003a07 	.word	0x08003a07
 800384c:	08003903 	.word	0x08003903
 8003850:	08003a07 	.word	0x08003a07
 8003854:	08003a07 	.word	0x08003a07
 8003858:	08003a07 	.word	0x08003a07
 800385c:	08003943 	.word	0x08003943
 8003860:	08003a07 	.word	0x08003a07
 8003864:	08003a07 	.word	0x08003a07
 8003868:	08003a07 	.word	0x08003a07
 800386c:	08003985 	.word	0x08003985
 8003870:	08003a07 	.word	0x08003a07
 8003874:	08003a07 	.word	0x08003a07
 8003878:	08003a07 	.word	0x08003a07
 800387c:	080039c5 	.word	0x080039c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa88 	bl	8003d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	619a      	str	r2, [r3, #24]
      break;
 80038be:	e0a5      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 faf8 	bl	8003ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6999      	ldr	r1, [r3, #24]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	021a      	lsls	r2, r3, #8
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	619a      	str	r2, [r3, #24]
      break;
 8003900:	e084      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fb61 	bl	8003fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0208 	orr.w	r2, r2, #8
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0204 	bic.w	r2, r2, #4
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	61da      	str	r2, [r3, #28]
      break;
 8003940:	e064      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fbc9 	bl	80040e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800395c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69d9      	ldr	r1, [r3, #28]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	61da      	str	r2, [r3, #28]
      break;
 8003982:	e043      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc32 	bl	80041f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0208 	orr.w	r2, r2, #8
 800399e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039c2:	e023      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fc76 	bl	80042bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	021a      	lsls	r2, r3, #8
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a04:	e002      	b.n	8003a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop

08003a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_TIM_ConfigClockSource+0x1c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0de      	b.n	8003bfa <HAL_TIM_ConfigClockSource+0x1da>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	f000 80a9 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003a7c:	4a61      	ldr	r2, [pc, #388]	@ (8003c04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f200 80ae 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003a84:	4a60      	ldr	r2, [pc, #384]	@ (8003c08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f000 80a1 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f200 80a6 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003a94:	4a5d      	ldr	r2, [pc, #372]	@ (8003c0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f000 8099 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003a9c:	4a5b      	ldr	r2, [pc, #364]	@ (8003c0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f200 809e 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f000 8091 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003aac:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f200 8096 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ab4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ab8:	f000 8089 	beq.w	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003abc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ac0:	f200 808e 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac8:	d03e      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0x128>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ace:	f200 8087 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_TIM_ConfigClockSource+0x1c6>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ade:	d87f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ae0:	2b70      	cmp	r3, #112	@ 0x70
 8003ae2:	d01a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b70      	cmp	r3, #112	@ 0x70
 8003ae6:	d87b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ae8:	2b60      	cmp	r3, #96	@ 0x60
 8003aea:	d050      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x16e>
 8003aec:	2b60      	cmp	r3, #96	@ 0x60
 8003aee:	d877      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003af0:	2b50      	cmp	r3, #80	@ 0x50
 8003af2:	d03c      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x14e>
 8003af4:	2b50      	cmp	r3, #80	@ 0x50
 8003af6:	d873      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d058      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x18e>
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d86f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b00:	2b30      	cmp	r3, #48	@ 0x30
 8003b02:	d064      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003b04:	2b30      	cmp	r3, #48	@ 0x30
 8003b06:	d86b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d060      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d867      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d05a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x1ae>
 8003b18:	e062      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	f000 fca9 	bl	8004480 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	609a      	str	r2, [r3, #8]
      break;
 8003b46:	e04f      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	f000 fc92 	bl	8004480 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b6a:	609a      	str	r2, [r3, #8]
      break;
 8003b6c:	e03c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 fc04 	bl	8004388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2150      	movs	r1, #80	@ 0x50
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fc5d 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e02c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 fc23 	bl	80043e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2160      	movs	r1, #96	@ 0x60
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fc4d 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003bac:	e01c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 fbe4 	bl	8004388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2140      	movs	r1, #64	@ 0x40
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fc3d 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e00c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f000 fc34 	bl	8004446 <TIM_ITRx_SetConfig>
      break;
 8003bde:	e003      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	00100070 	.word	0x00100070
 8003c08:	00100040 	.word	0x00100040
 8003c0c:	00100030 	.word	0x00100030
 8003c10:	00100020 	.word	0x00100020

08003c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a42      	ldr	r2, [pc, #264]	@ (8003d80 <TIM_Base_SetConfig+0x11c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00f      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	@ (8003d84 <TIM_Base_SetConfig+0x120>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d88 <TIM_Base_SetConfig+0x124>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3d      	ldr	r2, [pc, #244]	@ (8003d8c <TIM_Base_SetConfig+0x128>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a33      	ldr	r2, [pc, #204]	@ (8003d80 <TIM_Base_SetConfig+0x11c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <TIM_Base_SetConfig+0x120>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8003d88 <TIM_Base_SetConfig+0x124>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d8c <TIM_Base_SetConfig+0x128>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d90 <TIM_Base_SetConfig+0x12c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d94 <TIM_Base_SetConfig+0x130>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <TIM_Base_SetConfig+0x134>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <TIM_Base_SetConfig+0x11c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00f      	beq.n	8003d4c <TIM_Base_SetConfig+0xe8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <TIM_Base_SetConfig+0x128>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00b      	beq.n	8003d4c <TIM_Base_SetConfig+0xe8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <TIM_Base_SetConfig+0x12c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0xe8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <TIM_Base_SetConfig+0x130>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0xe8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <TIM_Base_SetConfig+0x134>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]
  }
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40013400 	.word	0x40013400
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800

08003d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f023 0201 	bic.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0302 	bic.w	r3, r3, #2
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <TIM_OC1_SetConfig+0x10c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_OC1_SetConfig+0x80>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003eac <TIM_OC1_SetConfig+0x110>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_OC1_SetConfig+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb0 <TIM_OC1_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_OC1_SetConfig+0x80>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <TIM_OC1_SetConfig+0x118>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC1_SetConfig+0x80>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <TIM_OC1_SetConfig+0x11c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10c      	bne.n	8003e36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0308 	bic.w	r3, r3, #8
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <TIM_OC1_SetConfig+0x10c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_OC1_SetConfig+0xc2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1a      	ldr	r2, [pc, #104]	@ (8003eac <TIM_OC1_SetConfig+0x110>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_OC1_SetConfig+0xc2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <TIM_OC1_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_OC1_SetConfig+0xc2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <TIM_OC1_SetConfig+0x118>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC1_SetConfig+0xc2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <TIM_OC1_SetConfig+0x11c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d111      	bne.n	8003e82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40013400 	.word	0x40013400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800

08003ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0210 	bic.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0320 	bic.w	r3, r3, #32
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	@ (8003fbc <TIM_OC2_SetConfig+0x100>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC2_SetConfig+0x6c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a27      	ldr	r2, [pc, #156]	@ (8003fc0 <TIM_OC2_SetConfig+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10d      	bne.n	8003f44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <TIM_OC2_SetConfig+0x100>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00f      	beq.n	8003f6c <TIM_OC2_SetConfig+0xb0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc0 <TIM_OC2_SetConfig+0x104>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_OC2_SetConfig+0xb0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc4 <TIM_OC2_SetConfig+0x108>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_OC2_SetConfig+0xb0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <TIM_OC2_SetConfig+0x10c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC2_SetConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a19      	ldr	r2, [pc, #100]	@ (8003fcc <TIM_OC2_SetConfig+0x110>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d113      	bne.n	8003f94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	@ (80040cc <TIM_OC3_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC3_SetConfig+0x6a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	@ (80040d0 <TIM_OC3_SetConfig+0x100>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10d      	bne.n	8004056 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <TIM_OC3_SetConfig+0xfc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_OC3_SetConfig+0xae>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <TIM_OC3_SetConfig+0x100>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_OC3_SetConfig+0xae>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1a      	ldr	r2, [pc, #104]	@ (80040d4 <TIM_OC3_SetConfig+0x104>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_OC3_SetConfig+0xae>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <TIM_OC3_SetConfig+0x108>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC3_SetConfig+0xae>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <TIM_OC3_SetConfig+0x10c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d113      	bne.n	80040a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <TIM_OC4_SetConfig+0x100>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_OC4_SetConfig+0x6c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a27      	ldr	r2, [pc, #156]	@ (80041e4 <TIM_OC4_SetConfig+0x104>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10d      	bne.n	8004168 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a1d      	ldr	r2, [pc, #116]	@ (80041e0 <TIM_OC4_SetConfig+0x100>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_OC4_SetConfig+0xb0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <TIM_OC4_SetConfig+0x104>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_OC4_SetConfig+0xb0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <TIM_OC4_SetConfig+0x108>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC4_SetConfig+0xb0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a1a      	ldr	r2, [pc, #104]	@ (80041ec <TIM_OC4_SetConfig+0x10c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC4_SetConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <TIM_OC4_SetConfig+0x110>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d113      	bne.n	80041b8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004196:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800419e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40013400 	.word	0x40013400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <TIM_OC5_SetConfig+0xb4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_OC5_SetConfig+0x7a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <TIM_OC5_SetConfig+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_OC5_SetConfig+0x7a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <TIM_OC5_SetConfig+0xbc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_OC5_SetConfig+0x7a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a14      	ldr	r2, [pc, #80]	@ (80042b4 <TIM_OC5_SetConfig+0xc0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC5_SetConfig+0x7a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a13      	ldr	r2, [pc, #76]	@ (80042b8 <TIM_OC5_SetConfig+0xc4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d109      	bne.n	8004282 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	051b      	lsls	r3, r3, #20
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <TIM_OC6_SetConfig+0xb8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00f      	beq.n	8004338 <TIM_OC6_SetConfig+0x7c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <TIM_OC6_SetConfig+0xbc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00b      	beq.n	8004338 <TIM_OC6_SetConfig+0x7c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a16      	ldr	r2, [pc, #88]	@ (800437c <TIM_OC6_SetConfig+0xc0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <TIM_OC6_SetConfig+0x7c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a15      	ldr	r2, [pc, #84]	@ (8004380 <TIM_OC6_SetConfig+0xc4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_OC6_SetConfig+0x7c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <TIM_OC6_SetConfig+0xc8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d109      	bne.n	800434c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 030a 	bic.w	r3, r3, #10
 80043c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f023 0210 	bic.w	r2, r3, #16
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800445c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	f043 0307 	orr.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800449a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	021a      	lsls	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2201      	movs	r2, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1a      	ldr	r2, [r3, #32]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e065      	b.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2c      	ldr	r2, [pc, #176]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2b      	ldr	r2, [pc, #172]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800455e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1b      	ldr	r2, [pc, #108]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800459a:	d013      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40014000 	.word	0x40014000

08004610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e073      	b.n	8004714 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	@ (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d11c      	bne.n	8004702 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d2:	051b      	lsls	r3, r3, #20
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40013400 	.word	0x40013400

08004728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <memset>:
 80047b4:	4402      	add	r2, r0
 80047b6:	4603      	mov	r3, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	f803 1b01 	strb.w	r1, [r3], #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <__libc_init_array>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4d0d      	ldr	r5, [pc, #52]	@ (80047fc <__libc_init_array+0x38>)
 80047c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004800 <__libc_init_array+0x3c>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	2600      	movs	r6, #0
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	d109      	bne.n	80047e8 <__libc_init_array+0x24>
 80047d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004804 <__libc_init_array+0x40>)
 80047d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004808 <__libc_init_array+0x44>)
 80047d8:	f000 f818 	bl	800480c <_init>
 80047dc:	1b64      	subs	r4, r4, r5
 80047de:	10a4      	asrs	r4, r4, #2
 80047e0:	2600      	movs	r6, #0
 80047e2:	42a6      	cmp	r6, r4
 80047e4:	d105      	bne.n	80047f2 <__libc_init_array+0x2e>
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ec:	4798      	blx	r3
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7ee      	b.n	80047d0 <__libc_init_array+0xc>
 80047f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f6:	4798      	blx	r3
 80047f8:	3601      	adds	r6, #1
 80047fa:	e7f2      	b.n	80047e2 <__libc_init_array+0x1e>
 80047fc:	08004834 	.word	0x08004834
 8004800:	08004834 	.word	0x08004834
 8004804:	08004834 	.word	0x08004834
 8004808:	0800483c 	.word	0x0800483c

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
