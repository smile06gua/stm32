
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800a4cc  0800a4cc  0000b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a850  0800a850  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a858  0800a858  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a864  0800a864  0000b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a868  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  20000070  0800a8d4  0000c070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  0800a8d4  0000ccbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233b3  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000444d  00000000  00000000  0002f44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001317  00000000  00000000  000350f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  00036407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f31f  00000000  00000000  0005728d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd13  00000000  00000000  000765ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001462bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d44  00000000  00000000  00146304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a4b4 	.word	0x0800a4b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800a4b4 	.word	0x0800a4b4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b96a 	b.w	8000eb0 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14e      	bne.n	8000c9e <__udivmoddi4+0xaa>
 8000c00:	4694      	mov	ip, r2
 8000c02:	458c      	cmp	ip, r1
 8000c04:	4686      	mov	lr, r0
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	d962      	bls.n	8000cd2 <__udivmoddi4+0xde>
 8000c0c:	b14a      	cbz	r2, 8000c22 <__udivmoddi4+0x2e>
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	4091      	lsls	r1, r2
 8000c14:	fa20 f303 	lsr.w	r3, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f f68c 	uxth.w	r6, ip
 8000c2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	fb07 1114 	mls	r1, r7, r4, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb04 f106 	mul.w	r1, r4, r6
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x64>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4a:	f080 8112 	bcs.w	8000e72 <__udivmoddi4+0x27e>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 810f 	bls.w	8000e72 <__udivmoddi4+0x27e>
 8000c54:	3c02      	subs	r4, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c62:	fb07 1110 	mls	r1, r7, r0, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f606 	mul.w	r6, r0, r6
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7a:	f080 80fc 	bcs.w	8000e76 <__udivmoddi4+0x282>
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	f240 80f9 	bls.w	8000e76 <__udivmoddi4+0x282>
 8000c84:	4463      	add	r3, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa6>
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xba>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb4>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x150>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xcc>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f0c0 80f0 	bcc.w	8000ea0 <__udivmoddi4+0x2ac>
 8000cc0:	1a86      	subs	r6, r0, r2
 8000cc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d0e6      	beq.n	8000c9a <__udivmoddi4+0xa6>
 8000ccc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd0:	e7e3      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x204>
 8000cd8:	eba1 040c 	sub.w	r4, r1, ip
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cee:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb07 f006 	mul.w	r0, r7, r6
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x11c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x11a>
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d0e:	4626      	mov	r6, r4
 8000d10:	1a1c      	subs	r4, r3, r0
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	429f      	cmp	r7, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x148>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x146>
 8000d34:	429f      	cmp	r7, r3
 8000d36:	f200 80b0 	bhi.w	8000e9a <__udivmoddi4+0x2a6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	1bdb      	subs	r3, r3, r7
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x9c>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d54:	fa04 f301 	lsl.w	r3, r4, r1
 8000d58:	ea43 030c 	orr.w	r3, r3, ip
 8000d5c:	40f4      	lsrs	r4, r6
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	0c38      	lsrs	r0, r7, #16
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb4 fef0 	udiv	lr, r4, r0
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	fb00 441e 	mls	r4, r0, lr, r4
 8000d74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d78:	fb0e f90c 	mul.w	r9, lr, ip
 8000d7c:	45a1      	cmp	r9, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x1a6>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8a:	f080 8084 	bcs.w	8000e96 <__udivmoddi4+0x2a2>
 8000d8e:	45a1      	cmp	r9, r4
 8000d90:	f240 8081 	bls.w	8000e96 <__udivmoddi4+0x2a2>
 8000d94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da6:	fb00 4413 	mls	r4, r0, r3, r4
 8000daa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1d2>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dbc:	d267      	bcs.n	8000e8e <__udivmoddi4+0x29a>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d965      	bls.n	8000e8e <__udivmoddi4+0x29a>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dca:	fba0 9302 	umull	r9, r3, r0, r2
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	46ce      	mov	lr, r9
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	d351      	bcc.n	8000e7e <__udivmoddi4+0x28a>
 8000dda:	d04e      	beq.n	8000e7a <__udivmoddi4+0x286>
 8000ddc:	b155      	cbz	r5, 8000df4 <__udivmoddi4+0x200>
 8000dde:	ebb8 030e 	subs.w	r3, r8, lr
 8000de2:	eb64 040c 	sbc.w	r4, r4, ip
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	40cb      	lsrs	r3, r1
 8000dec:	431e      	orrs	r6, r3
 8000dee:	40cc      	lsrs	r4, r1
 8000df0:	e9c5 6400 	strd	r6, r4, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	e750      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa24 f303 	lsr.w	r3, r4, r3
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb00 f107 	mul.w	r1, r0, r7
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x24c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e36:	d22c      	bcs.n	8000e92 <__udivmoddi4+0x29e>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d92a      	bls.n	8000e92 <__udivmoddi4+0x29e>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e48:	fb08 3311 	mls	r3, r8, r1, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb01 f307 	mul.w	r3, r1, r7
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x276>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e60:	d213      	bcs.n	8000e8a <__udivmoddi4+0x296>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d911      	bls.n	8000e8a <__udivmoddi4+0x296>
 8000e66:	3902      	subs	r1, #2
 8000e68:	4464      	add	r4, ip
 8000e6a:	1ae4      	subs	r4, r4, r3
 8000e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e70:	e739      	b.n	8000ce6 <__udivmoddi4+0xf2>
 8000e72:	4604      	mov	r4, r0
 8000e74:	e6f0      	b.n	8000c58 <__udivmoddi4+0x64>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e7a:	45c8      	cmp	r8, r9
 8000e7c:	d2ae      	bcs.n	8000ddc <__udivmoddi4+0x1e8>
 8000e7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7a8      	b.n	8000ddc <__udivmoddi4+0x1e8>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	e7ed      	b.n	8000e6a <__udivmoddi4+0x276>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e799      	b.n	8000dc6 <__udivmoddi4+0x1d2>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e7d4      	b.n	8000e40 <__udivmoddi4+0x24c>
 8000e96:	46d6      	mov	lr, sl
 8000e98:	e77f      	b.n	8000d9a <__udivmoddi4+0x1a6>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74d      	b.n	8000d3c <__udivmoddi4+0x148>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70f      	b.n	8000cc8 <__udivmoddi4+0xd4>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	e730      	b.n	8000d10 <__udivmoddi4+0x11c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a5a      	lsrs	r2, r3, #9
 8000ec4:	490f      	ldr	r1, [pc, #60]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ec6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eca:	09d2      	lsrs	r2, r2, #7
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09db      	lsrs	r3, r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	00044b83 	.word	0x00044b83
 8000f08:	3b9aca00 	.word	0x3b9aca00

08000f0c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <_ZN8DC_motor6PI_runEv+0x8c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	e012      	b.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eef1 7a67 	vneg.f32	s15, s15
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d506      	bpl.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eef1 7a67 	vneg.f32	s15, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd03      	ble.n	800101c <_ZN8DC_motor6PI_runEv+0x110>
 8001014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d501      	bpl.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <_ZN8DC_motor6PI_runEv+0x27c>)
 8001030:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa57 	bl	80004f0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa3e 	bl	80004cc <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001072:	2b01      	cmp	r3, #1
 8001074:	d124      	bne.n	80010c0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd09      	ble.n	8001098 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f004 fdfb 	bl	8005c8c <HAL_GPIO_WritePin>
 8001096:	e03c      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d509      	bpl.n	80010ba <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f004 fdea 	bl	8005c8c <HAL_GPIO_WritePin>
 80010b8:	e02b      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e028      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd09      	ble.n	80010ec <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f004 fdd1 	bl	8005c8c <HAL_GPIO_WritePin>
 80010ea:	e012      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f004 fdc0 	bl	8005c8c <HAL_GPIO_WritePin>
 800110c:	e001      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <_ZN8DC_motor6PI_runEv+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001124:	e02c      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <_ZN8DC_motor6PI_runEv+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	e022      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <_ZN8DC_motor6PI_runEv+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800114c:	e018      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d105      	bne.n	8001162 <_ZN8DC_motor6PI_runEv+0x256>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e00e      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001166:	2b10      	cmp	r3, #16
 8001168:	d105      	bne.n	8001176 <_ZN8DC_motor6PI_runEv+0x26a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001174:	e004      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	bf800000 	.word	0xbf800000

0800118c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a07 	vldr	s14, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SetCounter(enc_htim,0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000540 	.word	0x20000540

08001240 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f006 f896 	bl	8007384 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f006 fa82 	bl	8007768 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fa7c 	bl	8007768 <HAL_TIM_Encoder_Start>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN8DC_motor8heightToEf>:
    this->resolution = resolution;
}

// 控cascade lift

void DC_motor::heightTo(float high){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	ed87 0a00 	vstr	s0, [r7]
	height = 7.2 + turn * cm_per_turn;
 8001284:	4b6a      	ldr	r3, [pc, #424]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <_ZN8DC_motor8heightToEf+0x1bc>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	ee17 0a90 	vmov	r0, s15
 8001298:	f7ff f92a 	bl	80004f0 <__aeabi_f2d>
 800129c:	a360      	add	r3, pc, #384	@ (adr r3, 8001420 <_ZN8DC_motor8heightToEf+0x1a8>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7fe ffc7 	bl	8000234 <__adddf3>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc39 	bl	8000b24 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a60      	ldr	r2, [pc, #384]	@ (8001438 <_ZN8DC_motor8heightToEf+0x1c0>)
 80012b6:	6013      	str	r3, [r2, #0]
	//target_turns = 0.0f;
	if(high != 0){
 80012b8:	edd7 7a00 	vldr	s15, [r7]
 80012bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	f000 80a7 	beq.w	8001416 <_ZN8DC_motor8heightToEf+0x19e>
		if(high >= height){
 80012c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001438 <_ZN8DC_motor8heightToEf+0x1c0>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ed97 7a00 	vldr	s14, [r7]
 80012d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	db14      	blt.n	8001306 <_ZN8DC_motor8heightToEf+0x8e>
			target_turns = turn + ( (high - height )/ cm_per_turn );
 80012dc:	4b56      	ldr	r3, [pc, #344]	@ (8001438 <_ZN8DC_motor8heightToEf+0x1c0>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ed97 7a00 	vldr	s14, [r7]
 80012e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012ea:	4b52      	ldr	r3, [pc, #328]	@ (8001434 <_ZN8DC_motor8heightToEf+0x1bc>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 8001300:	edc3 7a00 	vstr	s15, [r3]
 8001304:	e039      	b.n	800137a <_ZN8DC_motor8heightToEf+0x102>
		}
		else{
			target_turns = turn - ( (height - high ) / cm_per_turn );
 8001306:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	4b4a      	ldr	r3, [pc, #296]	@ (8001438 <_ZN8DC_motor8heightToEf+0x1c0>)
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a00 	vldr	s15, [r7]
 8001316:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800131a:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <_ZN8DC_motor8heightToEf+0x1bc>)
 800131c:	edd3 6a00 	vldr	s13, [r3]
 8001320:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
		}

		while(turn < target_turns && high1 != 0){
 800132e:	e024      	b.n	800137a <_ZN8DC_motor8heightToEf+0x102>
			if(fabs(target_turns - turn) < 0.001){
 8001330:	4b42      	ldr	r3, [pc, #264]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	4b3e      	ldr	r3, [pc, #248]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001340:	eef0 7ae7 	vabs.f32	s15, s15
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f8d2 	bl	80004f0 <__aeabi_f2d>
 800134c:	a336      	add	r3, pc, #216	@ (adr r3, 8001428 <_ZN8DC_motor8heightToEf+0x1b0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fb97 	bl	8000a84 <__aeabi_dcmplt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <_ZN8DC_motor8heightToEf+0xf8>
				//target_turns = 0;
				high1 = 0;
 800135c:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <_ZN8DC_motor8heightToEf+0x1c8>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
				setspeed(0);
 8001364:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8001444 <_ZN8DC_motor8heightToEf+0x1cc>
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff0f 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 800136e:	e017      	b.n	80013a0 <_ZN8DC_motor8heightToEf+0x128>
			}
			else{
				setspeed(0.1);
 8001370:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8001448 <_ZN8DC_motor8heightToEf+0x1d0>
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff09 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn < target_turns && high1 != 0){
 800137a:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 800137c:	ed93 7a00 	vldr	s14, [r3]
 8001380:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d507      	bpl.n	80013a0 <_ZN8DC_motor8heightToEf+0x128>
 8001390:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <_ZN8DC_motor8heightToEf+0x1c8>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	eef5 7a40 	vcmp.f32	s15, #0.0
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	d1c7      	bne.n	8001330 <_ZN8DC_motor8heightToEf+0xb8>
			}
		}
		while(turn > target_turns && high1 != 0){
 80013a0:	e025      	b.n	80013ee <_ZN8DC_motor8heightToEf+0x176>
			if(fabs(target_turns - turn) < 0.001){
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	eef0 7ae7 	vabs.f32	s15, s15
 80013b6:	ee17 0a90 	vmov	r0, s15
 80013ba:	f7ff f899 	bl	80004f0 <__aeabi_f2d>
 80013be:	a31a      	add	r3, pc, #104	@ (adr r3, 8001428 <_ZN8DC_motor8heightToEf+0x1b0>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fb5e 	bl	8000a84 <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <_ZN8DC_motor8heightToEf+0x16c>
				//target_turns = 0;
				high1 = 0;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <_ZN8DC_motor8heightToEf+0x1c8>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
				setspeed(0);
 80013d6:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001444 <_ZN8DC_motor8heightToEf+0x1cc>
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fed6 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 80013e0:	bf00      	nop

		}
	}

	//setspeed(0);
}
 80013e2:	e018      	b.n	8001416 <_ZN8DC_motor8heightToEf+0x19e>
				setspeed(-0.1);
 80013e4:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800144c <_ZN8DC_motor8heightToEf+0x1d4>
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fecf 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn > target_turns && high1 != 0){
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_ZN8DC_motor8heightToEf+0x1b8>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_ZN8DC_motor8heightToEf+0x1c4>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dc00      	bgt.n	8001406 <_ZN8DC_motor8heightToEf+0x18e>
}
 8001404:	e007      	b.n	8001416 <_ZN8DC_motor8heightToEf+0x19e>
		while(turn > target_turns && high1 != 0){
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <_ZN8DC_motor8heightToEf+0x1c8>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001414:	d1c5      	bne.n	80013a2 <_ZN8DC_motor8heightToEf+0x12a>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	401ccccc 	.word	0x401ccccc
 8001428:	d2f1a9fc 	.word	0xd2f1a9fc
 800142c:	3f50624d 	.word	0x3f50624d
 8001430:	20000540 	.word	0x20000540
 8001434:	20000558 	.word	0x20000558
 8001438:	20000560 	.word	0x20000560
 800143c:	20000564 	.word	0x20000564
 8001440:	2000054c 	.word	0x2000054c
 8001444:	00000000 	.word	0x00000000
 8001448:	3dcccccd 	.word	0x3dcccccd
 800144c:	bdcccccd 	.word	0xbdcccccd

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f003 fdcd 	bl	8004ff2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f81a 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 fbcc 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f000 fb98 	bl	8001b94 <MX_DMA_Init>
  MX_TIM1_Init();
 8001464:	f000 f894 	bl	8001590 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001468:	f000 f94a 	bl	8001700 <MX_TIM2_Init>
  MX_TIM3_Init();
 800146c:	f000 f996 	bl	800179c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001470:	f000 f9ee 	bl	8001850 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001474:	f000 faae 	bl	80019d4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001478:	f000 f84a 	bl	8001510 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800147c:	f000 fb3e 	bl	8001afc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001480:	f000 fa3c 	bl	80018fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001484:	f000 fa70 	bl	8001968 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001488:	f000 fd8c 	bl	8001fa4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <main+0x3c>

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	@ 0x50
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	2238      	movs	r2, #56	@ 0x38
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f008 feb6 	bl	800a210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014b6:	f004 fd4b 	bl	8005f50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fdf1 	bl	80060b8 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014dc:	f000 fc40 	bl	8001d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e4:	2301      	movs	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 f8ef 	bl	80066dc <HAL_RCC_ClockConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001504:	f000 fc2c 	bl	8001d60 <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3750      	adds	r7, #80	@ 0x50
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <MX_I2C1_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_I2C1_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	@ (800158c <MX_I2C1_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <MX_I2C1_Init+0x74>)
 800154c:	f004 fbce 	bl	8005cec <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 fc03 	bl	8001d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <MX_I2C1_Init+0x74>)
 800155e:	f004 fc60 	bl	8005e22 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 fbfa 	bl	8001d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_I2C1_Init+0x74>)
 8001570:	f004 fca2 	bl	8005eb8 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fbf1 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000008c 	.word	0x2000008c
 8001588:	40005400 	.word	0x40005400
 800158c:	00503d58 	.word	0x00503d58

08001590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b098      	sub	sp, #96	@ 0x60
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2234      	movs	r2, #52	@ 0x34
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 fe27 	bl	800a210 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015c4:	4a4d      	ldr	r2, [pc, #308]	@ (80016fc <MX_TIM1_Init+0x16c>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80015c8:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015ca:	220f      	movs	r2, #15
 80015cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80015d4:	4b48      	ldr	r3, [pc, #288]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015d6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e2:	4b45      	ldr	r3, [pc, #276]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ee:	4842      	ldr	r0, [pc, #264]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80015f0:	f005 fd71 	bl	80070d6 <HAL_TIM_PWM_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 fbb1 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800160e:	4619      	mov	r1, r3
 8001610:	4839      	ldr	r0, [pc, #228]	@ (80016f8 <MX_TIM1_Init+0x168>)
 8001612:	f007 f911 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800161c:	f000 fba0 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	@ 0x60
 8001622:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001628:	2300      	movs	r3, #0
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	482c      	ldr	r0, [pc, #176]	@ (80016f8 <MX_TIM1_Init+0x168>)
 8001646:	f006 fa6d 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001650:	f000 fb86 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001654:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001658:	2204      	movs	r2, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4826      	ldr	r0, [pc, #152]	@ (80016f8 <MX_TIM1_Init+0x168>)
 800165e:	f006 fa61 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001668:	f000 fb7a 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001670:	2208      	movs	r2, #8
 8001672:	4619      	mov	r1, r3
 8001674:	4820      	ldr	r0, [pc, #128]	@ (80016f8 <MX_TIM1_Init+0x168>)
 8001676:	f006 fa55 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001680:	f000 fb6e 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001684:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001688:	220c      	movs	r2, #12
 800168a:	4619      	mov	r1, r3
 800168c:	481a      	ldr	r0, [pc, #104]	@ (80016f8 <MX_TIM1_Init+0x168>)
 800168e:	f006 fa49 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001698:	f000 fb62 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80016da:	f007 f92f 	bl	800893c <HAL_TIMEx_ConfigBreakDeadTime>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80016e4:	f000 fb3c 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <MX_TIM1_Init+0x168>)
 80016ea:	f003 fa2b 	bl	8004b44 <HAL_TIM_MspPostInit>

}
 80016ee:	bf00      	nop
 80016f0:	3760      	adds	r7, #96	@ 0x60
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000e0 	.word	0x200000e0
 80016fc:	40012c00 	.word	0x40012c00

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001728:	220f      	movs	r2, #15
 800172a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <MX_TIM2_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001734:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <MX_TIM2_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001746:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001748:	f005 fbd4 	bl	8006ef4 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001752:	f000 fb05 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001764:	f006 faf2 	bl	8007d4c <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800176e:	f000 faf7 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_TIM2_Init+0x98>)
 8001780:	f007 f85a 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800178a:	f000 fae9 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000012c 	.word	0x2000012c

0800179c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017c2:	4a22      	ldr	r2, [pc, #136]	@ (800184c <MX_TIM3_Init+0xb0>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017c8:	220f      	movs	r2, #15
 80017ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80017d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017e6:	4818      	ldr	r0, [pc, #96]	@ (8001848 <MX_TIM3_Init+0xac>)
 80017e8:	f005 fc75 	bl	80070d6 <HAL_TIM_PWM_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017f2:	f000 fab5 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	@ (8001848 <MX_TIM3_Init+0xac>)
 8001806:	f007 f817 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001810:	f000 faa6 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	@ 0x60
 8001816:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	@ (8001848 <MX_TIM3_Init+0xac>)
 800182c:	f006 f97a 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001836:	f000 fa93 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800183a:	4803      	ldr	r0, [pc, #12]	@ (8001848 <MX_TIM3_Init+0xac>)
 800183c:	f003 f982 	bl	8004b44 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	@ 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000178 	.word	0x20000178
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f008 fcd6 	bl	800a210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 8001870:	4a21      	ldr	r2, [pc, #132]	@ (80018f8 <MX_TIM4_Init+0xa8>)
 8001872:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001874:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 8001882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001886:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001894:	2303      	movs	r3, #3
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 80018c0:	f005 feac 	bl	800761c <HAL_TIM_Encoder_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018ca:	f000 fa49 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <MX_TIM4_Init+0xa4>)
 80018dc:	f006 ffac 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018e6:	f000 fa3b 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	@ 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001c4 	.word	0x200001c4
 80018f8:	40000800 	.word	0x40000800

080018fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_TIM6_Init+0x64>)
 800190e:	4a15      	ldr	r2, [pc, #84]	@ (8001964 <MX_TIM6_Init+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001912:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <MX_TIM6_Init+0x64>)
 8001914:	220f      	movs	r2, #15
 8001916:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_TIM6_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_TIM6_Init+0x64>)
 8001920:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001924:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_TIM6_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800192c:	480c      	ldr	r0, [pc, #48]	@ (8001960 <MX_TIM6_Init+0x64>)
 800192e:	f005 fae1 	bl	8006ef4 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001938:	f000 fa12 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_TIM6_Init+0x64>)
 800194a:	f006 ff75 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001954:	f000 fa04 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000210 	.word	0x20000210
 8001964:	40001000 	.word	0x40001000

08001968 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_TIM7_Init+0x64>)
 800197a:	4a15      	ldr	r2, [pc, #84]	@ (80019d0 <MX_TIM7_Init+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 159;
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_TIM7_Init+0x64>)
 8001980:	229f      	movs	r2, #159	@ 0x9f
 8001982:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_TIM7_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_TIM7_Init+0x64>)
 800198c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001990:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <MX_TIM7_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <MX_TIM7_Init+0x64>)
 800199a:	f005 faab 	bl	8006ef4 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80019a4:	f000 f9dc 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_TIM7_Init+0x64>)
 80019b6:	f006 ff3f 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019c0:	f000 f9ce 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000025c 	.word	0x2000025c
 80019d0:	40001400 	.word	0x40001400

080019d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b098      	sub	sp, #96	@ 0x60
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2234      	movs	r2, #52	@ 0x34
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f008 fc05 	bl	800a210 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a08:	4a3b      	ldr	r2, [pc, #236]	@ (8001af8 <MX_TIM8_Init+0x124>)
 8001a0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a0e:	220f      	movs	r2, #15
 8001a10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a32:	4830      	ldr	r0, [pc, #192]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a34:	f005 fb4f 	bl	80070d6 <HAL_TIM_PWM_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a3e:	f000 f98f 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a52:	4619      	mov	r1, r3
 8001a54:	4827      	ldr	r0, [pc, #156]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a56:	f006 feef 	bl	8008838 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a60:	f000 f97e 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	@ 0x60
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a84:	2204      	movs	r2, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	481a      	ldr	r0, [pc, #104]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001a8a:	f006 f84b 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a94:	f000 f964 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4807      	ldr	r0, [pc, #28]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001ad6:	f006 ff31 	bl	800893c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ae0:	f000 f93e 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <MX_TIM8_Init+0x120>)
 8001ae6:	f003 f82d 	bl	8004b44 <HAL_TIM_MspPostInit>

}
 8001aea:	bf00      	nop
 8001aec:	3760      	adds	r7, #96	@ 0x60
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002a8 	.word	0x200002a8
 8001af8:	40013400 	.word	0x40013400

08001afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b02:	4a23      	ldr	r2, [pc, #140]	@ (8001b90 <MX_USART2_UART_Init+0x94>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b44:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b46:	f006 ffcb 	bl	8008ae0 <HAL_UART_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b50:	f000 f906 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b58:	f008 fa59 	bl	800a00e <HAL_UARTEx_SetTxFifoThreshold>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b62:	f000 f8fd 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4808      	ldr	r0, [pc, #32]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b6a:	f008 fa8e 	bl	800a08a <HAL_UARTEx_SetRxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b74:	f000 f8f4 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <MX_USART2_UART_Init+0x90>)
 8001b7a:	f008 fa0f 	bl	8009f9c <HAL_UARTEx_DisableFifoMode>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b84:	f000 f8ec 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200002f4 	.word	0x200002f4
 8001b90:	40004400 	.word	0x40004400

08001b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <MX_DMA_Init+0x60>)
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	200d      	movs	r0, #13
 8001bd0:	f003 fb5b 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f003 fb72 	bl	80052be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	200e      	movs	r0, #14
 8001be0:	f003 fb53 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001be4:	200e      	movs	r0, #14
 8001be6:	f003 fb6a 	bl	80052be <HAL_NVIC_EnableIRQ>

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b51      	ldr	r3, [pc, #324]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a50      	ldr	r2, [pc, #320]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c26:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c2c:	f043 0320 	orr.w	r3, r3, #32
 8001c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c32:	4b48      	ldr	r3, [pc, #288]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b45      	ldr	r3, [pc, #276]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	4a44      	ldr	r2, [pc, #272]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4a:	4b42      	ldr	r3, [pc, #264]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b3f      	ldr	r3, [pc, #252]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f240 6109 	movw	r1, #1545	@ 0x609
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f004 f808 	bl	8005c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_12;
 8001c7c:	f44f 5350 	mov.w	r3, #13312	@ 0x3400
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4831      	ldr	r0, [pc, #196]	@ (8001d58 <MX_GPIO_Init+0x160>)
 8001c94:	f003 fe60 	bl	8005958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 8001c98:	f240 6309 	movw	r3, #1545	@ 0x609
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb4:	f003 fe50 	bl	8005958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd0:	f003 fe42 	bl	8005958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cd4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481c      	ldr	r0, [pc, #112]	@ (8001d5c <MX_GPIO_Init+0x164>)
 8001cec:	f003 fe34 	bl	8005958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001cf0:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <MX_GPIO_Init+0x160>)
 8001d08:	f003 fe26 	bl	8005958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2007      	movs	r0, #7
 8001d12:	f003 faba 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d16:	2007      	movs	r0, #7
 8001d18:	f003 fad1 	bl	80052be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2008      	movs	r0, #8
 8001d22:	f003 fab2 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d26:	2008      	movs	r0, #8
 8001d28:	f003 fac9 	bl	80052be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2017      	movs	r0, #23
 8001d32:	f003 faaa 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d36:	2017      	movs	r0, #23
 8001d38:	f003 fac1 	bl	80052be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2028      	movs	r0, #40	@ 0x28
 8001d42:	f003 faa2 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d46:	2028      	movs	r0, #40	@ 0x28
 8001d48:	f003 fab9 	bl	80052be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	48000400 	.word	0x48000400

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d82a      	bhi.n	8001dd4 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001da5 	.word	0x08001da5
 8001d8c:	08001db5 	.word	0x08001db5
 8001d90:	08001dc5 	.word	0x08001dc5
			case GBD300T:
				return {300,500,2500,0.25};
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001d98:	461c      	mov	r4, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001da2:	e01d      	b.n	8001de0 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001da8:	461c      	mov	r4, r3
 8001daa:	4613      	mov	r3, r2
 8001dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001db2:	e015      	b.n	8001de0 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a0e      	ldr	r2, [pc, #56]	@ (8001df0 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001db8:	461c      	mov	r4, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dc2:	e00d      	b.n	8001de0 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001dc8:	461c      	mov	r4, r3
 8001dca:	4613      	mov	r3, r2
 8001dcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dd2:	e005      	b.n	8001de0 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ffc7 	bl	8001d6c <_ZN5Servo12getServoInfoENS_4typeE>
 8001dde:	bf00      	nop
			}
		}
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	0800a4cc 	.word	0x0800a4cc
 8001dec:	0800a4dc 	.word	0x0800a4dc
 8001df0:	0800a4ec 	.word	0x0800a4ec
 8001df4:	0800a4fc 	.word	0x0800a4fc

08001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	61f8      	str	r0, [r7, #28]
 8001e00:	61b9      	str	r1, [r7, #24]
 8001e02:	617a      	str	r2, [r7, #20]
 8001e04:	74fb      	strb	r3, [r7, #19]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001e0a:	f103 040c 	add.w	r4, r3, #12
 8001e0e:	4613      	mov	r3, r2
 8001e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001e2e:	69fc      	ldr	r4, [r7, #28]
 8001e30:	463b      	mov	r3, r7
 8001e32:	7cfa      	ldrb	r2, [r7, #19]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff98 	bl	8001d6c <_ZN5Servo12getServoInfoENS_4typeE>
 8001e3c:	340c      	adds	r4, #12
 8001e3e:	463b      	mov	r3, r7
 8001e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3724      	adds	r7, #36	@ 0x24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	0800a4cc 	.word	0x0800a4cc

08001e54 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void stepTo(int32_t steps);
	void heightTo(float high);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6178      	str	r0, [r7, #20]
 8001e5c:	6139      	str	r1, [r7, #16]
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e64:	edc7 0a00 	vstr	s1, [r7]
 8001e68:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2264      	movs	r2, #100	@ 0x64
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	897a      	ldrh	r2, [r7, #10]
 8001efa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
	};
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4618      	mov	r0, r3
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	3a83126f 	.word	0x3a83126f

08001f34 <_Z9setup_allv>:
float total_high = 30.2; // 最大高度差
float cm_per_turn = total_high / total_turns; // 每步對應的公分數
float turn1, turn2;
float height = 0.0f;
float target_turns = 0.0f;
void setup_all(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	servo_gripper.setup(0);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4811      	ldr	r0, [pc, #68]	@ (8001f80 <_Z9setup_allv+0x4c>)
 8001f3c:	f002 fadd 	bl	80044fa <_ZN5Servo5setupEi>
	servo_right.setup(0);
 8001f40:	2100      	movs	r1, #0
 8001f42:	4810      	ldr	r0, [pc, #64]	@ (8001f84 <_Z9setup_allv+0x50>)
 8001f44:	f002 fad9 	bl	80044fa <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	480f      	ldr	r0, [pc, #60]	@ (8001f88 <_Z9setup_allv+0x54>)
 8001f4c:	f002 fad5 	bl	80044fa <_ZN5Servo5setupEi>
	servo_forward.setup(90);
 8001f50:	215a      	movs	r1, #90	@ 0x5a
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <_Z9setup_allv+0x58>)
 8001f54:	f002 fad1 	bl	80044fa <_ZN5Servo5setupEi>
	servo_turn.setup(0);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	480d      	ldr	r0, [pc, #52]	@ (8001f90 <_Z9setup_allv+0x5c>)
 8001f5c:	f002 facd 	bl	80044fa <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <_Z9setup_allv+0x60>)
 8001f62:	f7ff f96d 	bl	8001240 <_ZN8DC_motor5setupEv>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f66:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <_Z9setup_allv+0x64>)
 8001f68:	f005 f81c 	bl	8006fa4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001f6c:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <_Z9setup_allv+0x68>)
 8001f6e:	f005 f819 	bl	8006fa4 <HAL_TIM_Base_Start_IT>
	ms++;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <_Z9setup_allv+0x6c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <_Z9setup_allv+0x6c>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200004c0 	.word	0x200004c0
 8001f84:	20000500 	.word	0x20000500
 8001f88:	200004e0 	.word	0x200004e0
 8001f8c:	20000520 	.word	0x20000520
 8001f90:	200004a0 	.word	0x200004a0
 8001f94:	20000448 	.word	0x20000448
 8001f98:	20000210 	.word	0x20000210
 8001f9c:	2000025c 	.word	0x2000025c
 8001fa0:	20000554 	.word	0x20000554

08001fa4 <main_function>:
void main_function(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	setup_all();
 8001fa8:	f7ff ffc4 	bl	8001f34 <_Z9setup_allv>
	//ROS1::init();
	while(1){
		//ROS1::_pub_gripper();
		//ROS1::spinCycle();
		// ROS1::_pub_gripper();
		mission_2();
 8001fac:	f000 f932 	bl	8002214 <_Z9mission_2v>
 8001fb0:	e7fc      	b.n	8001fac <main_function+0x8>
	...

08001fb4 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f004 fff0 	bl	8006fa4 <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001fc4:	bf00      	nop
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dcfa      	bgt.n	8001fc6 <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f005 f851 	bl	8007078 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8001fd6:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000550 	.word	0x20000550

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
float s;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff8:	d104      	bne.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a0f      	ldr	r2, [pc, #60]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002002:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d114      	bne.n	8002038 <HAL_TIM_PeriodElapsedCallback+0x50>

		Motor_updown.PI_run();
 800200e:	480e      	ldr	r0, [pc, #56]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002010:	f7fe ff7c 	bl	8000f0c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(-1);
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	480b      	ldr	r0, [pc, #44]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800201a:	f7ff f8c7 	bl	80011ac <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	4807      	ldr	r0, [pc, #28]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800202a:	f7ff f8af 	bl	800118c <_ZN8DC_motor8setspeedEf>
		ms++;
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a06      	ldr	r2, [pc, #24]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002036:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM7){

			//ms++;
		}
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000550 	.word	0x20000550
 8002044:	40001000 	.word	0x40001000
 8002048:	20000448 	.word	0x20000448
 800204c:	20000004 	.word	0x20000004
 8002050:	20000554 	.word	0x20000554

08002054 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002064:	d00f      	beq.n	8002086 <HAL_GPIO_EXTI_Callback+0x32>
 8002066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800206a:	dc53      	bgt.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
 800206c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_EXTI_Callback+0x5e>
 8002072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002076:	dc4d      	bgt.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
 8002078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207c:	d032      	beq.n	80020e4 <HAL_GPIO_EXTI_Callback+0x90>
 800207e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002082:	d037      	beq.n	80020f4 <HAL_GPIO_EXTI_Callback+0xa0>
			}

			break;

	}
}
 8002084:	e046      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	4619      	mov	r1, r3
 800208a:	4824      	ldr	r0, [pc, #144]	@ (800211c <HAL_GPIO_EXTI_Callback+0xc8>)
 800208c:	f003 fde6 	bl	8005c5c <HAL_GPIO_ReadPin>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d036      	beq.n	800210e <HAL_GPIO_EXTI_Callback+0xba>
				speeds = 0;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xcc>)
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
				turn1 = turn;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <HAL_GPIO_EXTI_Callback+0xd0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <HAL_GPIO_EXTI_Callback+0xd4>)
 80020ae:	6013      	str	r3, [r2, #0]
			break;
 80020b0:	e02d      	b.n	800210e <HAL_GPIO_EXTI_Callback+0xba>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4819      	ldr	r0, [pc, #100]	@ (800211c <HAL_GPIO_EXTI_Callback+0xc8>)
 80020b8:	f003 fdd0 	bl	8005c5c <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d022      	beq.n	8002112 <HAL_GPIO_EXTI_Callback+0xbe>
				speeds = 0;
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_GPIO_EXTI_Callback+0xcc>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
				turn = 0;
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_GPIO_EXTI_Callback+0xd0>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
				initialized = false;  // 重置初始化狀態
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_GPIO_EXTI_Callback+0xd8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
			break;
 80020e2:	e016      	b.n	8002112 <HAL_GPIO_EXTI_Callback+0xbe>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4811      	ldr	r0, [pc, #68]	@ (8002130 <HAL_GPIO_EXTI_Callback+0xdc>)
 80020ea:	f003 fdb7 	bl	8005c5c <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
			break;
 80020f2:	e00f      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
			wait(1000, &htim2);
 80020f4:	490f      	ldr	r1, [pc, #60]	@ (8002134 <HAL_GPIO_EXTI_Callback+0xe0>)
 80020f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020fa:	f7ff ff5b 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	4619      	mov	r1, r3
 8002102:	480b      	ldr	r0, [pc, #44]	@ (8002130 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002104:	f003 fdaa 	bl	8005c5c <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
			break;
 800210c:	e002      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
			break;
 800210e:	bf00      	nop
 8002110:	e000      	b.n	8002114 <HAL_GPIO_EXTI_Callback+0xc0>
			break;
 8002112:	bf00      	nop
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	48000400 	.word	0x48000400
 8002120:	20000004 	.word	0x20000004
 8002124:	20000540 	.word	0x20000540
 8002128:	2000055c 	.word	0x2000055c
 800212c:	20000000 	.word	0x20000000
 8002130:	48000800 	.word	0x48000800
 8002134:	2000012c 	.word	0x2000012c

08002138 <_Z41__static_initialization_and_destruction_0ii>:
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af04      	add	r7, sp, #16
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d13f      	bne.n	80021c8 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800214e:	4293      	cmp	r3, r2
 8002150:	d13a      	bne.n	80021c8 <_Z41__static_initialization_and_destruction_0ii+0x90>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,0,4,12};
 8002152:	2300      	movs	r3, #0
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2304      	movs	r3, #4
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8002162:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800216a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800216e:	4919      	ldr	r1, [pc, #100]	@ (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002170:	4819      	ldr	r0, [pc, #100]	@ (80021d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002172:	f7ff fe6f 	bl	8001e54 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_3, Servo::GBD1800T};
 8002176:	2302      	movs	r3, #2
 8002178:	2208      	movs	r2, #8
 800217a:	4918      	ldr	r1, [pc, #96]	@ (80021dc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800217c:	4818      	ldr	r0, [pc, #96]	@ (80021e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800217e:	f7ff fe3b 	bl	8001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD300T};
 8002182:	2300      	movs	r3, #0
 8002184:	2204      	movs	r2, #4
 8002186:	4917      	ldr	r1, [pc, #92]	@ (80021e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002188:	4817      	ldr	r0, [pc, #92]	@ (80021e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800218a:	f7ff fe35 	bl	8001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 800218e:	2300      	movs	r3, #0
 8002190:	220c      	movs	r2, #12
 8002192:	4914      	ldr	r1, [pc, #80]	@ (80021e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002194:	4815      	ldr	r0, [pc, #84]	@ (80021ec <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002196:	f7ff fe2f 	bl	8001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_1, Servo::GBD300T};
 800219a:	2300      	movs	r3, #0
 800219c:	2200      	movs	r2, #0
 800219e:	4911      	ldr	r1, [pc, #68]	@ (80021e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80021a0:	4813      	ldr	r0, [pc, #76]	@ (80021f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80021a2:	f7ff fe29 	bl	8001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 80021a6:	2302      	movs	r3, #2
 80021a8:	2200      	movs	r2, #0
 80021aa:	490e      	ldr	r1, [pc, #56]	@ (80021e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80021ac:	4811      	ldr	r0, [pc, #68]	@ (80021f4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80021ae:	f7ff fe23 	bl	8001df8 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
float cm_per_turn = total_high / total_turns; // 每步對應的公分數
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80021b4:	edd3 6a00 	vldr	s13, [r3]
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80021ba:	ed93 7a00 	vldr	s14, [r3]
 80021be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80021c4:	edc3 7a00 	vstr	s15, [r3]
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200002a8 	.word	0x200002a8
 80021d4:	200001c4 	.word	0x200001c4
 80021d8:	20000448 	.word	0x20000448
 80021dc:	20000178 	.word	0x20000178
 80021e0:	200004a0 	.word	0x200004a0
 80021e4:	200000e0 	.word	0x200000e0
 80021e8:	200004c0 	.word	0x200004c0
 80021ec:	200004e0 	.word	0x200004e0
 80021f0:	20000500 	.word	0x20000500
 80021f4:	20000520 	.word	0x20000520
 80021f8:	2000000c 	.word	0x2000000c
 80021fc:	20000008 	.word	0x20000008
 8002200:	20000558 	.word	0x20000558

08002204 <_GLOBAL__sub_I_Motor_updown>:
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
 8002208:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff ff93 	bl	8002138 <_Z41__static_initialization_and_destruction_0ii>
 8002212:	bd80      	pop	{r7, pc}

08002214 <_Z9mission_2v>:
int zeroPointAngle = 440;
void mission_1(){

}

void mission_2(){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	//前後
    servo_forward.turnTo(30); //算座標
 8002218:	2200      	movs	r2, #0
 800221a:	211e      	movs	r1, #30
 800221c:	481a      	ldr	r0, [pc, #104]	@ (8002288 <_Z9mission_2v+0x74>)
 800221e:	f002 fa33 	bl	8004688 <_ZN5Servo6turnToEii>
	wait(2000, &htim2);
 8002222:	491a      	ldr	r1, [pc, #104]	@ (800228c <_Z9mission_2v+0x78>)
 8002224:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002228:	f7ff fec4 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>
	servo_forward.turnTo(910); //算座標
 800222c:	2200      	movs	r2, #0
 800222e:	f240 318e 	movw	r1, #910	@ 0x38e
 8002232:	4815      	ldr	r0, [pc, #84]	@ (8002288 <_Z9mission_2v+0x74>)
 8002234:	f002 fa28 	bl	8004688 <_ZN5Servo6turnToEii>
	wait(2000, &htim2);
 8002238:	4914      	ldr	r1, [pc, #80]	@ (800228c <_Z9mission_2v+0x78>)
 800223a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800223e:	f7ff feb9 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>

	// 夾咖啡杯
	/*servo_gripper*/
	servo_gripper.turnTo(angle);  //off
 8002242:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <_Z9mission_2v+0x7c>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224c:	2200      	movs	r2, #0
 800224e:	ee17 1a90 	vmov	r1, s15
 8002252:	4810      	ldr	r0, [pc, #64]	@ (8002294 <_Z9mission_2v+0x80>)
 8002254:	f002 fa18 	bl	8004688 <_ZN5Servo6turnToEii>
	wait(2000, &htim2);
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <_Z9mission_2v+0x78>)
 800225a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800225e:	f7ff fea9 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>
	servo_gripper.turnTo(angle_2);  //open
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <_Z9mission_2v+0x84>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226c:	2200      	movs	r2, #0
 800226e:	ee17 1a90 	vmov	r1, s15
 8002272:	4808      	ldr	r0, [pc, #32]	@ (8002294 <_Z9mission_2v+0x80>)
 8002274:	f002 fa08 	bl	8004688 <_ZN5Servo6turnToEii>
	wait(2000, &htim2);
 8002278:	4904      	ldr	r1, [pc, #16]	@ (800228c <_Z9mission_2v+0x78>)
 800227a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800227e:	f7ff fe99 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>


}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000520 	.word	0x20000520
 800228c:	2000012c 	.word	0x2000012c
 8002290:	20000544 	.word	0x20000544
 8002294:	200004c0 	.word	0x200004c0
 8002298:	20000548 	.word	0x20000548

0800229c <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	if(open){
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <_Z14gripperControlb+0x24>
		servo_gripper.turnTo(300);  //open
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80022b2:	4809      	ldr	r0, [pc, #36]	@ (80022d8 <_Z14gripperControlb+0x3c>)
 80022b4:	f002 f9e8 	bl	8004688 <_ZN5Servo6turnToEii>
		_gripperFinish = 1; //
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <_Z14gripperControlb+0x40>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //off
		_gripperFinish = 0;
	}
}
 80022be:	e007      	b.n	80022d0 <_Z14gripperControlb+0x34>
		servo_gripper.turnTo(0); //off
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <_Z14gripperControlb+0x3c>)
 80022c6:	f002 f9df 	bl	8004688 <_ZN5Servo6turnToEii>
		_gripperFinish = 0;
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <_Z14gripperControlb+0x40>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200004c0 	.word	0x200004c0
 80022dc:	20000568 	.word	0x20000568

080022e0 <_Z15elevatorControlf>:
		servo_forward.turnTo(90); //off
		_forwardFinish = 0;
	}
}

void elevatorControl(float high){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_updown.heightTo(high);
 80022ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80022ee:	4803      	ldr	r0, [pc, #12]	@ (80022fc <_Z15elevatorControlf+0x1c>)
 80022f0:	f7fe ffc2 	bl	8001278 <_ZN8DC_motor8heightToEf>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000448 	.word	0x20000448

08002300 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <_ZN3ros3MsgC1Ev+0x1c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	0800a800 	.word	0x0800a800

08002344 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
      data()
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffe8 	bl	8002324 <_ZN3ros3MsgC1Ev>
 8002354:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ffce 	bl	8002300 <_ZN3ros4TimeC1Ev>
    {
    }
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800a7e8 	.word	0x0800a7e8

08002374 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	b2ca      	uxtb	r2, r1
 800238e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0a19      	lsrs	r1, r3, #8
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3301      	adds	r3, #1
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	b2ca      	uxtb	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0c19      	lsrs	r1, r3, #16
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3302      	adds	r3, #2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0e19      	lsrs	r1, r3, #24
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3303      	adds	r3, #3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2ca      	uxtb	r2, r1
 80023c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a19      	lsrs	r1, r3, #8
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3301      	adds	r3, #1
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	0c19      	lsrs	r1, r3, #16
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3302      	adds	r3, #2
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0e19      	lsrs	r1, r3, #24
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3303      	adds	r3, #3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3304      	adds	r3, #4
 8002414:	60fb      	str	r3, [r7, #12]
      return offset;
 8002416:	68fb      	ldr	r3, [r7, #12]
    }
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	4413      	add	r3, r2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3301      	adds	r3, #1
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	440b      	add	r3, r1
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3302      	adds	r3, #2
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	440b      	add	r3, r1
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3303      	adds	r3, #3
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	440b      	add	r3, r1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	440b      	add	r3, r1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3302      	adds	r3, #2
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	440b      	add	r3, r1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3303      	adds	r3, #3
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	440b      	add	r3, r1
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3304      	adds	r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
     return offset;
 80024de:	68fb      	ldr	r3, [r7, #12]
    }
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	0800a50c 	.word	0x0800a50c

08002508 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	0800a51c 	.word	0x0800a51c

08002524 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fef8 	bl	8002324 <_ZN3ros3MsgC1Ev>
 8002534:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002544:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800254a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002550:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
    {
    }
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	0800a7d0 	.word	0x0800a7d0
 8002568:	0800a540 	.word	0x0800a540

0800256c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8899      	ldrh	r1, [r3, #4]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4413      	add	r3, r2
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	889b      	ldrh	r3, [r3, #4]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b299      	uxth	r1, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	3301      	adds	r3, #1
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3302      	adds	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fe36 	bl	8000218 <strlen>
 80025ac:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 f87f 	bl	80036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3304      	adds	r3, #4
 80025c0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	18d0      	adds	r0, r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4619      	mov	r1, r3
 80025d0:	f007 fe52 	bl	800a278 <memcpy>
      offset += length_topic_name;
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd fe19 	bl	8000218 <strlen>
 80025e6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	6979      	ldr	r1, [r7, #20]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f862 	bl	80036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	18d0      	adds	r0, r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4619      	mov	r1, r3
 800260a:	f007 fe35 	bl	800a278 <memcpy>
      offset += length_message_type;
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4413      	add	r3, r2
 8002614:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd fdfc 	bl	8000218 <strlen>
 8002620:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	6939      	ldr	r1, [r7, #16]
 800262a:	4618      	mov	r0, r3
 800262c:	f001 f845 	bl	80036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3304      	adds	r3, #4
 8002634:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	18d0      	adds	r0, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4619      	mov	r1, r3
 8002644:	f007 fe18 	bl	800a278 <memcpy>
      offset += length_md5sum;
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002656:	68f9      	ldr	r1, [r7, #12]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	0a19      	lsrs	r1, r3, #8
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c19      	lsrs	r1, r3, #16
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3302      	adds	r3, #2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0e19      	lsrs	r1, r3, #24
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3303      	adds	r3, #3
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4413      	add	r3, r2
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	61fb      	str	r3, [r7, #28]
      return offset;
 8002698:	69fb      	ldr	r3, [r7, #28]
    }
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08a      	sub	sp, #40	@ 0x28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	889b      	ldrh	r3, [r3, #4]
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	440b      	add	r3, r1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	3302      	adds	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	441a      	add	r2, r3
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f802 	bl	80036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3304      	adds	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fe:	e00b      	b.n	8002718 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	441a      	add	r2, r3
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	3b01      	subs	r3, #1
 800270a:	6839      	ldr	r1, [r7, #0]
 800270c:	440b      	add	r3, r1
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	3301      	adds	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	4413      	add	r3, r2
 800271e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002720:	429a      	cmp	r2, r3
 8002722:	d3ed      	bcc.n	8002700 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4413      	add	r3, r2
 800272a:	3b01      	subs	r3, #1
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	3b01      	subs	r3, #1
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	441a      	add	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4413      	add	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	441a      	add	r2, r3
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f000 ffcf 	bl	80036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3304      	adds	r3, #4
 800275e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	e00b      	b.n	800277e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	441a      	add	r2, r3
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	3b01      	subs	r3, #1
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	440b      	add	r3, r1
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	3301      	adds	r3, #1
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3ed      	bcc.n	8002766 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	3b01      	subs	r3, #1
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3b01      	subs	r3, #1
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	441a      	add	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	441a      	add	r2, r3
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 ff9c 	bl	80036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3304      	adds	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e00b      	b.n	80027e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	441a      	add	r2, r3
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3ed      	bcc.n	80027cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	3b01      	subs	r3, #1
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3b01      	subs	r3, #1
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	440a      	add	r2, r1
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	3301      	adds	r3, #1
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	440b      	add	r3, r1
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3302      	adds	r3, #2
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	440b      	add	r3, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	3303      	adds	r3, #3
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	440b      	add	r3, r1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	4313      	orrs	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	3304      	adds	r3, #4
 8002866:	61bb      	str	r3, [r7, #24]
     return offset;
 8002868:	69bb      	ldr	r3, [r7, #24]
    }
 800286a:	4618      	mov	r0, r3
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0800a544 	.word	0x0800a544

08002890 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	0800a560 	.word	0x0800a560

080028ac <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fd34 	bl	8002324 <_ZN3ros3MsgC1Ev>
 80028bc:	4a06      	ldr	r2, [pc, #24]	@ (80028d8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	601a      	str	r2, [r3, #0]
      level(0),
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	711a      	strb	r2, [r3, #4]
      msg("")
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80028cc:	609a      	str	r2, [r3, #8]
    {
    }
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	0800a7b8 	.word	0x0800a7b8
 80028dc:	0800a540 	.word	0x0800a540

080028e0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	7912      	ldrb	r2, [r2, #4]
 80028f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3301      	adds	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fc87 	bl	8000218 <strlen>
 800290a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fed0 	bl	80036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	18d0      	adds	r0, r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	4619      	mov	r1, r3
 800292e:	f007 fca3 	bl	800a278 <memcpy>
      offset += length_msg;
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
      return offset;
 800293a:	68fb      	ldr	r3, [r7, #12]
    }
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	3301      	adds	r3, #1
 8002962:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	441a      	add	r2, r3
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fec1 	bl	80036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3304      	adds	r3, #4
 800297a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00b      	b.n	800299a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	441a      	add	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3b01      	subs	r3, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	440b      	add	r3, r1
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d3ed      	bcc.n	8002982 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	3b01      	subs	r3, #1
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
     return offset;
 80029ca:	693b      	ldr	r3, [r7, #16]
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	0800a584 	.word	0x0800a584

080029f0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	4b03      	ldr	r3, [pc, #12]	@ (8002a08 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	0800a598 	.word	0x0800a598

08002a0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fc84 	bl	8002324 <_ZN3ros3MsgC1Ev>
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a50 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	0800a7a0 	.word	0x0800a7a0

08002a54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0a19      	lsrs	r1, r3, #8
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b2ca      	uxtb	r2, r1
 8002a80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0c19      	lsrs	r1, r3, #16
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b2ca      	uxtb	r2, r1
 8002a92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0e19      	lsrs	r1, r3, #24
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b2ca      	uxtb	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	e02a      	b.n	8002b08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002ac0:	6939      	ldr	r1, [r7, #16]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b2ca      	uxtb	r2, r1
 8002aca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	0a19      	lsrs	r1, r3, #8
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b2ca      	uxtb	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	0c19      	lsrs	r1, r3, #16
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	b2ca      	uxtb	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	0e19      	lsrs	r1, r3, #24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	3303      	adds	r3, #3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	b2ca      	uxtb	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	3304      	adds	r3, #4
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	3301      	adds	r3, #1
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d3cf      	bcc.n	8002ab2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b2ca      	uxtb	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	0a19      	lsrs	r1, r3, #8
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b2ca      	uxtb	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	0c19      	lsrs	r1, r3, #16
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	b2ca      	uxtb	r2, r1
 8002b42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	0e19      	lsrs	r1, r3, #24
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	b2ca      	uxtb	r2, r1
 8002b54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	3304      	adds	r3, #4
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	e02a      	b.n	8002bb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	b2ca      	uxtb	r2, r1
 8002b7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	0a19      	lsrs	r1, r3, #8
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	3301      	adds	r3, #1
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	0c19      	lsrs	r1, r3, #16
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	3302      	adds	r3, #2
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	0e19      	lsrs	r1, r3, #24
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b2ca      	uxtb	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	3304      	adds	r3, #4
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d3cf      	bcc.n	8002b62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69d9      	ldr	r1, [r3, #28]
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	0a19      	lsrs	r1, r3, #8
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	3301      	adds	r3, #1
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b2ca      	uxtb	r2, r1
 8002be0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	0c19      	lsrs	r1, r3, #16
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	3302      	adds	r3, #2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	b2ca      	uxtb	r2, r1
 8002bf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	0e19      	lsrs	r1, r3, #24
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	3303      	adds	r3, #3
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	b2ca      	uxtb	r2, r1
 8002c04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	3304      	adds	r3, #4
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e027      	b.n	8002c62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fafa 	bl	8000218 <strlen>
 8002c24:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	6979      	ldr	r1, [r7, #20]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fd43 	bl	80036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	3304      	adds	r3, #4
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	18d0      	adds	r0, r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f007 fb12 	bl	800a278 <memcpy>
      offset += length_stringsi;
 8002c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4413      	add	r3, r2
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d3d2      	bcc.n	8002c12 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3728      	adds	r7, #40	@ 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08e      	sub	sp, #56	@ 0x38
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	3301      	adds	r3, #1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	6a3a      	ldr	r2, [r7, #32]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	6a3a      	ldr	r2, [r7, #32]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d90a      	bls.n	8002cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f007 fa60 	bl	800a1a4 <realloc>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf4:	e035      	b.n	8002d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	440a      	add	r2, r1
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	440b      	add	r3, r1
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	3302      	adds	r3, #2
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	440b      	add	r3, r1
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	3303      	adds	r3, #3
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	440b      	add	r3, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d46:	3304      	adds	r3, #4
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	3301      	adds	r3, #1
 8002d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3c4      	bcc.n	8002cf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	3301      	adds	r3, #1
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	3304      	adds	r3, #4
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d90a      	bls.n	8002dd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f007 f9ec 	bl	800a1a4 <realloc>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ddc:	e035      	b.n	8002e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	440a      	add	r2, r1
 8002dea:	7812      	ldrb	r2, [r2, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	3301      	adds	r3, #1
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	440b      	add	r3, r1
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	3302      	adds	r3, #2
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	440b      	add	r3, r1
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e18:	3303      	adds	r3, #3
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	440b      	add	r3, r1
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	3304      	adds	r3, #4
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	3214      	adds	r2, #20
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e46:	3301      	adds	r3, #1
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3c4      	bcc.n	8002dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	3301      	adds	r3, #1
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	3302      	adds	r3, #2
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e84:	3303      	adds	r3, #3
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	3304      	adds	r3, #4
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d90a      	bls.n	8002eba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f007 f978 	bl	800a1a4 <realloc>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ec4:	e03e      	b.n	8002f44 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	441a      	add	r2, r3
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fc10 	bl	80036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eda:	3304      	adds	r3, #4
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	e00b      	b.n	8002efc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	441a      	add	r2, r3
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	3b01      	subs	r3, #1
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	440b      	add	r3, r1
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	3301      	adds	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3ed      	bcc.n	8002ee4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	441a      	add	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	3220      	adds	r2, #32
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	3301      	adds	r3, #1
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3bb      	bcc.n	8002ec6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002f50:	4618      	mov	r0, r3
 8002f52:	3738      	adds	r7, #56	@ 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	0800a6dc 	.word	0x0800a6dc

08002f74 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	0800a5bc 	.word	0x0800a5bc

08002f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	611a      	str	r2, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
  }
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a0c      	ldr	r2, [pc, #48]	@ (800303c <_ZN13STM32HardwareC1Ev+0x3c>)
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800301c:	461a      	mov	r2, r3
 800301e:	2300      	movs	r3, #0
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003028:	461a      	mov	r2, r3
 800302a:	2300      	movs	r3, #0
 800302c:	60d3      	str	r3, [r2, #12]
    }
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	200002f4 	.word	0x200002f4

08003040 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffbe 	bl	8002fd6 <_ZN13STM32Hardware10getRdmaIndEv>
 800305a:	4603      	mov	r3, r0
 800305c:	429c      	cmp	r4, r3
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003070:	1c59      	adds	r1, r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003086:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 8003090:	68fb      	ldr	r3, [r7, #12]
    }
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
	...

0800309c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d108      	bne.n	80030c2 <_ZN13STM32Hardware5flushEv+0x26>
 80030b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003164 <_ZN13STM32Hardware5flushEv+0xc8>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <_ZN13STM32Hardware5flushEv+0x26>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <_ZN13STM32Hardware5flushEv+0x28>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d049      	beq.n	800315c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 80030c8:	4b26      	ldr	r3, [pc, #152]	@ (8003164 <_ZN13STM32Hardware5flushEv+0xc8>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d039      	beq.n	8003156 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <_ZN13STM32Hardware5flushEv+0x74>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	b29b      	uxth	r3, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b29b      	uxth	r3, r3
 800310e:	e007      	b.n	8003120 <_ZN13STM32Hardware5flushEv+0x84>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800311e:	b29b      	uxth	r3, r3
 8003120:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	89fa      	ldrh	r2, [r7, #14]
 8003138:	4619      	mov	r1, r3
 800313a:	f005 fd21 	bl	8008b80 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	4413      	add	r3, r2
 800314a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003154:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003156:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
      }
    }
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000569 	.word	0x20000569

08003168 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
      int n = length;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800317e:	bfa8      	it	ge
 8003180:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8003184:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	4293      	cmp	r3, r2
 8003196:	bf28      	it	cs
 8003198:	4613      	movcs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f007 f861 	bl	800a278 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4413      	add	r3, r2
 80031c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031cc:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d00b      	beq.n	80031ee <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	18d1      	adds	r1, r2, r3
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	f007 f845 	bl	800a278 <memcpy>
      }

      flush();
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff54 	bl	800309c <_ZN13STM32Hardware5flushEv>
    }
 80031f4:	bf00      	nop
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	f001 ff5a 	bl	80050bc <HAL_GetTick>
 8003208:	4603      	mov	r3, r0
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
      data(0)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f880 	bl	8002324 <_ZN3ros3MsgC1Ev>
 8003224:	4a05      	ldr	r2, [pc, #20]	@ (800323c <_ZN8std_msgs4BoolC1Ev+0x28>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	711a      	strb	r2, [r3, #4]
    {
    }
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	0800a75c 	.word	0x0800a75c

08003240 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	791b      	ldrb	r3, [r3, #4]
 8003252:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4413      	add	r3, r2
 800325a:	7a3a      	ldrb	r2, [r7, #8]
 800325c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3301      	adds	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
      return offset;
 8003264:	68fb      	ldr	r3, [r7, #12]
    }
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003284:	7a3a      	ldrb	r2, [r7, #8]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	440b      	add	r3, r1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	b2db      	uxtb	r3, r3
 8003292:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003294:	7a3a      	ldrb	r2, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
     return offset;
 80032a0:	68fb      	ldr	r3, [r7, #12]
    }
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	0800a5e0 	.word	0x0800a5e0

080032cc <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	0800a5f0 	.word	0x0800a5f0

080032e8 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
      data(0)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f816 	bl	8002324 <_ZN3ros3MsgC1Ev>
 80032f8:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <_ZN8std_msgs7Float64C1Ev+0x30>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	0800a744 	.word	0x0800a744

0800331c <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003330:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	4401      	add	r1, r0
 800333e:	b2d3      	uxtb	r3, r2
 8003340:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	0a02      	lsrs	r2, r0, #8
 8003350:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003354:	0a0b      	lsrs	r3, r1, #8
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	3101      	adds	r1, #1
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	4401      	add	r1, r0
 800335e:	b2d3      	uxtb	r3, r2
 8003360:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003362:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	0c02      	lsrs	r2, r0, #16
 8003370:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003374:	0c0b      	lsrs	r3, r1, #16
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	3102      	adds	r1, #2
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	4401      	add	r1, r0
 800337e:	b2d3      	uxtb	r3, r2
 8003380:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003382:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	0e02      	lsrs	r2, r0, #24
 8003390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003394:	0e0b      	lsrs	r3, r1, #24
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	3103      	adds	r1, #3
 800339a:	6838      	ldr	r0, [r7, #0]
 800339c:	4401      	add	r1, r0
 800339e:	b2d3      	uxtb	r3, r2
 80033a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80033a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	000a      	movs	r2, r1
 80033b0:	2300      	movs	r3, #0
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	3104      	adds	r1, #4
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	4401      	add	r1, r0
 80033ba:	b2d3      	uxtb	r3, r2
 80033bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80033be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	0a0a      	lsrs	r2, r1, #8
 80033cc:	2300      	movs	r3, #0
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	3105      	adds	r1, #5
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	4401      	add	r1, r0
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80033da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0c0a      	lsrs	r2, r1, #16
 80033e8:	2300      	movs	r3, #0
 80033ea:	6979      	ldr	r1, [r7, #20]
 80033ec:	3106      	adds	r1, #6
 80033ee:	6838      	ldr	r0, [r7, #0]
 80033f0:	4401      	add	r1, r0
 80033f2:	b2d3      	uxtb	r3, r2
 80033f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80033f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	0e0a      	lsrs	r2, r1, #24
 8003404:	2300      	movs	r3, #0
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	3107      	adds	r1, #7
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	4401      	add	r1, r0
 800340e:	b2d3      	uxtb	r3, r2
 8003410:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3308      	adds	r3, #8
 8003416:	617b      	str	r3, [r7, #20]
      return offset;
 8003418:	697b      	ldr	r3, [r7, #20]
    }
 800341a:	4618      	mov	r0, r3
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003426:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800342a:	b0a3      	sub	sp, #140	@ 0x8c
 800342c:	af00      	add	r7, sp, #0
 800342e:	6778      	str	r0, [r7, #116]	@ 0x74
 8003430:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003444:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003448:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800344c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800344e:	4413      	add	r3, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2200      	movs	r2, #0
 8003456:	461c      	mov	r4, r3
 8003458:	4615      	mov	r5, r2
 800345a:	ea40 0804 	orr.w	r8, r0, r4
 800345e:	ea41 0905 	orr.w	r9, r1, r5
 8003462:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003466:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800346a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2200      	movs	r2, #0
 800347a:	469a      	mov	sl, r3
 800347c:	4693      	mov	fp, r2
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800348a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800348e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003492:	ea40 0402 	orr.w	r4, r0, r2
 8003496:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003498:	430b      	orrs	r3, r1
 800349a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800349c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80034a0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034ac:	1c9a      	adds	r2, r3, #2
 80034ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2200      	movs	r2, #0
 80034b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034c8:	464c      	mov	r4, r9
 80034ca:	0423      	lsls	r3, r4, #16
 80034cc:	4644      	mov	r4, r8
 80034ce:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80034d2:	4644      	mov	r4, r8
 80034d4:	0422      	lsls	r2, r4, #16
 80034d6:	ea40 0402 	orr.w	r4, r0, r2
 80034da:	65bc      	str	r4, [r7, #88]	@ 0x58
 80034dc:	430b      	orrs	r3, r1
 80034de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034e0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80034e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80034ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034f0:	1cda      	adds	r2, r3, #3
 80034f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034f4:	4413      	add	r3, r2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80034fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8003500:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003504:	4623      	mov	r3, r4
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800350a:	4623      	mov	r3, r4
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003510:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003514:	4623      	mov	r3, r4
 8003516:	4303      	orrs	r3, r0
 8003518:	643b      	str	r3, [r7, #64]	@ 0x40
 800351a:	462b      	mov	r3, r5
 800351c:	430b      	orrs	r3, r1
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003520:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003524:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003528:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800352c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2200      	movs	r2, #0
 800353c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800354a:	0023      	movs	r3, r4
 800354c:	2200      	movs	r2, #0
 800354e:	ea40 0402 	orr.w	r4, r0, r2
 8003552:	633c      	str	r4, [r7, #48]	@ 0x30
 8003554:	430b      	orrs	r3, r1
 8003556:	637b      	str	r3, [r7, #52]	@ 0x34
 8003558:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800355c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003560:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003568:	1d5a      	adds	r2, r3, #5
 800356a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2200      	movs	r2, #0
 8003574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003582:	0223      	lsls	r3, r4, #8
 8003584:	2200      	movs	r2, #0
 8003586:	ea40 0402 	orr.w	r4, r0, r2
 800358a:	623c      	str	r4, [r7, #32]
 800358c:	430b      	orrs	r3, r1
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003594:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003598:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800359c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035a0:	3306      	adds	r3, #6
 80035a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035a4:	4413      	add	r3, r2
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	61fa      	str	r2, [r7, #28]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	69bc      	ldr	r4, [r7, #24]
 80035ba:	0423      	lsls	r3, r4, #16
 80035bc:	2200      	movs	r2, #0
 80035be:	ea40 0402 	orr.w	r4, r0, r2
 80035c2:	613c      	str	r4, [r7, #16]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035cc:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80035d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80035d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035d8:	3307      	adds	r3, #7
 80035da:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	60fa      	str	r2, [r7, #12]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	68bc      	ldr	r4, [r7, #8]
 80035f2:	0623      	lsls	r3, r4, #24
 80035f4:	2200      	movs	r2, #0
 80035f6:	ea40 0402 	orr.w	r4, r0, r2
 80035fa:	603c      	str	r4, [r7, #0]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003604:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8003608:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800360c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800360e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003616:	3308      	adds	r3, #8
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 800361c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8003620:	4618      	mov	r0, r3
 8003622:	378c      	adds	r7, #140	@ 0x8c
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800362a:	4770      	bx	lr

0800362c <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	4b03      	ldr	r3, [pc, #12]	@ (8003644 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	0800a614 	.word	0x0800a614

08003648 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	0800a628 	.word	0x0800a628

08003664 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:

  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fe13 	bl	800229c <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8003676:	bf00      	nop
  }
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZN4ROS117callback_ElevatorERKN8std_msgs7Float64E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Float64 &msg){
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	elevatorControl(msg.data);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f7fd fa48 	bl	8000b24 <__aeabi_d2f>
 8003694:	4603      	mov	r3, r0
 8003696:	ee00 3a10 	vmov	s0, r3
 800369a:	f7fe fe21 	bl	80022e0 <_Z15elevatorControlf>
    // runElevator = msg.data;
    return;
 800369e:	bf00      	nop
  }
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 80036ae:	bf00      	nop
  }
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e00c      	b.n	80036e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	fa22 f103 	lsr.w	r1, r2, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	b2ca      	uxtb	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d9ef      	bls.n	80036ca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	e010      	b.n	8003730 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	440a      	add	r2, r1
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	4611      	mov	r1, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	00d2      	lsls	r2, r2, #3
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d9eb      	bls.n	800370e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	0800a78c 	.word	0x0800a78c

08003764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ffe8 	bl	8003744 <_ZN3ros15NodeHandleBase_C1Ev>
 8003774:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fc3e 	bl	8003000 <_ZN13STM32HardwareC1Ev>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003796:	3314      	adds	r3, #20
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f937 	bl	8002a0c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e00a      	b.n	80037ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	2200      	movs	r2, #0
 80037b2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b18      	cmp	r3, #24
 80037be:	d9f1      	bls.n	80037a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e009      	b.n	80037da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80037ce:	2100      	movs	r1, #0
 80037d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3301      	adds	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b18      	cmp	r3, #24
 80037de:	d9f2      	bls.n	80037c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e00a      	b.n	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80037f0:	3304      	adds	r3, #4
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003802:	d3f0      	bcc.n	80037e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	e00a      	b.n	8003820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4413      	add	r3, r2
 8003810:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003814:	3304      	adds	r3, #4
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003826:	d3f0      	bcc.n	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800382e:	461a      	mov	r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800383c:	461a      	mov	r2, r3
 800383e:	2300      	movs	r3, #0
 8003840:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800384a:	461a      	mov	r2, r3
 800384c:	2300      	movs	r3, #0
 800384e:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003858:	461a      	mov	r2, r3
 800385a:	2300      	movs	r3, #0
 800385c:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003874:	461a      	mov	r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6213      	str	r3, [r2, #32]
  }
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	0800a730 	.word	0x0800a730

08003898 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	4a04      	ldr	r2, [pc, #16]	@ (80038b4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	0800a774 	.word	0x0800a774

080038b8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ffe5 	bl	8003898 <_ZN3ros11Subscriber_C1Ev>
 80038ce:	4a0b      	ldr	r2, [pc, #44]	@ (80038fc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	330c      	adds	r3, #12
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fc9b 	bl	8003214 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  };
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	0800a718 	.word	0x0800a718

08003900 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ffc1 	bl	8003898 <_ZN3ros11Subscriber_C1Ev>
 8003916:	4a0b      	ldr	r2, [pc, #44]	@ (8003944 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3310      	adds	r3, #16
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fce1 	bl	80032e8 <_ZN8std_msgs7Float64C1Ev>
    cb_(cb),
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	621a      	str	r2, [r3, #32]
    endpoint_(endpoint)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24
    topic_ = topic_name;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
  };
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0800a700 	.word	0x0800a700

08003948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fc51 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 800395a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800396e:	4293      	cmp	r3, r2
 8003970:	d905      	bls.n	800397e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003984:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003992:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d906      	bls.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d015      	beq.n	80039e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fc1e 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bf8c      	ite	hi
 80039d2:	2301      	movhi	r3, #1
 80039d4:	2300      	movls	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80039dc:	f06f 0301 	mvn.w	r3, #1
 80039e0:	e226      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      int data = hardware_.read();
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fb2a 	bl	8003040 <_ZN13STM32Hardware4readEv>
 80039ec:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f2c0 81ff 	blt.w	8003df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        break;
      checksum_ += data;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fc:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4413      	add	r3, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a0a:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a14:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003a18:	2b07      	cmp	r3, #7
 8003a1a:	d12d      	bne.n	8003a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
      {
        message_in[index_++] = data;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a22:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8003a2e:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	b2d1      	uxtb	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003a3e:	3304      	adds	r3, #4
 8003a40:	460a      	mov	r2, r1
 8003a42:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a56:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a60:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1a0      	bne.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2308      	movs	r3, #8
 8003a72:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003a76:	e798      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d130      	bne.n	8003ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
      {
        if (data == 0xff)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2bff      	cmp	r3, #255	@ 0xff
 8003a8a:	d112      	bne.n	8003ab2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
        {
          mode_++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a92:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003a96:	3301      	adds	r3, #1
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a9e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003aac:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 8003ab0:	e77b      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fba0 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	bf8c      	ite	hi
 8003aca:	2301      	movhi	r3, #1
 8003acc:	2300      	movls	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f43f af6a 	beq.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 8003ae2:	f06f 0301 	mvn.w	r3, #1
 8003ae6:	e1a3      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d121      	bne.n	8003b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
      {
        if (data == PROTOCOL_VER)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2bfe      	cmp	r3, #254	@ 0xfe
 8003afa:	d10b      	bne.n	8003b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
        {
          mode_++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b02:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003b06:	3301      	adds	r3, #1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b0e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003b12:	e74a      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b28:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f af3c 	bne.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f980 	bl	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003b38:	e737      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b40:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d120      	bne.n	8003b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
      {
        bytes_ = data;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b6a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003b6e:	3301      	adds	r3, #1
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b76:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 8003b88:	e70f      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b90:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d118      	bne.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
      {
        bytes_ += data << 8;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b9e:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	4413      	add	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bae:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bc4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003bc8:	e6ef      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bd0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d11f      	bne.n	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      {
        if ((checksum_ % 256) == 255)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bde:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003be2:	425a      	negs	r2, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	bf58      	it	pl
 8003bea:	4253      	negpl	r3, r2
 8003bec:	2bff      	cmp	r3, #255	@ 0xff
 8003bee:	d10b      	bne.n	8003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c02:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003c06:	e6d0      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003c16:	e6c8      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c1e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d119      	bne.n	8003c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
      {
        topic_ = data;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003c3e:	3301      	adds	r3, #1
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c46:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 8003c58:	e6a7      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c60:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d123      	bne.n	8003cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
      {
        topic_ += data << 8;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6e:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	4413      	add	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c7e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c96:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f47f ae85 	bne.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2308      	movs	r3, #8
 8003caa:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003cae:	e67c      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	f47f ae75 	bne.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003cd8:	425a      	negs	r2, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	bf58      	it	pl
 8003ce0:	4253      	negpl	r3, r2
 8003ce2:	2bff      	cmp	r3, #255	@ 0xff
 8003ce4:	f47f ae61 	bne.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cee:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
          {
            requestSyncTime();
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f89e 	bl	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f8ba 	bl	8003e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	e085      	b.n	8003e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	d108      	bne.n	8003d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
          {
            syncTime(message_in);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f97b 	bl	8004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003d42:	e632      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d4a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d112      	bne.n	8003d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
          {
            req_param_resp.deserialize(message_in);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003d58:	3314      	adds	r3, #20
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 8003d60:	3204      	adds	r2, #4
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ff86 	bl	8002c76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 8003d76:	e618      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003d82:	2b0b      	cmp	r3, #11
 8003d84:	d106      	bne.n	8003d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
          {
            configured_ = false;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003d92:	e60a      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d9a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003d9e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f43f adfc 	beq.w	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003dbc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003dc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003dd4:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4790      	blx	r2
    while (true)
 8003df2:	e5da      	b.n	80039aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003df4:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfc:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d014      	beq.n	8003e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d909      	bls.n	8003e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
    {
      requestSyncTime();
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f80c 	bl	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    }

    return SPIN_OK;
 8003e2e:	2300      	movs	r3, #0
  }
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8003e40:	f107 030c 	add.w	r3, r7, #12
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe fa7d 	bl	8002344 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f107 020c 	add.w	r2, r7, #12
 8003e54:	210a      	movs	r1, #10
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
    rt_time = hardware_.time();
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f9cc 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6c:	615a      	str	r2, [r3, #20]
  }
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003e76:	b590      	push	{r4, r7, lr}
 8003e78:	b08b      	sub	sp, #44	@ 0x2c
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fb4e 	bl	8002524 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	e062      	b.n	8003f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d056      	beq.n	8003f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4798      	blx	r3
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4798      	blx	r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f26:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681c      	ldr	r4, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f83e 	bl	8002fbe <_ZN3ros9Publisher15getEndpointTypeEv>
 8003f42:	4601      	mov	r1, r0
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	2b18      	cmp	r3, #24
 8003f58:	dd99      	ble.n	8003e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	e05e      	b.n	800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d053      	beq.n	8004018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f74:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f96:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003f9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4798      	blx	r3
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbc:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	4798      	blx	r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fe2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681c      	ldr	r4, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fee:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003ff2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffa:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3304      	adds	r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4608      	mov	r0, r1
 800400a:	4798      	blx	r3
 800400c:	4601      	mov	r1, r0
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	461a      	mov	r2, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	3301      	adds	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	2b18      	cmp	r3, #24
 8004022:	dd9d      	ble.n	8003f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 8004030:	bf00      	nop
 8004032:	372c      	adds	r7, #44	@ 0x2c
 8004034:	46bd      	mov	sp, r7
 8004036:	bd90      	pop	{r4, r7, pc}

08004038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe f97c 	bl	8002344 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f8d3 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004064:	f107 0308 	add.w	r3, r7, #8
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe f9da 	bl	8002424 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4915      	ldr	r1, [pc, #84]	@ (80040cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004076:	fba1 1303 	umull	r1, r3, r1, r3
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	4413      	add	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004086:	fba3 0302 	umull	r0, r3, r3, r2
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004090:	fb00 f303 	mul.w	r3, r0, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	4a0e      	ldr	r2, [pc, #56]	@ (80040d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	440b      	add	r3, r1
 800409e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8bf 	bl	800422c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff f8a2 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c0:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	10624dd3 	.word	0x10624dd3
 80040d0:	000f4240 	.word	0x000f4240

080040d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b63      	cmp	r3, #99	@ 0x63
 80040e4:	dd0b      	ble.n	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ec:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e090      	b.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800410a:	3304      	adds	r3, #4
 800410c:	3307      	adds	r3, #7
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4790      	blx	r2
 8004114:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800411c:	22ff      	movs	r2, #255	@ 0xff
 800411e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004128:	22fe      	movs	r2, #254	@ 0xfe
 800412a:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004138:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	b29b      	uxth	r3, r3
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	b29b      	uxth	r3, r3
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800414c:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004156:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004160:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8004164:	4413      	add	r3, r2
 8004166:	b2db      	uxtb	r3, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004172:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004180:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	b21b      	sxth	r3, r3
 8004188:	121b      	asrs	r3, r3, #8
 800418a:	b21b      	sxth	r3, r3
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004194:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800419c:	2305      	movs	r3, #5
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e00d      	b.n	80041be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80041ac:	3304      	adds	r3, #4
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3306      	adds	r3, #6
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	ddec      	ble.n	80041a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3307      	adds	r3, #7
 80041cc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	425a      	negs	r2, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	bf58      	it	pl
 80041d8:	4253      	negpl	r3, r2
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	6179      	str	r1, [r7, #20]
 80041e2:	43d2      	mvns	r2, r2
 80041e4:	b2d1      	uxtb	r1, r2
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80041ee:	3304      	adds	r3, #4
 80041f0:	460a      	mov	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fa:	dc0b      	bgt.n	8004214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1d18      	adds	r0, r3, #4
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004206:	3304      	adds	r3, #4
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4619      	mov	r1, r3
 800420c:	f7fe ffac 	bl	8003168 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	e005      	b.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004214:	4904      	ldr	r1, [pc, #16]	@ (8004228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f84c 	bl	80042b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0800a64c 	.word	0x0800a64c

0800422c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe ffde 	bl	80031fc <_ZN13STM32Hardware4timeEv>
 8004240:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4917      	ldr	r1, [pc, #92]	@ (80042a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800424a:	fba1 1303 	umull	r1, r3, r1, r3
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800425a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004264:	fba3 0302 	umull	r0, r3, r3, r2
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a0d      	ldr	r2, [pc, #52]	@ (80042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	1aca      	subs	r2, r1, r3
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 800427e:	4413      	add	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004286:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800428e:	3318      	adds	r3, #24
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004296:	321c      	adds	r2, #28
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fe0a 	bl	8000eb4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	10624dd3 	.word	0x10624dd3
 80042ac:	000f4240 	.word	0x000f4240
 80042b0:	3b9aca00 	.word	0x3b9aca00

080042b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	2103      	movs	r1, #3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f804 	bl	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	460b      	mov	r3, r1
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80042de:	f107 0314 	add.w	r3, r7, #20
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fae2 	bl	80028ac <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80042e8:	7afb      	ldrb	r3, [r7, #11]
 80042ea:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f107 0214 	add.w	r2, r7, #20
 80042fa:	2107      	movs	r1, #7
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	4798      	blx	r3
  }
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d134      	bne.n	8004382 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800431e:	4293      	cmp	r3, r2
 8004320:	d12f      	bne.n	8004382 <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8004322:	481a      	ldr	r0, [pc, #104]	@ (800438c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004324:	f7ff fa1e 	bl	8003764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8004328:	4819      	ldr	r0, [pc, #100]	@ (8004390 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800432a:	f7fe ff73 	bl	8003214 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 800432e:	2300      	movs	r3, #0
 8004330:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004332:	4918      	ldr	r1, [pc, #96]	@ (8004394 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004334:	4818      	ldr	r0, [pc, #96]	@ (8004398 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004336:	f7fe fe2b 	bl	8002f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 800433a:	4818      	ldr	r0, [pc, #96]	@ (800439c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800433c:	f7fe ff6a 	bl	8003214 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8004340:	2300      	movs	r3, #0
 8004342:	4a16      	ldr	r2, [pc, #88]	@ (800439c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004344:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004346:	4817      	ldr	r0, [pc, #92]	@ (80043a4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004348:	f7fe fe22 	bl	8002f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 elevatorHeight;
 800434c:	4816      	ldr	r0, [pc, #88]	@ (80043a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800434e:	f7fe ffcb 	bl	80032e8 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_elevator("/elevator", &elevatorHeight);
 8004352:	2300      	movs	r3, #0
 8004354:	4a14      	ldr	r2, [pc, #80]	@ (80043a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004356:	4915      	ldr	r1, [pc, #84]	@ (80043ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004358:	4815      	ldr	r0, [pc, #84]	@ (80043b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800435a:	f7fe fe19 	bl	8002f90 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 800435e:	2301      	movs	r3, #1
 8004360:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004362:	4915      	ldr	r1, [pc, #84]	@ (80043b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004364:	4815      	ldr	r0, [pc, #84]	@ (80043bc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004366:	f7ff faa7 	bl	80038b8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float64> sub_elevatorHeight("/cmd_elevator", ROS1::callback_Elevator);
 800436a:	2301      	movs	r3, #1
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800436e:	4915      	ldr	r1, [pc, #84]	@ (80043c4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004370:	4815      	ldr	r0, [pc, #84]	@ (80043c8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004372:	f7ff fac5 	bl	8003900 <_ZN3ros10SubscriberIN8std_msgs7Float64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8004376:	2301      	movs	r3, #1
 8004378:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800437a:	4915      	ldr	r1, [pc, #84]	@ (80043d0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800437c:	4815      	ldr	r0, [pc, #84]	@ (80043d4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800437e:	f7ff fa9b 	bl	80038b8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2000056c 	.word	0x2000056c
 8004390:	20001aa8 	.word	0x20001aa8
 8004394:	0800a688 	.word	0x0800a688
 8004398:	20001ab0 	.word	0x20001ab0
 800439c:	20001ac4 	.word	0x20001ac4
 80043a0:	0800a694 	.word	0x0800a694
 80043a4:	20001acc 	.word	0x20001acc
 80043a8:	20001ae0 	.word	0x20001ae0
 80043ac:	0800a69c 	.word	0x0800a69c
 80043b0:	20001af0 	.word	0x20001af0
 80043b4:	08003665 	.word	0x08003665
 80043b8:	0800a6a8 	.word	0x0800a6a8
 80043bc:	20001b04 	.word	0x20001b04
 80043c0:	0800367f 	.word	0x0800367f
 80043c4:	0800a6bc 	.word	0x0800a6bc
 80043c8:	20001b20 	.word	0x20001b20
 80043cc:	080036a7 	.word	0x080036a7
 80043d0:	0800a6cc 	.word	0x0800a6cc
 80043d4:	20001b48 	.word	0x20001b48

080043d8 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3310      	adds	r3, #16
 80043e6:	6839      	ldr	r1, [r7, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff f81c 	bl	8003426 <_ZN8std_msgs7Float6411deserializeEPh>
    this->cb_(msg);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	3210      	adds	r2, #16
 80043f6:	4610      	mov	r0, r2
 80043f8:	4798      	blx	r3
  }
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  }
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <_ZN3ros10SubscriberIN8std_msgs7Float64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3310      	adds	r3, #16
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f900 	bl	800362c <_ZN8std_msgs7Float647getTypeEv>
 800442c:	4603      	mov	r3, r0
  }
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_ZN3ros10SubscriberIN8std_msgs7Float64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3310      	adds	r3, #16
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f900 	bl	8003648 <_ZN8std_msgs7Float646getMD5Ev>
 8004448:	4603      	mov	r3, r0
  }
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	330c      	adds	r3, #12
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe ff05 	bl	8003272 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	320c      	adds	r2, #12
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
  }
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
  }
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	330c      	adds	r3, #12
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe ff05 	bl	80032b0 <_ZN8std_msgs4Bool7getTypeEv>
 80044a6:	4603      	mov	r3, r0
  }
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	330c      	adds	r3, #12
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe ff05 	bl	80032cc <_ZN8std_msgs4Bool6getMD5Ev>
 80044c2:	4603      	mov	r3, r0
  }
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    return configured_;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044da:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_GLOBAL__sub_I_nh>:
 80044ea:	b580      	push	{r7, lr}
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7ff ff08 	bl	8004308 <_Z41__static_initialization_and_destruction_0ii>
 80044f8:	bd80      	pop	{r7, pc}

080044fa <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f002 fe38 	bl	8007184 <HAL_TIM_PWM_Start>
	write(startAngle);
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f804 	bl	8004524 <_ZN5Servo5writeEi>
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	angle = ang;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	ee07 3a90 	vmov	s15, r3
 800455c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004560:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004570:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004588:	ed97 7a03 	vldr	s14, [r7, #12]
 800458c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	dd08      	ble.n	80045a8 <_ZN5Servo5writeEi+0x84>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80045a6:	e014      	b.n	80045d2 <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80045b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	d507      	bpl.n	80045d2 <_ZN5Servo5writeEi+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ce:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <_ZN5Servo5writeEi+0xcc>
 80045da:	edd7 7a03 	vldr	s15, [r7, #12]
 80045de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	ee17 2a90 	vmov	r2, s15
 80045ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80045ee:	e045      	b.n	800467c <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d10a      	bne.n	800460e <_ZN5Servo5writeEi+0xea>
 80045f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80045fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	ee17 2a90 	vmov	r2, s15
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800460c:	e036      	b.n	800467c <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b08      	cmp	r3, #8
 8004614:	d10a      	bne.n	800462c <_ZN5Servo5writeEi+0x108>
 8004616:	edd7 7a03 	vldr	s15, [r7, #12]
 800461a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	ee17 2a90 	vmov	r2, s15
 8004628:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800462a:	e027      	b.n	800467c <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d10a      	bne.n	800464a <_ZN5Servo5writeEi+0x126>
 8004634:	edd7 7a03 	vldr	s15, [r7, #12]
 8004638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	ee17 2a90 	vmov	r2, s15
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004648:	e018      	b.n	800467c <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b10      	cmp	r3, #16
 8004650:	d10a      	bne.n	8004668 <_ZN5Servo5writeEi+0x144>
 8004652:	edd7 7a03 	vldr	s15, [r7, #12]
 8004656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	ee17 2a90 	vmov	r2, s15
 8004664:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004666:	e009      	b.n	800467c <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004668:	edd7 7a03 	vldr	s15, [r7, #12]
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	ee17 2a90 	vmov	r2, s15
 800467a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	@ 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	f300 80b0 	bgt.w	8004800 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f2c0 80ae 	blt.w	8004804 <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 80046bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046c4:	ee17 3a90 	vmov	r3, s15
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfb8      	it	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80046dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e0:	ee17 0a90 	vmov	r0, s15
 80046e4:	f7fb ff04 	bl	80004f0 <__aeabi_f2d>
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004818 <_ZN5Servo6turnToEii+0x190>)
 80046ee:	f7fc f881 	bl	80007f4 <__aeabi_ddiv>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	4b47      	ldr	r3, [pc, #284]	@ (800481c <_ZN5Servo6turnToEii+0x194>)
 8004700:	f7fb ff4e 	bl	80005a0 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	f7fc fa0a 	bl	8000b24 <__aeabi_d2f>
 8004710:	4603      	mov	r3, r0
 8004712:	4a43      	ldr	r2, [pc, #268]	@ (8004820 <_ZN5Servo6turnToEii+0x198>)
 8004714:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 8004716:	4b42      	ldr	r3, [pc, #264]	@ (8004820 <_ZN5Servo6turnToEii+0x198>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fee8 	bl	80004f0 <__aeabi_f2d>
 8004720:	a33b      	add	r3, pc, #236	@ (adr r3, 8004810 <_ZN5Servo6turnToEii+0x188>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f7fb ff3b 	bl	80005a0 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	f7fc f9f7 	bl	8000b24 <__aeabi_d2f>
 8004736:	4603      	mov	r3, r0
 8004738:	4a39      	ldr	r2, [pc, #228]	@ (8004820 <_ZN5Servo6turnToEii+0x198>)
 800473a:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004746:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <_ZN5Servo6turnToEii+0x198>)
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004754:	d510      	bpl.n	8004778 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 8004756:	4b32      	ldr	r3, [pc, #200]	@ (8004820 <_ZN5Servo6turnToEii+0x198>)
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004760:	ee17 3a90 	vmov	r3, s15
 8004764:	607b      	str	r3, [r7, #4]
		write(ang);
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fedb 	bl	8004524 <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 800476e:	492d      	ldr	r1, [pc, #180]	@ (8004824 <_ZN5Servo6turnToEii+0x19c>)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fd fc1f 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>
		return;
 8004776:	e046      	b.n	8004806 <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 8004778:	230a      	movs	r3, #10
 800477a:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	61fb      	str	r3, [r7, #28]
	t = 0;
 8004782:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <_ZN5Servo6turnToEii+0x1a0>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1a3 0209 	sub.w	r2, r3, #9
 800478e:	4b26      	ldr	r3, [pc, #152]	@ (8004828 <_ZN5Servo6turnToEii+0x1a0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	dd2e      	ble.n	80047f4 <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <_ZN5Servo6turnToEii+0x1a0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b0:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80047c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80047c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047d2:	ee17 3a90 	vmov	r3, s15
 80047d6:	617b      	str	r3, [r7, #20]
		write(a);
 80047d8:	6979      	ldr	r1, [r7, #20]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff fea2 	bl	8004524 <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 80047e0:	4910      	ldr	r1, [pc, #64]	@ (8004824 <_ZN5Servo6turnToEii+0x19c>)
 80047e2:	200a      	movs	r0, #10
 80047e4:	f7fd fbe6 	bl	8001fb4 <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <_ZN5Servo6turnToEii+0x1a0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330a      	adds	r3, #10
 80047ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004828 <_ZN5Servo6turnToEii+0x1a0>)
 80047f0:	6013      	str	r3, [r2, #0]
	}
 80047f2:	e7c9      	b.n	8004788 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 80047f4:	bf00      	nop
	write(ang);
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fe93 	bl	8004524 <_ZN5Servo5writeEi>
 80047fe:	e002      	b.n	8004806 <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 8004804:	bf00      	nop
}
 8004806:	3728      	adds	r7, #40	@ 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	f3af 8000 	nop.w
 8004810:	9999999a 	.word	0x9999999a
 8004814:	3ff19999 	.word	0x3ff19999
 8004818:	404e0000 	.word	0x404e0000
 800481c:	408f4000 	.word	0x408f4000
 8004820:	20001b64 	.word	0x20001b64
 8004824:	2000012c 	.word	0x2000012c
 8004828:	20001b68 	.word	0x20001b68

0800482c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	4b13      	ldr	r3, [pc, #76]	@ (8004880 <HAL_MspInit+0x54>)
 8004834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004836:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <HAL_MspInit+0x54>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6613      	str	r3, [r2, #96]	@ 0x60
 800483e:	4b10      	ldr	r3, [pc, #64]	@ (8004880 <HAL_MspInit+0x54>)
 8004840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <HAL_MspInit+0x54>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484e:	4a0c      	ldr	r2, [pc, #48]	@ (8004880 <HAL_MspInit+0x54>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	@ 0x58
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_MspInit+0x54>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	2100      	movs	r1, #0
 8004866:	2005      	movs	r0, #5
 8004868:	f000 fd0f 	bl	800528a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800486c:	2005      	movs	r0, #5
 800486e:	f000 fd26 	bl	80052be <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004872:	f001 fc11 	bl	8006098 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b09c      	sub	sp, #112	@ 0x70
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800489c:	f107 0318 	add.w	r3, r7, #24
 80048a0:	2244      	movs	r2, #68	@ 0x44
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f005 fcb3 	bl	800a210 <memset>
  if(hi2c->Instance==I2C1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004968 <HAL_I2C_MspInit+0xe4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d154      	bne.n	800495e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80048b4:	2340      	movs	r3, #64	@ 0x40
 80048b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80048b8:	2300      	movs	r3, #0
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048bc:	f107 0318 	add.w	r3, r7, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 f927 	bl	8006b14 <HAL_RCCEx_PeriphCLKConfig>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80048cc:	f7fd fa48 	bl	8001d60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d0:	4b26      	ldr	r3, [pc, #152]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d4:	4a25      	ldr	r2, [pc, #148]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048dc:	4b23      	ldr	r3, [pc, #140]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e8:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ec:	4a1f      	ldr	r2, [pc, #124]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048f4:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 80048f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004904:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004906:	2312      	movs	r3, #18
 8004908:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800490e:	2300      	movs	r3, #0
 8004910:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004912:	2304      	movs	r3, #4
 8004914:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004916:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800491a:	4619      	mov	r1, r3
 800491c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004920:	f001 f81a 	bl	8005958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004928:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800492a:	2312      	movs	r3, #18
 800492c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492e:	2300      	movs	r3, #0
 8004930:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004932:	2300      	movs	r3, #0
 8004934:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004936:	2304      	movs	r3, #4
 8004938:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800493e:	4619      	mov	r1, r3
 8004940:	480b      	ldr	r0, [pc, #44]	@ (8004970 <HAL_I2C_MspInit+0xec>)
 8004942:	f001 f809 	bl	8005958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	4a08      	ldr	r2, [pc, #32]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 800494c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004950:	6593      	str	r3, [r2, #88]	@ 0x58
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <HAL_I2C_MspInit+0xe8>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800495e:	bf00      	nop
 8004960:	3770      	adds	r7, #112	@ 0x70
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40005400 	.word	0x40005400
 800496c:	40021000 	.word	0x40021000
 8004970:	48000400 	.word	0x48000400

08004974 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_TIM_PWM_MspInit+0x80>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10c      	bne.n	80049a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004986:	4b1c      	ldr	r3, [pc, #112]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 8004988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498a:	4a1b      	ldr	r2, [pc, #108]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 800498c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004990:	6613      	str	r3, [r2, #96]	@ 0x60
 8004992:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <HAL_TIM_PWM_MspInit+0x88>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	e010      	b.n	80049e6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a00 <HAL_TIM_PWM_MspInit+0x8c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10b      	bne.n	80049e6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049ce:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	4a09      	ldr	r2, [pc, #36]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80049da:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <HAL_TIM_PWM_MspInit+0x84>)
 80049dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40013400 	.word	0x40013400

08004a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a14:	d114      	bne.n	8004a40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a16:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1a:	4a25      	ldr	r2, [pc, #148]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	201c      	movs	r0, #28
 8004a34:	f000 fc29 	bl	800528a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a38:	201c      	movs	r0, #28
 8004a3a:	f000 fc40 	bl	80052be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004a3e:	e032      	b.n	8004aa6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <HAL_TIM_Base_MspInit+0xb0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d114      	bne.n	8004a74 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a4a:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a50:	f043 0310 	orr.w	r3, r3, #16
 8004a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a56:	4b16      	ldr	r3, [pc, #88]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2100      	movs	r1, #0
 8004a66:	2036      	movs	r0, #54	@ 0x36
 8004a68:	f000 fc0f 	bl	800528a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a6c:	2036      	movs	r0, #54	@ 0x36
 8004a6e:	f000 fc26 	bl	80052be <HAL_NVIC_EnableIRQ>
}
 8004a72:	e018      	b.n	8004aa6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d113      	bne.n	8004aa6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	4a0b      	ldr	r2, [pc, #44]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a8a:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <HAL_TIM_Base_MspInit+0xac>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	2037      	movs	r0, #55	@ 0x37
 8004a9c:	f000 fbf5 	bl	800528a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004aa0:	2037      	movs	r0, #55	@ 0x37
 8004aa2:	f000 fc0c 	bl	80052be <HAL_NVIC_EnableIRQ>
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40001000 	.word	0x40001000
 8004ab8:	40001400 	.word	0x40001400

08004abc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	@ 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a18      	ldr	r2, [pc, #96]	@ (8004b3c <HAL_TIM_Encoder_MspInit+0x80>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d129      	bne.n	8004b32 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ade:	4b18      	ldr	r3, [pc, #96]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	4a17      	ldr	r2, [pc, #92]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ae4:	f043 0304 	orr.w	r3, r3, #4
 8004ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aea:	4b15      	ldr	r3, [pc, #84]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b02:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <HAL_TIM_Encoder_MspInit+0x84>)
 8004b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b14:	2302      	movs	r3, #2
 8004b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004b20:	230a      	movs	r3, #10
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b2e:	f000 ff13 	bl	8005958 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8004b32:	bf00      	nop
 8004b34:	3728      	adds	r7, #40	@ 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40021000 	.word	0x40021000

08004b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a33      	ldr	r2, [pc, #204]	@ (8004c30 <HAL_TIM_MspPostInit+0xec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d11c      	bne.n	8004ba0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b66:	4b33      	ldr	r3, [pc, #204]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004b6c:	f043 0304 	orr.w	r3, r3, #4
 8004b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b72:	4b30      	ldr	r3, [pc, #192]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004b7e:	230f      	movs	r3, #15
 8004b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b82:	2302      	movs	r3, #2
 8004b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	4619      	mov	r1, r3
 8004b98:	4827      	ldr	r0, [pc, #156]	@ (8004c38 <HAL_TIM_MspPostInit+0xf4>)
 8004b9a:	f000 fedd 	bl	8005958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004b9e:	e043      	b.n	8004c28 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a25      	ldr	r2, [pc, #148]	@ (8004c3c <HAL_TIM_MspPostInit+0xf8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d11d      	bne.n	8004be6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bae:	4a21      	ldr	r2, [pc, #132]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bc2:	2340      	movs	r3, #64	@ 0x40
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004be0:	f000 feba 	bl	8005958 <HAL_GPIO_Init>
}
 8004be4:	e020      	b.n	8004c28 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <HAL_TIM_MspPostInit+0xfc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d11b      	bne.n	8004c28 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bf6:	f043 0304 	orr.w	r3, r3, #4
 8004bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <HAL_TIM_MspPostInit+0xf0>)
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4619      	mov	r1, r3
 8004c22:	4805      	ldr	r0, [pc, #20]	@ (8004c38 <HAL_TIM_MspPostInit+0xf4>)
 8004c24:	f000 fe98 	bl	8005958 <HAL_GPIO_Init>
}
 8004c28:	bf00      	nop
 8004c2a:	3728      	adds	r7, #40	@ 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40021000 	.word	0x40021000
 8004c38:	48000800 	.word	0x48000800
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40013400 	.word	0x40013400

08004c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b09a      	sub	sp, #104	@ 0x68
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c5c:	f107 0310 	add.w	r3, r7, #16
 8004c60:	2244      	movs	r2, #68	@ 0x44
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f005 fad3 	bl	800a210 <memset>
  if(huart->Instance==USART2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8004da4 <HAL_UART_MspInit+0x160>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	f040 8093 	bne.w	8004d9c <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004c76:	2302      	movs	r3, #2
 8004c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c7e:	f107 0310 	add.w	r3, r7, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 ff46 	bl	8006b14 <HAL_RCCEx_PeriphCLKConfig>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c8e:	f7fd f867 	bl	8001d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c92:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	4a44      	ldr	r2, [pc, #272]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9e:	4b42      	ldr	r3, [pc, #264]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004caa:	4b3f      	ldr	r3, [pc, #252]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	4a3e      	ldr	r2, [pc, #248]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8004da8 <HAL_UART_MspInit+0x164>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004cc2:	2318      	movs	r3, #24
 8004cc4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cd2:	2307      	movs	r3, #7
 8004cd4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4833      	ldr	r0, [pc, #204]	@ (8004dac <HAL_UART_MspInit+0x168>)
 8004cde:	f000 fe3b 	bl	8005958 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004ce4:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <HAL_UART_MspInit+0x170>)
 8004ce6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004ce8:	4b31      	ldr	r3, [pc, #196]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004cea:	221b      	movs	r2, #27
 8004cec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cee:	4b30      	ldr	r3, [pc, #192]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004cfc:	2280      	movs	r2, #128	@ 0x80
 8004cfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d00:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d0c:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d12:	4b27      	ldr	r3, [pc, #156]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d1a:	4825      	ldr	r0, [pc, #148]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d1c:	f000 faea 	bl	80052f4 <HAL_DMA_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004d26:	f7fd f81b 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d2e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004d30:	4a1f      	ldr	r2, [pc, #124]	@ (8004db0 <HAL_UART_MspInit+0x16c>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel4;
 8004d36:	4b20      	ldr	r3, [pc, #128]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d38:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <HAL_UART_MspInit+0x178>)
 8004d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d3e:	221a      	movs	r2, #26
 8004d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d42:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d54:	4b18      	ldr	r3, [pc, #96]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d5a:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004d60:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004d6e:	4812      	ldr	r0, [pc, #72]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d70:	f000 fac0 	bl	80052f4 <HAL_DMA_Init>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004d7a:	f7fc fff1 	bl	8001d60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004d86:	4a0c      	ldr	r2, [pc, #48]	@ (8004db8 <HAL_UART_MspInit+0x174>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2026      	movs	r0, #38	@ 0x26
 8004d92:	f000 fa7a 	bl	800528a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d96:	2026      	movs	r0, #38	@ 0x26
 8004d98:	f000 fa91 	bl	80052be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004d9c:	bf00      	nop
 8004d9e:	3768      	adds	r7, #104	@ 0x68
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40004400 	.word	0x40004400
 8004da8:	40021000 	.word	0x40021000
 8004dac:	48000400 	.word	0x48000400
 8004db0:	20000388 	.word	0x20000388
 8004db4:	40020030 	.word	0x40020030
 8004db8:	200003e8 	.word	0x200003e8
 8004dbc:	40020044 	.word	0x40020044

08004dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <NMI_Handler+0x4>

08004dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <HardFault_Handler+0x4>

08004dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <MemManage_Handler+0x4>

08004dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <BusFault_Handler+0x4>

08004de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <UsageFault_Handler+0x4>

08004de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e16:	f000 f93f 	bl	8005098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004e30:	2002      	movs	r0, #2
 8004e32:	f000 ff43 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e3e:	2004      	movs	r0, #4
 8004e40:	f000 ff3c 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e44:	bf00      	nop
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e4c:	4802      	ldr	r0, [pc, #8]	@ (8004e58 <DMA1_Channel3_IRQHandler+0x10>)
 8004e4e:	f000 fc34 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000388 	.word	0x20000388

08004e5c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e60:	4802      	ldr	r0, [pc, #8]	@ (8004e6c <DMA1_Channel4_IRQHandler+0x10>)
 8004e62:	f000 fc2a 	bl	80056ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200003e8 	.word	0x200003e8

08004e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004e74:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e78:	f000 ff20 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004e7c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004e80:	f000 ff1c 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e8c:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <TIM2_IRQHandler+0x10>)
 8004e8e:	f002 fcf9 	bl	8007884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	2000012c 	.word	0x2000012c

08004e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ea0:	4802      	ldr	r0, [pc, #8]	@ (8004eac <USART2_IRQHandler+0x10>)
 8004ea2:	f003 feed 	bl	8008c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200002f4 	.word	0x200002f4

08004eb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004eb4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004eb8:	f000 ff00 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004ebc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004ec0:	f000 fefc 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004ec4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004ec8:	f000 fef8 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ecc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004ed0:	f000 fef4 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004ed4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004ed8:	f000 fef0 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004edc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004ee0:	f000 feec 	bl	8005cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004eec:	4802      	ldr	r0, [pc, #8]	@ (8004ef8 <TIM6_DAC_IRQHandler+0x10>)
 8004eee:	f002 fcc9 	bl	8007884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000210 	.word	0x20000210

08004efc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004f00:	4802      	ldr	r0, [pc, #8]	@ (8004f0c <TIM7_IRQHandler+0x10>)
 8004f02:	f002 fcbf 	bl	8007884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2000025c 	.word	0x2000025c

08004f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f18:	4a14      	ldr	r2, [pc, #80]	@ (8004f6c <_sbrk+0x5c>)
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <_sbrk+0x60>)
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f24:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f2c:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <_sbrk+0x64>)
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <_sbrk+0x68>)
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <_sbrk+0x64>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d207      	bcs.n	8004f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f40:	f005 f96e 	bl	800a220 <__errno>
 8004f44:	4603      	mov	r3, r0
 8004f46:	220c      	movs	r2, #12
 8004f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	e009      	b.n	8004f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f50:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <_sbrk+0x64>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <_sbrk+0x64>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	4a05      	ldr	r2, [pc, #20]	@ (8004f74 <_sbrk+0x64>)
 8004f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20008000 	.word	0x20008000
 8004f70:	00000400 	.word	0x00000400
 8004f74:	20001b6c 	.word	0x20001b6c
 8004f78:	20001cc0 	.word	0x20001cc0

08004f7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f80:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <SystemInit+0x20>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <SystemInit+0x20>)
 8004f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fa0:	480d      	ldr	r0, [pc, #52]	@ (8004fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fa2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fa4:	f7ff ffea 	bl	8004f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fa8:	480c      	ldr	r0, [pc, #48]	@ (8004fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8004faa:	490d      	ldr	r1, [pc, #52]	@ (8004fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fac:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <LoopForever+0xe>)
  movs r3, #0
 8004fae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004fb0:	e002      	b.n	8004fb8 <LoopCopyDataInit>

08004fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fb6:	3304      	adds	r3, #4

08004fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fbc:	d3f9      	bcc.n	8004fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004fec <LoopForever+0x16>)
  movs r3, #0
 8004fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fc4:	e001      	b.n	8004fca <LoopFillZerobss>

08004fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc8:	3204      	adds	r2, #4

08004fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fcc:	d3fb      	bcc.n	8004fc6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004fce:	f005 f92d 	bl	800a22c <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 8004fd2:	f7fc fa3d 	bl	8001450 <main>

08004fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8004fd6:	e7fe      	b.n	8004fd6 <LoopForever>
  ldr   r0, =_estack
 8004fd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fe0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004fe4:	0800a868 	.word	0x0800a868
  ldr r2, =_sbss
 8004fe8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004fec:	20001cbc 	.word	0x20001cbc

08004ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ff0:	e7fe      	b.n	8004ff0 <ADC1_2_IRQHandler>

08004ff2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ffc:	2003      	movs	r0, #3
 8004ffe:	f000 f939 	bl	8005274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005002:	200f      	movs	r0, #15
 8005004:	f000 f80e 	bl	8005024 <HAL_InitTick>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	71fb      	strb	r3, [r7, #7]
 8005012:	e001      	b.n	8005018 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005014:	f7ff fc0a 	bl	800482c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005018:	79fb      	ldrb	r3, [r7, #7]

}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005030:	4b16      	ldr	r3, [pc, #88]	@ (800508c <HAL_InitTick+0x68>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <HAL_InitTick+0x6c>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b13      	ldr	r3, [pc, #76]	@ (800508c <HAL_InitTick+0x68>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005044:	fbb1 f3f3 	udiv	r3, r1, r3
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f944 	bl	80052da <HAL_SYSTICK_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10f      	bne.n	8005078 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	d809      	bhi.n	8005072 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800505e:	2200      	movs	r2, #0
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	f000 f910 	bl	800528a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800506a:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <HAL_InitTick+0x70>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e007      	b.n	8005082 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e004      	b.n	8005082 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
 800507c:	e001      	b.n	8005082 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000018 	.word	0x20000018
 8005090:	20000010 	.word	0x20000010
 8005094:	20000014 	.word	0x20000014

08005098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800509c:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <HAL_IncTick+0x1c>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <HAL_IncTick+0x20>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4413      	add	r3, r2
 80050a6:	4a03      	ldr	r2, [pc, #12]	@ (80050b4 <HAL_IncTick+0x1c>)
 80050a8:	6013      	str	r3, [r2, #0]
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20001b70 	.word	0x20001b70
 80050b8:	20000018 	.word	0x20000018

080050bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return uwTick;
 80050c0:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <HAL_GetTick+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20001b70 	.word	0x20001b70

080050d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <__NVIC_SetPriorityGrouping+0x44>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050f0:	4013      	ands	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005106:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <__NVIC_SetPriorityGrouping+0x44>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	60d3      	str	r3, [r2, #12]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005120:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <__NVIC_GetPriorityGrouping+0x18>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	f003 0307 	and.w	r3, r3, #7
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db0b      	blt.n	8005162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	4907      	ldr	r1, [pc, #28]	@ (8005170 <__NVIC_EnableIRQ+0x38>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2001      	movs	r0, #1
 800515a:	fa00 f202 	lsl.w	r2, r0, r2
 800515e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000e100 	.word	0xe000e100

08005174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	6039      	str	r1, [r7, #0]
 800517e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005184:	2b00      	cmp	r3, #0
 8005186:	db0a      	blt.n	800519e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	490c      	ldr	r1, [pc, #48]	@ (80051c0 <__NVIC_SetPriority+0x4c>)
 800518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	440b      	add	r3, r1
 8005198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800519c:	e00a      	b.n	80051b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	4908      	ldr	r1, [pc, #32]	@ (80051c4 <__NVIC_SetPriority+0x50>)
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	3b04      	subs	r3, #4
 80051ac:	0112      	lsls	r2, r2, #4
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	440b      	add	r3, r1
 80051b2:	761a      	strb	r2, [r3, #24]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000e100 	.word	0xe000e100
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b089      	sub	sp, #36	@ 0x24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f1c3 0307 	rsb	r3, r3, #7
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	bf28      	it	cs
 80051e6:	2304      	movcs	r3, #4
 80051e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3304      	adds	r3, #4
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d902      	bls.n	80051f8 <NVIC_EncodePriority+0x30>
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3b03      	subs	r3, #3
 80051f6:	e000      	b.n	80051fa <NVIC_EncodePriority+0x32>
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	401a      	ands	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005210:	f04f 31ff 	mov.w	r1, #4294967295
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	43d9      	mvns	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	4313      	orrs	r3, r2
         );
}
 8005222:	4618      	mov	r0, r3
 8005224:	3724      	adds	r7, #36	@ 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3b01      	subs	r3, #1
 800523c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005240:	d301      	bcc.n	8005246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005242:	2301      	movs	r3, #1
 8005244:	e00f      	b.n	8005266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005246:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <SysTick_Config+0x40>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3b01      	subs	r3, #1
 800524c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800524e:	210f      	movs	r1, #15
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	f7ff ff8e 	bl	8005174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <SysTick_Config+0x40>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800525e:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <SysTick_Config+0x40>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010

08005274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ff29 	bl	80050d4 <__NVIC_SetPriorityGrouping>
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	4603      	mov	r3, r0
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005298:	f7ff ff40 	bl	800511c <__NVIC_GetPriorityGrouping>
 800529c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7ff ff90 	bl	80051c8 <NVIC_EncodePriority>
 80052a8:	4602      	mov	r2, r0
 80052aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff ff5f 	bl	8005174 <__NVIC_SetPriority>
}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff33 	bl	8005138 <__NVIC_EnableIRQ>
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ffa4 	bl	8005230 <SysTick_Config>
 80052e8:	4603      	mov	r3, r0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e08d      	b.n	8005422 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	4b47      	ldr	r3, [pc, #284]	@ (800542c <HAL_DMA_Init+0x138>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d80f      	bhi.n	8005332 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	4b45      	ldr	r3, [pc, #276]	@ (8005430 <HAL_DMA_Init+0x13c>)
 800531a:	4413      	add	r3, r2
 800531c:	4a45      	ldr	r2, [pc, #276]	@ (8005434 <HAL_DMA_Init+0x140>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a42      	ldr	r2, [pc, #264]	@ (8005438 <HAL_DMA_Init+0x144>)
 800532e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005330:	e00e      	b.n	8005350 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	4b40      	ldr	r3, [pc, #256]	@ (800543c <HAL_DMA_Init+0x148>)
 800533a:	4413      	add	r3, r2
 800533c:	4a3d      	ldr	r2, [pc, #244]	@ (8005434 <HAL_DMA_Init+0x140>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a3c      	ldr	r2, [pc, #240]	@ (8005440 <HAL_DMA_Init+0x14c>)
 800534e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa76 	bl	8005894 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b0:	d102      	bne.n	80053b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d010      	beq.n	80053f8 <HAL_DMA_Init+0x104>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d80c      	bhi.n	80053f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa96 	bl	8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	e008      	b.n	800540a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40020407 	.word	0x40020407
 8005430:	bffdfff8 	.word	0xbffdfff8
 8005434:	cccccccd 	.word	0xcccccccd
 8005438:	40020000 	.word	0x40020000
 800543c:	bffdfbf8 	.word	0xbffdfbf8
 8005440:	40020400 	.word	0x40020400

08005444 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_DMA_Start_IT+0x20>
 8005460:	2302      	movs	r3, #2
 8005462:	e066      	b.n	8005532 <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d155      	bne.n	8005524 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f9bb 	bl	8005818 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 020e 	orr.w	r2, r2, #14
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e00f      	b.n	80054dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 020a 	orr.w	r2, r2, #10
 80054da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005510:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e005      	b.n	8005530 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d005      	beq.n	800555e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e037      	b.n	80055ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 020e 	bic.w	r2, r2, #14
 800556c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800557c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f003 021f 	and.w	r2, r3, #31
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	2101      	movs	r1, #1
 800559c:	fa01 f202 	lsl.w	r2, r1, r2
 80055a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d00d      	beq.n	8005620 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e047      	b.n	80056b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 020e 	bic.w	r2, r2, #14
 800562e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0201 	bic.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800564a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800564e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f202 	lsl.w	r2, r1, r2
 8005662:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800566c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00c      	beq.n	8005690 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005684:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800568e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
    }
  }
  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2204      	movs	r2, #4
 80056dc:	409a      	lsls	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d026      	beq.n	8005734 <HAL_DMA_IRQHandler+0x7a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d021      	beq.n	8005734 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d107      	bne.n	800570e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0204 	bic.w	r2, r2, #4
 800570c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	f003 021f 	and.w	r2, r3, #31
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	2104      	movs	r1, #4
 800571c:	fa01 f202 	lsl.w	r2, r1, r2
 8005720:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	2b00      	cmp	r3, #0
 8005728:	d071      	beq.n	800580e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005732:	e06c      	b.n	800580e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2202      	movs	r2, #2
 800573e:	409a      	lsls	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d02e      	beq.n	80057a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d029      	beq.n	80057a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 020a 	bic.w	r2, r2, #10
 800576e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	f003 021f 	and.w	r2, r3, #31
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	2102      	movs	r1, #2
 8005786:	fa01 f202 	lsl.w	r2, r1, r2
 800578a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d038      	beq.n	800580e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057a4:	e033      	b.n	800580e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2208      	movs	r2, #8
 80057b0:	409a      	lsls	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02a      	beq.n	8005810 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d025      	beq.n	8005810 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 020e 	bic.w	r2, r2, #14
 80057d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d8:	f003 021f 	and.w	r2, r3, #31
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	2101      	movs	r1, #1
 80057e2:	fa01 f202 	lsl.w	r2, r1, r2
 80057e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800580e:	bf00      	nop
 8005810:	bf00      	nop
}
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800582e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f003 021f 	and.w	r2, r3, #31
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f202 	lsl.w	r2, r1, r2
 8005854:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b10      	cmp	r3, #16
 8005864:	d108      	bne.n	8005878 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005876:	e007      	b.n	8005888 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	60da      	str	r2, [r3, #12]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d802      	bhi.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80058a8:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80058ae:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	3b08      	subs	r3, #8
 80058be:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	009a      	lsls	r2, r3, #2
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a0b      	ldr	r2, [pc, #44]	@ (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80058de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40020407 	.word	0x40020407
 8005900:	40020800 	.word	0x40020800
 8005904:	40020820 	.word	0x40020820
 8005908:	cccccccd 	.word	0xcccccccd
 800590c:	40020880 	.word	0x40020880

08005910 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a08      	ldr	r2, [pc, #32]	@ (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005932:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3b01      	subs	r3, #1
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2201      	movs	r2, #1
 800593e:	409a      	lsls	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	1000823f 	.word	0x1000823f
 8005954:	40020940 	.word	0x40020940

08005958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005962:	2300      	movs	r3, #0
 8005964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005966:	e15a      	b.n	8005c1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	4013      	ands	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 814c 	beq.w	8005c18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d005      	beq.n	8005998 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005994:	2b02      	cmp	r3, #2
 8005996:	d130      	bne.n	80059fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	2203      	movs	r2, #3
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4013      	ands	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ce:	2201      	movs	r2, #1
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0201 	and.w	r2, r3, #1
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d017      	beq.n	8005a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	2203      	movs	r2, #3
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d123      	bne.n	8005a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	08da      	lsrs	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3208      	adds	r2, #8
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80a6 	beq.w	8005c18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005acc:	4b5b      	ldr	r3, [pc, #364]	@ (8005c3c <HAL_GPIO_Init+0x2e4>)
 8005ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8005c3c <HAL_GPIO_Init+0x2e4>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ad8:	4b58      	ldr	r3, [pc, #352]	@ (8005c3c <HAL_GPIO_Init+0x2e4>)
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae4:	4a56      	ldr	r2, [pc, #344]	@ (8005c40 <HAL_GPIO_Init+0x2e8>)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	3302      	adds	r3, #2
 8005aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	220f      	movs	r2, #15
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4013      	ands	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b0e:	d01f      	beq.n	8005b50 <HAL_GPIO_Init+0x1f8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a4c      	ldr	r2, [pc, #304]	@ (8005c44 <HAL_GPIO_Init+0x2ec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d019      	beq.n	8005b4c <HAL_GPIO_Init+0x1f4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8005c48 <HAL_GPIO_Init+0x2f0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_GPIO_Init+0x1f0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a4a      	ldr	r2, [pc, #296]	@ (8005c4c <HAL_GPIO_Init+0x2f4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00d      	beq.n	8005b44 <HAL_GPIO_Init+0x1ec>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a49      	ldr	r2, [pc, #292]	@ (8005c50 <HAL_GPIO_Init+0x2f8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <HAL_GPIO_Init+0x1e8>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a48      	ldr	r2, [pc, #288]	@ (8005c54 <HAL_GPIO_Init+0x2fc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_GPIO_Init+0x1e4>
 8005b38:	2305      	movs	r3, #5
 8005b3a:	e00a      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	e008      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b40:	2304      	movs	r3, #4
 8005b42:	e006      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b44:	2303      	movs	r3, #3
 8005b46:	e004      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e002      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_GPIO_Init+0x1fa>
 8005b50:	2300      	movs	r3, #0
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	f002 0203 	and.w	r2, r2, #3
 8005b58:	0092      	lsls	r2, r2, #2
 8005b5a:	4093      	lsls	r3, r2
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b62:	4937      	ldr	r1, [pc, #220]	@ (8005c40 <HAL_GPIO_Init+0x2e8>)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	089b      	lsrs	r3, r3, #2
 8005b68:	3302      	adds	r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b70:	4b39      	ldr	r3, [pc, #228]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b94:	4a30      	ldr	r2, [pc, #192]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bbe:	4a26      	ldr	r2, [pc, #152]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005bc4:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bee:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c12:	4a11      	ldr	r2, [pc, #68]	@ (8005c58 <HAL_GPIO_Init+0x300>)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f47f ae9d 	bne.w	8005968 <HAL_GPIO_Init+0x10>
  }
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	40010000 	.word	0x40010000
 8005c44:	48000400 	.word	0x48000400
 8005c48:	48000800 	.word	0x48000800
 8005c4c:	48000c00 	.word	0x48000c00
 8005c50:	48001000 	.word	0x48001000
 8005c54:	48001400 	.word	0x48001400
 8005c58:	40010400 	.word	0x40010400

08005c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	e001      	b.n	8005c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	807b      	strh	r3, [r7, #2]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c9c:	787b      	ldrb	r3, [r7, #1]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ca8:	e002      	b.n	8005cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cc6:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d006      	beq.n	8005ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cd2:	4a05      	ldr	r2, [pc, #20]	@ (8005ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fc f9ba 	bl	8002054 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40010400 	.word	0x40010400

08005cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e08d      	b.n	8005e1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe fdb6 	bl	8004884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	@ 0x24
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0201 	bic.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d107      	bne.n	8005d66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	e006      	b.n	8005d74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d108      	bne.n	8005d8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e007      	b.n	8005d9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d138      	bne.n	8005eaa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e032      	b.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2224      	movs	r2, #36	@ 0x24
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d139      	bne.n	8005f42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e033      	b.n	8005f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	@ 0x24
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e000      	b.n	8005f44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
  }
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d141      	bne.n	8005fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d131      	bne.n	8005fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f6c:	4b47      	ldr	r3, [pc, #284]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f72:	4a46      	ldr	r2, [pc, #280]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f84:	4a41      	ldr	r2, [pc, #260]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f8c:	4b40      	ldr	r3, [pc, #256]	@ (8006090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2232      	movs	r2, #50	@ 0x32
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	0c9b      	lsrs	r3, r3, #18
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa2:	e002      	b.n	8005faa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005faa:	4b38      	ldr	r3, [pc, #224]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb6:	d102      	bne.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f2      	bne.n	8005fa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fbe:	4b33      	ldr	r3, [pc, #204]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d158      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e057      	b.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fe0:	e04d      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe8:	d141      	bne.n	800606e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fea:	4b28      	ldr	r3, [pc, #160]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff6:	d131      	bne.n	800605c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ff8:	4b24      	ldr	r3, [pc, #144]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ffe:	4a23      	ldr	r2, [pc, #140]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006008:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2232      	movs	r2, #50	@ 0x32
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	0c9b      	lsrs	r3, r3, #18
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800602e:	e002      	b.n	8006036 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006036:	4b15      	ldr	r3, [pc, #84]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006042:	d102      	bne.n	800604a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f2      	bne.n	8006030 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800604a:	4b10      	ldr	r3, [pc, #64]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006056:	d112      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e011      	b.n	8006080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800605c:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006062:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800606c:	e007      	b.n	800607e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800606e:	4b07      	ldr	r3, [pc, #28]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006076:	4a05      	ldr	r2, [pc, #20]	@ (800608c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006078:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800607c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40007000 	.word	0x40007000
 8006090:	20000010 	.word	0x20000010
 8006094:	431bde83 	.word	0x431bde83

08006098 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060a6:	6093      	str	r3, [r2, #8]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40007000 	.word	0x40007000

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e2fe      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d075      	beq.n	80061c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d6:	4b97      	ldr	r3, [pc, #604]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060e0:	4b94      	ldr	r3, [pc, #592]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0303 	and.w	r3, r3, #3
 80060e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d102      	bne.n	80060f6 <HAL_RCC_OscConfig+0x3e>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d002      	beq.n	80060fc <HAL_RCC_OscConfig+0x44>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d10b      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05b      	beq.n	80061c0 <HAL_RCC_OscConfig+0x108>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d157      	bne.n	80061c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e2d9      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x74>
 800611e:	4b85      	ldr	r3, [pc, #532]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a84      	ldr	r2, [pc, #528]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e01d      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b7f      	ldr	r3, [pc, #508]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7e      	ldr	r2, [pc, #504]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b7c      	ldr	r3, [pc, #496]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a7b      	ldr	r2, [pc, #492]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 8006150:	4b78      	ldr	r3, [pc, #480]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a77      	ldr	r2, [pc, #476]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b75      	ldr	r3, [pc, #468]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a74      	ldr	r2, [pc, #464]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fe ffa4 	bl	80050bc <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006178:	f7fe ffa0 	bl	80050bc <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	@ 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e29e      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	4b6a      	ldr	r3, [pc, #424]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0xc0>
 8006196:	e014      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fe ff90 	bl	80050bc <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fe ff8c 	bl	80050bc <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	@ 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e28a      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b2:	4b60      	ldr	r3, [pc, #384]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0xe8>
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d075      	beq.n	80062ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061ce:	4b59      	ldr	r3, [pc, #356]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061d8:	4b56      	ldr	r3, [pc, #344]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d102      	bne.n	80061ee <HAL_RCC_OscConfig+0x136>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d002      	beq.n	80061f4 <HAL_RCC_OscConfig+0x13c>
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d11f      	bne.n	8006234 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_OscConfig+0x154>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e25d      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620c:	4b49      	ldr	r3, [pc, #292]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	4946      	ldr	r1, [pc, #280]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006220:	4b45      	ldr	r3, [pc, #276]	@ (8006338 <HAL_RCC_OscConfig+0x280>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fefd 	bl	8005024 <HAL_InitTick>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d043      	beq.n	80062b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e249      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d023      	beq.n	8006284 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800623c:	4b3d      	ldr	r3, [pc, #244]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3c      	ldr	r2, [pc, #240]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fe ff38 	bl	80050bc <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006250:	f7fe ff34 	bl	80050bc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e232      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006262:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	492d      	ldr	r1, [pc, #180]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
 8006282:	e01a      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006284:	4b2b      	ldr	r3, [pc, #172]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2a      	ldr	r2, [pc, #168]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800628a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800628e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fe ff14 	bl	80050bc <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006298:	f7fe ff10 	bl	80050bc <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e20e      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062aa:	4b22      	ldr	r3, [pc, #136]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x1e0>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d041      	beq.n	800634a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01c      	beq.n	8006308 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062de:	f7fe feed 	bl	80050bc <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062e6:	f7fe fee9 	bl	80050bc <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e1e7      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <HAL_RCC_OscConfig+0x22e>
 8006306:	e020      	b.n	800634a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006308:	4b0a      	ldr	r3, [pc, #40]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 800630a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800630e:	4a09      	ldr	r2, [pc, #36]	@ (8006334 <HAL_RCC_OscConfig+0x27c>)
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fe fed0 	bl	80050bc <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800631e:	e00d      	b.n	800633c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006320:	f7fe fecc 	bl	80050bc <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d906      	bls.n	800633c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e1ca      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800633c:	4b8c      	ldr	r3, [pc, #560]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800633e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ea      	bne.n	8006320 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80a6 	beq.w	80064a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800635c:	4b84      	ldr	r3, [pc, #528]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_RCC_OscConfig+0x2b4>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <HAL_RCC_OscConfig+0x2b6>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	4a7e      	ldr	r2, [pc, #504]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637c:	6593      	str	r3, [r2, #88]	@ 0x58
 800637e:	4b7c      	ldr	r3, [pc, #496]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800638a:	2301      	movs	r3, #1
 800638c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	4b79      	ldr	r3, [pc, #484]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d118      	bne.n	80063cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800639a:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 80063a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a6:	f7fe fe89 	bl	80050bc <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fe fe85 	bl	80050bc <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e183      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006574 <HAL_RCC_OscConfig+0x4bc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d108      	bne.n	80063e6 <HAL_RCC_OscConfig+0x32e>
 80063d4:	4b66      	ldr	r3, [pc, #408]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	4a65      	ldr	r2, [pc, #404]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063e4:	e024      	b.n	8006430 <HAL_RCC_OscConfig+0x378>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	d110      	bne.n	8006410 <HAL_RCC_OscConfig+0x358>
 80063ee:	4b60      	ldr	r3, [pc, #384]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063f4:	4a5e      	ldr	r2, [pc, #376]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006404:	4a5a      	ldr	r2, [pc, #360]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800640e:	e00f      	b.n	8006430 <HAL_RCC_OscConfig+0x378>
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006416:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006420:	4b53      	ldr	r3, [pc, #332]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	4a52      	ldr	r2, [pc, #328]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fe fe40 	bl	80050bc <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800643e:	e00a      	b.n	8006456 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006440:	f7fe fe3c 	bl	80050bc <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e138      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006456:	4b46      	ldr	r3, [pc, #280]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0ed      	beq.n	8006440 <HAL_RCC_OscConfig+0x388>
 8006464:	e015      	b.n	8006492 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006466:	f7fe fe29 	bl	80050bc <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fe fe25 	bl	80050bc <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e121      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006484:	4b3a      	ldr	r3, [pc, #232]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1ed      	bne.n	800646e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006492:	7ffb      	ldrb	r3, [r7, #31]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006498:	4b35      	ldr	r3, [pc, #212]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	4a34      	ldr	r2, [pc, #208]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800649e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d03c      	beq.n	800652a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01c      	beq.n	80064f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064be:	4a2c      	ldr	r2, [pc, #176]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fe fdf8 	bl	80050bc <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064d0:	f7fe fdf4 	bl	80050bc <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e0f2      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064e2:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0ef      	beq.n	80064d0 <HAL_RCC_OscConfig+0x418>
 80064f0:	e01b      	b.n	800652a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fe fddb 	bl	80050bc <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800650a:	f7fe fdd7 	bl	80050bc <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0d5      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800651c:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800651e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ef      	bne.n	800650a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80c9 	beq.w	80066c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006534:	4b0e      	ldr	r3, [pc, #56]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 030c 	and.w	r3, r3, #12
 800653c:	2b0c      	cmp	r3, #12
 800653e:	f000 8083 	beq.w	8006648 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d15e      	bne.n	8006608 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a08      	ldr	r2, [pc, #32]	@ (8006570 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006556:	f7fe fdb1 	bl	80050bc <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800655c:	e00c      	b.n	8006578 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655e:	f7fe fdad 	bl	80050bc <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d905      	bls.n	8006578 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0ab      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
 8006570:	40021000 	.word	0x40021000
 8006574:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006578:	4b55      	ldr	r3, [pc, #340]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ec      	bne.n	800655e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006584:	4b52      	ldr	r3, [pc, #328]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	4b52      	ldr	r3, [pc, #328]	@ (80066d4 <HAL_RCC_OscConfig+0x61c>)
 800658a:	4013      	ands	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6a11      	ldr	r1, [r2, #32]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006594:	3a01      	subs	r2, #1
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800659e:	0212      	lsls	r2, r2, #8
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065a6:	0852      	lsrs	r2, r2, #1
 80065a8:	3a01      	subs	r2, #1
 80065aa:	0552      	lsls	r2, r2, #21
 80065ac:	4311      	orrs	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065b2:	0852      	lsrs	r2, r2, #1
 80065b4:	3a01      	subs	r2, #1
 80065b6:	0652      	lsls	r2, r2, #25
 80065b8:	4311      	orrs	r1, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065be:	06d2      	lsls	r2, r2, #27
 80065c0:	430a      	orrs	r2, r1
 80065c2:	4943      	ldr	r1, [pc, #268]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c8:	4b41      	ldr	r3, [pc, #260]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a40      	ldr	r2, [pc, #256]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065d4:	4b3e      	ldr	r3, [pc, #248]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	4a3d      	ldr	r2, [pc, #244]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fe fd6c 	bl	80050bc <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fe fd68 	bl	80050bc <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e066      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065fa:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x530>
 8006606:	e05e      	b.n	80066c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b31      	ldr	r3, [pc, #196]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe fd52 	bl	80050bc <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fe fd4e 	bl	80050bc <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e04c      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800662e:	4b28      	ldr	r3, [pc, #160]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800663a:	4b25      	ldr	r3, [pc, #148]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	4924      	ldr	r1, [pc, #144]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006640:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <HAL_RCC_OscConfig+0x620>)
 8006642:	4013      	ands	r3, r2
 8006644:	60cb      	str	r3, [r1, #12]
 8006646:	e03e      	b.n	80066c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e039      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <HAL_RCC_OscConfig+0x618>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f003 0203 	and.w	r2, r3, #3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	429a      	cmp	r2, r3
 8006666:	d12c      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006672:	3b01      	subs	r3, #1
 8006674:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d123      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d11b      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d113      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	3b01      	subs	r3, #1
 80066a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d109      	bne.n	80066c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	019f800c 	.word	0x019f800c
 80066d8:	feeefffc 	.word	0xfeeefffc

080066dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e11e      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066f4:	4b91      	ldr	r3, [pc, #580]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d910      	bls.n	8006724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006702:	4b8e      	ldr	r3, [pc, #568]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 020f 	bic.w	r2, r3, #15
 800670a:	498c      	ldr	r1, [pc, #560]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b8a      	ldr	r3, [pc, #552]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e106      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d073      	beq.n	8006818 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d129      	bne.n	800678c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006738:	4b81      	ldr	r3, [pc, #516]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0f4      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006748:	f000 f99e 	bl	8006a88 <RCC_GetSysClockFreqFromPLLSource>
 800674c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4a7c      	ldr	r2, [pc, #496]	@ (8006944 <HAL_RCC_ClockConfig+0x268>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d93f      	bls.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006756:	4b7a      	ldr	r3, [pc, #488]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800676a:	2b00      	cmp	r3, #0
 800676c:	d033      	beq.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006772:	2b00      	cmp	r3, #0
 8006774:	d12f      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006776:	4b72      	ldr	r3, [pc, #456]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800677e:	4a70      	ldr	r2, [pc, #448]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006784:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e024      	b.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006794:	4b6a      	ldr	r3, [pc, #424]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0c6      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a4:	4b66      	ldr	r3, [pc, #408]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0be      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067b4:	f000 f8ce 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4a61      	ldr	r2, [pc, #388]	@ (8006944 <HAL_RCC_ClockConfig+0x268>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d909      	bls.n	80067d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ca:	4a5d      	ldr	r2, [pc, #372]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4957      	ldr	r1, [pc, #348]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e8:	f7fe fc68 	bl	80050bc <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fe fc64 	bl	80050bc <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e095      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	4b4e      	ldr	r3, [pc, #312]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 020c 	and.w	r2, r3, #12
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d1eb      	bne.n	80067f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d023      	beq.n	800686c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006830:	4b43      	ldr	r3, [pc, #268]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a42      	ldr	r2, [pc, #264]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800683a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006848:	4b3d      	ldr	r3, [pc, #244]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006850:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006858:	4b39      	ldr	r3, [pc, #228]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4936      	ldr	r1, [pc, #216]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
 800686a:	e008      	b.n	800687e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b80      	cmp	r3, #128	@ 0x80
 8006870:	d105      	bne.n	800687e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006872:	4b33      	ldr	r3, [pc, #204]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4a32      	ldr	r2, [pc, #200]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006878:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800687c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800687e:	4b2f      	ldr	r3, [pc, #188]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d21d      	bcs.n	80068c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688c:	4b2b      	ldr	r3, [pc, #172]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f023 020f 	bic.w	r2, r3, #15
 8006894:	4929      	ldr	r1, [pc, #164]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800689c:	f7fe fc0e 	bl	80050bc <HAL_GetTick>
 80068a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	e00a      	b.n	80068ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a4:	f7fe fc0a 	bl	80050bc <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e03b      	b.n	8006932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ba:	4b20      	ldr	r3, [pc, #128]	@ (800693c <HAL_RCC_ClockConfig+0x260>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d1ed      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4917      	ldr	r1, [pc, #92]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f2:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	490f      	ldr	r1, [pc, #60]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 8006902:	4313      	orrs	r3, r2
 8006904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006906:	f000 f825 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <HAL_RCC_ClockConfig+0x264>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	490c      	ldr	r1, [pc, #48]	@ (8006948 <HAL_RCC_ClockConfig+0x26c>)
 8006918:	5ccb      	ldrb	r3, [r1, r3]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	fa22 f303 	lsr.w	r3, r2, r3
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <HAL_RCC_ClockConfig+0x270>)
 8006924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <HAL_RCC_ClockConfig+0x274>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fb7a 	bl	8005024 <HAL_InitTick>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40022000 	.word	0x40022000
 8006940:	40021000 	.word	0x40021000
 8006944:	04c4b400 	.word	0x04c4b400
 8006948:	0800a810 	.word	0x0800a810
 800694c:	20000010 	.word	0x20000010
 8006950:	20000014 	.word	0x20000014

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800695a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	2b04      	cmp	r3, #4
 8006964:	d102      	bne.n	800696c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006966:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e047      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800696c:	4b27      	ldr	r3, [pc, #156]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d102      	bne.n	800697e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006978:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	e03e      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800697e:	4b23      	ldr	r3, [pc, #140]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b0c      	cmp	r3, #12
 8006988:	d136      	bne.n	80069f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800698a:	4b20      	ldr	r3, [pc, #128]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006994:	4b1d      	ldr	r3, [pc, #116]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	3301      	adds	r3, #1
 80069a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069b2:	68d2      	ldr	r2, [r2, #12]
 80069b4:	0a12      	lsrs	r2, r2, #8
 80069b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069c2:	4a13      	ldr	r2, [pc, #76]	@ (8006a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	4a10      	ldr	r2, [pc, #64]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069cc:	68d2      	ldr	r2, [r2, #12]
 80069ce:	0a12      	lsrs	r2, r2, #8
 80069d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
      break;
 80069da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069dc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3301      	adds	r3, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	e001      	b.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069fc:	693b      	ldr	r3, [r7, #16]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	00f42400 	.word	0x00f42400
 8006a14:	007a1200 	.word	0x007a1200

08006a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a1c:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20000010 	.word	0x20000010

08006a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a34:	f7ff fff0 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	4904      	ldr	r1, [pc, #16]	@ (8006a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a46:	5ccb      	ldrb	r3, [r1, r3]
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40021000 	.word	0x40021000
 8006a58:	0800a820 	.word	0x0800a820

08006a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a60:	f7ff ffda 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	0adb      	lsrs	r3, r3, #11
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4904      	ldr	r1, [pc, #16]	@ (8006a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40021000 	.word	0x40021000
 8006a84:	0800a820 	.word	0x0800a820

08006a88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a98:	4b1b      	ldr	r3, [pc, #108]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d10c      	bne.n	8006ac6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aac:	4a17      	ldr	r2, [pc, #92]	@ (8006b0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ab6:	68d2      	ldr	r2, [r2, #12]
 8006ab8:	0a12      	lsrs	r2, r2, #8
 8006aba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	617b      	str	r3, [r7, #20]
    break;
 8006ac4:	e00c      	b.n	8006ae0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ac6:	4a12      	ldr	r2, [pc, #72]	@ (8006b10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ace:	4a0e      	ldr	r2, [pc, #56]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	0a12      	lsrs	r2, r2, #8
 8006ad4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]
    break;
 8006ade:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ae0:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	0e5b      	lsrs	r3, r3, #25
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	3301      	adds	r3, #1
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006afa:	687b      	ldr	r3, [r7, #4]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	007a1200 	.word	0x007a1200
 8006b10:	00f42400 	.word	0x00f42400

08006b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b20:	2300      	movs	r3, #0
 8006b22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8098 	beq.w	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b32:	2300      	movs	r3, #0
 8006b34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b36:	4b43      	ldr	r3, [pc, #268]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10d      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	4b40      	ldr	r3, [pc, #256]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b46:	4a3f      	ldr	r2, [pc, #252]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a39      	ldr	r2, [pc, #228]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b6a:	f7fe faa7 	bl	80050bc <HAL_GetTick>
 8006b6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b70:	e009      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b72:	f7fe faa3 	bl	80050bc <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d902      	bls.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	74fb      	strb	r3, [r7, #19]
        break;
 8006b84:	e005      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b86:	4b30      	ldr	r3, [pc, #192]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0ef      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b92:	7cfb      	ldrb	r3, [r7, #19]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d159      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b98:	4b2a      	ldr	r3, [pc, #168]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ba2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01e      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d019      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bb4:	4b23      	ldr	r3, [pc, #140]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bc0:	4b20      	ldr	r3, [pc, #128]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006be0:	4a18      	ldr	r2, [pc, #96]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d016      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf2:	f7fe fa63 	bl	80050bc <HAL_GetTick>
 8006bf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf8:	e00b      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bfa:	f7fe fa5f 	bl	80050bc <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d902      	bls.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	74fb      	strb	r3, [r7, #19]
            break;
 8006c10:	e006      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c12:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0ec      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c20:	7cfb      	ldrb	r3, [r7, #19]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c26:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	4903      	ldr	r1, [pc, #12]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c3e:	7cfb      	ldrb	r3, [r7, #19]
 8006c40:	74bb      	strb	r3, [r7, #18]
 8006c42:	e005      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c44:	40021000 	.word	0x40021000
 8006c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	7cfb      	ldrb	r3, [r7, #19]
 8006c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c50:	7c7b      	ldrb	r3, [r7, #17]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d105      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c56:	4ba6      	ldr	r3, [pc, #664]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5a:	4aa5      	ldr	r2, [pc, #660]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c6e:	4ba0      	ldr	r3, [pc, #640]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c74:	f023 0203 	bic.w	r2, r3, #3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	499c      	ldr	r1, [pc, #624]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c90:	4b97      	ldr	r3, [pc, #604]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c96:	f023 020c 	bic.w	r2, r3, #12
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4994      	ldr	r1, [pc, #592]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cb2:	4b8f      	ldr	r3, [pc, #572]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	498b      	ldr	r1, [pc, #556]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cd4:	4b86      	ldr	r3, [pc, #536]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	4983      	ldr	r1, [pc, #524]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cf6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	497a      	ldr	r1, [pc, #488]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d18:	4b75      	ldr	r3, [pc, #468]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	4972      	ldr	r1, [pc, #456]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4969      	ldr	r1, [pc, #420]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5c:	4b64      	ldr	r3, [pc, #400]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	4961      	ldr	r1, [pc, #388]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	4958      	ldr	r1, [pc, #352]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d015      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006da0:	4b53      	ldr	r3, [pc, #332]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	4950      	ldr	r1, [pc, #320]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dd8:	4b45      	ldr	r3, [pc, #276]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	4942      	ldr	r1, [pc, #264]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006df6:	d105      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006df8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d015      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e10:	4b37      	ldr	r3, [pc, #220]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	4934      	ldr	r1, [pc, #208]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e30:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e48:	4b29      	ldr	r3, [pc, #164]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	4926      	ldr	r1, [pc, #152]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e66:	d105      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e68:	4b21      	ldr	r3, [pc, #132]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d015      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e80:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	4918      	ldr	r1, [pc, #96]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e9e:	d105      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ea0:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a12      	ldr	r2, [pc, #72]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d015      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec6:	490a      	ldr	r1, [pc, #40]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed6:	d105      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a04      	ldr	r2, [pc, #16]	@ (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ee4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000

08006ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e049      	b.n	8006f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fd fd72 	bl	8004a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f001 f82c 	bl	8007f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d001      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e04a      	b.n	8007052 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <HAL_TIM_Base_Start_IT+0xbc>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d018      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x6c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe6:	d013      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x6c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1d      	ldr	r2, [pc, #116]	@ (8007064 <HAL_TIM_Base_Start_IT+0xc0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x6c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8007068 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d009      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x6c>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1a      	ldr	r2, [pc, #104]	@ (800706c <HAL_TIM_Base_Start_IT+0xc8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x6c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a19      	ldr	r2, [pc, #100]	@ (8007070 <HAL_TIM_Base_Start_IT+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d115      	bne.n	800703c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <HAL_TIM_Base_Start_IT+0xd0>)
 8007018:	4013      	ands	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d015      	beq.n	800704e <HAL_TIM_Base_Start_IT+0xaa>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007028:	d011      	beq.n	800704e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0201 	orr.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	e008      	b.n	800704e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	e000      	b.n	8007050 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40013400 	.word	0x40013400
 8007070:	40014000 	.word	0x40014000
 8007074:	00010007 	.word	0x00010007

08007078 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	f241 1311 	movw	r3, #4369	@ 0x1111
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_TIM_Base_Stop_IT+0x48>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_Base_Stop_IT+0x48>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e049      	b.n	800717c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fd fc39 	bl	8004974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 ff3b 	bl	8007f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x24>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e03c      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x3e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e02f      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x58>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e022      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b0c      	cmp	r3, #12
 80071e0:	d109      	bne.n	80071f6 <HAL_TIM_PWM_Start+0x72>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	e015      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d109      	bne.n	8007210 <HAL_TIM_PWM_Start+0x8c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e008      	b.n	8007222 <HAL_TIM_PWM_Start+0x9e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e097      	b.n	800735a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <HAL_TIM_PWM_Start+0xb6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007238:	e023      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d104      	bne.n	800724a <HAL_TIM_PWM_Start+0xc6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007248:	e01b      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d104      	bne.n	800725a <HAL_TIM_PWM_Start+0xd6>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007258:	e013      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	d104      	bne.n	800726a <HAL_TIM_PWM_Start+0xe6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007268:	e00b      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b10      	cmp	r3, #16
 800726e:	d104      	bne.n	800727a <HAL_TIM_PWM_Start+0xf6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007278:	e003      	b.n	8007282 <HAL_TIM_PWM_Start+0xfe>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2201      	movs	r2, #1
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f001 faae 	bl	80087ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a33      	ldr	r2, [pc, #204]	@ (8007364 <HAL_TIM_PWM_Start+0x1e0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x13e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a32      	ldr	r2, [pc, #200]	@ (8007368 <HAL_TIM_PWM_Start+0x1e4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x13e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a30      	ldr	r2, [pc, #192]	@ (800736c <HAL_TIM_PWM_Start+0x1e8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x13e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007370 <HAL_TIM_PWM_Start+0x1ec>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x13e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007374 <HAL_TIM_PWM_Start+0x1f0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x142>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <HAL_TIM_PWM_Start+0x144>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <HAL_TIM_PWM_Start+0x1e0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d018      	beq.n	8007318 <HAL_TIM_PWM_Start+0x194>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ee:	d013      	beq.n	8007318 <HAL_TIM_PWM_Start+0x194>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a20      	ldr	r2, [pc, #128]	@ (8007378 <HAL_TIM_PWM_Start+0x1f4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_TIM_PWM_Start+0x194>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <HAL_TIM_PWM_Start+0x1f8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d009      	beq.n	8007318 <HAL_TIM_PWM_Start+0x194>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <HAL_TIM_PWM_Start+0x1e4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_TIM_PWM_Start+0x194>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a16      	ldr	r2, [pc, #88]	@ (800736c <HAL_TIM_PWM_Start+0x1e8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d115      	bne.n	8007344 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	4b18      	ldr	r3, [pc, #96]	@ (8007380 <HAL_TIM_PWM_Start+0x1fc>)
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b06      	cmp	r3, #6
 8007328:	d015      	beq.n	8007356 <HAL_TIM_PWM_Start+0x1d2>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007330:	d011      	beq.n	8007356 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0201 	orr.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	e008      	b.n	8007356 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e000      	b.n	8007358 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40013400 	.word	0x40013400
 800736c:	40014000 	.word	0x40014000
 8007370:	40014400 	.word	0x40014400
 8007374:	40014800 	.word	0x40014800
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	00010007 	.word	0x00010007

08007384 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_TIM_PWM_Start_IT+0x28>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e03c      	b.n	8007426 <HAL_TIM_PWM_Start_IT+0xa2>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d109      	bne.n	80073c6 <HAL_TIM_PWM_Start_IT+0x42>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e02f      	b.n	8007426 <HAL_TIM_PWM_Start_IT+0xa2>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d109      	bne.n	80073e0 <HAL_TIM_PWM_Start_IT+0x5c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e022      	b.n	8007426 <HAL_TIM_PWM_Start_IT+0xa2>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d109      	bne.n	80073fa <HAL_TIM_PWM_Start_IT+0x76>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	bf14      	ite	ne
 80073f2:	2301      	movne	r3, #1
 80073f4:	2300      	moveq	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	e015      	b.n	8007426 <HAL_TIM_PWM_Start_IT+0xa2>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d109      	bne.n	8007414 <HAL_TIM_PWM_Start_IT+0x90>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf14      	ite	ne
 800740c:	2301      	movne	r3, #1
 800740e:	2300      	moveq	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e008      	b.n	8007426 <HAL_TIM_PWM_Start_IT+0xa2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e0e2      	b.n	80075f4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Start_IT+0xba>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800743c:	e023      	b.n	8007486 <HAL_TIM_PWM_Start_IT+0x102>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d104      	bne.n	800744e <HAL_TIM_PWM_Start_IT+0xca>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800744c:	e01b      	b.n	8007486 <HAL_TIM_PWM_Start_IT+0x102>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b08      	cmp	r3, #8
 8007452:	d104      	bne.n	800745e <HAL_TIM_PWM_Start_IT+0xda>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800745c:	e013      	b.n	8007486 <HAL_TIM_PWM_Start_IT+0x102>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b0c      	cmp	r3, #12
 8007462:	d104      	bne.n	800746e <HAL_TIM_PWM_Start_IT+0xea>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800746c:	e00b      	b.n	8007486 <HAL_TIM_PWM_Start_IT+0x102>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b10      	cmp	r3, #16
 8007472:	d104      	bne.n	800747e <HAL_TIM_PWM_Start_IT+0xfa>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800747c:	e003      	b.n	8007486 <HAL_TIM_PWM_Start_IT+0x102>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b0c      	cmp	r3, #12
 800748a:	d841      	bhi.n	8007510 <HAL_TIM_PWM_Start_IT+0x18c>
 800748c:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <HAL_TIM_PWM_Start_IT+0x110>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	080074c9 	.word	0x080074c9
 8007498:	08007511 	.word	0x08007511
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007511 	.word	0x08007511
 80074a4:	080074db 	.word	0x080074db
 80074a8:	08007511 	.word	0x08007511
 80074ac:	08007511 	.word	0x08007511
 80074b0:	08007511 	.word	0x08007511
 80074b4:	080074ed 	.word	0x080074ed
 80074b8:	08007511 	.word	0x08007511
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007511 	.word	0x08007511
 80074c4:	080074ff 	.word	0x080074ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0202 	orr.w	r2, r2, #2
 80074d6:	60da      	str	r2, [r3, #12]
      break;
 80074d8:	e01d      	b.n	8007516 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0204 	orr.w	r2, r2, #4
 80074e8:	60da      	str	r2, [r3, #12]
      break;
 80074ea:	e014      	b.n	8007516 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0208 	orr.w	r2, r2, #8
 80074fa:	60da      	str	r2, [r3, #12]
      break;
 80074fc:	e00b      	b.n	8007516 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0210 	orr.w	r2, r2, #16
 800750c:	60da      	str	r2, [r3, #12]
      break;
 800750e:	e002      	b.n	8007516 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
      break;
 8007514:	bf00      	nop
  }

  if (status == HAL_OK)
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d16a      	bne.n	80075f2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2201      	movs	r2, #1
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f001 f961 	bl	80087ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a33      	ldr	r2, [pc, #204]	@ (80075fc <HAL_TIM_PWM_Start_IT+0x278>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d013      	beq.n	800755c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a31      	ldr	r2, [pc, #196]	@ (8007600 <HAL_TIM_PWM_Start_IT+0x27c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00e      	beq.n	800755c <HAL_TIM_PWM_Start_IT+0x1d8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a30      	ldr	r2, [pc, #192]	@ (8007604 <HAL_TIM_PWM_Start_IT+0x280>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d009      	beq.n	800755c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2e      	ldr	r2, [pc, #184]	@ (8007608 <HAL_TIM_PWM_Start_IT+0x284>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d004      	beq.n	800755c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a2d      	ldr	r2, [pc, #180]	@ (800760c <HAL_TIM_PWM_Start_IT+0x288>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d101      	bne.n	8007560 <HAL_TIM_PWM_Start_IT+0x1dc>
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <HAL_TIM_PWM_Start_IT+0x1de>
 8007560:	2300      	movs	r3, #0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a20      	ldr	r2, [pc, #128]	@ (80075fc <HAL_TIM_PWM_Start_IT+0x278>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d018      	beq.n	80075b2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007588:	d013      	beq.n	80075b2 <HAL_TIM_PWM_Start_IT+0x22e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a20      	ldr	r2, [pc, #128]	@ (8007610 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d00e      	beq.n	80075b2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1e      	ldr	r2, [pc, #120]	@ (8007614 <HAL_TIM_PWM_Start_IT+0x290>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d009      	beq.n	80075b2 <HAL_TIM_PWM_Start_IT+0x22e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <HAL_TIM_PWM_Start_IT+0x27c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d004      	beq.n	80075b2 <HAL_TIM_PWM_Start_IT+0x22e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a15      	ldr	r2, [pc, #84]	@ (8007604 <HAL_TIM_PWM_Start_IT+0x280>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d115      	bne.n	80075de <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <HAL_TIM_PWM_Start_IT+0x294>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b06      	cmp	r3, #6
 80075c2:	d015      	beq.n	80075f0 <HAL_TIM_PWM_Start_IT+0x26c>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ca:	d011      	beq.n	80075f0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075dc:	e008      	b.n	80075f0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0201 	orr.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e000      	b.n	80075f2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	00010007 	.word	0x00010007

0800761c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e097      	b.n	8007760 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fd fa39 	bl	8004abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f000 fc8d 	bl	8007f90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	4313      	orrs	r3, r2
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80076bc:	f023 030c 	bic.w	r3, r3, #12
 80076c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	4313      	orrs	r3, r2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	011a      	lsls	r2, r3, #4
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	031b      	lsls	r3, r3, #12
 80076ec:	4313      	orrs	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	4313      	orrs	r3, r2
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007778:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007780:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007788:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007790:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d110      	bne.n	80077ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d001      	beq.n	80077a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e069      	b.n	800787c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b8:	e031      	b.n	800781e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d110      	bne.n	80077e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077c6:	7b3b      	ldrb	r3, [r7, #12]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d001      	beq.n	80077d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e055      	b.n	800787c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e0:	e01d      	b.n	800781e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d108      	bne.n	80077fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d105      	bne.n	80077fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d102      	bne.n	80077fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077f4:	7b3b      	ldrb	r3, [r7, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d001      	beq.n	80077fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e03e      	b.n	800787c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2202      	movs	r2, #2
 800780a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_TIM_Encoder_Start+0xc4>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d008      	beq.n	800783c <HAL_TIM_Encoder_Start+0xd4>
 800782a:	e00f      	b.n	800784c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2201      	movs	r2, #1
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f000 ffd9 	bl	80087ec <TIM_CCxChannelCmd>
      break;
 800783a:	e016      	b.n	800786a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	2104      	movs	r1, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f000 ffd1 	bl	80087ec <TIM_CCxChannelCmd>
      break;
 800784a:	e00e      	b.n	800786a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2201      	movs	r2, #1
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ffc9 	bl	80087ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2201      	movs	r2, #1
 8007860:	2104      	movs	r1, #4
 8007862:	4618      	mov	r0, r3
 8007864:	f000 ffc2 	bl	80087ec <TIM_CCxChannelCmd>
      break;
 8007868:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 0201 	orr.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f003 0302 	and.w	r3, r3, #2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d020      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01b      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0202 	mvn.w	r2, #2
 80078b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb40 	bl	8007f54 <HAL_TIM_IC_CaptureCallback>
 80078d4:	e005      	b.n	80078e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb32 	bl	8007f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb43 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d020      	beq.n	8007934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01b      	beq.n	8007934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0204 	mvn.w	r2, #4
 8007904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fb1a 	bl	8007f54 <HAL_TIM_IC_CaptureCallback>
 8007920:	e005      	b.n	800792e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fb0c 	bl	8007f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb1d 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d020      	beq.n	8007980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01b      	beq.n	8007980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0208 	mvn.w	r2, #8
 8007950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2204      	movs	r2, #4
 8007956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 faf4 	bl	8007f54 <HAL_TIM_IC_CaptureCallback>
 800796c:	e005      	b.n	800797a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fae6 	bl	8007f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 faf7 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01b      	beq.n	80079cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0210 	mvn.w	r2, #16
 800799c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2208      	movs	r2, #8
 80079a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 face 	bl	8007f54 <HAL_TIM_IC_CaptureCallback>
 80079b8:	e005      	b.n	80079c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fac0 	bl	8007f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fad1 	bl	8007f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00c      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0201 	mvn.w	r2, #1
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fa fafc 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f825 	bl	8008a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f81d 	bl	8008a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fa8b 	bl	8007f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0220 	mvn.w	r2, #32
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 ffe5 	bl	8008a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fff1 	bl	8008a90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 ffe9 	bl	8008aa4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ffe1 	bl	8008ab8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00c      	beq.n	8007b1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d007      	beq.n	8007b1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ffd9 	bl	8008acc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e0ff      	b.n	8007d42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b14      	cmp	r3, #20
 8007b4e:	f200 80f0 	bhi.w	8007d32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b52:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007d33 	.word	0x08007d33
 8007b60:	08007d33 	.word	0x08007d33
 8007b64:	08007d33 	.word	0x08007d33
 8007b68:	08007bed 	.word	0x08007bed
 8007b6c:	08007d33 	.word	0x08007d33
 8007b70:	08007d33 	.word	0x08007d33
 8007b74:	08007d33 	.word	0x08007d33
 8007b78:	08007c2f 	.word	0x08007c2f
 8007b7c:	08007d33 	.word	0x08007d33
 8007b80:	08007d33 	.word	0x08007d33
 8007b84:	08007d33 	.word	0x08007d33
 8007b88:	08007c6f 	.word	0x08007c6f
 8007b8c:	08007d33 	.word	0x08007d33
 8007b90:	08007d33 	.word	0x08007d33
 8007b94:	08007d33 	.word	0x08007d33
 8007b98:	08007cb1 	.word	0x08007cb1
 8007b9c:	08007d33 	.word	0x08007d33
 8007ba0:	08007d33 	.word	0x08007d33
 8007ba4:	08007d33 	.word	0x08007d33
 8007ba8:	08007cf1 	.word	0x08007cf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fa88 	bl	80080c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0208 	orr.w	r2, r2, #8
 8007bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0204 	bic.w	r2, r2, #4
 8007bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6999      	ldr	r1, [r3, #24]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	619a      	str	r2, [r3, #24]
      break;
 8007bea:	e0a5      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 faf8 	bl	80081e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	021a      	lsls	r2, r3, #8
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	619a      	str	r2, [r3, #24]
      break;
 8007c2c:	e084      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fb61 	bl	80082fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0208 	orr.w	r2, r2, #8
 8007c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0204 	bic.w	r2, r2, #4
 8007c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69d9      	ldr	r1, [r3, #28]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	61da      	str	r2, [r3, #28]
      break;
 8007c6c:	e064      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fbc9 	bl	800840c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69d9      	ldr	r1, [r3, #28]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	021a      	lsls	r2, r3, #8
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	61da      	str	r2, [r3, #28]
      break;
 8007cae:	e043      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fc32 	bl	8008520 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0208 	orr.w	r2, r2, #8
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0204 	bic.w	r2, r2, #4
 8007cda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007cee:	e023      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fc76 	bl	80085e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	021a      	lsls	r2, r3, #8
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d30:	e002      	b.n	8007d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
      break;
 8007d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_ConfigClockSource+0x1c>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e0de      	b.n	8007f26 <HAL_TIM_ConfigClockSource+0x1da>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a63      	ldr	r2, [pc, #396]	@ (8007f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	f000 80a9 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007da8:	4a61      	ldr	r2, [pc, #388]	@ (8007f30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	f200 80ae 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007db0:	4a60      	ldr	r2, [pc, #384]	@ (8007f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	f000 80a1 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007db8:	4a5e      	ldr	r2, [pc, #376]	@ (8007f34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f200 80a6 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	f000 8099 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8007f38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	f200 809e 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8007f3c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	f000 8091 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007dd8:	4a58      	ldr	r2, [pc, #352]	@ (8007f3c <HAL_TIM_ConfigClockSource+0x1f0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	f200 8096 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007de0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007de4:	f000 8089 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007de8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007dec:	f200 808e 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df4:	d03e      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x128>
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfa:	f200 8087 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e02:	f000 8086 	beq.w	8007f12 <HAL_TIM_ConfigClockSource+0x1c6>
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0a:	d87f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e0c:	2b70      	cmp	r3, #112	@ 0x70
 8007e0e:	d01a      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0xfa>
 8007e10:	2b70      	cmp	r3, #112	@ 0x70
 8007e12:	d87b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e14:	2b60      	cmp	r3, #96	@ 0x60
 8007e16:	d050      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x16e>
 8007e18:	2b60      	cmp	r3, #96	@ 0x60
 8007e1a:	d877      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e1c:	2b50      	cmp	r3, #80	@ 0x50
 8007e1e:	d03c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x14e>
 8007e20:	2b50      	cmp	r3, #80	@ 0x50
 8007e22:	d873      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e24:	2b40      	cmp	r3, #64	@ 0x40
 8007e26:	d058      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x18e>
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d86f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e2c:	2b30      	cmp	r3, #48	@ 0x30
 8007e2e:	d064      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007e30:	2b30      	cmp	r3, #48	@ 0x30
 8007e32:	d86b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d060      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d867      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d05a      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1ae>
 8007e44:	e062      	b.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e56:	f000 fca9 	bl	80087ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	609a      	str	r2, [r3, #8]
      break;
 8007e72:	e04f      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e84:	f000 fc92 	bl	80087ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e96:	609a      	str	r2, [r3, #8]
      break;
 8007e98:	e03c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f000 fc04 	bl	80086b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2150      	movs	r1, #80	@ 0x50
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fc5d 	bl	8008772 <TIM_ITRx_SetConfig>
      break;
 8007eb8:	e02c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f000 fc23 	bl	8008712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2160      	movs	r1, #96	@ 0x60
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fc4d 	bl	8008772 <TIM_ITRx_SetConfig>
      break;
 8007ed8:	e01c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f000 fbe4 	bl	80086b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2140      	movs	r1, #64	@ 0x40
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fc3d 	bl	8008772 <TIM_ITRx_SetConfig>
      break;
 8007ef8:	e00c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	4610      	mov	r0, r2
 8007f06:	f000 fc34 	bl	8008772 <TIM_ITRx_SetConfig>
      break;
 8007f0a:	e003      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e000      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	00100070 	.word	0x00100070
 8007f34:	00100040 	.word	0x00100040
 8007f38:	00100030 	.word	0x00100030
 8007f3c:	00100020 	.word	0x00100020

08007f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a42      	ldr	r2, [pc, #264]	@ (80080ac <TIM_Base_SetConfig+0x11c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00f      	beq.n	8007fc8 <TIM_Base_SetConfig+0x38>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	d00b      	beq.n	8007fc8 <TIM_Base_SetConfig+0x38>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80080b0 <TIM_Base_SetConfig+0x120>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_Base_SetConfig+0x38>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a3e      	ldr	r2, [pc, #248]	@ (80080b4 <TIM_Base_SetConfig+0x124>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_Base_SetConfig+0x38>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80080b8 <TIM_Base_SetConfig+0x128>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d108      	bne.n	8007fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a33      	ldr	r2, [pc, #204]	@ (80080ac <TIM_Base_SetConfig+0x11c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01b      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe8:	d017      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a30      	ldr	r2, [pc, #192]	@ (80080b0 <TIM_Base_SetConfig+0x120>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80080b4 <TIM_Base_SetConfig+0x124>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00f      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80080b8 <TIM_Base_SetConfig+0x128>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00b      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a2d      	ldr	r2, [pc, #180]	@ (80080bc <TIM_Base_SetConfig+0x12c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a2c      	ldr	r2, [pc, #176]	@ (80080c0 <TIM_Base_SetConfig+0x130>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d003      	beq.n	800801a <TIM_Base_SetConfig+0x8a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a2b      	ldr	r2, [pc, #172]	@ (80080c4 <TIM_Base_SetConfig+0x134>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d108      	bne.n	800802c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a16      	ldr	r2, [pc, #88]	@ (80080ac <TIM_Base_SetConfig+0x11c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0xe8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a17      	ldr	r2, [pc, #92]	@ (80080b8 <TIM_Base_SetConfig+0x128>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0xe8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a16      	ldr	r2, [pc, #88]	@ (80080bc <TIM_Base_SetConfig+0x12c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0xe8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a15      	ldr	r2, [pc, #84]	@ (80080c0 <TIM_Base_SetConfig+0x130>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0xe8>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a14      	ldr	r2, [pc, #80]	@ (80080c4 <TIM_Base_SetConfig+0x134>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d103      	bne.n	8008080 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b01      	cmp	r3, #1
 8008090:	d105      	bne.n	800809e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]
  }
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800
 80080b8:	40013400 	.word	0x40013400
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40014400 	.word	0x40014400
 80080c4:	40014800 	.word	0x40014800

080080c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f023 0201 	bic.w	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 0302 	bic.w	r3, r3, #2
 8008114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <TIM_OC1_SetConfig+0x10c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00f      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <TIM_OC1_SetConfig+0x110>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00b      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a2a      	ldr	r2, [pc, #168]	@ (80081dc <TIM_OC1_SetConfig+0x114>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d007      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a29      	ldr	r2, [pc, #164]	@ (80081e0 <TIM_OC1_SetConfig+0x118>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d003      	beq.n	8008148 <TIM_OC1_SetConfig+0x80>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a28      	ldr	r2, [pc, #160]	@ (80081e4 <TIM_OC1_SetConfig+0x11c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d10c      	bne.n	8008162 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 0308 	bic.w	r3, r3, #8
 800814e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f023 0304 	bic.w	r3, r3, #4
 8008160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1b      	ldr	r2, [pc, #108]	@ (80081d4 <TIM_OC1_SetConfig+0x10c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00f      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a1a      	ldr	r2, [pc, #104]	@ (80081d8 <TIM_OC1_SetConfig+0x110>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00b      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <TIM_OC1_SetConfig+0x114>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d007      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a18      	ldr	r2, [pc, #96]	@ (80081e0 <TIM_OC1_SetConfig+0x118>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d003      	beq.n	800818a <TIM_OC1_SetConfig+0xc2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a17      	ldr	r2, [pc, #92]	@ (80081e4 <TIM_OC1_SetConfig+0x11c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d111      	bne.n	80081ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	40012c00 	.word	0x40012c00
 80081d8:	40013400 	.word	0x40013400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	40014800 	.word	0x40014800

080081e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	f023 0210 	bic.w	r2, r3, #16
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0320 	bic.w	r3, r3, #32
 8008236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a28      	ldr	r2, [pc, #160]	@ (80082e8 <TIM_OC2_SetConfig+0x100>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC2_SetConfig+0x6c>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a27      	ldr	r2, [pc, #156]	@ (80082ec <TIM_OC2_SetConfig+0x104>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10d      	bne.n	8008270 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800826e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a1d      	ldr	r2, [pc, #116]	@ (80082e8 <TIM_OC2_SetConfig+0x100>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ec <TIM_OC2_SetConfig+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a1b      	ldr	r2, [pc, #108]	@ (80082f0 <TIM_OC2_SetConfig+0x108>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a1a      	ldr	r2, [pc, #104]	@ (80082f4 <TIM_OC2_SetConfig+0x10c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC2_SetConfig+0xb0>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a19      	ldr	r2, [pc, #100]	@ (80082f8 <TIM_OC2_SetConfig+0x110>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d113      	bne.n	80082c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800829e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40012c00 	.word	0x40012c00
 80082ec:	40013400 	.word	0x40013400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800

080082fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800832a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a27      	ldr	r2, [pc, #156]	@ (80083f8 <TIM_OC3_SetConfig+0xfc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d003      	beq.n	8008366 <TIM_OC3_SetConfig+0x6a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a26      	ldr	r2, [pc, #152]	@ (80083fc <TIM_OC3_SetConfig+0x100>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d10d      	bne.n	8008382 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800836c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a1c      	ldr	r2, [pc, #112]	@ (80083f8 <TIM_OC3_SetConfig+0xfc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00f      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a1b      	ldr	r2, [pc, #108]	@ (80083fc <TIM_OC3_SetConfig+0x100>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00b      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1a      	ldr	r2, [pc, #104]	@ (8008400 <TIM_OC3_SetConfig+0x104>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d007      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a19      	ldr	r2, [pc, #100]	@ (8008404 <TIM_OC3_SetConfig+0x108>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <TIM_OC3_SetConfig+0xae>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <TIM_OC3_SetConfig+0x10c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d113      	bne.n	80083d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	621a      	str	r2, [r3, #32]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40013400 	.word	0x40013400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800

0800840c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800845a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	031b      	lsls	r3, r3, #12
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a28      	ldr	r2, [pc, #160]	@ (800850c <TIM_OC4_SetConfig+0x100>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC4_SetConfig+0x6c>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a27      	ldr	r2, [pc, #156]	@ (8008510 <TIM_OC4_SetConfig+0x104>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10d      	bne.n	8008494 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	031b      	lsls	r3, r3, #12
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a1d      	ldr	r2, [pc, #116]	@ (800850c <TIM_OC4_SetConfig+0x100>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00f      	beq.n	80084bc <TIM_OC4_SetConfig+0xb0>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a1c      	ldr	r2, [pc, #112]	@ (8008510 <TIM_OC4_SetConfig+0x104>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00b      	beq.n	80084bc <TIM_OC4_SetConfig+0xb0>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <TIM_OC4_SetConfig+0x108>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_OC4_SetConfig+0xb0>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008518 <TIM_OC4_SetConfig+0x10c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_OC4_SetConfig+0xb0>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a19      	ldr	r2, [pc, #100]	@ (800851c <TIM_OC4_SetConfig+0x110>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d113      	bne.n	80084e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	019b      	lsls	r3, r3, #6
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40013400 	.word	0x40013400
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800

08008520 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800854e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a17      	ldr	r2, [pc, #92]	@ (80085d4 <TIM_OC5_SetConfig+0xb4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00f      	beq.n	800859a <TIM_OC5_SetConfig+0x7a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a16      	ldr	r2, [pc, #88]	@ (80085d8 <TIM_OC5_SetConfig+0xb8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_OC5_SetConfig+0x7a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a15      	ldr	r2, [pc, #84]	@ (80085dc <TIM_OC5_SetConfig+0xbc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_OC5_SetConfig+0x7a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a14      	ldr	r2, [pc, #80]	@ (80085e0 <TIM_OC5_SetConfig+0xc0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_OC5_SetConfig+0x7a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a13      	ldr	r2, [pc, #76]	@ (80085e4 <TIM_OC5_SetConfig+0xc4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d109      	bne.n	80085ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800

080085e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800862e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	051b      	lsls	r3, r3, #20
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a18      	ldr	r2, [pc, #96]	@ (80086a0 <TIM_OC6_SetConfig+0xb8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00f      	beq.n	8008664 <TIM_OC6_SetConfig+0x7c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a17      	ldr	r2, [pc, #92]	@ (80086a4 <TIM_OC6_SetConfig+0xbc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00b      	beq.n	8008664 <TIM_OC6_SetConfig+0x7c>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a16      	ldr	r2, [pc, #88]	@ (80086a8 <TIM_OC6_SetConfig+0xc0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d007      	beq.n	8008664 <TIM_OC6_SetConfig+0x7c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a15      	ldr	r2, [pc, #84]	@ (80086ac <TIM_OC6_SetConfig+0xc4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_OC6_SetConfig+0x7c>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a14      	ldr	r2, [pc, #80]	@ (80086b0 <TIM_OC6_SetConfig+0xc8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d109      	bne.n	8008678 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	029b      	lsls	r3, r3, #10
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40012c00 	.word	0x40012c00
 80086a4:	40013400 	.word	0x40013400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800

080086b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	f023 0201 	bic.w	r2, r3, #1
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f023 030a 	bic.w	r3, r3, #10
 80086f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	621a      	str	r2, [r3, #32]
}
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008712:	b480      	push	{r7}
 8008714:	b087      	sub	sp, #28
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f023 0210 	bic.w	r2, r3, #16
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800873c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	031b      	lsls	r3, r3, #12
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800874e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	621a      	str	r2, [r3, #32]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008772:	b480      	push	{r7}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	f043 0307 	orr.w	r3, r3, #7
 8008798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	609a      	str	r2, [r3, #8]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	021a      	lsls	r2, r3, #8
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	609a      	str	r2, [r3, #8]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f003 031f 	and.w	r3, r3, #31
 80087fe:	2201      	movs	r2, #1
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a1a      	ldr	r2, [r3, #32]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	43db      	mvns	r3, r3
 800880e:	401a      	ands	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a1a      	ldr	r2, [r3, #32]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	fa01 f303 	lsl.w	r3, r1, r3
 8008824:	431a      	orrs	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800884c:	2302      	movs	r3, #2
 800884e:	e065      	b.n	800891c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a2c      	ldr	r2, [pc, #176]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a2b      	ldr	r2, [pc, #172]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d108      	bne.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800888a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800889c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d018      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	d013      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00e      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a17      	ldr	r2, [pc, #92]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a12      	ldr	r2, [pc, #72]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a13      	ldr	r2, [pc, #76]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10c      	bne.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	40012c00 	.word	0x40012c00
 800892c:	40013400 	.word	0x40013400
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800
 8008938:	40014000 	.word	0x40014000

0800893c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008954:	2302      	movs	r3, #2
 8008956:	e073      	b.n	8008a40 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a19      	ldr	r2, [pc, #100]	@ (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d004      	beq.n	80089f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a18      	ldr	r2, [pc, #96]	@ (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d11c      	bne.n	8008a2e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fe:	051b      	lsls	r3, r3, #20
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40013400 	.word	0x40013400

08008a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e042      	b.n	8008b78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fc f89d 	bl	8004c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2224      	movs	r2, #36	@ 0x24
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0201 	bic.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fee0 	bl	80098f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc11 	bl	8009358 <UART_SetConfig>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e01b      	b.n	8008b78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 ff5f 	bl	8009a34 <UART_CheckIdleState>
 8008b76:	4603      	mov	r3, r0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	@ 0x28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	d167      	bne.n	8008c68 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <HAL_UART_Transmit_DMA+0x24>
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e060      	b.n	8008c6a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2221      	movs	r2, #33	@ 0x21
 8008bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d028      	beq.n	8008c28 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bda:	4a26      	ldr	r2, [pc, #152]	@ (8008c74 <HAL_UART_Transmit_DMA+0xf4>)
 8008bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be2:	4a25      	ldr	r2, [pc, #148]	@ (8008c78 <HAL_UART_Transmit_DMA+0xf8>)
 8008be4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bea:	4a24      	ldr	r2, [pc, #144]	@ (8008c7c <HAL_UART_Transmit_DMA+0xfc>)
 8008bec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3328      	adds	r3, #40	@ 0x28
 8008c06:	461a      	mov	r2, r3
 8008c08:	88fb      	ldrh	r3, [r7, #6]
 8008c0a:	f7fc fc1b 	bl	8005444 <HAL_DMA_Start_IT>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2210      	movs	r2, #16
 8008c18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e020      	b.n	8008c6a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2240      	movs	r2, #64	@ 0x40
 8008c2e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3308      	adds	r3, #8
 8008c36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c50:	623a      	str	r2, [r7, #32]
 8008c52:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	6a3a      	ldr	r2, [r7, #32]
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e5      	bne.n	8008c30 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3728      	adds	r7, #40	@ 0x28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	08009db1 	.word	0x08009db1
 8008c78:	08009e4b 	.word	0x08009e4b
 8008c7c:	08009e67 	.word	0x08009e67

08008c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b0ba      	sub	sp, #232	@ 0xe8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008caa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008cae:	4013      	ands	r3, r2
 8008cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d11b      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d015      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d009      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8300 	beq.w	80092ea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	4798      	blx	r3
      }
      return;
 8008cf2:	e2fa      	b.n	80092ea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8123 	beq.w	8008f44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d02:	4b8d      	ldr	r3, [pc, #564]	@ (8008f38 <HAL_UART_IRQHandler+0x2b8>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8008f3c <HAL_UART_IRQHandler+0x2bc>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 8116 	beq.w	8008f44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d011      	beq.n	8008d48 <HAL_UART_IRQHandler+0xc8>
 8008d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2201      	movs	r2, #1
 8008d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d3e:	f043 0201 	orr.w	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d011      	beq.n	8008d78 <HAL_UART_IRQHandler+0xf8>
 8008d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2202      	movs	r2, #2
 8008d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d6e:	f043 0204 	orr.w	r2, r3, #4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d011      	beq.n	8008da8 <HAL_UART_IRQHandler+0x128>
 8008d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2204      	movs	r2, #4
 8008d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d9e:	f043 0202 	orr.w	r2, r3, #2
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d017      	beq.n	8008de4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d105      	bne.n	8008dcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008dc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8008f38 <HAL_UART_IRQHandler+0x2b8>)
 8008dc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	f043 0208 	orr.w	r2, r3, #8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d012      	beq.n	8008e16 <HAL_UART_IRQHandler+0x196>
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00c      	beq.n	8008e16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e0c:	f043 0220 	orr.w	r2, r3, #32
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8266 	beq.w	80092ee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d013      	beq.n	8008e56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d005      	beq.n	8008e7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d054      	beq.n	8008f24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 ff32 	bl	8009ce4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8a:	2b40      	cmp	r3, #64	@ 0x40
 8008e8c:	d146      	bne.n	8008f1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d9      	bne.n	8008e8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d017      	beq.n	8008f14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eea:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <HAL_UART_IRQHandler+0x2c0>)
 8008eec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fc fb79 	bl	80055ec <HAL_DMA_Abort_IT>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d019      	beq.n	8008f34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f12:	e00f      	b.n	8008f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa09 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1a:	e00b      	b.n	8008f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa05 	bl	800932c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f22:	e007      	b.n	8008f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa01 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f32:	e1dc      	b.n	80092ee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f34:	bf00      	nop
    return;
 8008f36:	e1da      	b.n	80092ee <HAL_UART_IRQHandler+0x66e>
 8008f38:	10000001 	.word	0x10000001
 8008f3c:	04000120 	.word	0x04000120
 8008f40:	08009ee7 	.word	0x08009ee7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	f040 8170 	bne.w	800922e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f52:	f003 0310 	and.w	r3, r3, #16
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8169 	beq.w	800922e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8162 	beq.w	800922e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2210      	movs	r2, #16
 8008f70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7c:	2b40      	cmp	r3, #64	@ 0x40
 8008f7e:	f040 80d8 	bne.w	8009132 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80af 	beq.w	80090f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	f080 80a7 	bcs.w	80090f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0320 	and.w	r3, r3, #32
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f040 8087 	bne.w	80090d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ff6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800900a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1da      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800903a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800903e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e1      	bne.n	8009012 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800905e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e3      	bne.n	800904e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e4      	bne.n	8009094 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fc fa32 	bl	800553a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2202      	movs	r2, #2
 80090da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f925 	bl	8009340 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80090f6:	e0fc      	b.n	80092f2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009102:	429a      	cmp	r2, r3
 8009104:	f040 80f5 	bne.w	80092f2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b20      	cmp	r3, #32
 8009118:	f040 80eb 	bne.w	80092f2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f908 	bl	8009340 <HAL_UARTEx_RxEventCallback>
      return;
 8009130:	e0df      	b.n	80092f2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800913e:	b29b      	uxth	r3, r3
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80d1 	beq.w	80092f6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80cc 	beq.w	80092f6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800916c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009180:	647b      	str	r3, [r7, #68]	@ 0x44
 8009182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800918e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e4      	bne.n	800915e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3308      	adds	r3, #8
 800919a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	623b      	str	r3, [r7, #32]
   return(result);
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091aa:	f023 0301 	bic.w	r3, r3, #1
 80091ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80091be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e1      	bne.n	8009194 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f023 0310 	bic.w	r3, r3, #16
 80091f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	69b9      	ldr	r1, [r7, #24]
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	617b      	str	r3, [r7, #20]
   return(result);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e4      	bne.n	80091e4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2202      	movs	r2, #2
 800921e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f88a 	bl	8009340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800922c:	e063      	b.n	80092f6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <HAL_UART_IRQHandler+0x5d8>
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800923e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800924e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fe85 	bl	8009f60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009256:	e051      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009260:	2b00      	cmp	r3, #0
 8009262:	d014      	beq.n	800928e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009280:	2b00      	cmp	r3, #0
 8009282:	d03a      	beq.n	80092fa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
    }
    return;
 800928c:	e035      	b.n	80092fa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <HAL_UART_IRQHandler+0x62e>
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800929e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fe2f 	bl	8009f0a <UART_EndTransmit_IT>
    return;
 80092ac:	e026      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d009      	beq.n	80092ce <HAL_UART_IRQHandler+0x64e>
 80092ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fe5e 	bl	8009f88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092cc:	e016      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d010      	beq.n	80092fc <HAL_UART_IRQHandler+0x67c>
 80092da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da0c      	bge.n	80092fc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fe46 	bl	8009f74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092e8:	e008      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
      return;
 80092ea:	bf00      	nop
 80092ec:	e006      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
    return;
 80092ee:	bf00      	nop
 80092f0:	e004      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
      return;
 80092f2:	bf00      	nop
 80092f4:	e002      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
      return;
 80092f6:	bf00      	nop
 80092f8:	e000      	b.n	80092fc <HAL_UART_IRQHandler+0x67c>
    return;
 80092fa:	bf00      	nop
  }
}
 80092fc:	37e8      	adds	r7, #232	@ 0xe8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop

08009304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800935c:	b08c      	sub	sp, #48	@ 0x30
 800935e:	af00      	add	r7, sp, #0
 8009360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	431a      	orrs	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	431a      	orrs	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	4313      	orrs	r3, r2
 800937e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4bab      	ldr	r3, [pc, #684]	@ (8009634 <UART_SetConfig+0x2dc>)
 8009388:	4013      	ands	r3, r2
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009390:	430b      	orrs	r3, r1
 8009392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4aa0      	ldr	r2, [pc, #640]	@ (8009638 <UART_SetConfig+0x2e0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c0:	4313      	orrs	r3, r2
 80093c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80093ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093d8:	430b      	orrs	r3, r1
 80093da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e2:	f023 010f 	bic.w	r1, r3, #15
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a91      	ldr	r2, [pc, #580]	@ (800963c <UART_SetConfig+0x2e4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d125      	bne.n	8009448 <UART_SetConfig+0xf0>
 80093fc:	4b90      	ldr	r3, [pc, #576]	@ (8009640 <UART_SetConfig+0x2e8>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	2b03      	cmp	r3, #3
 8009408:	d81a      	bhi.n	8009440 <UART_SetConfig+0xe8>
 800940a:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <UART_SetConfig+0xb8>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009421 	.word	0x08009421
 8009414:	08009431 	.word	0x08009431
 8009418:	08009429 	.word	0x08009429
 800941c:	08009439 	.word	0x08009439
 8009420:	2301      	movs	r3, #1
 8009422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009426:	e0d6      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009428:	2302      	movs	r3, #2
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800942e:	e0d2      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009436:	e0ce      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943e:	e0ca      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009446:	e0c6      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a7d      	ldr	r2, [pc, #500]	@ (8009644 <UART_SetConfig+0x2ec>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d138      	bne.n	80094c4 <UART_SetConfig+0x16c>
 8009452:	4b7b      	ldr	r3, [pc, #492]	@ (8009640 <UART_SetConfig+0x2e8>)
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	f003 030c 	and.w	r3, r3, #12
 800945c:	2b0c      	cmp	r3, #12
 800945e:	d82d      	bhi.n	80094bc <UART_SetConfig+0x164>
 8009460:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <UART_SetConfig+0x110>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	0800949d 	.word	0x0800949d
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094bd 	.word	0x080094bd
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094ad 	.word	0x080094ad
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080094bd 	.word	0x080094bd
 8009484:	080094bd 	.word	0x080094bd
 8009488:	080094a5 	.word	0x080094a5
 800948c:	080094bd 	.word	0x080094bd
 8009490:	080094bd 	.word	0x080094bd
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094b5 	.word	0x080094b5
 800949c:	2300      	movs	r3, #0
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a2:	e098      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094a4:	2302      	movs	r3, #2
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094aa:	e094      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b2:	e090      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ba:	e08c      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c2:	e088      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a5f      	ldr	r2, [pc, #380]	@ (8009648 <UART_SetConfig+0x2f0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d125      	bne.n	800951a <UART_SetConfig+0x1c2>
 80094ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009640 <UART_SetConfig+0x2e8>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094d8:	2b30      	cmp	r3, #48	@ 0x30
 80094da:	d016      	beq.n	800950a <UART_SetConfig+0x1b2>
 80094dc:	2b30      	cmp	r3, #48	@ 0x30
 80094de:	d818      	bhi.n	8009512 <UART_SetConfig+0x1ba>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d00a      	beq.n	80094fa <UART_SetConfig+0x1a2>
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d814      	bhi.n	8009512 <UART_SetConfig+0x1ba>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <UART_SetConfig+0x19a>
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d008      	beq.n	8009502 <UART_SetConfig+0x1aa>
 80094f0:	e00f      	b.n	8009512 <UART_SetConfig+0x1ba>
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f8:	e06d      	b.n	80095d6 <UART_SetConfig+0x27e>
 80094fa:	2302      	movs	r3, #2
 80094fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009500:	e069      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009502:	2304      	movs	r3, #4
 8009504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009508:	e065      	b.n	80095d6 <UART_SetConfig+0x27e>
 800950a:	2308      	movs	r3, #8
 800950c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009510:	e061      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009512:	2310      	movs	r3, #16
 8009514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009518:	e05d      	b.n	80095d6 <UART_SetConfig+0x27e>
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a4b      	ldr	r2, [pc, #300]	@ (800964c <UART_SetConfig+0x2f4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d125      	bne.n	8009570 <UART_SetConfig+0x218>
 8009524:	4b46      	ldr	r3, [pc, #280]	@ (8009640 <UART_SetConfig+0x2e8>)
 8009526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800952a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800952e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009530:	d016      	beq.n	8009560 <UART_SetConfig+0x208>
 8009532:	2bc0      	cmp	r3, #192	@ 0xc0
 8009534:	d818      	bhi.n	8009568 <UART_SetConfig+0x210>
 8009536:	2b80      	cmp	r3, #128	@ 0x80
 8009538:	d00a      	beq.n	8009550 <UART_SetConfig+0x1f8>
 800953a:	2b80      	cmp	r3, #128	@ 0x80
 800953c:	d814      	bhi.n	8009568 <UART_SetConfig+0x210>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <UART_SetConfig+0x1f0>
 8009542:	2b40      	cmp	r3, #64	@ 0x40
 8009544:	d008      	beq.n	8009558 <UART_SetConfig+0x200>
 8009546:	e00f      	b.n	8009568 <UART_SetConfig+0x210>
 8009548:	2300      	movs	r3, #0
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800954e:	e042      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009550:	2302      	movs	r3, #2
 8009552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009556:	e03e      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009558:	2304      	movs	r3, #4
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800955e:	e03a      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009560:	2308      	movs	r3, #8
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009566:	e036      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009568:	2310      	movs	r3, #16
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956e:	e032      	b.n	80095d6 <UART_SetConfig+0x27e>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a30      	ldr	r2, [pc, #192]	@ (8009638 <UART_SetConfig+0x2e0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d12a      	bne.n	80095d0 <UART_SetConfig+0x278>
 800957a:	4b31      	ldr	r3, [pc, #196]	@ (8009640 <UART_SetConfig+0x2e8>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009588:	d01a      	beq.n	80095c0 <UART_SetConfig+0x268>
 800958a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800958e:	d81b      	bhi.n	80095c8 <UART_SetConfig+0x270>
 8009590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009594:	d00c      	beq.n	80095b0 <UART_SetConfig+0x258>
 8009596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800959a:	d815      	bhi.n	80095c8 <UART_SetConfig+0x270>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <UART_SetConfig+0x250>
 80095a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a4:	d008      	beq.n	80095b8 <UART_SetConfig+0x260>
 80095a6:	e00f      	b.n	80095c8 <UART_SetConfig+0x270>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ae:	e012      	b.n	80095d6 <UART_SetConfig+0x27e>
 80095b0:	2302      	movs	r3, #2
 80095b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095b6:	e00e      	b.n	80095d6 <UART_SetConfig+0x27e>
 80095b8:	2304      	movs	r3, #4
 80095ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095be:	e00a      	b.n	80095d6 <UART_SetConfig+0x27e>
 80095c0:	2308      	movs	r3, #8
 80095c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c6:	e006      	b.n	80095d6 <UART_SetConfig+0x27e>
 80095c8:	2310      	movs	r3, #16
 80095ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ce:	e002      	b.n	80095d6 <UART_SetConfig+0x27e>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a17      	ldr	r2, [pc, #92]	@ (8009638 <UART_SetConfig+0x2e0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	f040 80a8 	bne.w	8009732 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d834      	bhi.n	8009654 <UART_SetConfig+0x2fc>
 80095ea:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <UART_SetConfig+0x298>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009615 	.word	0x08009615
 80095f4:	08009655 	.word	0x08009655
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009655 	.word	0x08009655
 8009600:	08009623 	.word	0x08009623
 8009604:	08009655 	.word	0x08009655
 8009608:	08009655 	.word	0x08009655
 800960c:	08009655 	.word	0x08009655
 8009610:	0800962b 	.word	0x0800962b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009614:	f7fd fa0c 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800961a:	e021      	b.n	8009660 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800961c:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <UART_SetConfig+0x2f8>)
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009620:	e01e      	b.n	8009660 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009622:	f7fd f997 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8009626:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009628:	e01a      	b.n	8009660 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009630:	e016      	b.n	8009660 <UART_SetConfig+0x308>
 8009632:	bf00      	nop
 8009634:	cfff69f3 	.word	0xcfff69f3
 8009638:	40008000 	.word	0x40008000
 800963c:	40013800 	.word	0x40013800
 8009640:	40021000 	.word	0x40021000
 8009644:	40004400 	.word	0x40004400
 8009648:	40004800 	.word	0x40004800
 800964c:	40004c00 	.word	0x40004c00
 8009650:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800965e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 812a 	beq.w	80098bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	4a9e      	ldr	r2, [pc, #632]	@ (80098e8 <UART_SetConfig+0x590>)
 800966e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009672:	461a      	mov	r2, r3
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	fbb3 f3f2 	udiv	r3, r3, r2
 800967a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	4413      	add	r3, r2
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	429a      	cmp	r2, r3
 800968a:	d305      	bcc.n	8009698 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	429a      	cmp	r2, r3
 8009696:	d903      	bls.n	80096a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800969e:	e10d      	b.n	80098bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	2200      	movs	r2, #0
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	60fa      	str	r2, [r7, #12]
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	4a8e      	ldr	r2, [pc, #568]	@ (80098e8 <UART_SetConfig+0x590>)
 80096ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2200      	movs	r2, #0
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096c2:	f7f7 fa7f 	bl	8000bc4 <__aeabi_uldivmod>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4610      	mov	r0, r2
 80096cc:	4619      	mov	r1, r3
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	020b      	lsls	r3, r1, #8
 80096d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096dc:	0202      	lsls	r2, r0, #8
 80096de:	6979      	ldr	r1, [r7, #20]
 80096e0:	6849      	ldr	r1, [r1, #4]
 80096e2:	0849      	lsrs	r1, r1, #1
 80096e4:	2000      	movs	r0, #0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4605      	mov	r5, r0
 80096ea:	eb12 0804 	adds.w	r8, r2, r4
 80096ee:	eb43 0905 	adc.w	r9, r3, r5
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	469a      	mov	sl, r3
 80096fa:	4693      	mov	fp, r2
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f7 fa5e 	bl	8000bc4 <__aeabi_uldivmod>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4613      	mov	r3, r2
 800970e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009716:	d308      	bcc.n	800972a <UART_SetConfig+0x3d2>
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800971e:	d204      	bcs.n	800972a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6a3a      	ldr	r2, [r7, #32]
 8009726:	60da      	str	r2, [r3, #12]
 8009728:	e0c8      	b.n	80098bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009730:	e0c4      	b.n	80098bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800973a:	d167      	bne.n	800980c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800973c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009740:	2b08      	cmp	r3, #8
 8009742:	d828      	bhi.n	8009796 <UART_SetConfig+0x43e>
 8009744:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x3f4>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	08009797 	.word	0x08009797
 800975c:	08009787 	.word	0x08009787
 8009760:	08009797 	.word	0x08009797
 8009764:	08009797 	.word	0x08009797
 8009768:	08009797 	.word	0x08009797
 800976c:	0800978f 	.word	0x0800978f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009770:	f7fd f95e 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009776:	e014      	b.n	80097a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009778:	f7fd f970 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 800977c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800977e:	e010      	b.n	80097a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009780:	4b5a      	ldr	r3, [pc, #360]	@ (80098ec <UART_SetConfig+0x594>)
 8009782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009784:	e00d      	b.n	80097a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009786:	f7fd f8e5 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800978a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800978c:	e009      	b.n	80097a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009794:	e005      	b.n	80097a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8089 	beq.w	80098bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ae:	4a4e      	ldr	r2, [pc, #312]	@ (80098e8 <UART_SetConfig+0x590>)
 80097b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b4:	461a      	mov	r2, r3
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80097bc:	005a      	lsls	r2, r3, #1
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	441a      	add	r2, r3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	2b0f      	cmp	r3, #15
 80097d4:	d916      	bls.n	8009804 <UART_SetConfig+0x4ac>
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097dc:	d212      	bcs.n	8009804 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f023 030f 	bic.w	r3, r3, #15
 80097e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	8bfb      	ldrh	r3, [r7, #30]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	8bfa      	ldrh	r2, [r7, #30]
 8009800:	60da      	str	r2, [r3, #12]
 8009802:	e05b      	b.n	80098bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800980a:	e057      	b.n	80098bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800980c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009810:	2b08      	cmp	r3, #8
 8009812:	d828      	bhi.n	8009866 <UART_SetConfig+0x50e>
 8009814:	a201      	add	r2, pc, #4	@ (adr r2, 800981c <UART_SetConfig+0x4c4>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	08009867 	.word	0x08009867
 800982c:	08009857 	.word	0x08009857
 8009830:	08009867 	.word	0x08009867
 8009834:	08009867 	.word	0x08009867
 8009838:	08009867 	.word	0x08009867
 800983c:	0800985f 	.word	0x0800985f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009840:	f7fd f8f6 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009846:	e014      	b.n	8009872 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009848:	f7fd f908 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 800984c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800984e:	e010      	b.n	8009872 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009850:	4b26      	ldr	r3, [pc, #152]	@ (80098ec <UART_SetConfig+0x594>)
 8009852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009854:	e00d      	b.n	8009872 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009856:	f7fd f87d 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800985a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800985c:	e009      	b.n	8009872 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800985e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009864:	e005      	b.n	8009872 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009870:	bf00      	nop
    }

    if (pclk != 0U)
 8009872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	d021      	beq.n	80098bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987c:	4a1a      	ldr	r2, [pc, #104]	@ (80098e8 <UART_SetConfig+0x590>)
 800987e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009882:	461a      	mov	r2, r3
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	fbb3 f2f2 	udiv	r2, r3, r2
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	441a      	add	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	2b0f      	cmp	r3, #15
 80098a0:	d909      	bls.n	80098b6 <UART_SetConfig+0x55e>
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a8:	d205      	bcs.n	80098b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60da      	str	r2, [r3, #12]
 80098b4:	e002      	b.n	80098bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3730      	adds	r7, #48	@ 0x30
 80098e0:	46bd      	mov	sp, r7
 80098e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098e6:	bf00      	nop
 80098e8:	0800a828 	.word	0x0800a828
 80098ec:	00f42400 	.word	0x00f42400

080098f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01a      	beq.n	8009a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ee:	d10a      	bne.n	8009a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00a      	beq.n	8009a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
  }
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b098      	sub	sp, #96	@ 0x60
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a44:	f7fb fb3a 	bl	80050bc <HAL_GetTick>
 8009a48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0308 	and.w	r3, r3, #8
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d12f      	bne.n	8009ab8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a60:	2200      	movs	r2, #0
 8009a62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f88e 	bl	8009b88 <UART_WaitOnFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d022      	beq.n	8009ab8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e6      	bne.n	8009a72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e063      	b.n	8009b80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d149      	bne.n	8009b5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ac6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f857 	bl	8009b88 <UART_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d03c      	beq.n	8009b5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	623b      	str	r3, [r7, #32]
   return(result);
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e6      	bne.n	8009ae0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3308      	adds	r3, #8
 8009b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b32:	61fa      	str	r2, [r7, #28]
 8009b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	69b9      	ldr	r1, [r7, #24]
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e5      	bne.n	8009b12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e012      	b.n	8009b80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3758      	adds	r7, #88	@ 0x58
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4613      	mov	r3, r2
 8009b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b98:	e04f      	b.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d04b      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ba2:	f7fb fa8b 	bl	80050bc <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d302      	bcc.n	8009bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e04e      	b.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d037      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b80      	cmp	r3, #128	@ 0x80
 8009bce:	d034      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b40      	cmp	r3, #64	@ 0x40
 8009bd4:	d031      	beq.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d110      	bne.n	8009c06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2208      	movs	r2, #8
 8009bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f879 	bl	8009ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2208      	movs	r2, #8
 8009bf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e029      	b.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c14:	d111      	bne.n	8009c3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 f85f 	bl	8009ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2220      	movs	r2, #32
 8009c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e00f      	b.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4013      	ands	r3, r2
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	bf0c      	ite	eq
 8009c4a:	2301      	moveq	r3, #1
 8009c4c:	2300      	movne	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d0a0      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b08f      	sub	sp, #60	@ 0x3c
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c8a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e6      	bne.n	8009c6a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3308      	adds	r3, #8
 8009cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cbc:	61ba      	str	r2, [r7, #24]
 8009cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	6979      	ldr	r1, [r7, #20]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e5      	bne.n	8009c9c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009cd8:	bf00      	nop
 8009cda:	373c      	adds	r7, #60	@ 0x3c
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b095      	sub	sp, #84	@ 0x54
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e6      	bne.n	8009cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3308      	adds	r3, #8
 8009d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e3      	bne.n	8009d1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d118      	bne.n	8009d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f023 0310 	bic.w	r3, r3, #16
 8009d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6979      	ldr	r1, [r7, #20]
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	613b      	str	r3, [r7, #16]
   return(result);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e6      	bne.n	8009d5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009da4:	bf00      	nop
 8009da6:	3754      	adds	r7, #84	@ 0x54
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b090      	sub	sp, #64	@ 0x40
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d137      	bne.n	8009e3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	623b      	str	r3, [r7, #32]
   return(result);
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3308      	adds	r3, #8
 8009df2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009df4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e5      	bne.n	8009dd4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	69b9      	ldr	r1, [r7, #24]
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	617b      	str	r3, [r7, #20]
   return(result);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e3a:	e002      	b.n	8009e42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009e3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009e3e:	f7ff fa61 	bl	8009304 <HAL_UART_TxCpltCallback>
}
 8009e42:	bf00      	nop
 8009e44:	3740      	adds	r7, #64	@ 0x40
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff fa5d 	bl	8009318 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b086      	sub	sp, #24
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8e:	2b80      	cmp	r3, #128	@ 0x80
 8009e90:	d109      	bne.n	8009ea6 <UART_DMAError+0x40>
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2b21      	cmp	r3, #33	@ 0x21
 8009e96:	d106      	bne.n	8009ea6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009ea0:	6978      	ldr	r0, [r7, #20]
 8009ea2:	f7ff fede 	bl	8009c62 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb0:	2b40      	cmp	r3, #64	@ 0x40
 8009eb2:	d109      	bne.n	8009ec8 <UART_DMAError+0x62>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b22      	cmp	r3, #34	@ 0x22
 8009eb8:	d106      	bne.n	8009ec8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009ec2:	6978      	ldr	r0, [r7, #20]
 8009ec4:	f7ff ff0e 	bl	8009ce4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ece:	f043 0210 	orr.w	r2, r3, #16
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ed8:	6978      	ldr	r0, [r7, #20]
 8009eda:	f7ff fa27 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ede:	bf00      	nop
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fa15 	bl	800932c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b088      	sub	sp, #32
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e6      	bne.n	8009f12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff f9d6 	bl	8009304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f58:	bf00      	nop
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e027      	b.n	800a002 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2224      	movs	r2, #36	@ 0x24
 8009fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0201 	bic.w	r2, r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fe0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a022:	2302      	movs	r3, #2
 800a024:	e02d      	b.n	800a082 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2224      	movs	r2, #36	@ 0x24
 800a032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f850 	bl	800a108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e02d      	b.n	800a0fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2224      	movs	r2, #36	@ 0x24
 800a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0201 	bic.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f812 	bl	800a108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a114:	2b00      	cmp	r3, #0
 800a116:	d108      	bne.n	800a12a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a128:	e031      	b.n	800a18e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a12a:	2308      	movs	r3, #8
 800a12c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a12e:	2308      	movs	r3, #8
 800a130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	0e5b      	lsrs	r3, r3, #25
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	0f5b      	lsrs	r3, r3, #29
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	7b3a      	ldrb	r2, [r7, #12]
 800a156:	4911      	ldr	r1, [pc, #68]	@ (800a19c <UARTEx_SetNbDataToProcess+0x94>)
 800a158:	5c8a      	ldrb	r2, [r1, r2]
 800a15a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a15e:	7b3a      	ldrb	r2, [r7, #12]
 800a160:	490f      	ldr	r1, [pc, #60]	@ (800a1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a164:	fb93 f3f2 	sdiv	r3, r3, r2
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	7b7a      	ldrb	r2, [r7, #13]
 800a174:	4909      	ldr	r1, [pc, #36]	@ (800a19c <UARTEx_SetNbDataToProcess+0x94>)
 800a176:	5c8a      	ldrb	r2, [r1, r2]
 800a178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a17c:	7b7a      	ldrb	r2, [r7, #13]
 800a17e:	4908      	ldr	r1, [pc, #32]	@ (800a1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a182:	fb93 f3f2 	sdiv	r3, r3, r2
 800a186:	b29a      	uxth	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	0800a840 	.word	0x0800a840
 800a1a0:	0800a848 	.word	0x0800a848

0800a1a4 <realloc>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <realloc+0xc>)
 800a1a6:	460a      	mov	r2, r1
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	f000 b802 	b.w	800a1b4 <_realloc_r>
 800a1b0:	2000001c 	.word	0x2000001c

0800a1b4 <_realloc_r>:
 800a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	4615      	mov	r5, r2
 800a1bc:	460c      	mov	r4, r1
 800a1be:	b921      	cbnz	r1, 800a1ca <_realloc_r+0x16>
 800a1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	f000 b8d1 	b.w	800a36c <_malloc_r>
 800a1ca:	b92a      	cbnz	r2, 800a1d8 <_realloc_r+0x24>
 800a1cc:	f000 f862 	bl	800a294 <_free_r>
 800a1d0:	2400      	movs	r4, #0
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	f000 f954 	bl	800a484 <_malloc_usable_size_r>
 800a1dc:	4285      	cmp	r5, r0
 800a1de:	4606      	mov	r6, r0
 800a1e0:	d802      	bhi.n	800a1e8 <_realloc_r+0x34>
 800a1e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1e6:	d8f4      	bhi.n	800a1d2 <_realloc_r+0x1e>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	f000 f8be 	bl	800a36c <_malloc_r>
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d0ec      	beq.n	800a1d0 <_realloc_r+0x1c>
 800a1f6:	42b5      	cmp	r5, r6
 800a1f8:	462a      	mov	r2, r5
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	bf28      	it	cs
 800a1fe:	4632      	movcs	r2, r6
 800a200:	f000 f83a 	bl	800a278 <memcpy>
 800a204:	4621      	mov	r1, r4
 800a206:	4640      	mov	r0, r8
 800a208:	f000 f844 	bl	800a294 <_free_r>
 800a20c:	463c      	mov	r4, r7
 800a20e:	e7e0      	b.n	800a1d2 <_realloc_r+0x1e>

0800a210 <memset>:
 800a210:	4402      	add	r2, r0
 800a212:	4603      	mov	r3, r0
 800a214:	4293      	cmp	r3, r2
 800a216:	d100      	bne.n	800a21a <memset+0xa>
 800a218:	4770      	bx	lr
 800a21a:	f803 1b01 	strb.w	r1, [r3], #1
 800a21e:	e7f9      	b.n	800a214 <memset+0x4>

0800a220 <__errno>:
 800a220:	4b01      	ldr	r3, [pc, #4]	@ (800a228 <__errno+0x8>)
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	2000001c 	.word	0x2000001c

0800a22c <__libc_init_array>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4d0d      	ldr	r5, [pc, #52]	@ (800a264 <__libc_init_array+0x38>)
 800a230:	4c0d      	ldr	r4, [pc, #52]	@ (800a268 <__libc_init_array+0x3c>)
 800a232:	1b64      	subs	r4, r4, r5
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	2600      	movs	r6, #0
 800a238:	42a6      	cmp	r6, r4
 800a23a:	d109      	bne.n	800a250 <__libc_init_array+0x24>
 800a23c:	4d0b      	ldr	r5, [pc, #44]	@ (800a26c <__libc_init_array+0x40>)
 800a23e:	4c0c      	ldr	r4, [pc, #48]	@ (800a270 <__libc_init_array+0x44>)
 800a240:	f000 f938 	bl	800a4b4 <_init>
 800a244:	1b64      	subs	r4, r4, r5
 800a246:	10a4      	asrs	r4, r4, #2
 800a248:	2600      	movs	r6, #0
 800a24a:	42a6      	cmp	r6, r4
 800a24c:	d105      	bne.n	800a25a <__libc_init_array+0x2e>
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	f855 3b04 	ldr.w	r3, [r5], #4
 800a254:	4798      	blx	r3
 800a256:	3601      	adds	r6, #1
 800a258:	e7ee      	b.n	800a238 <__libc_init_array+0xc>
 800a25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25e:	4798      	blx	r3
 800a260:	3601      	adds	r6, #1
 800a262:	e7f2      	b.n	800a24a <__libc_init_array+0x1e>
 800a264:	0800a858 	.word	0x0800a858
 800a268:	0800a858 	.word	0x0800a858
 800a26c:	0800a858 	.word	0x0800a858
 800a270:	0800a864 	.word	0x0800a864

0800a274 <__retarget_lock_acquire_recursive>:
 800a274:	4770      	bx	lr

0800a276 <__retarget_lock_release_recursive>:
 800a276:	4770      	bx	lr

0800a278 <memcpy>:
 800a278:	440a      	add	r2, r1
 800a27a:	4291      	cmp	r1, r2
 800a27c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a280:	d100      	bne.n	800a284 <memcpy+0xc>
 800a282:	4770      	bx	lr
 800a284:	b510      	push	{r4, lr}
 800a286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a28e:	4291      	cmp	r1, r2
 800a290:	d1f9      	bne.n	800a286 <memcpy+0xe>
 800a292:	bd10      	pop	{r4, pc}

0800a294 <_free_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4605      	mov	r5, r0
 800a298:	2900      	cmp	r1, #0
 800a29a:	d041      	beq.n	800a320 <_free_r+0x8c>
 800a29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a0:	1f0c      	subs	r4, r1, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfb8      	it	lt
 800a2a6:	18e4      	addlt	r4, r4, r3
 800a2a8:	f000 f8e0 	bl	800a46c <__malloc_lock>
 800a2ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a324 <_free_r+0x90>)
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	b933      	cbnz	r3, 800a2c0 <_free_r+0x2c>
 800a2b2:	6063      	str	r3, [r4, #4]
 800a2b4:	6014      	str	r4, [r2, #0]
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2bc:	f000 b8dc 	b.w	800a478 <__malloc_unlock>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d908      	bls.n	800a2d6 <_free_r+0x42>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	1821      	adds	r1, r4, r0
 800a2c8:	428b      	cmp	r3, r1
 800a2ca:	bf01      	itttt	eq
 800a2cc:	6819      	ldreq	r1, [r3, #0]
 800a2ce:	685b      	ldreq	r3, [r3, #4]
 800a2d0:	1809      	addeq	r1, r1, r0
 800a2d2:	6021      	streq	r1, [r4, #0]
 800a2d4:	e7ed      	b.n	800a2b2 <_free_r+0x1e>
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	b10b      	cbz	r3, 800a2e0 <_free_r+0x4c>
 800a2dc:	42a3      	cmp	r3, r4
 800a2de:	d9fa      	bls.n	800a2d6 <_free_r+0x42>
 800a2e0:	6811      	ldr	r1, [r2, #0]
 800a2e2:	1850      	adds	r0, r2, r1
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d10b      	bne.n	800a300 <_free_r+0x6c>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	4401      	add	r1, r0
 800a2ec:	1850      	adds	r0, r2, r1
 800a2ee:	4283      	cmp	r3, r0
 800a2f0:	6011      	str	r1, [r2, #0]
 800a2f2:	d1e0      	bne.n	800a2b6 <_free_r+0x22>
 800a2f4:	6818      	ldr	r0, [r3, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	6053      	str	r3, [r2, #4]
 800a2fa:	4408      	add	r0, r1
 800a2fc:	6010      	str	r0, [r2, #0]
 800a2fe:	e7da      	b.n	800a2b6 <_free_r+0x22>
 800a300:	d902      	bls.n	800a308 <_free_r+0x74>
 800a302:	230c      	movs	r3, #12
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	e7d6      	b.n	800a2b6 <_free_r+0x22>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	1821      	adds	r1, r4, r0
 800a30c:	428b      	cmp	r3, r1
 800a30e:	bf04      	itt	eq
 800a310:	6819      	ldreq	r1, [r3, #0]
 800a312:	685b      	ldreq	r3, [r3, #4]
 800a314:	6063      	str	r3, [r4, #4]
 800a316:	bf04      	itt	eq
 800a318:	1809      	addeq	r1, r1, r0
 800a31a:	6021      	streq	r1, [r4, #0]
 800a31c:	6054      	str	r4, [r2, #4]
 800a31e:	e7ca      	b.n	800a2b6 <_free_r+0x22>
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	bf00      	nop
 800a324:	20001cb8 	.word	0x20001cb8

0800a328 <sbrk_aligned>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	4e0f      	ldr	r6, [pc, #60]	@ (800a368 <sbrk_aligned+0x40>)
 800a32c:	460c      	mov	r4, r1
 800a32e:	6831      	ldr	r1, [r6, #0]
 800a330:	4605      	mov	r5, r0
 800a332:	b911      	cbnz	r1, 800a33a <sbrk_aligned+0x12>
 800a334:	f000 f8ae 	bl	800a494 <_sbrk_r>
 800a338:	6030      	str	r0, [r6, #0]
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 f8a9 	bl	800a494 <_sbrk_r>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d103      	bne.n	800a34e <sbrk_aligned+0x26>
 800a346:	f04f 34ff 	mov.w	r4, #4294967295
 800a34a:	4620      	mov	r0, r4
 800a34c:	bd70      	pop	{r4, r5, r6, pc}
 800a34e:	1cc4      	adds	r4, r0, #3
 800a350:	f024 0403 	bic.w	r4, r4, #3
 800a354:	42a0      	cmp	r0, r4
 800a356:	d0f8      	beq.n	800a34a <sbrk_aligned+0x22>
 800a358:	1a21      	subs	r1, r4, r0
 800a35a:	4628      	mov	r0, r5
 800a35c:	f000 f89a 	bl	800a494 <_sbrk_r>
 800a360:	3001      	adds	r0, #1
 800a362:	d1f2      	bne.n	800a34a <sbrk_aligned+0x22>
 800a364:	e7ef      	b.n	800a346 <sbrk_aligned+0x1e>
 800a366:	bf00      	nop
 800a368:	20001cb4 	.word	0x20001cb4

0800a36c <_malloc_r>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	1ccd      	adds	r5, r1, #3
 800a372:	f025 0503 	bic.w	r5, r5, #3
 800a376:	3508      	adds	r5, #8
 800a378:	2d0c      	cmp	r5, #12
 800a37a:	bf38      	it	cc
 800a37c:	250c      	movcc	r5, #12
 800a37e:	2d00      	cmp	r5, #0
 800a380:	4606      	mov	r6, r0
 800a382:	db01      	blt.n	800a388 <_malloc_r+0x1c>
 800a384:	42a9      	cmp	r1, r5
 800a386:	d904      	bls.n	800a392 <_malloc_r+0x26>
 800a388:	230c      	movs	r3, #12
 800a38a:	6033      	str	r3, [r6, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a468 <_malloc_r+0xfc>
 800a396:	f000 f869 	bl	800a46c <__malloc_lock>
 800a39a:	f8d8 3000 	ldr.w	r3, [r8]
 800a39e:	461c      	mov	r4, r3
 800a3a0:	bb44      	cbnz	r4, 800a3f4 <_malloc_r+0x88>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff ffbf 	bl	800a328 <sbrk_aligned>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	d158      	bne.n	800a462 <_malloc_r+0xf6>
 800a3b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a3b4:	4627      	mov	r7, r4
 800a3b6:	2f00      	cmp	r7, #0
 800a3b8:	d143      	bne.n	800a442 <_malloc_r+0xd6>
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	d04b      	beq.n	800a456 <_malloc_r+0xea>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	eb04 0903 	add.w	r9, r4, r3
 800a3c8:	f000 f864 	bl	800a494 <_sbrk_r>
 800a3cc:	4581      	cmp	r9, r0
 800a3ce:	d142      	bne.n	800a456 <_malloc_r+0xea>
 800a3d0:	6821      	ldr	r1, [r4, #0]
 800a3d2:	1a6d      	subs	r5, r5, r1
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ffa6 	bl	800a328 <sbrk_aligned>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d03a      	beq.n	800a456 <_malloc_r+0xea>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	442b      	add	r3, r5
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	bb62      	cbnz	r2, 800a448 <_malloc_r+0xdc>
 800a3ee:	f8c8 7000 	str.w	r7, [r8]
 800a3f2:	e00f      	b.n	800a414 <_malloc_r+0xa8>
 800a3f4:	6822      	ldr	r2, [r4, #0]
 800a3f6:	1b52      	subs	r2, r2, r5
 800a3f8:	d420      	bmi.n	800a43c <_malloc_r+0xd0>
 800a3fa:	2a0b      	cmp	r2, #11
 800a3fc:	d917      	bls.n	800a42e <_malloc_r+0xc2>
 800a3fe:	1961      	adds	r1, r4, r5
 800a400:	42a3      	cmp	r3, r4
 800a402:	6025      	str	r5, [r4, #0]
 800a404:	bf18      	it	ne
 800a406:	6059      	strne	r1, [r3, #4]
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	bf08      	it	eq
 800a40c:	f8c8 1000 	streq.w	r1, [r8]
 800a410:	5162      	str	r2, [r4, r5]
 800a412:	604b      	str	r3, [r1, #4]
 800a414:	4630      	mov	r0, r6
 800a416:	f000 f82f 	bl	800a478 <__malloc_unlock>
 800a41a:	f104 000b 	add.w	r0, r4, #11
 800a41e:	1d23      	adds	r3, r4, #4
 800a420:	f020 0007 	bic.w	r0, r0, #7
 800a424:	1ac2      	subs	r2, r0, r3
 800a426:	bf1c      	itt	ne
 800a428:	1a1b      	subne	r3, r3, r0
 800a42a:	50a3      	strne	r3, [r4, r2]
 800a42c:	e7af      	b.n	800a38e <_malloc_r+0x22>
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	42a3      	cmp	r3, r4
 800a432:	bf0c      	ite	eq
 800a434:	f8c8 2000 	streq.w	r2, [r8]
 800a438:	605a      	strne	r2, [r3, #4]
 800a43a:	e7eb      	b.n	800a414 <_malloc_r+0xa8>
 800a43c:	4623      	mov	r3, r4
 800a43e:	6864      	ldr	r4, [r4, #4]
 800a440:	e7ae      	b.n	800a3a0 <_malloc_r+0x34>
 800a442:	463c      	mov	r4, r7
 800a444:	687f      	ldr	r7, [r7, #4]
 800a446:	e7b6      	b.n	800a3b6 <_malloc_r+0x4a>
 800a448:	461a      	mov	r2, r3
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	d1fb      	bne.n	800a448 <_malloc_r+0xdc>
 800a450:	2300      	movs	r3, #0
 800a452:	6053      	str	r3, [r2, #4]
 800a454:	e7de      	b.n	800a414 <_malloc_r+0xa8>
 800a456:	230c      	movs	r3, #12
 800a458:	6033      	str	r3, [r6, #0]
 800a45a:	4630      	mov	r0, r6
 800a45c:	f000 f80c 	bl	800a478 <__malloc_unlock>
 800a460:	e794      	b.n	800a38c <_malloc_r+0x20>
 800a462:	6005      	str	r5, [r0, #0]
 800a464:	e7d6      	b.n	800a414 <_malloc_r+0xa8>
 800a466:	bf00      	nop
 800a468:	20001cb8 	.word	0x20001cb8

0800a46c <__malloc_lock>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__malloc_lock+0x8>)
 800a46e:	f7ff bf01 	b.w	800a274 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	20001cb0 	.word	0x20001cb0

0800a478 <__malloc_unlock>:
 800a478:	4801      	ldr	r0, [pc, #4]	@ (800a480 <__malloc_unlock+0x8>)
 800a47a:	f7ff befc 	b.w	800a276 <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	20001cb0 	.word	0x20001cb0

0800a484 <_malloc_usable_size_r>:
 800a484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a488:	1f18      	subs	r0, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfbc      	itt	lt
 800a48e:	580b      	ldrlt	r3, [r1, r0]
 800a490:	18c0      	addlt	r0, r0, r3
 800a492:	4770      	bx	lr

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	@ (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7fa fd36 	bl	8004f10 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20001cac 	.word	0x20001cac

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr
