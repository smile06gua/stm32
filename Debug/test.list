
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af6c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b144  0800b144  0000c144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b558  0800b558  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b558  0800b558  0000c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b560  0800b560  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b560  0800b560  0000c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b56c  0800b56c  0000c56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b570  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  20000070  0800b5e0  0000d070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  0800b5e0  0000dd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d84  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000445c  00000000  00000000  00030e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00035280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001363  00000000  00000000  00036b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  00037e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6a8  00000000  00000000  00058d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d009a  00000000  00000000  000783c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014845b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  001484a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b12c 	.word	0x0800b12c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b12c 	.word	0x0800b12c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b96a 	b.w	8000eb0 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14e      	bne.n	8000c9e <__udivmoddi4+0xaa>
 8000c00:	4694      	mov	ip, r2
 8000c02:	458c      	cmp	ip, r1
 8000c04:	4686      	mov	lr, r0
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	d962      	bls.n	8000cd2 <__udivmoddi4+0xde>
 8000c0c:	b14a      	cbz	r2, 8000c22 <__udivmoddi4+0x2e>
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	4091      	lsls	r1, r2
 8000c14:	fa20 f303 	lsr.w	r3, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f f68c 	uxth.w	r6, ip
 8000c2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	fb07 1114 	mls	r1, r7, r4, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb04 f106 	mul.w	r1, r4, r6
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x64>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4a:	f080 8112 	bcs.w	8000e72 <__udivmoddi4+0x27e>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 810f 	bls.w	8000e72 <__udivmoddi4+0x27e>
 8000c54:	3c02      	subs	r4, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c62:	fb07 1110 	mls	r1, r7, r0, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f606 	mul.w	r6, r0, r6
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7a:	f080 80fc 	bcs.w	8000e76 <__udivmoddi4+0x282>
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	f240 80f9 	bls.w	8000e76 <__udivmoddi4+0x282>
 8000c84:	4463      	add	r3, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa6>
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xba>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb4>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x150>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xcc>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f0c0 80f0 	bcc.w	8000ea0 <__udivmoddi4+0x2ac>
 8000cc0:	1a86      	subs	r6, r0, r2
 8000cc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d0e6      	beq.n	8000c9a <__udivmoddi4+0xa6>
 8000ccc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd0:	e7e3      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x204>
 8000cd8:	eba1 040c 	sub.w	r4, r1, ip
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cee:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb07 f006 	mul.w	r0, r7, r6
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x11c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x11a>
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d0e:	4626      	mov	r6, r4
 8000d10:	1a1c      	subs	r4, r3, r0
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	429f      	cmp	r7, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x148>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x146>
 8000d34:	429f      	cmp	r7, r3
 8000d36:	f200 80b0 	bhi.w	8000e9a <__udivmoddi4+0x2a6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	1bdb      	subs	r3, r3, r7
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x9c>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d54:	fa04 f301 	lsl.w	r3, r4, r1
 8000d58:	ea43 030c 	orr.w	r3, r3, ip
 8000d5c:	40f4      	lsrs	r4, r6
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	0c38      	lsrs	r0, r7, #16
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb4 fef0 	udiv	lr, r4, r0
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	fb00 441e 	mls	r4, r0, lr, r4
 8000d74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d78:	fb0e f90c 	mul.w	r9, lr, ip
 8000d7c:	45a1      	cmp	r9, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x1a6>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8a:	f080 8084 	bcs.w	8000e96 <__udivmoddi4+0x2a2>
 8000d8e:	45a1      	cmp	r9, r4
 8000d90:	f240 8081 	bls.w	8000e96 <__udivmoddi4+0x2a2>
 8000d94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da6:	fb00 4413 	mls	r4, r0, r3, r4
 8000daa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1d2>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dbc:	d267      	bcs.n	8000e8e <__udivmoddi4+0x29a>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d965      	bls.n	8000e8e <__udivmoddi4+0x29a>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dca:	fba0 9302 	umull	r9, r3, r0, r2
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	46ce      	mov	lr, r9
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	d351      	bcc.n	8000e7e <__udivmoddi4+0x28a>
 8000dda:	d04e      	beq.n	8000e7a <__udivmoddi4+0x286>
 8000ddc:	b155      	cbz	r5, 8000df4 <__udivmoddi4+0x200>
 8000dde:	ebb8 030e 	subs.w	r3, r8, lr
 8000de2:	eb64 040c 	sbc.w	r4, r4, ip
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	40cb      	lsrs	r3, r1
 8000dec:	431e      	orrs	r6, r3
 8000dee:	40cc      	lsrs	r4, r1
 8000df0:	e9c5 6400 	strd	r6, r4, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	e750      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa24 f303 	lsr.w	r3, r4, r3
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb00 f107 	mul.w	r1, r0, r7
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x24c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e36:	d22c      	bcs.n	8000e92 <__udivmoddi4+0x29e>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d92a      	bls.n	8000e92 <__udivmoddi4+0x29e>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e48:	fb08 3311 	mls	r3, r8, r1, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb01 f307 	mul.w	r3, r1, r7
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x276>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e60:	d213      	bcs.n	8000e8a <__udivmoddi4+0x296>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d911      	bls.n	8000e8a <__udivmoddi4+0x296>
 8000e66:	3902      	subs	r1, #2
 8000e68:	4464      	add	r4, ip
 8000e6a:	1ae4      	subs	r4, r4, r3
 8000e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e70:	e739      	b.n	8000ce6 <__udivmoddi4+0xf2>
 8000e72:	4604      	mov	r4, r0
 8000e74:	e6f0      	b.n	8000c58 <__udivmoddi4+0x64>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e7a:	45c8      	cmp	r8, r9
 8000e7c:	d2ae      	bcs.n	8000ddc <__udivmoddi4+0x1e8>
 8000e7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7a8      	b.n	8000ddc <__udivmoddi4+0x1e8>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	e7ed      	b.n	8000e6a <__udivmoddi4+0x276>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e799      	b.n	8000dc6 <__udivmoddi4+0x1d2>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e7d4      	b.n	8000e40 <__udivmoddi4+0x24c>
 8000e96:	46d6      	mov	lr, sl
 8000e98:	e77f      	b.n	8000d9a <__udivmoddi4+0x1a6>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74d      	b.n	8000d3c <__udivmoddi4+0x148>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70f      	b.n	8000cc8 <__udivmoddi4+0xd4>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	e730      	b.n	8000d10 <__udivmoddi4+0x11c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a5a      	lsrs	r2, r3, #9
 8000ec4:	490f      	ldr	r1, [pc, #60]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ec6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eca:	09d2      	lsrs	r2, r2, #7
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09db      	lsrs	r3, r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	00044b83 	.word	0x00044b83
 8000f08:	3b9aca00 	.word	0x3b9aca00

08000f0c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <_ZN8DC_motor6PI_runEv+0x8c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	e012      	b.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eef1 7a67 	vneg.f32	s15, s15
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d506      	bpl.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eef1 7a67 	vneg.f32	s15, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd03      	ble.n	800101c <_ZN8DC_motor6PI_runEv+0x110>
 8001014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d501      	bpl.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <_ZN8DC_motor6PI_runEv+0x27c>)
 8001030:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa57 	bl	80004f0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa3e 	bl	80004cc <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001072:	2b01      	cmp	r3, #1
 8001074:	d124      	bne.n	80010c0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd09      	ble.n	8001098 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f005 fa7b 	bl	800658c <HAL_GPIO_WritePin>
 8001096:	e03c      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d509      	bpl.n	80010ba <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f005 fa6a 	bl	800658c <HAL_GPIO_WritePin>
 80010b8:	e02b      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e028      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd09      	ble.n	80010ec <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f005 fa51 	bl	800658c <HAL_GPIO_WritePin>
 80010ea:	e012      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fa40 	bl	800658c <HAL_GPIO_WritePin>
 800110c:	e001      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <_ZN8DC_motor6PI_runEv+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001124:	e02c      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <_ZN8DC_motor6PI_runEv+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	e022      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <_ZN8DC_motor6PI_runEv+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800114c:	e018      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d105      	bne.n	8001162 <_ZN8DC_motor6PI_runEv+0x256>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e00e      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001166:	2b10      	cmp	r3, #16
 8001168:	d105      	bne.n	8001176 <_ZN8DC_motor6PI_runEv+0x26a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001174:	e004      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	bf800000 	.word	0xbf800000

0800118c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a07 	vldr	s14, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SetCounter(enc_htim,0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000054c 	.word	0x2000054c

08001240 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f006 fd16 	bl	8007c84 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f006 ff02 	bl	8008068 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f006 fefc 	bl	8008068 <HAL_TIM_Encoder_Start>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN8DC_motor8heightToEf>:
    this->resolution = resolution;
}

// 控cascade lift

void DC_motor::heightTo(float high){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	ed87 0a00 	vstr	s0, [r7]
	//height = 25 + turn * mm_per_turn;
	//target_turns = 0.0f;
	if(high != 0){
 8001284:	edd7 7a00 	vldr	s15, [r7]
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	f000 80a7 	beq.w	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		if(high >= height){
 8001294:	4b58      	ldr	r3, [pc, #352]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed97 7a00 	vldr	s14, [r7]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	db14      	blt.n	80012d2 <_ZN8DC_motor8heightToEf+0x5a>
			target_turns = turn + ( (high - height )/ mm_per_turn );
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ed97 7a00 	vldr	s14, [r7]
 80012b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
 80012d0:	e039      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
		}
		else{
			target_turns = turn - ( (height - high ) / mm_per_turn );
 80012d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012e8:	edd3 6a00 	vldr	s13, [r3]
 80012ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
		}

		while(turn < target_turns && high1 != 0){
 80012fa:	e024      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
			if(fabs(target_turns - turn) < 0.001){
 80012fc:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	eef0 7ae7 	vabs.f32	s15, s15
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f8ec 	bl	80004f0 <__aeabi_f2d>
 8001318:	a335      	add	r3, pc, #212	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff fbb1 	bl	8000a84 <__aeabi_dcmplt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <_ZN8DC_motor8heightToEf+0xc4>
				//target_turns = 0;
				high1 = 0;
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				setspeed(0);
 8001330:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 800133a:	e017      	b.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
			}
			else{
				setspeed(0.1);
 800133c:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001410 <_ZN8DC_motor8heightToEf+0x198>
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff23 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn < target_turns && high1 != 0){
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d507      	bpl.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
 800135c:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d1c7      	bne.n	80012fc <_ZN8DC_motor8heightToEf+0x84>
			}
		}
		while(turn > target_turns && high1 != 0){
 800136c:	e025      	b.n	80013ba <_ZN8DC_motor8heightToEf+0x142>
			if(fabs(target_turns - turn) < 0.001){
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137e:	eef0 7ae7 	vabs.f32	s15, s15
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff f8b3 	bl	80004f0 <__aeabi_f2d>
 800138a:	a319      	add	r3, pc, #100	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fb78 	bl	8000a84 <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <_ZN8DC_motor8heightToEf+0x138>
				//target_turns = 0;
				high1 = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
				setspeed(0);
 80013a2:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fef0 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 80013ac:	bf00      	nop

		}
	}

	//setspeed(0);
}
 80013ae:	e018      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
				setspeed(-0.1);
 80013b0:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001414 <_ZN8DC_motor8heightToEf+0x19c>
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fee9 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn > target_turns && high1 != 0){
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dc00      	bgt.n	80013d2 <_ZN8DC_motor8heightToEf+0x15a>
}
 80013d0:	e007      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		while(turn > target_turns && high1 != 0){
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d1c5      	bne.n	800136e <_ZN8DC_motor8heightToEf+0xf6>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	20000564 	.word	0x20000564
 80013fc:	20000560 	.word	0x20000560
 8001400:	2000054c 	.word	0x2000054c
 8001404:	20000568 	.word	0x20000568
 8001408:	20000550 	.word	0x20000550
 800140c:	00000000 	.word	0x00000000
 8001410:	3dcccccd 	.word	0x3dcccccd
 8001414:	bdcccccd 	.word	0xbdcccccd

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141c:	f004 fa69 	bl	80058f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f81a 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f000 fbd8 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001428:	f000 fba4 	bl	8001b74 <MX_DMA_Init>
  MX_TIM1_Init();
 800142c:	f000 f894 	bl	8001558 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001430:	f000 f94a 	bl	80016c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001434:	f000 f996 	bl	8001764 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001438:	f000 f9fa 	bl	8001830 <MX_TIM4_Init>
  MX_TIM8_Init();
 800143c:	f000 faba 	bl	80019b4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001440:	f000 f84a 	bl	80014d8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001444:	f000 fa4a 	bl	80018dc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001448:	f000 fa7e 	bl	8001948 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800144c:	f000 fb46 	bl	8001adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001450:	f000 fdb8 	bl	8001fc4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <main+0x3c>

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2238      	movs	r2, #56	@ 0x38
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f009 fd0e 	bl	800ae88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147e:	f005 f9e7 	bl	8006850 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2340      	movs	r3, #64	@ 0x40
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fa8d 	bl	80069b8 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a4:	f000 fc3e 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fd8b 	bl	8006fdc <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014cc:	f000 fc2a 	bl	8001d24 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	@ 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_I2C1_Init+0x74>)
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <MX_I2C1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_I2C1_Init+0x74>)
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <MX_I2C1_Init+0x7c>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_I2C1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001512:	480e      	ldr	r0, [pc, #56]	@ (800154c <MX_I2C1_Init+0x74>)
 8001514:	f005 f86a 	bl	80065ec <HAL_I2C_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151e:	f000 fc01 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	4809      	ldr	r0, [pc, #36]	@ (800154c <MX_I2C1_Init+0x74>)
 8001526:	f005 f8fc 	bl	8006722 <HAL_I2CEx_ConfigAnalogFilter>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 fbf8 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_I2C1_Init+0x74>)
 8001538:	f005 f93e 	bl	80067b8 <HAL_I2CEx_ConfigDigitalFilter>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fbef 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000008c 	.word	0x2000008c
 8001550:	40005400 	.word	0x40005400
 8001554:	00503d58 	.word	0x00503d58

08001558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b098      	sub	sp, #96	@ 0x60
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2234      	movs	r2, #52	@ 0x34
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fc7f 	bl	800ae88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158a:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800158c:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <MX_TIM1_Init+0x16c>)
 800158e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001590:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001592:	220f      	movs	r2, #15
 8001594:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800159c:	4b48      	ldr	r3, [pc, #288]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800159e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b6:	4842      	ldr	r0, [pc, #264]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015b8:	f006 fa0d 	bl	80079d6 <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f000 fbaf 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d6:	4619      	mov	r1, r3
 80015d8:	4839      	ldr	r0, [pc, #228]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015da:	f007 fdad 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 fb9e 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	482c      	ldr	r0, [pc, #176]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800160e:	f006 ff09 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001618:	f000 fb84 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001620:	2204      	movs	r2, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4826      	ldr	r0, [pc, #152]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001626:	f006 fefd 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001630:	f000 fb78 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800163e:	f006 fef1 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001648:	f000 fb6c 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800164c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001650:	220c      	movs	r2, #12
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001656:	f006 fee5 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001660:	f000 fb60 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800168a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016a2:	f007 fdcb 	bl	800923c <HAL_TIMEx_ConfigBreakDeadTime>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80016ac:	f000 fb3a 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016b2:	f003 feab 	bl	800540c <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3760      	adds	r7, #96	@ 0x60
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000e0 	.word	0x200000e0
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016f0:	220f      	movs	r2, #15
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170e:	4814      	ldr	r0, [pc, #80]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001710:	f006 f870 	bl	80077f4 <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800171a:	f000 fb03 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_TIM2_Init+0x98>)
 800172c:	f006 ff8e 	bl	800864c <HAL_TIM_ConfigClockSource>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001736:	f000 faf5 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001748:	f007 fcf6 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001752:	f000 fae7 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000012c 	.word	0x2000012c

08001764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800178a:	4a28      	ldr	r2, [pc, #160]	@ (800182c <MX_TIM3_Init+0xc8>)
 800178c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_TIM3_Init+0xc4>)
 8001790:	220f      	movs	r2, #15
 8001792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <MX_TIM3_Init+0xc4>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800179c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80017a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ae:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017b0:	f006 f911 	bl	80079d6 <HAL_TIM_PWM_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017ba:	f000 fab3 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4816      	ldr	r0, [pc, #88]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017ce:	f007 fcb3 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017d8:	f000 faa4 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017dc:	2360      	movs	r3, #96	@ 0x60
 80017de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017f4:	f006 fe16 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80017fe:	f000 fa91 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	2204      	movs	r2, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800180a:	f006 fe0b 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001814:	f000 fa86 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800181a:	f003 fdf7 	bl	800540c <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	@ 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000178 	.word	0x20000178
 800182c:	40000400 	.word	0x40000400

08001830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2224      	movs	r2, #36	@ 0x24
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f009 fb22 	bl	800ae88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <MX_TIM4_Init+0xa8>)
 8001852:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001874:	2303      	movs	r3, #3
 8001876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 80018a0:	f006 fb3c 	bl	8007f1c <HAL_TIM_Encoder_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018aa:	f000 fa3b 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 80018bc:	f007 fc3c 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018c6:	f000 fa2d 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001c4 	.word	0x200001c4
 80018d8:	40000800 	.word	0x40000800

080018dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018ee:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <MX_TIM6_Init+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018f4:	220f      	movs	r2, #15
 80018f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <MX_TIM6_Init+0x64>)
 8001900:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001904:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_TIM6_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <MX_TIM6_Init+0x64>)
 800190e:	f005 ff71 	bl	80077f4 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001918:	f000 fa04 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_TIM6_Init+0x64>)
 800192a:	f007 fc05 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001934:	f000 f9f6 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000210 	.word	0x20000210
 8001944:	40001000 	.word	0x40001000

08001948 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_TIM7_Init+0x64>)
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <MX_TIM7_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001960:	220f      	movs	r2, #15
 8001962:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_TIM7_Init+0x64>)
 800196c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001970:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM7_Init+0x64>)
 800197a:	f005 ff3b 	bl	80077f4 <HAL_TIM_Base_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001984:	f000 f9ce 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001996:	f007 fbcf 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019a0:	f000 f9c0 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000025c 	.word	0x2000025c
 80019b0:	40001400 	.word	0x40001400

080019b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b098      	sub	sp, #96	@ 0x60
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2234      	movs	r2, #52	@ 0x34
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f009 fa51 	bl	800ae88 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019e8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad8 <MX_TIM8_Init+0x124>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019ee:	220f      	movs	r2, #15
 80019f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a12:	4830      	ldr	r0, [pc, #192]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a14:	f005 ffdf 	bl	80079d6 <HAL_TIM_PWM_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 f981 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a32:	4619      	mov	r1, r3
 8001a34:	4827      	ldr	r0, [pc, #156]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a36:	f007 fb7f 	bl	8009138 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a40:	f000 f970 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	2360      	movs	r3, #96	@ 0x60
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	481a      	ldr	r0, [pc, #104]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a6a:	f006 fcdb 	bl	8008424 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a74:	f000 f956 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001ab6:	f007 fbc1 	bl	800923c <HAL_TIMEx_ConfigBreakDeadTime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ac0:	f000 f930 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001ac6:	f003 fca1 	bl	800540c <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3760      	adds	r7, #96	@ 0x60
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002a8 	.word	0x200002a8
 8001ad8:	40013400 	.word	0x40013400

08001adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <MX_USART2_UART_Init+0x94>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b24:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b26:	f007 fc5b 	bl	80093e0 <HAL_UART_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b30:	f000 f8f8 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b38:	f009 f8a5 	bl	800ac86 <HAL_UARTEx_SetTxFifoThreshold>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b42:	f000 f8ef 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b4a:	f009 f8da 	bl	800ad02 <HAL_UARTEx_SetRxFifoThreshold>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b54:	f000 f8e6 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b5a:	f009 f85b 	bl	800ac14 <HAL_UARTEx_DisableFifoMode>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f000 f8de 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200002f4 	.word	0x200002f4
 8001b70:	40004400 	.word	0x40004400

08001b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7e:	4a15      	ldr	r2, [pc, #84]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	200d      	movs	r0, #13
 8001bb0:	f003 ffeb 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bb4:	200d      	movs	r0, #13
 8001bb6:	f004 f802 	bl	8005bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	200e      	movs	r0, #14
 8001bc0:	f003 ffe3 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bc4:	200e      	movs	r0, #14
 8001bc6:	f003 fffa 	bl	8005bbe <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfa:	4b48      	ldr	r3, [pc, #288]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b45      	ldr	r3, [pc, #276]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a3e      	ldr	r2, [pc, #248]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b39      	ldr	r3, [pc, #228]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a38      	ldr	r2, [pc, #224]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f240 4103 	movw	r1, #1027	@ 0x403
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c58:	f004 fc98 	bl	800658c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001c5c:	f240 4303 	movw	r3, #1027	@ 0x403
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f004 faee 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8001c7c:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 8001c80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c82:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f004 fadf 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8001c9a:	f243 0308 	movw	r3, #12296	@ 0x3008
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481b      	ldr	r0, [pc, #108]	@ (8001d20 <MX_GPIO_Init+0x148>)
 8001cb2:	f004 fad1 	bl	8006258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cb6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4814      	ldr	r0, [pc, #80]	@ (8001d20 <MX_GPIO_Init+0x148>)
 8001cce:	f004 fac3 	bl	8006258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2009      	movs	r0, #9
 8001cd8:	f003 ff57 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001cdc:	2009      	movs	r0, #9
 8001cde:	f003 ff6e 	bl	8005bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f003 ff4f 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f003 ff66 	bl	8005bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2017      	movs	r0, #23
 8001cf8:	f003 ff47 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cfc:	2017      	movs	r0, #23
 8001cfe:	f003 ff5e 	bl	8005bbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2028      	movs	r0, #40	@ 0x28
 8001d08:	f003 ff3f 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0c:	2028      	movs	r0, #40	@ 0x28
 8001d0e:	f003 ff56 	bl	8005bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	@ 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48000400 	.word	0x48000400

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d82a      	bhi.n	8001d98 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001d42:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d69 	.word	0x08001d69
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	08001d89 	.word	0x08001d89
			case GBD300T:
				return {300,500,2500,0.25};
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d66:	e01d      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	@ (8001db0 <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001d6c:	461c      	mov	r4, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d76:	e015      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001d7c:	461c      	mov	r4, r3
 8001d7e:	4613      	mov	r3, r2
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d86:	e00d      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001db8 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d96:	e005      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffc7 	bl	8001d30 <_ZN5Servo12getServoInfoENS_4typeE>
 8001da2:	bf00      	nop
			}
		}
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	0800b144 	.word	0x0800b144
 8001db0:	0800b154 	.word	0x0800b154
 8001db4:	0800b164 	.word	0x0800b164
 8001db8:	0800b174 	.word	0x0800b174

08001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	61f8      	str	r0, [r7, #28]
 8001dc4:	61b9      	str	r1, [r7, #24]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	74fb      	strb	r3, [r7, #19]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001dce:	f103 040c 	add.w	r4, r3, #12
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2200      	movs	r2, #0
 8001de4:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001df2:	69fc      	ldr	r4, [r7, #28]
 8001df4:	463b      	mov	r3, r7
 8001df6:	7cfa      	ldrb	r2, [r7, #19]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff98 	bl	8001d30 <_ZN5Servo12getServoInfoENS_4typeE>
 8001e00:	340c      	adds	r4, #12
 8001e02:	463b      	mov	r3, r7
 8001e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3724      	adds	r7, #36	@ 0x24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	0800b144 	.word	0x0800b144

08001e18 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void stepTo(int32_t steps);
	void heightTo(float high);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6178      	str	r0, [r7, #20]
 8001e20:	6139      	str	r1, [r7, #16]
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e28:	edc7 0a00 	vstr	s1, [r7]
 8001e2c:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2264      	movs	r2, #100	@ 0x64
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	897a      	ldrh	r2, [r7, #10]
 8001ebe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
	};
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	3a83126f 	.word	0x3a83126f

08001ef8 <_Z9setup_allv>:

//turn
float _current_y = 0.0f;
float _current_theta = 0.0f;

void setup_all(){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001efc:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <_Z9setup_allv+0x9c>)
 8001efe:	f005 fcd1 	bl	80078a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001f02:	4825      	ldr	r0, [pc, #148]	@ (8001f98 <_Z9setup_allv+0xa0>)
 8001f04:	f005 fcce 	bl	80078a4 <HAL_TIM_Base_Start_IT>
	ms++;
 8001f08:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <_Z9setup_allv+0xa4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <_Z9setup_allv+0xa4>)
 8001f10:	6013      	str	r3, [r2, #0]
	servo_forward.setup(920);
 8001f12:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8001f16:	4822      	ldr	r0, [pc, #136]	@ (8001fa0 <_Z9setup_allv+0xa8>)
 8001f18:	f002 ff53 	bl	8004dc2 <_ZN5Servo5setupEi>
	servo_turn.setup(261);
 8001f1c:	f240 1105 	movw	r1, #261	@ 0x105
 8001f20:	4820      	ldr	r0, [pc, #128]	@ (8001fa4 <_Z9setup_allv+0xac>)
 8001f22:	f002 ff4e 	bl	8004dc2 <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8001f26:	4820      	ldr	r0, [pc, #128]	@ (8001fa8 <_Z9setup_allv+0xb0>)
 8001f28:	f7ff f98a 	bl	8001240 <_ZN8DC_motor5setupEv>
	initialized = true;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <_Z9setup_allv+0xb4>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
	speeds = -0.5;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <_Z9setup_allv+0xb8>)
 8001f34:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001f38:	601a      	str	r2, [r3, #0]
	wait(3000, &htim2);
 8001f3a:	491e      	ldr	r1, [pc, #120]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f3c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f40:	f000 f848 	bl	8001fd4 <_Z4waitiP17TIM_HandleTypeDef>
	initialized = false;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <_Z9setup_allv+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	speeds = 0.5;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <_Z9setup_allv+0xb8>)
 8001f4c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001f50:	601a      	str	r2, [r3, #0]
	wait(1500, &htim2);
 8001f52:	4918      	ldr	r1, [pc, #96]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f54:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001f58:	f000 f83c 	bl	8001fd4 <_Z4waitiP17TIM_HandleTypeDef>


	wait(5000, &htim2);
 8001f5c:	4915      	ldr	r1, [pc, #84]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f5e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f62:	f000 f837 	bl	8001fd4 <_Z4waitiP17TIM_HandleTypeDef>
	servo_gripper.setup(0);
 8001f66:	2100      	movs	r1, #0
 8001f68:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <_Z9setup_allv+0xc0>)
 8001f6a:	f002 ff2a 	bl	8004dc2 <_ZN5Servo5setupEi>
	servo_right.setup(150);
 8001f6e:	2196      	movs	r1, #150	@ 0x96
 8001f70:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <_Z9setup_allv+0xc4>)
 8001f72:	f002 ff26 	bl	8004dc2 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8001f76:	2100      	movs	r1, #0
 8001f78:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <_Z9setup_allv+0xc8>)
 8001f7a:	f002 ff22 	bl	8004dc2 <_ZN5Servo5setupEi>
	servo_forward.turnTo(300); //920---40 底
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <_Z9setup_allv+0xa8>)
 8001f86:	f002 ffe3 	bl	8004f50 <_ZN5Servo6turnToEii>

	ROS1::init();
 8001f8a:	f001 fdd5 	bl	8003b38 <_ZN4ROS14initEv>
	//HAL_TIM_Base_Start_IT(&htim2);


}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000210 	.word	0x20000210
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	2000055c 	.word	0x2000055c
 8001fa0:	20000520 	.word	0x20000520
 8001fa4:	200004a0 	.word	0x200004a0
 8001fa8:	20000448 	.word	0x20000448
 8001fac:	20000546 	.word	0x20000546
 8001fb0:	20000548 	.word	0x20000548
 8001fb4:	2000012c 	.word	0x2000012c
 8001fb8:	200004c0 	.word	0x200004c0
 8001fbc:	20000500 	.word	0x20000500
 8001fc0:	200004e0 	.word	0x200004e0

08001fc4 <main_function>:
void main_function(){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	setup_all();
 8001fc8:	f7ff ff96 	bl	8001ef8 <_Z9setup_allv>
		//servo_gripper.turnTo(angle);
//		wait(1000, &htim2);

		//servo_turn.setup(aljjojojoj);
		//ROS1::_pub_gripper();
		ROS1::spinCycle();
 8001fcc:	f001 fe00 	bl	8003bd0 <_ZN4ROS19spinCycleEv>
 8001fd0:	e7fc      	b.n	8001fcc <main_function+0x8>
	...

08001fd4 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f005 fc60 	bl	80078a4 <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001fe4:	bf00      	nop
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dcfa      	bgt.n	8001fe6 <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f005 fcc1 	bl	8007978 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8001ff6:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000554 	.word	0x20000554

08002008 <HAL_TIM_PeriodElapsedCallback>:
float s;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002018:	d104      	bne.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 800201a:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002022:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d123      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x6e>
		height = 445 + turn * mm_per_turn;
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80020a8 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8002042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002046:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
		Motor_updown.PI_run();
 800204c:	4818      	ldr	r0, [pc, #96]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800204e:	f7fe ff5d 	bl	8000f0c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(-1);
 8002052:	f04f 31ff 	mov.w	r1, #4294967295
 8002056:	4816      	ldr	r0, [pc, #88]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002058:	f7ff f8a8 	bl	80011ac <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 800205c:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	4812      	ldr	r0, [pc, #72]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002068:	f7ff f890 	bl	800118c <_ZN8DC_motor8setspeedEf>
		ms++;
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002074:	6013      	str	r3, [r2, #0]

		//ROS1::_pub_elevator();
	}
	if(htim->Instance == TIM7){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d107      	bne.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x88>
		ROS1::_pub_gripper();
 8002080:	f001 fdc2 	bl	8003c08 <_ZN4ROS112_pub_gripperEv>
		ROS1::_pub_touch();
 8002084:	f001 fdae 	bl	8003be4 <_ZN4ROS110_pub_touchEv>
		ROS1::_pub_theta();
 8002088:	f001 fde8 	bl	8003c5c <_ZN4ROS110_pub_thetaEv>
		ROS1::_pub_y();
 800208c:	f001 fdce 	bl	8003c2c <_ZN4ROS16_pub_yEv>
		//s++;
		}
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000554 	.word	0x20000554
 800209c:	40001000 	.word	0x40001000
 80020a0:	2000054c 	.word	0x2000054c
 80020a4:	20000560 	.word	0x20000560
 80020a8:	43de8000 	.word	0x43de8000
 80020ac:	20000564 	.word	0x20000564
 80020b0:	20000448 	.word	0x20000448
 80020b4:	20000548 	.word	0x20000548
 80020b8:	2000055c 	.word	0x2000055c
 80020bc:	40001400 	.word	0x40001400

080020c0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020d0:	f000 8102 	beq.w	80022d8 <HAL_GPIO_EXTI_Callback+0x218>
 80020d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020d8:	f300 8133 	bgt.w	8002342 <HAL_GPIO_EXTI_Callback+0x282>
 80020dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e0:	d069      	beq.n	80021b6 <HAL_GPIO_EXTI_Callback+0xf6>
 80020e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e6:	f300 812c 	bgt.w	8002342 <HAL_GPIO_EXTI_Callback+0x282>
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ee:	d03a      	beq.n	8002166 <HAL_GPIO_EXTI_Callback+0xa6>
 80020f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f4:	f300 8125 	bgt.w	8002342 <HAL_GPIO_EXTI_Callback+0x282>
 80020f8:	2b80      	cmp	r3, #128	@ 0x80
 80020fa:	d009      	beq.n	8002110 <HAL_GPIO_EXTI_Callback+0x50>
 80020fc:	2b80      	cmp	r3, #128	@ 0x80
 80020fe:	f300 8120 	bgt.w	8002342 <HAL_GPIO_EXTI_Callback+0x282>
 8002102:	2b10      	cmp	r3, #16
 8002104:	f000 8083 	beq.w	800220e <HAL_GPIO_EXTI_Callback+0x14e>
 8002108:	2b20      	cmp	r3, #32
 800210a:	f000 80b0 	beq.w	800226e <HAL_GPIO_EXTI_Callback+0x1ae>
				isTop = 0;

			}

	}
}
 800210e:	e118      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f004 fa20 	bl	800655c <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_GPIO_EXTI_Callback+0x80>
				tt = 7;
 800212c:	4b87      	ldr	r3, [pc, #540]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 800212e:	2207      	movs	r2, #7
 8002130:	601a      	str	r2, [r3, #0]
				elevator_type = 1;
 8002132:	4b87      	ldr	r3, [pc, #540]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
				casecadeLift = false;  // 重置初始化狀態
 8002138:	4b86      	ldr	r3, [pc, #536]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x294>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
			break;
 800213e:	e0f7      	b.n	8002330 <HAL_GPIO_EXTI_Callback+0x270>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002148:	f004 fa08 	bl	800655c <HAL_GPIO_ReadPin>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80e9 	beq.w	8002330 <HAL_GPIO_EXTI_Callback+0x270>
				casecadeLift = true;
 800215e:	4b7d      	ldr	r3, [pc, #500]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x294>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
			break;
 8002164:	e0e4      	b.n	8002330 <HAL_GPIO_EXTI_Callback+0x270>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216e:	f004 f9f5 	bl	800655c <HAL_GPIO_ReadPin>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_EXTI_Callback+0xd0>
				elevator_type = 2;
 8002182:	4b73      	ldr	r3, [pc, #460]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
				tt = 8;
 8002188:	4b70      	ldr	r3, [pc, #448]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 800218a:	2208      	movs	r2, #8
 800218c:	601a      	str	r2, [r3, #0]
			break;
 800218e:	e0d1      	b.n	8002334 <HAL_GPIO_EXTI_Callback+0x274>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002198:	f004 f9e0 	bl	800655c <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80c3 	beq.w	8002334 <HAL_GPIO_EXTI_Callback+0x274>
				elevator_type = 1;
 80021ae:	4b68      	ldr	r3, [pc, #416]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
			break;
 80021b4:	e0be      	b.n	8002334 <HAL_GPIO_EXTI_Callback+0x274>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f004 f9cd 	bl	800655c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_GPIO_EXTI_Callback+0x128>
				tt = 9;
 80021d2:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 80021d4:	2209      	movs	r2, #9
 80021d6:	601a      	str	r2, [r3, #0]
				speeds = 0;
 80021d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x298>)
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
				table_isTouch = 1;
 80021e0:	4b5e      	ldr	r3, [pc, #376]	@ (800235c <HAL_GPIO_EXTI_Callback+0x29c>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
			break;
 80021e6:	e0a7      	b.n	8002338 <HAL_GPIO_EXTI_Callback+0x278>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f0:	f004 f9b4 	bl	800655c <HAL_GPIO_ReadPin>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8099 	beq.w	8002338 <HAL_GPIO_EXTI_Callback+0x278>
				table_isTouch = 0;
 8002206:	4b55      	ldr	r3, [pc, #340]	@ (800235c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
			break;
 800220c:	e094      	b.n	8002338 <HAL_GPIO_EXTI_Callback+0x278>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002216:	f004 f9a1 	bl	800655c <HAL_GPIO_ReadPin>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <HAL_GPIO_EXTI_Callback+0x18a>
				tt = 4;
 800222a:	4b48      	ldr	r3, [pc, #288]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 800222c:	2204      	movs	r2, #4
 800222e:	601a      	str	r2, [r3, #0]
				speeds = 0;
 8002230:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x298>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
				elevator_type = -1;
 8002238:	4b45      	ldr	r3, [pc, #276]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	601a      	str	r2, [r3, #0]
				turn = 0;
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
			break;
 8002248:	e078      	b.n	800233c <HAL_GPIO_EXTI_Callback+0x27c>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002252:	f004 f983 	bl	800655c <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d06a      	beq.n	800233c <HAL_GPIO_EXTI_Callback+0x27c>
				elevator_type = 0;
 8002266:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			break;
 800226c:	e066      	b.n	800233c <HAL_GPIO_EXTI_Callback+0x27c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002276:	f004 f971 	bl	800655c <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d014      	beq.n	80022b4 <HAL_GPIO_EXTI_Callback+0x1f4>
				tt = 5;
 800228a:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 800228c:	2205      	movs	r2, #5
 800228e:	601a      	str	r2, [r3, #0]
				if(initialized == false){
 8002290:	4b34      	ldr	r3, [pc, #208]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_GPIO_EXTI_Callback+0x1e6>
					initialized = true;  // 重置初始化狀態
 8002298:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
					speeds = 0;
 800229e:	4b2e      	ldr	r3, [pc, #184]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x298>)
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
				isTop = 1;
 80022a6:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
				elevator_type = 1;
 80022ac:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
			break;
 80022b2:	e045      	b.n	8002340 <HAL_GPIO_EXTI_Callback+0x280>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022bc:	f004 f94e 	bl	800655c <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d037      	beq.n	8002340 <HAL_GPIO_EXTI_Callback+0x280>
				isTop = 0;
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			break;
 80022d6:	e033      	b.n	8002340 <HAL_GPIO_EXTI_Callback+0x280>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	4619      	mov	r1, r3
 80022dc:	4823      	ldr	r0, [pc, #140]	@ (800236c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80022de:	f004 f93d 	bl	800655c <HAL_GPIO_ReadPin>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_EXTI_Callback+0x24e>
				tt = 14;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <HAL_GPIO_EXTI_Callback+0x28c>)
 80022f4:	220e      	movs	r2, #14
 80022f6:	601a      	str	r2, [r3, #0]
				isTop = 3;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x298>)
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
				elevator_type = 3;
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x290>)
 8002308:	2203      	movs	r2, #3
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	e019      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	4619      	mov	r1, r3
 8002312:	4816      	ldr	r0, [pc, #88]	@ (800236c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002314:	f004 f922 	bl	800655c <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
				isTop = 0;
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
}
 800232e:	e008      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002330:	bf00      	nop
 8002332:	e006      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002334:	bf00      	nop
 8002336:	e004      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			break;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002340:	bf00      	nop
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000540 	.word	0x20000540
 8002350:	20000558 	.word	0x20000558
 8002354:	20000000 	.word	0x20000000
 8002358:	20000548 	.word	0x20000548
 800235c:	20000545 	.word	0x20000545
 8002360:	2000054c 	.word	0x2000054c
 8002364:	20000546 	.word	0x20000546
 8002368:	20000544 	.word	0x20000544
 800236c:	48000400 	.word	0x48000400

08002370 <_Z41__static_initialization_and_destruction_0ii>:
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af04      	add	r7, sp, #16
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d13f      	bne.n	8002400 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002386:	4293      	cmp	r3, r2
 8002388:	d13a      	bne.n	8002400 <_Z41__static_initialization_and_destruction_0ii+0x90>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,0,4,12};
 800238a:	2300      	movs	r3, #0
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	2304      	movs	r3, #4
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 800239a:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800239e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80023a6:	4919      	ldr	r1, [pc, #100]	@ (800240c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80023a8:	4819      	ldr	r0, [pc, #100]	@ (8002410 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80023aa:	f7ff fd35 	bl	8001e18 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_1, Servo::GBD300T};
 80023ae:	2300      	movs	r3, #0
 80023b0:	2200      	movs	r2, #0
 80023b2:	4918      	ldr	r1, [pc, #96]	@ (8002414 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80023b4:	4818      	ldr	r0, [pc, #96]	@ (8002418 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80023b6:	f7ff fd01 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD300T};
 80023ba:	2300      	movs	r3, #0
 80023bc:	2204      	movs	r2, #4
 80023be:	4917      	ldr	r1, [pc, #92]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023c0:	4817      	ldr	r0, [pc, #92]	@ (8002420 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80023c2:	f7ff fcfb 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 80023c6:	2300      	movs	r3, #0
 80023c8:	220c      	movs	r2, #12
 80023ca:	4914      	ldr	r1, [pc, #80]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023cc:	4815      	ldr	r0, [pc, #84]	@ (8002424 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80023ce:	f7ff fcf5 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_3, Servo::GBD300T};
 80023d2:	2300      	movs	r3, #0
 80023d4:	2208      	movs	r2, #8
 80023d6:	4911      	ldr	r1, [pc, #68]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023d8:	4813      	ldr	r0, [pc, #76]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80023da:	f7ff fcef 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 80023de:	2302      	movs	r3, #2
 80023e0:	2200      	movs	r2, #0
 80023e2:	490e      	ldr	r1, [pc, #56]	@ (800241c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023e4:	4811      	ldr	r0, [pc, #68]	@ (800242c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80023e6:	f7ff fce9 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
float mm_per_turn = total_high / total_turns; // 每步對應的公分數
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80023fc:	edc3 7a00 	vstr	s15, [r3]
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200002a8 	.word	0x200002a8
 800240c:	200001c4 	.word	0x200001c4
 8002410:	20000448 	.word	0x20000448
 8002414:	20000178 	.word	0x20000178
 8002418:	200004a0 	.word	0x200004a0
 800241c:	200000e0 	.word	0x200000e0
 8002420:	200004c0 	.word	0x200004c0
 8002424:	200004e0 	.word	0x200004e0
 8002428:	20000500 	.word	0x20000500
 800242c:	20000520 	.word	0x20000520
 8002430:	20000008 	.word	0x20000008
 8002434:	20000004 	.word	0x20000004
 8002438:	20000560 	.word	0x20000560

0800243c <_GLOBAL__sub_I_Motor_updown>:
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
 8002440:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff ff93 	bl	8002370 <_Z41__static_initialization_and_destruction_0ii>
 800244a:	bd80      	pop	{r7, pc}

0800244c <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	if(open == 0){
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d108      	bne.n	800246e <_Z14gripperControlb+0x22>
		servo_gripper.turnTo(240);  //close
 800245c:	2200      	movs	r2, #0
 800245e:	21f0      	movs	r1, #240	@ 0xf0
 8002460:	4809      	ldr	r0, [pc, #36]	@ (8002488 <_Z14gripperControlb+0x3c>)
 8002462:	f002 fd75 	bl	8004f50 <_ZN5Servo6turnToEii>
		_gripperFinish = 0; //
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <_Z14gripperControlb+0x40>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //open
		_gripperFinish = 1;
	}
}
 800246c:	e007      	b.n	800247e <_Z14gripperControlb+0x32>
		servo_gripper.turnTo(0); //open
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <_Z14gripperControlb+0x3c>)
 8002474:	f002 fd6c 	bl	8004f50 <_ZN5Servo6turnToEii>
		_gripperFinish = 1;
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <_Z14gripperControlb+0x40>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200004c0 	.word	0x200004c0
 800248c:	20000574 	.word	0x20000574

08002490 <_Z10middleTurni>:

void middleTurn(int angle){
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	float degree = angle;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	edc7 7a03 	vstr	s15, [r7, #12]
	_current_theta = angle;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b0:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <_Z10middleTurni+0xa8>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	if(angle < 0 && angle > -260){
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da18      	bge.n	80024ee <_Z10middleTurni+0x5e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f513 7f82 	cmn.w	r3, #260	@ 0x104
 80024c2:	dd14      	ble.n	80024ee <_Z10middleTurni+0x5e>
		servo_turn.turnTo(261.0 + degree, 5000);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7fe f813 	bl	80004f0 <__aeabi_f2d>
 80024ca:	a319      	add	r3, pc, #100	@ (adr r3, 8002530 <_Z10middleTurni+0xa0>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f7fd feb0 	bl	8000234 <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe fafa 	bl	8000ad4 <__aeabi_d2iz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4619      	mov	r1, r3
 80024e8:	4814      	ldr	r0, [pc, #80]	@ (800253c <_Z10middleTurni+0xac>)
 80024ea:	f002 fd31 	bl	8004f50 <_ZN5Servo6turnToEii>
	}
	if(angle >= 0 && angle < 30){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db17      	blt.n	8002524 <_Z10middleTurni+0x94>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b1d      	cmp	r3, #29
 80024f8:	dc14      	bgt.n	8002524 <_Z10middleTurni+0x94>
		servo_turn.turnTo(261.0 + degree, 5000);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7fd fff8 	bl	80004f0 <__aeabi_f2d>
 8002500:	a30b      	add	r3, pc, #44	@ (adr r3, 8002530 <_Z10middleTurni+0xa0>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f7fd fe95 	bl	8000234 <__adddf3>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fadf 	bl	8000ad4 <__aeabi_d2iz>
 8002516:	4603      	mov	r3, r0
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	@ (800253c <_Z10middleTurni+0xac>)
 8002520:	f002 fd16 	bl	8004f50 <_ZN5Servo6turnToEii>
	}
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f3af 8000 	nop.w
 8002530:	00000000 	.word	0x00000000
 8002534:	40705000 	.word	0x40705000
 8002538:	20000570 	.word	0x20000570
 800253c:	200004a0 	.word	0x200004a0

08002540 <_Z14forwardToPointf>:
void for_last_mission(){
	servo_turn.turnTo(81);
	servo_forward.turnTo(30);
}

void forwardToPoint(float forward_mm){
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0a01 	vstr	s0, [r7, #4]
	if(forward_mm < 0 && forward_mm > -90){
 800254a:	edd7 7a01 	vldr	s15, [r7, #4]
 800254e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d523      	bpl.n	80025a0 <_Z14forwardToPointf+0x60>
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002624 <_Z14forwardToPointf+0xe4>
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	dd1a      	ble.n	80025a0 <_Z14forwardToPointf+0x60>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 800256a:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <_Z14forwardToPointf+0xe8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002576:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <_Z14forwardToPointf+0xec>)
 8002578:	edd3 6a00 	vldr	s13, [r3]
 800257c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258c:	2200      	movs	r2, #0
 800258e:	ee17 1a90 	vmov	r1, s15
 8002592:	4827      	ldr	r0, [pc, #156]	@ (8002630 <_Z14forwardToPointf+0xf0>)
 8002594:	f002 fcdc 	bl	8004f50 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 8002598:	4a26      	ldr	r2, [pc, #152]	@ (8002634 <_Z14forwardToPointf+0xf4>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e03d      	b.n	800261c <_Z14forwardToPointf+0xdc>
		
	}
	else if(forward_mm > 0 && forward_mm < 220){
 80025a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	dd23      	ble.n	80025f6 <_Z14forwardToPointf+0xb6>
 80025ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002638 <_Z14forwardToPointf+0xf8>
 80025b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d51a      	bpl.n	80025f6 <_Z14forwardToPointf+0xb6>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <_Z14forwardToPointf+0xe8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <_Z14forwardToPointf+0xec>)
 80025ce:	edd3 6a00 	vldr	s13, [r3]
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e2:	2200      	movs	r2, #0
 80025e4:	ee17 1a90 	vmov	r1, s15
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <_Z14forwardToPointf+0xf0>)
 80025ea:	f002 fcb1 	bl	8004f50 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <_Z14forwardToPointf+0xf4>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e012      	b.n	800261c <_Z14forwardToPointf+0xdc>
	}
	else if(forward_mm == 0){
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	d10b      	bne.n	800261c <_Z14forwardToPointf+0xdc>
		servo_forward.turnTo(zeroPointAngle);
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <_Z14forwardToPointf+0xe8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	4808      	ldr	r0, [pc, #32]	@ (8002630 <_Z14forwardToPointf+0xf0>)
 800260e:	f002 fc9f 	bl	8004f50 <_ZN5Servo6turnToEii>
		_current_y = 0;
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <_Z14forwardToPointf+0xf4>)
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
	}
}
 800261a:	e7ff      	b.n	800261c <_Z14forwardToPointf+0xdc>
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	c2b40000 	.word	0xc2b40000
 8002628:	20000010 	.word	0x20000010
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000520 	.word	0x20000520
 8002634:	2000056c 	.word	0x2000056c
 8002638:	435c0000 	.word	0x435c0000

0800263c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <_ZN3ros3MsgC1Ev+0x1c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	0800b508 	.word	0x0800b508

08002680 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
      data()
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ffe8 	bl	8002660 <_ZN3ros3MsgC1Ev>
 8002690:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffce 	bl	800263c <_ZN3ros4TimeC1Ev>
    {
    }
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	0800b4f0 	.word	0x0800b4f0

080026b0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	b2ca      	uxtb	r2, r1
 80026ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0a19      	lsrs	r1, r3, #8
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	b2ca      	uxtb	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c19      	lsrs	r1, r3, #16
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3302      	adds	r3, #2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	b2ca      	uxtb	r2, r1
 80026ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0e19      	lsrs	r1, r3, #24
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3303      	adds	r3, #3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	b2ca      	uxtb	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3304      	adds	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a19      	lsrs	r1, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	0c19      	lsrs	r1, r3, #16
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3302      	adds	r3, #2
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	b2ca      	uxtb	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0e19      	lsrs	r1, r3, #24
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3303      	adds	r3, #3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	4413      	add	r3, r2
 8002748:	b2ca      	uxtb	r2, r1
 800274a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
      return offset;
 8002752:	68fb      	ldr	r3, [r7, #12]
    }
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	440b      	add	r3, r1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3302      	adds	r3, #2
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440b      	add	r3, r1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3303      	adds	r3, #3
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	440b      	add	r3, r1
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3304      	adds	r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	440b      	add	r3, r1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3302      	adds	r3, #2
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	440b      	add	r3, r1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3303      	adds	r3, #3
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3304      	adds	r3, #4
 8002818:	60fb      	str	r3, [r7, #12]
     return offset;
 800281a:	68fb      	ldr	r3, [r7, #12]
    }
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	0800b184 	.word	0x0800b184

08002844 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	0800b194 	.word	0x0800b194

08002860 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fef8 	bl	8002660 <_ZN3ros3MsgC1Ev>
 8002870:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002880:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002886:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800288c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
    {
    }
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	0800b4d8 	.word	0x0800b4d8
 80028a4:	0800b1b8 	.word	0x0800b1b8

080028a8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8899      	ldrh	r1, [r3, #4]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	889b      	ldrh	r3, [r3, #4]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	b299      	uxth	r1, r3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	3301      	adds	r3, #1
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	b2ca      	uxtb	r2, r1
 80028d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3302      	adds	r3, #2
 80028dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fc98 	bl	8000218 <strlen>
 80028e8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	69b9      	ldr	r1, [r7, #24]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fa50 	bl	8003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3304      	adds	r3, #4
 80028fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	18d0      	adds	r0, r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4619      	mov	r1, r3
 800290c:	f008 faf0 	bl	800aef0 <memcpy>
      offset += length_topic_name;
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fc7b 	bl	8000218 <strlen>
 8002922:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fa33 	bl	8003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	18d0      	adds	r0, r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4619      	mov	r1, r3
 8002946:	f008 fad3 	bl	800aef0 <memcpy>
      offset += length_message_type;
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4413      	add	r3, r2
 8002950:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc5e 	bl	8000218 <strlen>
 800295c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fa16 	bl	8003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3304      	adds	r3, #4
 8002970:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	18d0      	adds	r0, r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4619      	mov	r1, r3
 8002980:	f008 fab6 	bl	800aef0 <memcpy>
      offset += length_md5sum;
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4413      	add	r3, r2
 800299a:	b2ca      	uxtb	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	0a19      	lsrs	r1, r3, #8
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0c19      	lsrs	r1, r3, #16
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3302      	adds	r3, #2
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	0e19      	lsrs	r1, r3, #24
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3303      	adds	r3, #3
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	61fb      	str	r3, [r7, #28]
      return offset;
 80029d4:	69fb      	ldr	r3, [r7, #28]
    }
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08a      	sub	sp, #40	@ 0x28
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	3301      	adds	r3, #1
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	440b      	add	r3, r1
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	441a      	add	r2, r3
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f9d3 	bl	8003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	3304      	adds	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3a:	e00b      	b.n	8002a54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	441a      	add	r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	3b01      	subs	r3, #1
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	440b      	add	r3, r1
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4413      	add	r3, r2
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3ed      	bcc.n	8002a3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4413      	add	r3, r2
 8002a66:	3b01      	subs	r3, #1
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	4413      	add	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	441a      	add	r2, r3
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 f9a0 	bl	8003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	e00b      	b.n	8002aba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	441a      	add	r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	440b      	add	r3, r1
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3ed      	bcc.n	8002aa2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	3b01      	subs	r3, #1
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	441a      	add	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	441a      	add	r2, r3
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f96d 	bl	8003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	3304      	adds	r3, #4
 8002b00:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e00b      	b.n	8002b20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	441a      	add	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	440b      	add	r3, r1
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d3ed      	bcc.n	8002b08 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	3b01      	subs	r3, #1
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	6839      	ldr	r1, [r7, #0]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	3301      	adds	r3, #1
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	440b      	add	r3, r1
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	440b      	add	r3, r1
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	440b      	add	r3, r1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	61bb      	str	r3, [r7, #24]
     return offset;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3728      	adds	r7, #40	@ 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	0800b1bc 	.word	0x0800b1bc

08002bcc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4b03      	ldr	r3, [pc, #12]	@ (8002be4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	0800b1d8 	.word	0x0800b1d8

08002be8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fd34 	bl	8002660 <_ZN3ros3MsgC1Ev>
 8002bf8:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	601a      	str	r2, [r3, #0]
      level(0),
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	711a      	strb	r2, [r3, #4]
      msg("")
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002c08:	609a      	str	r2, [r3, #8]
    {
    }
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0800b4c0 	.word	0x0800b4c0
 8002c18:	0800b1b8 	.word	0x0800b1b8

08002c1c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	7912      	ldrb	r2, [r2, #4]
 8002c34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fae9 	bl	8000218 <strlen>
 8002c46:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 f8a1 	bl	8003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	18d0      	adds	r0, r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f008 f941 	bl	800aef0 <memcpy>
      offset += length_msg;
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c76:	68fb      	ldr	r3, [r7, #12]
    }
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 f892 	bl	8003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00b      	b.n	8002cd6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	440b      	add	r3, r1
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3ed      	bcc.n	8002cbe <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
     return offset;
 8002d06:	693b      	ldr	r3, [r7, #16]
    }
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	0800b1fc 	.word	0x0800b1fc

08002d2c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	0800b210 	.word	0x0800b210

08002d48 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fc84 	bl	8002660 <_ZN3ros3MsgC1Ev>
 8002d58:	4a0c      	ldr	r2, [pc, #48]	@ (8002d8c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0800b4a8 	.word	0x0800b4a8

08002d90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	@ 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	b2ca      	uxtb	r2, r1
 8002daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0a19      	lsrs	r1, r3, #8
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	3301      	adds	r3, #1
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	b2ca      	uxtb	r2, r1
 8002dbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0c19      	lsrs	r1, r3, #16
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	b2ca      	uxtb	r2, r1
 8002dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0e19      	lsrs	r1, r3, #24
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	3303      	adds	r3, #3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	3304      	adds	r3, #4
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	e02a      	b.n	8002e44 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	b2ca      	uxtb	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	0a19      	lsrs	r1, r3, #8
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	3301      	adds	r3, #1
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	b2ca      	uxtb	r2, r1
 8002e16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	0c19      	lsrs	r1, r3, #16
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	3302      	adds	r3, #2
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	b2ca      	uxtb	r2, r1
 8002e26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	0e19      	lsrs	r1, r3, #24
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	3303      	adds	r3, #3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	3301      	adds	r3, #1
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3cf      	bcc.n	8002dee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	b2ca      	uxtb	r2, r1
 8002e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	0a19      	lsrs	r1, r3, #8
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	0c19      	lsrs	r1, r3, #16
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	3302      	adds	r3, #2
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2ca      	uxtb	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	0e19      	lsrs	r1, r3, #24
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	3303      	adds	r3, #3
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	3304      	adds	r3, #4
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	e02a      	b.n	8002ef4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b2ca      	uxtb	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	0a19      	lsrs	r1, r3, #8
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b2ca      	uxtb	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	0c19      	lsrs	r1, r3, #16
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	3302      	adds	r3, #2
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	b2ca      	uxtb	r2, r1
 8002ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0e19      	lsrs	r1, r3, #24
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	3303      	adds	r3, #3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b2ca      	uxtb	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	3304      	adds	r3, #4
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3cf      	bcc.n	8002e9e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69d9      	ldr	r1, [r3, #28]
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	b2ca      	uxtb	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	0a19      	lsrs	r1, r3, #8
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	3301      	adds	r3, #1
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	b2ca      	uxtb	r2, r1
 8002f1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	0c19      	lsrs	r1, r3, #16
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	3302      	adds	r3, #2
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b2ca      	uxtb	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	0e19      	lsrs	r1, r3, #24
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	3303      	adds	r3, #3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2ca      	uxtb	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	3304      	adds	r3, #4
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e027      	b.n	8002f9e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd f95c 	bl	8000218 <strlen>
 8002f60:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	6979      	ldr	r1, [r7, #20]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ff14 	bl	8003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	3304      	adds	r3, #4
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	18d0      	adds	r0, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f007 ffb0 	bl	800aef0 <memcpy>
      offset += length_stringsi;
 8002f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	4413      	add	r3, r2
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3d2      	bcc.n	8002f4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002faa:	4618      	mov	r0, r3
 8002fac:	3728      	adds	r7, #40	@ 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08e      	sub	sp, #56	@ 0x38
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fcc:	3301      	adds	r3, #1
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	3302      	adds	r3, #2
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	6a3a      	ldr	r2, [r7, #32]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003002:	3304      	adds	r3, #4
 8003004:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d90a      	bls.n	8003026 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f007 fefe 	bl	800ae1c <realloc>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800302c:	2300      	movs	r3, #0
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003030:	e035      	b.n	800309e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	440a      	add	r2, r1
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	3301      	adds	r3, #1
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	440b      	add	r3, r1
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305a:	3302      	adds	r3, #2
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	440b      	add	r3, r1
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306c:	3303      	adds	r3, #3
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	440b      	add	r3, r1
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003082:	3304      	adds	r3, #4
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	3301      	adds	r3, #1
 800309c:	633b      	str	r3, [r7, #48]	@ 0x30
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3c4      	bcc.n	8003032 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b4:	3301      	adds	r3, #1
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c6:	3302      	adds	r3, #2
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	3303      	adds	r3, #3
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	3304      	adds	r3, #4
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d90a      	bls.n	800310e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f007 fe8a 	bl	800ae1c <realloc>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003118:	e035      	b.n	8003186 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003122:	6839      	ldr	r1, [r7, #0]
 8003124:	440a      	add	r2, r1
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	3301      	adds	r3, #1
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	440b      	add	r3, r1
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	3302      	adds	r3, #2
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	440b      	add	r3, r1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	041b      	lsls	r3, r3, #16
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	3303      	adds	r3, #3
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	440b      	add	r3, r1
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	3304      	adds	r3, #4
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	3214      	adds	r2, #20
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	3301      	adds	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d3c4      	bcc.n	800311a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4413      	add	r3, r2
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	3301      	adds	r3, #1
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ae:	3302      	adds	r3, #2
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c0:	3303      	adds	r3, #3
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	3304      	adds	r3, #4
 80031d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d90a      	bls.n	80031f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f007 fe16 	bl	800ae1c <realloc>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003200:	e03e      	b.n	8003280 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	441a      	add	r2, r3
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fde1 	bl	8003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	3304      	adds	r3, #4
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
 800321e:	e00b      	b.n	8003238 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	441a      	add	r2, r3
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	3b01      	subs	r3, #1
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	440b      	add	r3, r1
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	3301      	adds	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
 8003238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003240:	429a      	cmp	r2, r3
 8003242:	d3ed      	bcc.n	8003220 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4413      	add	r3, r2
 800324a:	3b01      	subs	r3, #1
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003256:	3b01      	subs	r3, #1
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	441a      	add	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	3220      	adds	r2, #32
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	3301      	adds	r3, #1
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003286:	429a      	cmp	r2, r3
 8003288:	d3bb      	bcc.n	8003202 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800328c:	4618      	mov	r0, r3
 800328e:	3738      	adds	r7, #56	@ 0x38
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	0800b3cc 	.word	0x0800b3cc

080032b0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	0800b234 	.word	0x0800b234

080032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68d8      	ldr	r0, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6891      	ldr	r1, [r2, #8]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	4798      	blx	r3
 8003318:	4603      	mov	r3, r0
  };
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
  }
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0c      	ldr	r2, [pc, #48]	@ (80033a0 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003380:	461a      	mov	r2, r3
 8003382:	2300      	movs	r3, #0
 8003384:	6093      	str	r3, [r2, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800338c:	461a      	mov	r2, r3
 800338e:	2300      	movs	r3, #0
 8003390:	60d3      	str	r3, [r2, #12]
    }
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	200002f4 	.word	0x200002f4

080033a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f804 	bl	80033ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ce:	4619      	mov	r1, r3
 80033d0:	f006 f8d6 	bl	8009580 <HAL_UART_Receive_DMA>
    }
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ffa2 	bl	800333a <_ZN13STM32Hardware10getRdmaIndEv>
 80033f6:	4603      	mov	r3, r0
 80033f8:	429c      	cmp	r4, r3
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800340c:	1c59      	adds	r1, r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003422:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 800342c:	68fb      	ldr	r3, [r7, #12]
    }
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
	...

08003438 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	2b20      	cmp	r3, #32
 800344a:	d108      	bne.n	800345e <_ZN13STM32Hardware5flushEv+0x26>
 800344c:	4b2c      	ldr	r3, [pc, #176]	@ (8003500 <_ZN13STM32Hardware5flushEv+0xc8>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f083 0301 	eor.w	r3, r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <_ZN13STM32Hardware5flushEv+0x26>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <_ZN13STM32Hardware5flushEv+0x28>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d049      	beq.n	80034f8 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003464:	4b26      	ldr	r3, [pc, #152]	@ (8003500 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	429a      	cmp	r2, r3
 800347c:	d039      	beq.n	80034f2 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d20c      	bcs.n	80034ac <_ZN13STM32Hardware5flushEv+0x74>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	e007      	b.n	80034bc <_ZN13STM32Hardware5flushEv+0x84>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f005 ffd3 	bl	8009480 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	4413      	add	r3, r2
 80034e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034f0:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80034f2:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <_ZN13STM32Hardware5flushEv+0xc8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
      }
    }
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000575 	.word	0x20000575

08003504 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351a:	bfa8      	it	ge
 800351c:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8003520:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4293      	cmp	r3, r2
 8003532:	bf28      	it	cs
 8003534:	4613      	movcs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f007 fccf 	bl	800aef0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4413      	add	r3, r2
 800355e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003568:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	429a      	cmp	r2, r3
 8003570:	d00b      	beq.n	800358a <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	18d1      	adds	r1, r2, r3
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	461a      	mov	r2, r3
 8003586:	f007 fcb3 	bl	800aef0 <memcpy>
      }

      flush();
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff54 	bl	8003438 <_ZN13STM32Hardware5flushEv>
    }
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	f002 fa0c 	bl	80059bc <HAL_GetTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
      data(0)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff f850 	bl	8002660 <_ZN3ros3MsgC1Ev>
 80035c0:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <_ZN8std_msgs5Int32C1Ev+0x28>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
    {
    }
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	0800b464 	.word	0x0800b464

080035dc <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	b2ca      	uxtb	r2, r1
 80035fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0a19      	lsrs	r1, r3, #8
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3301      	adds	r3, #1
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	b2ca      	uxtb	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	0c19      	lsrs	r1, r3, #16
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3302      	adds	r3, #2
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0e19      	lsrs	r1, r3, #24
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3303      	adds	r3, #3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	b2ca      	uxtb	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
      return offset;
 8003632:	68fb      	ldr	r3, [r7, #12]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	440a      	add	r2, r1
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3301      	adds	r3, #1
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	440b      	add	r3, r1
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	4313      	orrs	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3302      	adds	r3, #2
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	440b      	add	r3, r1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	4313      	orrs	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3303      	adds	r3, #3
 800368a:	6839      	ldr	r1, [r7, #0]
 800368c:	440b      	add	r3, r1
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4313      	orrs	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3304      	adds	r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
     return offset;
 80036a2:	68fb      	ldr	r3, [r7, #12]
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	0800b258 	.word	0x0800b258

080036cc <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	0800b268 	.word	0x0800b268

080036e8 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
      data(0)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe ffb4 	bl	8002660 <_ZN3ros3MsgC1Ev>
 80036f8:	4a05      	ldr	r2, [pc, #20]	@ (8003710 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	711a      	strb	r2, [r3, #4]
    {
    }
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	0800b44c 	.word	0x0800b44c

08003714 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	791b      	ldrb	r3, [r3, #4]
 8003726:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	4413      	add	r3, r2
 800372e:	7a3a      	ldrb	r2, [r7, #8]
 8003730:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
      return offset;
 8003738:	68fb      	ldr	r3, [r7, #12]
    }
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003758:	7a3a      	ldrb	r2, [r7, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	440b      	add	r3, r1
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	b2db      	uxtb	r3, r3
 8003766:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003768:	7a3a      	ldrb	r2, [r7, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
     return offset;
 8003774:	68fb      	ldr	r3, [r7, #12]
    }
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	0800b28c 	.word	0x0800b28c

080037a0 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4b03      	ldr	r3, [pc, #12]	@ (80037b8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	0800b29c 	.word	0x0800b29c

080037bc <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
      data(0)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe ff4a 	bl	8002660 <_ZN3ros3MsgC1Ev>
 80037cc:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <_ZN8std_msgs7Float64C1Ev+0x30>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	0800b434 	.word	0x0800b434

080037f0 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003804:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	4401      	add	r1, r0
 8003812:	b2d3      	uxtb	r3, r2
 8003814:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	0a02      	lsrs	r2, r0, #8
 8003824:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003828:	0a0b      	lsrs	r3, r1, #8
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	3101      	adds	r1, #1
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	4401      	add	r1, r0
 8003832:	b2d3      	uxtb	r3, r2
 8003834:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	0c02      	lsrs	r2, r0, #16
 8003844:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003848:	0c0b      	lsrs	r3, r1, #16
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	3102      	adds	r1, #2
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	4401      	add	r1, r0
 8003852:	b2d3      	uxtb	r3, r2
 8003854:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003856:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	0e02      	lsrs	r2, r0, #24
 8003864:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003868:	0e0b      	lsrs	r3, r1, #24
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	3103      	adds	r1, #3
 800386e:	6838      	ldr	r0, [r7, #0]
 8003870:	4401      	add	r1, r0
 8003872:	b2d3      	uxtb	r3, r2
 8003874:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	000a      	movs	r2, r1
 8003884:	2300      	movs	r3, #0
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	3104      	adds	r1, #4
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	4401      	add	r1, r0
 800388e:	b2d3      	uxtb	r3, r2
 8003890:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	0a0a      	lsrs	r2, r1, #8
 80038a0:	2300      	movs	r3, #0
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	3105      	adds	r1, #5
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	4401      	add	r1, r0
 80038aa:	b2d3      	uxtb	r3, r2
 80038ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80038ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	0c0a      	lsrs	r2, r1, #16
 80038bc:	2300      	movs	r3, #0
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	3106      	adds	r1, #6
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	4401      	add	r1, r0
 80038c6:	b2d3      	uxtb	r3, r2
 80038c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80038ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	0e0a      	lsrs	r2, r1, #24
 80038d8:	2300      	movs	r3, #0
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	3107      	adds	r1, #7
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	4401      	add	r1, r0
 80038e2:	b2d3      	uxtb	r3, r2
 80038e4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3308      	adds	r3, #8
 80038ea:	617b      	str	r3, [r7, #20]
      return offset;
 80038ec:	697b      	ldr	r3, [r7, #20]
    }
 80038ee:	4618      	mov	r0, r3
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038fe:	b0a3      	sub	sp, #140	@ 0x8c
 8003900:	af00      	add	r7, sp, #0
 8003902:	6778      	str	r0, [r7, #116]	@ 0x74
 8003904:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003918:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800391c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2200      	movs	r2, #0
 800392a:	461c      	mov	r4, r3
 800392c:	4615      	mov	r5, r2
 800392e:	ea40 0804 	orr.w	r8, r0, r4
 8003932:	ea41 0905 	orr.w	r9, r1, r5
 8003936:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800393a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800393e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2200      	movs	r2, #0
 800394e:	469a      	mov	sl, r3
 8003950:	4693      	mov	fp, r2
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800395e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003962:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003966:	ea40 0402 	orr.w	r4, r0, r2
 800396a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800396c:	430b      	orrs	r3, r1
 800396e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003970:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003974:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003978:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800397c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2200      	movs	r2, #0
 800398c:	663b      	str	r3, [r7, #96]	@ 0x60
 800398e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800399c:	464c      	mov	r4, r9
 800399e:	0423      	lsls	r3, r4, #16
 80039a0:	4644      	mov	r4, r8
 80039a2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039a6:	4644      	mov	r4, r8
 80039a8:	0422      	lsls	r2, r4, #16
 80039aa:	ea40 0402 	orr.w	r4, r0, r2
 80039ae:	65bc      	str	r4, [r7, #88]	@ 0x58
 80039b0:	430b      	orrs	r3, r1
 80039b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80039b8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039c4:	1cda      	adds	r2, r3, #3
 80039c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c8:	4413      	add	r3, r2
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80039d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80039d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80039d8:	4623      	mov	r3, r4
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039de:	4623      	mov	r3, r4
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80039e8:	4623      	mov	r3, r4
 80039ea:	4303      	orrs	r3, r0
 80039ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ee:	462b      	mov	r3, r5
 80039f0:	430b      	orrs	r3, r1
 80039f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80039f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80039fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a08:	4413      	add	r3, r2
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003a1e:	0023      	movs	r3, r4
 8003a20:	2200      	movs	r2, #0
 8003a22:	ea40 0402 	orr.w	r4, r0, r2
 8003a26:	633c      	str	r4, [r7, #48]	@ 0x30
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003a30:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3c:	1d5a      	adds	r2, r3, #5
 8003a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003a56:	0223      	lsls	r3, r4, #8
 8003a58:	2200      	movs	r2, #0
 8003a5a:	ea40 0402 	orr.w	r4, r0, r2
 8003a5e:	623c      	str	r4, [r7, #32]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a64:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003a68:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a74:	3306      	adds	r3, #6
 8003a76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	61fa      	str	r2, [r7, #28]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	69bc      	ldr	r4, [r7, #24]
 8003a8e:	0423      	lsls	r3, r4, #16
 8003a90:	2200      	movs	r2, #0
 8003a92:	ea40 0402 	orr.w	r4, r0, r2
 8003a96:	613c      	str	r4, [r7, #16]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003aa0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003aa4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aac:	3307      	adds	r3, #7
 8003aae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	68bc      	ldr	r4, [r7, #8]
 8003ac6:	0623      	lsls	r3, r4, #24
 8003ac8:	2200      	movs	r2, #0
 8003aca:	ea40 0402 	orr.w	r4, r0, r2
 8003ace:	603c      	str	r4, [r7, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ad8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8003adc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003ae0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003ae2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aea:	3308      	adds	r3, #8
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8003af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8003af4:	4618      	mov	r0, r3
 8003af6:	378c      	adds	r7, #140	@ 0x8c
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003afe:	4770      	bx	lr

08003b00 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	4b03      	ldr	r3, [pc, #12]	@ (8003b18 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	0800b2c0 	.word	0x0800b2c0

08003b1c <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	4b03      	ldr	r3, [pc, #12]	@ (8003b34 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	0800b2d4 	.word	0x0800b2d4

08003b38 <_ZN4ROS14initEv>:
namespace ROS1 {
  /**
   * @brief ROS1 節點宣告。
   * @param void
   */
  void init(void){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003b3c:	4818      	ldr	r0, [pc, #96]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b3e:	f000 fa73 	bl	8004028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.advertise(pub_gripper);
 8003b42:	4918      	ldr	r1, [pc, #96]	@ (8003ba4 <_ZN4ROS14initEv+0x6c>)
 8003b44:	4816      	ldr	r0, [pc, #88]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b46:	f000 fa98 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_basket);
 8003b4a:	4917      	ldr	r1, [pc, #92]	@ (8003ba8 <_ZN4ROS14initEv+0x70>)
 8003b4c:	4814      	ldr	r0, [pc, #80]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b4e:	f000 fa94 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_elevator);
 8003b52:	4916      	ldr	r1, [pc, #88]	@ (8003bac <_ZN4ROS14initEv+0x74>)
 8003b54:	4812      	ldr	r0, [pc, #72]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b56:	f000 fa90 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_touch);
 8003b5a:	4915      	ldr	r1, [pc, #84]	@ (8003bb0 <_ZN4ROS14initEv+0x78>)
 8003b5c:	4810      	ldr	r0, [pc, #64]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b5e:	f000 fa8c 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_y);
 8003b62:	4914      	ldr	r1, [pc, #80]	@ (8003bb4 <_ZN4ROS14initEv+0x7c>)
 8003b64:	480e      	ldr	r0, [pc, #56]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b66:	f000 fa88 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_theta);
 8003b6a:	4913      	ldr	r1, [pc, #76]	@ (8003bb8 <_ZN4ROS14initEv+0x80>)
 8003b6c:	480c      	ldr	r0, [pc, #48]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b6e:	f000 fa84 	bl	800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    nh.subscribe(sub_gripper);
 8003b72:	4912      	ldr	r1, [pc, #72]	@ (8003bbc <_ZN4ROS14initEv+0x84>)
 8003b74:	480a      	ldr	r0, [pc, #40]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b76:	f000 fab0 	bl	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_elevatorHeight);
 8003b7a:	4911      	ldr	r1, [pc, #68]	@ (8003bc0 <_ZN4ROS14initEv+0x88>)
 8003b7c:	4808      	ldr	r0, [pc, #32]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b7e:	f000 fad7 	bl	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_basketDoor);
 8003b82:	4910      	ldr	r1, [pc, #64]	@ (8003bc4 <_ZN4ROS14initEv+0x8c>)
 8003b84:	4806      	ldr	r0, [pc, #24]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b86:	f000 faa8 	bl	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_turn);
 8003b8a:	490f      	ldr	r1, [pc, #60]	@ (8003bc8 <_ZN4ROS14initEv+0x90>)
 8003b8c:	4804      	ldr	r0, [pc, #16]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b8e:	f000 facf 	bl	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_forward);
 8003b92:	490e      	ldr	r1, [pc, #56]	@ (8003bcc <_ZN4ROS14initEv+0x94>)
 8003b94:	4802      	ldr	r0, [pc, #8]	@ (8003ba0 <_ZN4ROS14initEv+0x68>)
 8003b96:	f000 facb 	bl	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>

    return;
 8003b9a:	bf00      	nop
  }
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000578 	.word	0x20000578
 8003ba4:	20001abc 	.word	0x20001abc
 8003ba8:	20001af4 	.word	0x20001af4
 8003bac:	20001b18 	.word	0x20001b18
 8003bb0:	20001ad8 	.word	0x20001ad8
 8003bb4:	20001b50 	.word	0x20001b50
 8003bb8:	20001b64 	.word	0x20001b64
 8003bbc:	20001b78 	.word	0x20001b78
 8003bc0:	20001bcc 	.word	0x20001bcc
 8003bc4:	20001be8 	.word	0x20001be8
 8003bc8:	20001b94 	.word	0x20001b94
 8003bcc:	20001bb0 	.word	0x20001bb0

08003bd0 <_ZN4ROS19spinCycleEv>:

  /**
   * @brief ROS1 循環單位。
   * @param void
   */
  void spinCycle(void){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003bd4:	4802      	ldr	r0, [pc, #8]	@ (8003be0 <_ZN4ROS19spinCycleEv+0x10>)
 8003bd6:	f000 fad6 	bl	8004186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
    return;
 8003bda:	bf00      	nop
  }
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000578 	.word	0x20000578

08003be4 <_ZN4ROS110_pub_touchEv>:

  void _pub_touch(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	touchFinish.data = table_isTouch;
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <_ZN4ROS110_pub_touchEv+0x18>)
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003bee:	711a      	strb	r2, [r3, #4]
	pub_touch.publish(&touchFinish);
 8003bf0:	4903      	ldr	r1, [pc, #12]	@ (8003c00 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003bf2:	4804      	ldr	r0, [pc, #16]	@ (8003c04 <_ZN4ROS110_pub_touchEv+0x20>)
 8003bf4:	f7ff fb81 	bl	80032fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	return;
 8003bf8:	bf00      	nop
  }
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000545 	.word	0x20000545
 8003c00:	20001ad0 	.word	0x20001ad0
 8003c04:	20001ad8 	.word	0x20001ad8

08003c08 <_ZN4ROS112_pub_gripperEv>:
  void _pub_gripper(void){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
    gripperFinish.data = _gripperFinish;
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <_ZN4ROS112_pub_gripperEv+0x18>)
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c12:	711a      	strb	r2, [r3, #4]
    //	gripperIsGet = 0;
    pub_gripper.publish(&gripperFinish);
 8003c14:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c16:	4804      	ldr	r0, [pc, #16]	@ (8003c28 <_ZN4ROS112_pub_gripperEv+0x20>)
 8003c18:	f7ff fb6f 	bl	80032fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c1c:	bf00      	nop
  }
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000574 	.word	0x20000574
 8003c24:	20001ab4 	.word	0x20001ab4
 8003c28:	20001abc 	.word	0x20001abc

08003c2c <_ZN4ROS16_pub_yEv>:
  void _pub_elevator(void){
    elevatorHeight.data = high;
    pub_basket.publish(&basketFinish);
    return;
  }
  void _pub_y(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    current_y.data = _current_y;
 8003c30:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <_ZN4ROS16_pub_yEv+0x24>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fc5b 	bl	80004f0 <__aeabi_f2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4905      	ldr	r1, [pc, #20]	@ (8003c54 <_ZN4ROS16_pub_yEv+0x28>)
 8003c40:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_y.publish(&current_y);
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <_ZN4ROS16_pub_yEv+0x28>)
 8003c46:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <_ZN4ROS16_pub_yEv+0x2c>)
 8003c48:	f7ff fb57 	bl	80032fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c4c:	bf00      	nop
  }
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000056c 	.word	0x2000056c
 8003c54:	20001b30 	.word	0x20001b30
 8003c58:	20001b50 	.word	0x20001b50

08003c5c <_ZN4ROS110_pub_thetaEv>:
  void _pub_theta(void){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
    current_theta.data = _current_theta;
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <_ZN4ROS110_pub_thetaEv+0x24>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc43 	bl	80004f0 <__aeabi_f2d>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4905      	ldr	r1, [pc, #20]	@ (8003c84 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c70:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_theta.publish(&current_theta);
 8003c74:	4903      	ldr	r1, [pc, #12]	@ (8003c84 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c76:	4804      	ldr	r0, [pc, #16]	@ (8003c88 <_ZN4ROS110_pub_thetaEv+0x2c>)
 8003c78:	f7ff fb3f 	bl	80032fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c7c:	bf00      	nop
  }
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000570 	.word	0x20000570
 8003c84:	20001b40 	.word	0x20001b40
 8003c88:	20001b64 	.word	0x20001b64

08003c8c <_ZN4ROS113callback_turnERKN8std_msgs5Int32E>:

  void callback_turn(const std_msgs::Int32 &msg){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	  if(isTop == 1){
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x2c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x1c>
		  middleTurn(msg.data);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fbf5 	bl	8002490 <_Z10middleTurni>
	  }
	  else{
		  speeds = 0.5;
	  }
  }
 8003ca6:	e003      	b.n	8003cb0 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x24>
		  speeds = 0.5;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x30>)
 8003caa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003cae:	601a      	str	r2, [r3, #0]
  }
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000544 	.word	0x20000544
 8003cbc:	20000548 	.word	0x20000548

08003cc0 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:
  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	791b      	ldrb	r3, [r3, #4]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fbbd 	bl	800244c <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8003cd2:	bf00      	nop
  }
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZN4ROS116callback_forwardERKN8std_msgs5Int32E>:
  void callback_basketDoor(const std_msgs::Bool &msg){
	basketControl(msg.data);
	return;
   }

  void callback_forward(const std_msgs::Int32 &msg){   //-90~220
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	  forwardToPoint(msg.data);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cee:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf2:	f7fe fc25 	bl	8002540 <_Z14forwardToPointf>
	  return;
 8003cf6:	bf00      	nop
  }
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	  if(table_isTouch == 0){
 8003d08:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x70>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11f      	bne.n	8003d50 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
		if(elevator_type  != -1 && msg.data == -1){
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d009      	beq.n	8003d2e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d104      	bne.n	8003d2e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
			speeds = -0.5;
 8003d24:	4b14      	ldr	r3, [pc, #80]	@ (8003d78 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d26:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e01b      	b.n	8003d66 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		else if(elevator_type  != 3 && msg.data == 1 && isTop == 0){
 8003d2e:	4b11      	ldr	r3, [pc, #68]	@ (8003d74 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d018      	beq.n	8003d68 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d114      	bne.n	8003d68 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x7c>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d110      	bne.n	8003d68 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
			speeds = 0.5;
 8003d46:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d48:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003d4c:	601a      	str	r2, [r3, #0]
	  }
	  else{
		  Motor_updown.heightTo(msg.data);
	  }

    return;
 8003d4e:	e00b      	b.n	8003d68 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
		  Motor_updown.heightTo(msg.data);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	4807      	ldr	r0, [pc, #28]	@ (8003d80 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x80>)
 8003d62:	f7fd fa89 	bl	8001278 <_ZN8DC_motor8heightToEf>
    return;
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
  }
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000545 	.word	0x20000545
 8003d74:	20000558 	.word	0x20000558
 8003d78:	20000548 	.word	0x20000548
 8003d7c:	20000544 	.word	0x20000544
 8003d80:	20000448 	.word	0x20000448

08003d84 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 8003d8c:	bf00      	nop
  }
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e00c      	b.n	8003dc2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	fa22 f103 	lsr.w	r1, r2, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	b2ca      	uxtb	r2, r1
 8003dba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d9ef      	bls.n	8003da8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e010      	b.n	8003e0e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	440a      	add	r2, r1
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	00d2      	lsls	r2, r2, #3
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d9eb      	bls.n	8003dec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	0800b494 	.word	0x0800b494

08003e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ffe8 	bl	8003e24 <_ZN3ros15NodeHandleBase_C1Ev>
 8003e54:	4a47      	ldr	r2, [pc, #284]	@ (8003f74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fa80 	bl	8003364 <_ZN13STM32HardwareC1Ev>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003e76:	3314      	adds	r3, #20
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe ff65 	bl	8002d48 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e00a      	b.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3301      	adds	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	d9f1      	bls.n	8003e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e009      	b.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b18      	cmp	r3, #24
 8003ebe:	d9f2      	bls.n	8003ea6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e00a      	b.n	8003edc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee2:	d3f0      	bcc.n	8003ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	e00a      	b.n	8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f06:	d3f0      	bcc.n	8003eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f46:	461a      	mov	r2, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f54:	461a      	mov	r2, r3
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6213      	str	r3, [r2, #32]
  }
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	0800b420 	.word	0x0800b420

08003f78 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	4a04      	ldr	r2, [pc, #16]	@ (8003f94 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	0800b47c 	.word	0x0800b47c

08003f98 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ffe5 	bl	8003f78 <_ZN3ros11Subscriber_C1Ev>
 8003fae:	4a0b      	ldr	r2, [pc, #44]	@ (8003fdc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fb95 	bl	80036e8 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  };
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800b408 	.word	0x0800b408

08003fe0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ffc1 	bl	8003f78 <_ZN3ros11Subscriber_C1Ev>
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	330c      	adds	r3, #12
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fad5 	bl	80035b0 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
  };
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	0800b3f0 	.word	0x0800b3f0

08004028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff f9b5 	bl	80033a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004040:	461a      	mov	r2, r3
 8004042:	2300      	movs	r3, #0
 8004044:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
    bytes_ = 0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
    index_ = 0;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
    topic_ = 0;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
  };
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e01d      	b.n	80040c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d111      	bne.n	80040c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	60da      	str	r2, [r3, #12]
        return true;
 80040bc:	2301      	movs	r3, #1
 80040be:	e006      	b.n	80040ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	ddde      	ble.n	800408a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80040cc:	2300      	movs	r3, #0
  }
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e018      	b.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10d      	bne.n	8004116 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	605a      	str	r2, [r3, #4]
        return true;
 8004112:	2301      	movs	r3, #1
 8004114:	e006      	b.n	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b18      	cmp	r3, #24
 8004120:	dde3      	ble.n	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x10>
      }
    }
    return false;
 8004122:	2300      	movs	r3, #0
  }
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e018      	b.n	8004172 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800415a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
        return true;
 8004168:	2301      	movs	r3, #1
 800416a:	e006      	b.n	800417a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3301      	adds	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b18      	cmp	r3, #24
 8004176:	dde3      	ble.n	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x10>
    return false;
 8004178:	2300      	movs	r3, #0
  }
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fa00 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 8004198:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d905      	bls.n	80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    if (mode_ != MODE_FIRST_FF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00e      	beq.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d906      	bls.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e0:	461a      	mov	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
      if (spin_timeout_ > 0)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff f9cd 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 80041fe:	4602      	mov	r2, r0
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	bf8c      	ite	hi
 8004210:	2301      	movhi	r3, #1
 8004212:	2300      	movls	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800421a:	f06f 0301 	mvn.w	r3, #1
 800421e:	e226      	b.n	800466e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff f8d9 	bl	80033dc <_ZN13STM32Hardware4readEv>
 800422a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f2c0 81ff 	blt.w	8004632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800423a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4413      	add	r3, r2
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004248:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004252:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004256:	2b07      	cmp	r3, #7
 8004258:	d12d      	bne.n	80042b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004260:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800426c:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	b2d1      	uxtb	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800427c:	3304      	adds	r3, #4
 800427e:	460a      	mov	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004288:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800428c:	3b01      	subs	r3, #1
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004294:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1a0      	bne.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ac:	461a      	mov	r2, r3
 80042ae:	2308      	movs	r3, #8
 80042b0:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80042b4:	e798      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d130      	bne.n	8004326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2bff      	cmp	r3, #255	@ 0xff
 80042c8:	d112      	bne.n	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042d4:	3301      	adds	r3, #1
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042dc:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3314      	adds	r3, #20
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042ea:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 80042ee:	e77b      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f94f 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	bf8c      	ite	hi
 8004308:	2301      	movhi	r3, #1
 800430a:	2300      	movls	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	f43f af6a 	beq.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 8004320:	f06f 0301 	mvn.w	r3, #1
 8004324:	e1a3      	b.n	800466e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004330:	2b01      	cmp	r3, #1
 8004332:	d121      	bne.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2bfe      	cmp	r3, #254	@ 0xfe
 8004338:	d10b      	bne.n	8004352 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004344:	3301      	adds	r3, #1
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800434c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004350:	e74a      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004366:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800436a:	2b00      	cmp	r3, #0
 800436c:	f47f af3c 	bne.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f980 	bl	8004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004376:	e737      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004382:	2b02      	cmp	r3, #2
 8004384:	d120      	bne.n	80043c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043ac:	3301      	adds	r3, #1
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043b4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80043c6:	e70f      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ce:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d118      	bne.n	8004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043dc:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	4413      	add	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043ec:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043fa:	3301      	adds	r3, #1
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004402:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004406:	e6ef      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800440e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004412:	2b04      	cmp	r3, #4
 8004414:	d11f      	bne.n	8004456 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004420:	425a      	negs	r2, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	bf58      	it	pl
 8004428:	4253      	negpl	r3, r2
 800442a:	2bff      	cmp	r3, #255	@ 0xff
 800442c:	d10b      	bne.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004434:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004438:	3301      	adds	r3, #1
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004440:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004444:	e6d0      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004454:	e6c8      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004460:	2b05      	cmp	r3, #5
 8004462:	d119      	bne.n	8004498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004478:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800447c:	3301      	adds	r3, #1
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004484:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 8004496:	e6a7      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d123      	bne.n	80044ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ac:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	4413      	add	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044bc:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c6:	461a      	mov	r2, r3
 80044c8:	2307      	movs	r3, #7
 80044ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f ae85 	bne.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e4:	461a      	mov	r2, r3
 80044e6:	2308      	movs	r3, #8
 80044e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80044ec:	e67c      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	f47f ae75 	bne.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004512:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004516:	425a      	negs	r2, r3
 8004518:	b2db      	uxtb	r3, r3
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	bf58      	it	pl
 800451e:	4253      	negpl	r3, r2
 8004520:	2bff      	cmp	r3, #255	@ 0xff
 8004522:	f47f ae61 	bne.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f89e 	bl	8004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8ba 	bl	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004546:	461a      	mov	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004554:	461a      	mov	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	e085      	b.n	800466e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004568:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800456c:	2b0a      	cmp	r3, #10
 800456e:	d108      	bne.n	8004582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f97c 	bl	8004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004580:	e632      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004588:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800458c:	2b06      	cmp	r3, #6
 800458e:	d112      	bne.n	80045b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8004596:	3314      	adds	r3, #20
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 800459e:	3204      	adds	r2, #4
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fd05 	bl	8002fb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 80045b4:	e618      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045c0:	2b0b      	cmp	r3, #11
 80045c2:	d106      	bne.n	80045d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80045d0:	e60a      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045dc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80045e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f43f adfc 	beq.w	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045fa:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004604:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004612:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800461c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4790      	blx	r2
    while (true)
 8004630:	e5da      	b.n	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004632:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800463e:	2b00      	cmp	r3, #0
 8004640:	d014      	beq.n	800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004648:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004654:	4293      	cmp	r3, r2
 8004656:	d909      	bls.n	800466c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f80c 	bl	8004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004664:	461a      	mov	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    return SPIN_OK;
 800466c:	2300      	movs	r3, #0
  }
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800467e:	f107 030c 	add.w	r3, r7, #12
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fffc 	bl	8002680 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f107 020c 	add.w	r2, r7, #12
 8004692:	210a      	movs	r1, #10
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
    rt_time = hardware_.time();
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe ff7b 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 80046a2:	4602      	mov	r2, r0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046aa:	615a      	str	r2, [r3, #20]
  }
 80046ac:	bf00      	nop
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b08b      	sub	sp, #44	@ 0x2c
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80046bc:	f107 030c 	add.w	r3, r7, #12
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f8cd 	bl	8002860 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	e062      	b.n	8004792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d056      	beq.n	800478c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4608      	mov	r0, r1
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4608      	mov	r0, r1
 800475a:	4798      	blx	r3
 800475c:	4603      	mov	r3, r0
 800475e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004764:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681c      	ldr	r4, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fdd1 	bl	8003322 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004780:	4601      	mov	r1, r0
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	461a      	mov	r2, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	3301      	adds	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	2b18      	cmp	r3, #24
 8004796:	dd99      	ble.n	80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
 800479c:	e05e      	b.n	800485c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d053      	beq.n	8004856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e0:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4608      	mov	r0, r1
 80047f0:	4798      	blx	r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fa:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800480a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4608      	mov	r0, r1
 8004816:	4798      	blx	r3
 8004818:	4603      	mov	r3, r0
 800481a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800481c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004820:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3304      	adds	r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4608      	mov	r0, r1
 8004848:	4798      	blx	r3
 800484a:	4601      	mov	r1, r0
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	461a      	mov	r2, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	3301      	adds	r3, #1
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	2b18      	cmp	r3, #24
 8004860:	dd9d      	ble.n	800479e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 800486e:	bf00      	nop
 8004870:	372c      	adds	r7, #44	@ 0x2c
 8004872:	46bd      	mov	sp, r7
 8004874:	bd90      	pop	{r4, r7, pc}
	...

08004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fefa 	bl	8002680 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fe81 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048a4:	f107 0308 	add.w	r3, r7, #8
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd ff58 	bl	8002760 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4915      	ldr	r1, [pc, #84]	@ (800490c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048b6:	fba1 1303 	umull	r1, r3, r1, r3
 80048ba:	099b      	lsrs	r3, r3, #6
 80048bc:	4413      	add	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80048c0:	6939      	ldr	r1, [r7, #16]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048c6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048d0:	fb00 f303 	mul.w	r3, r0, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	440b      	add	r3, r1
 80048de:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8bf 	bl	8004a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe fe50 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 80048f8:	4602      	mov	r2, r0
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004900:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	10624dd3 	.word	0x10624dd3
 8004910:	000f4240 	.word	0x000f4240

08004914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b63      	cmp	r3, #99	@ 0x63
 8004924:	dd0b      	ble.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800492c:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800493a:	2300      	movs	r3, #0
 800493c:	e090      	b.n	8004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800494a:	3304      	adds	r3, #4
 800494c:	3307      	adds	r3, #7
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4790      	blx	r2
 8004954:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495c:	22ff      	movs	r2, #255	@ 0xff
 800495e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004968:	22fe      	movs	r2, #254	@ 0xfe
 800496a:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004978:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	b29b      	uxth	r3, r3
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	b29b      	uxth	r3, r3
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498c:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004996:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a0:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 80049a4:	4413      	add	r3, r2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b2:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c0:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	121b      	asrs	r3, r3, #8
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d4:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80049dc:	2305      	movs	r3, #5
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e00d      	b.n	80049fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80049ec:	3304      	adds	r3, #4
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3306      	adds	r3, #6
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	ddec      	ble.n	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	425a      	negs	r2, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	bf58      	it	pl
 8004a18:	4253      	negpl	r3, r2
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1c59      	adds	r1, r3, #1
 8004a20:	6179      	str	r1, [r7, #20]
 8004a22:	43d2      	mvns	r2, r2
 8004a24:	b2d1      	uxtb	r1, r2
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a2e:	3304      	adds	r3, #4
 8004a30:	460a      	mov	r2, r1
 8004a32:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3a:	dc0b      	bgt.n	8004a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1d18      	adds	r0, r3, #4
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a46:	3304      	adds	r3, #4
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f7fe fd5a 	bl	8003504 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	e005      	b.n	8004a60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004a54:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f84c 	bl	8004af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	0800b2f8 	.word	0x0800b2f8

08004a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fd8c 	bl	8003598 <_ZN13STM32Hardware4timeEv>
 8004a80:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4917      	ldr	r1, [pc, #92]	@ (8004ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004a8a:	fba1 1303 	umull	r1, r3, r1, r3
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a9a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004aa4:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004aae:	fb00 f303 	mul.w	r3, r0, r3
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8004aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	1aca      	subs	r2, r1, r3
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004abe:	4413      	add	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ac6:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ace:	3318      	adds	r3, #24
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ad6:	321c      	adds	r2, #28
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc f9ea 	bl	8000eb4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	10624dd3 	.word	0x10624dd3
 8004aec:	000f4240 	.word	0x000f4240
 8004af0:	3b9aca00 	.word	0x3b9aca00

08004af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	2103      	movs	r1, #3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f804 	bl	8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f860 	bl	8002be8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f107 0214 	add.w	r2, r7, #20
 8004b3a:	2107      	movs	r1, #7
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	4798      	blx	r3
  }
 8004b40:	bf00      	nop
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d15b      	bne.n	8004c10 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d156      	bne.n	8004c10 <_Z41__static_initialization_and_destruction_0ii+0xc8>
ros::NodeHandle nh;
 8004b62:	482d      	ldr	r0, [pc, #180]	@ (8004c18 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004b64:	f7ff f96e 	bl	8003e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8004b68:	482c      	ldr	r0, [pc, #176]	@ (8004c1c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b6a:	f7fe fdbd 	bl	80036e8 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4a2a      	ldr	r2, [pc, #168]	@ (8004c1c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b72:	492b      	ldr	r1, [pc, #172]	@ (8004c20 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004b74:	482b      	ldr	r0, [pc, #172]	@ (8004c24 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004b76:	f7fe fba9 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool touchFinish;
 8004b7a:	482b      	ldr	r0, [pc, #172]	@ (8004c28 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004b7c:	f7fe fdb4 	bl	80036e8 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_touch("/touch", &touchFinish);
 8004b80:	2300      	movs	r3, #0
 8004b82:	4a29      	ldr	r2, [pc, #164]	@ (8004c28 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004b84:	4929      	ldr	r1, [pc, #164]	@ (8004c2c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004b86:	482a      	ldr	r0, [pc, #168]	@ (8004c30 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004b88:	f7fe fba0 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 8004b8c:	4829      	ldr	r0, [pc, #164]	@ (8004c34 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004b8e:	f7fe fdab 	bl	80036e8 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8004b92:	2300      	movs	r3, #0
 8004b94:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004b96:	4928      	ldr	r1, [pc, #160]	@ (8004c38 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8004b98:	4828      	ldr	r0, [pc, #160]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8004b9a:	f7fe fb97 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 elevatorHeight;
 8004b9e:	4828      	ldr	r0, [pc, #160]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004ba0:	f7fe fe0c 	bl	80037bc <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_elevator("/elevator", &elevatorHeight);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004ba8:	4926      	ldr	r1, [pc, #152]	@ (8004c44 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8004baa:	4827      	ldr	r0, [pc, #156]	@ (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8004bac:	f7fe fb8e 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 current_y;
 8004bb0:	4826      	ldr	r0, [pc, #152]	@ (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004bb2:	f7fe fe03 	bl	80037bc <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 current_theta;
 8004bb6:	4826      	ldr	r0, [pc, #152]	@ (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bb8:	f7fe fe00 	bl	80037bc <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_y("/current_y", &current_y);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4a23      	ldr	r2, [pc, #140]	@ (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004bc0:	4924      	ldr	r1, [pc, #144]	@ (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8004bc2:	4825      	ldr	r0, [pc, #148]	@ (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8004bc4:	f7fe fb82 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_theta("/current_theta", &current_theta);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4a21      	ldr	r2, [pc, #132]	@ (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bcc:	4923      	ldr	r1, [pc, #140]	@ (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8004bce:	4824      	ldr	r0, [pc, #144]	@ (8004c60 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8004bd0:	f7fe fb7c 	bl	80032cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4a23      	ldr	r2, [pc, #140]	@ (8004c64 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004bd8:	4923      	ldr	r1, [pc, #140]	@ (8004c68 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004bda:	4824      	ldr	r0, [pc, #144]	@ (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004bdc:	f7ff f9dc 	bl	8003f98 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_turn("/cmd_servoturn", ROS1::callback_turn);
 8004be0:	2301      	movs	r3, #1
 8004be2:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004be4:	4923      	ldr	r1, [pc, #140]	@ (8004c74 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004be6:	4824      	ldr	r0, [pc, #144]	@ (8004c78 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004be8:	f7ff f9fa 	bl	8003fe0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_forward("/cmd_forward", ROS1::callback_forward);
 8004bec:	2301      	movs	r3, #1
 8004bee:	4a23      	ldr	r2, [pc, #140]	@ (8004c7c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004bf0:	4923      	ldr	r1, [pc, #140]	@ (8004c80 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004bf2:	4824      	ldr	r0, [pc, #144]	@ (8004c84 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004bf4:	f7ff f9f4 	bl	8003fe0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevatorHeight("/cmd_elevator", ROS1::callback_Elevator);
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004bfc:	4923      	ldr	r1, [pc, #140]	@ (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004bfe:	4824      	ldr	r0, [pc, #144]	@ (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004c00:	f7ff f9ee 	bl	8003fe0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8004c04:	2301      	movs	r3, #1
 8004c06:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004c08:	4923      	ldr	r1, [pc, #140]	@ (8004c98 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004c0a:	4824      	ldr	r0, [pc, #144]	@ (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004c0c:	f7ff f9c4 	bl	8003f98 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000578 	.word	0x20000578
 8004c1c:	20001ab4 	.word	0x20001ab4
 8004c20:	0800b334 	.word	0x0800b334
 8004c24:	20001abc 	.word	0x20001abc
 8004c28:	20001ad0 	.word	0x20001ad0
 8004c2c:	0800b340 	.word	0x0800b340
 8004c30:	20001ad8 	.word	0x20001ad8
 8004c34:	20001aec 	.word	0x20001aec
 8004c38:	0800b348 	.word	0x0800b348
 8004c3c:	20001af4 	.word	0x20001af4
 8004c40:	20001b08 	.word	0x20001b08
 8004c44:	0800b350 	.word	0x0800b350
 8004c48:	20001b18 	.word	0x20001b18
 8004c4c:	20001b30 	.word	0x20001b30
 8004c50:	20001b40 	.word	0x20001b40
 8004c54:	0800b35c 	.word	0x0800b35c
 8004c58:	20001b50 	.word	0x20001b50
 8004c5c:	0800b368 	.word	0x0800b368
 8004c60:	20001b64 	.word	0x20001b64
 8004c64:	08003cc1 	.word	0x08003cc1
 8004c68:	0800b378 	.word	0x0800b378
 8004c6c:	20001b78 	.word	0x20001b78
 8004c70:	08003c8d 	.word	0x08003c8d
 8004c74:	0800b38c 	.word	0x0800b38c
 8004c78:	20001b94 	.word	0x20001b94
 8004c7c:	08003cdb 	.word	0x08003cdb
 8004c80:	0800b39c 	.word	0x0800b39c
 8004c84:	20001bb0 	.word	0x20001bb0
 8004c88:	08003d01 	.word	0x08003d01
 8004c8c:	0800b3ac 	.word	0x0800b3ac
 8004c90:	20001bcc 	.word	0x20001bcc
 8004c94:	08003d85 	.word	0x08003d85
 8004c98:	0800b3bc 	.word	0x0800b3bc
 8004c9c:	20001be8 	.word	0x20001be8

08004ca0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	330c      	adds	r3, #12
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fcc5 	bl	8003640 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	320c      	adds	r2, #12
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4798      	blx	r3
  }
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
  }
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	330c      	adds	r3, #12
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fcde 	bl	80036b0 <_ZN8std_msgs5Int327getTypeEv>
 8004cf4:	4603      	mov	r3, r0
  }
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fcde 	bl	80036cc <_ZN8std_msgs5Int326getMD5Ev>
 8004d10:	4603      	mov	r3, r0
  }
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	330c      	adds	r3, #12
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fd0b 	bl	8003746 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	320c      	adds	r2, #12
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
  }
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
  }
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	330c      	adds	r3, #12
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fd0b 	bl	8003784 <_ZN8std_msgs4Bool7getTypeEv>
 8004d6e:	4603      	mov	r3, r0
  }
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	330c      	adds	r3, #12
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fe fd0b 	bl	80037a0 <_ZN8std_msgs4Bool6getMD5Ev>
 8004d8a:	4603      	mov	r3, r0
  }
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    return configured_;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da2:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <_GLOBAL__sub_I_nh>:
 8004db2:	b580      	push	{r7, lr}
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f7ff fec4 	bl	8004b48 <_Z41__static_initialization_and_destruction_0ii>
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f002 fe54 	bl	8007a84 <HAL_TIM_PWM_Start>
	write(startAngle);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f804 	bl	8004dec <_ZN5Servo5writeEi>
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	angle = ang;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e28:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e38:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e40:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e50:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5c:	dd08      	ble.n	8004e70 <_ZN5Servo5writeEi+0x84>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6a:	edc7 7a03 	vstr	s15, [r7, #12]
 8004e6e:	e014      	b.n	8004e9a <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e88:	d507      	bpl.n	8004e9a <_ZN5Servo5writeEi+0xae>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e96:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <_ZN5Servo5writeEi+0xcc>
 8004ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	ee17 2a90 	vmov	r2, s15
 8004eb4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004eb6:	e045      	b.n	8004f44 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d10a      	bne.n	8004ed6 <_ZN5Servo5writeEi+0xea>
 8004ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	ee17 2a90 	vmov	r2, s15
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004ed4:	e036      	b.n	8004f44 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d10a      	bne.n	8004ef4 <_ZN5Servo5writeEi+0x108>
 8004ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	ee17 2a90 	vmov	r2, s15
 8004ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004ef2:	e027      	b.n	8004f44 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b0c      	cmp	r3, #12
 8004efa:	d10a      	bne.n	8004f12 <_ZN5Servo5writeEi+0x126>
 8004efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	ee17 2a90 	vmov	r2, s15
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004f10:	e018      	b.n	8004f44 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d10a      	bne.n	8004f30 <_ZN5Servo5writeEi+0x144>
 8004f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	ee17 2a90 	vmov	r2, s15
 8004f2c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004f2e:	e009      	b.n	8004f44 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	@ 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	f300 80b0 	bgt.w	80050c8 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f2c0 80ae 	blt.w	80050cc <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 8004f84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f8c:	ee17 3a90 	vmov	r3, s15
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfb8      	it	lt
 8004f94:	425b      	neglt	r3, r3
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa8:	ee17 0a90 	vmov	r0, s15
 8004fac:	f7fb faa0 	bl	80004f0 <__aeabi_f2d>
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80050e0 <_ZN5Servo6turnToEii+0x190>)
 8004fb6:	f7fb fc1d 	bl	80007f4 <__aeabi_ddiv>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	4b47      	ldr	r3, [pc, #284]	@ (80050e4 <_ZN5Servo6turnToEii+0x194>)
 8004fc8:	f7fb faea 	bl	80005a0 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f7fb fda6 	bl	8000b24 <__aeabi_d2f>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4a43      	ldr	r2, [pc, #268]	@ (80050e8 <_ZN5Servo6turnToEii+0x198>)
 8004fdc:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 8004fde:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <_ZN5Servo6turnToEii+0x198>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb fa84 	bl	80004f0 <__aeabi_f2d>
 8004fe8:	a33b      	add	r3, pc, #236	@ (adr r3, 80050d8 <_ZN5Servo6turnToEii+0x188>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fad7 	bl	80005a0 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f7fb fd93 	bl	8000b24 <__aeabi_d2f>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4a39      	ldr	r2, [pc, #228]	@ (80050e8 <_ZN5Servo6turnToEii+0x198>)
 8005002:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800500e:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <_ZN5Servo6turnToEii+0x198>)
 8005010:	edd3 7a00 	vldr	s15, [r3]
 8005014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	d510      	bpl.n	8005040 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 800501e:	4b32      	ldr	r3, [pc, #200]	@ (80050e8 <_ZN5Servo6turnToEii+0x198>)
 8005020:	edd3 7a00 	vldr	s15, [r3]
 8005024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005028:	ee17 3a90 	vmov	r3, s15
 800502c:	607b      	str	r3, [r7, #4]
		write(ang);
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fedb 	bl	8004dec <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 8005036:	492d      	ldr	r1, [pc, #180]	@ (80050ec <_ZN5Servo6turnToEii+0x19c>)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fc ffcb 	bl	8001fd4 <_Z4waitiP17TIM_HandleTypeDef>
		return;
 800503e:	e046      	b.n	80050ce <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 8005040:	230a      	movs	r3, #10
 8005042:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61fb      	str	r3, [r7, #28]
	t = 0;
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <_ZN5Servo6turnToEii+0x1a0>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1a3 0209 	sub.w	r2, r3, #9
 8005056:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <_ZN5Servo6turnToEii+0x1a0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	dd2e      	ble.n	80050bc <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 800505e:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <_ZN5Servo6turnToEii+0x1a0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005078:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005086:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800508a:	edd7 7a06 	vldr	s15, [r7, #24]
 800508e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800509a:	ee17 3a90 	vmov	r3, s15
 800509e:	617b      	str	r3, [r7, #20]
		write(a);
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff fea2 	bl	8004dec <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 80050a8:	4910      	ldr	r1, [pc, #64]	@ (80050ec <_ZN5Servo6turnToEii+0x19c>)
 80050aa:	200a      	movs	r0, #10
 80050ac:	f7fc ff92 	bl	8001fd4 <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <_ZN5Servo6turnToEii+0x1a0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330a      	adds	r3, #10
 80050b6:	4a0e      	ldr	r2, [pc, #56]	@ (80050f0 <_ZN5Servo6turnToEii+0x1a0>)
 80050b8:	6013      	str	r3, [r2, #0]
	}
 80050ba:	e7c9      	b.n	8005050 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 80050bc:	bf00      	nop
	write(ang);
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fe93 	bl	8004dec <_ZN5Servo5writeEi>
 80050c6:	e002      	b.n	80050ce <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 80050cc:	bf00      	nop
}
 80050ce:	3728      	adds	r7, #40	@ 0x28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	f3af 8000 	nop.w
 80050d8:	9999999a 	.word	0x9999999a
 80050dc:	3ff19999 	.word	0x3ff19999
 80050e0:	404e0000 	.word	0x404e0000
 80050e4:	408f4000 	.word	0x408f4000
 80050e8:	20001c04 	.word	0x20001c04
 80050ec:	2000012c 	.word	0x2000012c
 80050f0:	20001c08 	.word	0x20001c08

080050f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fa:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <HAL_MspInit+0x54>)
 80050fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fe:	4a12      	ldr	r2, [pc, #72]	@ (8005148 <HAL_MspInit+0x54>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6613      	str	r3, [r2, #96]	@ 0x60
 8005106:	4b10      	ldr	r3, [pc, #64]	@ (8005148 <HAL_MspInit+0x54>)
 8005108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <HAL_MspInit+0x54>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005116:	4a0c      	ldr	r2, [pc, #48]	@ (8005148 <HAL_MspInit+0x54>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800511c:	6593      	str	r3, [r2, #88]	@ 0x58
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <HAL_MspInit+0x54>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	2005      	movs	r0, #5
 8005130:	f000 fd2b 	bl	8005b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005134:	2005      	movs	r0, #5
 8005136:	f000 fd42 	bl	8005bbe <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800513a:	f001 fc2d 	bl	8006998 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b09c      	sub	sp, #112	@ 0x70
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005164:	f107 0318 	add.w	r3, r7, #24
 8005168:	2244      	movs	r2, #68	@ 0x44
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f005 fe8b 	bl	800ae88 <memset>
  if(hi2c->Instance==I2C1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <HAL_I2C_MspInit+0xe4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d154      	bne.n	8005226 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800517c:	2340      	movs	r3, #64	@ 0x40
 800517e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005184:	f107 0318 	add.w	r3, r7, #24
 8005188:	4618      	mov	r0, r3
 800518a:	f002 f943 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005194:	f7fc fdc6 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005198:	4b26      	ldr	r3, [pc, #152]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	4a25      	ldr	r2, [pc, #148]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051a4:	4b23      	ldr	r3, [pc, #140]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 80051a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b0:	4b20      	ldr	r3, [pc, #128]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 80051b6:	f043 0302 	orr.w	r3, r3, #2
 80051ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051ce:	2312      	movs	r3, #18
 80051d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d6:	2300      	movs	r3, #0
 80051d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051da:	2304      	movs	r3, #4
 80051dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051e8:	f001 f836 	bl	8006258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051f2:	2312      	movs	r3, #18
 80051f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fa:	2300      	movs	r3, #0
 80051fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051fe:	2304      	movs	r3, #4
 8005200:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005202:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005206:	4619      	mov	r1, r3
 8005208:	480b      	ldr	r0, [pc, #44]	@ (8005238 <HAL_I2C_MspInit+0xec>)
 800520a:	f001 f825 	bl	8006258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800520e:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	4a08      	ldr	r2, [pc, #32]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 8005214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005218:	6593      	str	r3, [r2, #88]	@ 0x58
 800521a:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <HAL_I2C_MspInit+0xe8>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005226:	bf00      	nop
 8005228:	3770      	adds	r7, #112	@ 0x70
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40005400 	.word	0x40005400
 8005234:	40021000 	.word	0x40021000
 8005238:	48000400 	.word	0x48000400

0800523c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <HAL_TIM_PWM_MspInit+0x80>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d10c      	bne.n	8005268 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800524e:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005252:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005254:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005258:	6613      	str	r3, [r2, #96]	@ 0x60
 800525a:	4b19      	ldr	r3, [pc, #100]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 800525c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005266:	e022      	b.n	80052ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <HAL_TIM_PWM_MspInit+0x88>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10c      	bne.n	800528c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005272:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005276:	4a12      	ldr	r2, [pc, #72]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	6593      	str	r3, [r2, #88]	@ 0x58
 800527e:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
}
 800528a:	e010      	b.n	80052ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0d      	ldr	r2, [pc, #52]	@ (80052c8 <HAL_TIM_PWM_MspInit+0x8c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10b      	bne.n	80052ae <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005296:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 8005298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529a:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 800529c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80052a2:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <HAL_TIM_PWM_MspInit+0x84>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40013400 	.word	0x40013400

080052cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d114      	bne.n	8005308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052de:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	4a25      	ldr	r2, [pc, #148]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ea:	4b23      	ldr	r3, [pc, #140]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	201c      	movs	r0, #28
 80052fc:	f000 fc45 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005300:	201c      	movs	r0, #28
 8005302:	f000 fc5c 	bl	8005bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005306:	e032      	b.n	800536e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1b      	ldr	r2, [pc, #108]	@ (800537c <HAL_TIM_Base_MspInit+0xb0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d114      	bne.n	800533c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005312:	4b19      	ldr	r3, [pc, #100]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	6593      	str	r3, [r2, #88]	@ 0x58
 800531e:	4b16      	ldr	r3, [pc, #88]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 8005320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	2036      	movs	r0, #54	@ 0x36
 8005330:	f000 fc2b 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005334:	2036      	movs	r0, #54	@ 0x36
 8005336:	f000 fc42 	bl	8005bbe <HAL_NVIC_EnableIRQ>
}
 800533a:	e018      	b.n	800536e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0f      	ldr	r2, [pc, #60]	@ (8005380 <HAL_TIM_Base_MspInit+0xb4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d113      	bne.n	800536e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005346:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	4a0b      	ldr	r2, [pc, #44]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6593      	str	r3, [r2, #88]	@ 0x58
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <HAL_TIM_Base_MspInit+0xac>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800535e:	2200      	movs	r2, #0
 8005360:	2100      	movs	r1, #0
 8005362:	2037      	movs	r0, #55	@ 0x37
 8005364:	f000 fc11 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005368:	2037      	movs	r0, #55	@ 0x37
 800536a:	f000 fc28 	bl	8005bbe <HAL_NVIC_EnableIRQ>
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	40001000 	.word	0x40001000
 8005380:	40001400 	.word	0x40001400

08005384 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	@ 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <HAL_TIM_Encoder_MspInit+0x80>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d129      	bne.n	80053fa <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053a6:	4b18      	ldr	r3, [pc, #96]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053ac:	f043 0304 	orr.w	r3, r3, #4
 80053b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b2:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <HAL_TIM_Encoder_MspInit+0x84>)
 80053cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80053da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053dc:	2302      	movs	r3, #2
 80053de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e4:	2300      	movs	r3, #0
 80053e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80053e8:	230a      	movs	r3, #10
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053f6:	f000 ff2f 	bl	8006258 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80053fa:	bf00      	nop
 80053fc:	3728      	adds	r7, #40	@ 0x28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40000800 	.word	0x40000800
 8005408:	40021000 	.word	0x40021000

0800540c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	@ 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a41      	ldr	r2, [pc, #260]	@ (8005530 <HAL_TIM_MspPostInit+0x124>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d11c      	bne.n	8005468 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800542e:	4b41      	ldr	r3, [pc, #260]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005432:	4a40      	ldr	r2, [pc, #256]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005434:	f043 0304 	orr.w	r3, r3, #4
 8005438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800543a:	4b3e      	ldr	r3, [pc, #248]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005446:	230f      	movs	r3, #15
 8005448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544a:	2302      	movs	r3, #2
 800544c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005452:	2300      	movs	r3, #0
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005456:	2302      	movs	r3, #2
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800545a:	f107 031c 	add.w	r3, r7, #28
 800545e:	4619      	mov	r1, r3
 8005460:	4835      	ldr	r0, [pc, #212]	@ (8005538 <HAL_TIM_MspPostInit+0x12c>)
 8005462:	f000 fef9 	bl	8006258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005466:	e05f      	b.n	8005528 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a33      	ldr	r2, [pc, #204]	@ (800553c <HAL_TIM_MspPostInit+0x130>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d139      	bne.n	80054e6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	4b30      	ldr	r3, [pc, #192]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005476:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800547e:	4b2d      	ldr	r3, [pc, #180]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548a:	4b2a      	ldr	r3, [pc, #168]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 800548c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548e:	4a29      	ldr	r2, [pc, #164]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005496:	4b27      	ldr	r3, [pc, #156]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054a2:	2340      	movs	r3, #64	@ 0x40
 80054a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a6:	2302      	movs	r3, #2
 80054a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ae:	2300      	movs	r3, #0
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054b2:	2302      	movs	r3, #2
 80054b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b6:	f107 031c 	add.w	r3, r7, #28
 80054ba:	4619      	mov	r1, r3
 80054bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054c0:	f000 feca 	bl	8006258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054c4:	2320      	movs	r3, #32
 80054c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054d4:	2302      	movs	r3, #2
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d8:	f107 031c 	add.w	r3, r7, #28
 80054dc:	4619      	mov	r1, r3
 80054de:	4818      	ldr	r0, [pc, #96]	@ (8005540 <HAL_TIM_MspPostInit+0x134>)
 80054e0:	f000 feba 	bl	8006258 <HAL_GPIO_Init>
}
 80054e4:	e020      	b.n	8005528 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <HAL_TIM_MspPostInit+0x138>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 80054f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <HAL_TIM_MspPostInit+0x128>)
 80054fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550c:	2302      	movs	r3, #2
 800550e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005510:	2300      	movs	r3, #0
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005514:	2300      	movs	r3, #0
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005518:	2304      	movs	r3, #4
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551c:	f107 031c 	add.w	r3, r7, #28
 8005520:	4619      	mov	r1, r3
 8005522:	4805      	ldr	r0, [pc, #20]	@ (8005538 <HAL_TIM_MspPostInit+0x12c>)
 8005524:	f000 fe98 	bl	8006258 <HAL_GPIO_Init>
}
 8005528:	bf00      	nop
 800552a:	3730      	adds	r7, #48	@ 0x30
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40021000 	.word	0x40021000
 8005538:	48000800 	.word	0x48000800
 800553c:	40000400 	.word	0x40000400
 8005540:	48000400 	.word	0x48000400
 8005544:	40013400 	.word	0x40013400

08005548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b09a      	sub	sp, #104	@ 0x68
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	2244      	movs	r2, #68	@ 0x44
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f005 fc8d 	bl	800ae88 <memset>
  if(huart->Instance==USART2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4e      	ldr	r2, [pc, #312]	@ (80056ac <HAL_UART_MspInit+0x164>)
 8005574:	4293      	cmp	r3, r2
 8005576:	f040 8094 	bne.w	80056a2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800557a:	2302      	movs	r3, #2
 800557c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005582:	f107 0310 	add.w	r3, r7, #16
 8005586:	4618      	mov	r0, r3
 8005588:	f001 ff44 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005592:	f7fc fbc7 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005596:	4b46      	ldr	r3, [pc, #280]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	4a45      	ldr	r2, [pc, #276]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 800559c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ae:	4b40      	ldr	r3, [pc, #256]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	4a3f      	ldr	r2, [pc, #252]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055ba:	4b3d      	ldr	r3, [pc, #244]	@ (80056b0 <HAL_UART_MspInit+0x168>)
 80055bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055c6:	230c      	movs	r3, #12
 80055c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ca:	2302      	movs	r3, #2
 80055cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d2:	2300      	movs	r3, #0
 80055d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055d6:	2307      	movs	r3, #7
 80055d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055de:	4619      	mov	r1, r3
 80055e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055e4:	f000 fe38 	bl	8006258 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80055e8:	4b32      	ldr	r3, [pc, #200]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 80055ea:	4a33      	ldr	r2, [pc, #204]	@ (80056b8 <HAL_UART_MspInit+0x170>)
 80055ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055ee:	4b31      	ldr	r3, [pc, #196]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 80055f0:	221a      	movs	r2, #26
 80055f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f4:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055fa:	4b2e      	ldr	r3, [pc, #184]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005600:	4b2c      	ldr	r3, [pc, #176]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 8005602:	2280      	movs	r2, #128	@ 0x80
 8005604:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005606:	4b2b      	ldr	r3, [pc, #172]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 8005608:	2200      	movs	r2, #0
 800560a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800560c:	4b29      	ldr	r3, [pc, #164]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 800560e:	2200      	movs	r2, #0
 8005610:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005612:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 8005614:	2220      	movs	r2, #32
 8005616:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005618:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 800561a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800561e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005620:	4824      	ldr	r0, [pc, #144]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 8005622:	f000 fae7 	bl	8005bf4 <HAL_DMA_Init>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800562c:	f7fc fb7a 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a20      	ldr	r2, [pc, #128]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005638:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <HAL_UART_MspInit+0x16c>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800563e:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005640:	4a1f      	ldr	r2, [pc, #124]	@ (80056c0 <HAL_UART_MspInit+0x178>)
 8005642:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005644:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005646:	221b      	movs	r2, #27
 8005648:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800564a:	4b1c      	ldr	r3, [pc, #112]	@ (80056bc <HAL_UART_MspInit+0x174>)
 800564c:	2210      	movs	r2, #16
 800564e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005650:	4b1a      	ldr	r3, [pc, #104]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005652:	2200      	movs	r2, #0
 8005654:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005656:	4b19      	ldr	r3, [pc, #100]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005658:	2280      	movs	r2, #128	@ 0x80
 800565a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800565c:	4b17      	ldr	r3, [pc, #92]	@ (80056bc <HAL_UART_MspInit+0x174>)
 800565e:	2200      	movs	r2, #0
 8005660:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005662:	4b16      	ldr	r3, [pc, #88]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005664:	2200      	movs	r2, #0
 8005666:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005668:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <HAL_UART_MspInit+0x174>)
 800566a:	2200      	movs	r2, #0
 800566c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800566e:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005670:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8005674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005676:	4811      	ldr	r0, [pc, #68]	@ (80056bc <HAL_UART_MspInit+0x174>)
 8005678:	f000 fabc 	bl	8005bf4 <HAL_DMA_Init>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8005682:	f7fc fb4f 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a0c      	ldr	r2, [pc, #48]	@ (80056bc <HAL_UART_MspInit+0x174>)
 800568a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800568c:	4a0b      	ldr	r2, [pc, #44]	@ (80056bc <HAL_UART_MspInit+0x174>)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	2026      	movs	r0, #38	@ 0x26
 8005698:	f000 fa77 	bl	8005b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800569c:	2026      	movs	r0, #38	@ 0x26
 800569e:	f000 fa8e 	bl	8005bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80056a2:	bf00      	nop
 80056a4:	3768      	adds	r7, #104	@ 0x68
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40004400 	.word	0x40004400
 80056b0:	40021000 	.word	0x40021000
 80056b4:	20000388 	.word	0x20000388
 80056b8:	40020030 	.word	0x40020030
 80056bc:	200003e8 	.word	0x200003e8
 80056c0:	40020044 	.word	0x40020044

080056c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <NMI_Handler+0x4>

080056cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <HardFault_Handler+0x4>

080056d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <MemManage_Handler+0x4>

080056dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <BusFault_Handler+0x4>

080056e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <UsageFault_Handler+0x4>

080056ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056fa:	b480      	push	{r7}
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800571a:	f000 f93d 	bl	8005998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}

08005722 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005734:	2008      	movs	r0, #8
 8005736:	f000 ff41 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}

0800573e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005742:	2010      	movs	r0, #16
 8005744:	f000 ff3a 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}

0800574c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005750:	4802      	ldr	r0, [pc, #8]	@ (800575c <DMA1_Channel3_IRQHandler+0x10>)
 8005752:	f000 fc32 	bl	8005fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000388 	.word	0x20000388

08005760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005764:	4802      	ldr	r0, [pc, #8]	@ (8005770 <DMA1_Channel4_IRQHandler+0x10>)
 8005766:	f000 fc28 	bl	8005fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200003e8 	.word	0x200003e8

08005774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005778:	2020      	movs	r0, #32
 800577a:	f000 ff1f 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800577e:	2080      	movs	r0, #128	@ 0x80
 8005780:	f000 ff1c 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005784:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005788:	f000 ff18 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800578c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005790:	f000 ff14 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}

08005798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800579c:	4802      	ldr	r0, [pc, #8]	@ (80057a8 <TIM2_IRQHandler+0x10>)
 800579e:	f002 fcf1 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2000012c 	.word	0x2000012c

080057ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057b0:	4802      	ldr	r0, [pc, #8]	@ (80057bc <USART2_IRQHandler+0x10>)
 80057b2:	f003 ff31 	bl	8009618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200002f4 	.word	0x200002f4

080057c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80057c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80057c8:	f000 fef8 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80057cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80057d0:	f000 fef4 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80057d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80057d8:	f000 fef0 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80057dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80057e0:	f000 feec 	bl	80065bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80057ec:	4802      	ldr	r0, [pc, #8]	@ (80057f8 <TIM6_DAC_IRQHandler+0x10>)
 80057ee:	f002 fcc9 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000210 	.word	0x20000210

080057fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005800:	4802      	ldr	r0, [pc, #8]	@ (800580c <TIM7_IRQHandler+0x10>)
 8005802:	f002 fcbf 	bl	8008184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000025c 	.word	0x2000025c

08005810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005818:	4a14      	ldr	r2, [pc, #80]	@ (800586c <_sbrk+0x5c>)
 800581a:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <_sbrk+0x60>)
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <_sbrk+0x64>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800582c:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <_sbrk+0x64>)
 800582e:	4a12      	ldr	r2, [pc, #72]	@ (8005878 <_sbrk+0x68>)
 8005830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005832:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <_sbrk+0x64>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	d207      	bcs.n	8005850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005840:	f005 fb2a 	bl	800ae98 <__errno>
 8005844:	4603      	mov	r3, r0
 8005846:	220c      	movs	r2, #12
 8005848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800584a:	f04f 33ff 	mov.w	r3, #4294967295
 800584e:	e009      	b.n	8005864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005850:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <_sbrk+0x64>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <_sbrk+0x64>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	4a05      	ldr	r2, [pc, #20]	@ (8005874 <_sbrk+0x64>)
 8005860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20008000 	.word	0x20008000
 8005870:	00000400 	.word	0x00000400
 8005874:	20001c0c 	.word	0x20001c0c
 8005878:	20001d60 	.word	0x20001d60

0800587c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005880:	4b06      	ldr	r3, [pc, #24]	@ (800589c <SystemInit+0x20>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005886:	4a05      	ldr	r2, [pc, #20]	@ (800589c <SystemInit+0x20>)
 8005888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800588c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005890:	bf00      	nop
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000ed00 	.word	0xe000ed00

080058a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058a0:	480d      	ldr	r0, [pc, #52]	@ (80058d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80058a4:	f7ff ffea 	bl	800587c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058a8:	480c      	ldr	r0, [pc, #48]	@ (80058dc <LoopForever+0x6>)
  ldr r1, =_edata
 80058aa:	490d      	ldr	r1, [pc, #52]	@ (80058e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058ac:	4a0d      	ldr	r2, [pc, #52]	@ (80058e4 <LoopForever+0xe>)
  movs r3, #0
 80058ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80058b0:	e002      	b.n	80058b8 <LoopCopyDataInit>

080058b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058b6:	3304      	adds	r3, #4

080058b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058bc:	d3f9      	bcc.n	80058b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058be:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058c0:	4c0a      	ldr	r4, [pc, #40]	@ (80058ec <LoopForever+0x16>)
  movs r3, #0
 80058c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058c4:	e001      	b.n	80058ca <LoopFillZerobss>

080058c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058c8:	3204      	adds	r2, #4

080058ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058cc:	d3fb      	bcc.n	80058c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80058ce:	f005 fae9 	bl	800aea4 <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80058d2:	f7fb fda1 	bl	8001418 <main>

080058d6 <LoopForever>:

LoopForever:
    b LoopForever
 80058d6:	e7fe      	b.n	80058d6 <LoopForever>
  ldr   r0, =_estack
 80058d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80058dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80058e4:	0800b570 	.word	0x0800b570
  ldr r2, =_sbss
 80058e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80058ec:	20001d5c 	.word	0x20001d5c

080058f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058f0:	e7fe      	b.n	80058f0 <ADC1_2_IRQHandler>

080058f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058fc:	2003      	movs	r0, #3
 80058fe:	f000 f939 	bl	8005b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005902:	200f      	movs	r0, #15
 8005904:	f000 f80e 	bl	8005924 <HAL_InitTick>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	71fb      	strb	r3, [r7, #7]
 8005912:	e001      	b.n	8005918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005914:	f7ff fbee 	bl	80050f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005918:	79fb      	ldrb	r3, [r7, #7]

}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005930:	4b16      	ldr	r3, [pc, #88]	@ (800598c <HAL_InitTick+0x68>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d022      	beq.n	800597e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005938:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <HAL_InitTick+0x6c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <HAL_InitTick+0x68>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005944:	fbb1 f3f3 	udiv	r3, r1, r3
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	4618      	mov	r0, r3
 800594e:	f000 f944 	bl	8005bda <HAL_SYSTICK_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10f      	bne.n	8005978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b0f      	cmp	r3, #15
 800595c:	d809      	bhi.n	8005972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800595e:	2200      	movs	r2, #0
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	f000 f910 	bl	8005b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <HAL_InitTick+0x70>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e007      	b.n	8005982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e004      	b.n	8005982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
 800597c:	e001      	b.n	8005982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000001c 	.word	0x2000001c
 8005990:	20000014 	.word	0x20000014
 8005994:	20000018 	.word	0x20000018

08005998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800599c:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <HAL_IncTick+0x1c>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <HAL_IncTick+0x20>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a03      	ldr	r2, [pc, #12]	@ (80059b4 <HAL_IncTick+0x1c>)
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20001c10 	.word	0x20001c10
 80059b8:	2000001c 	.word	0x2000001c

080059bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return uwTick;
 80059c0:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <HAL_GetTick+0x14>)
 80059c2:	681b      	ldr	r3, [r3, #0]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20001c10 	.word	0x20001c10

080059d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <__NVIC_SetPriorityGrouping+0x44>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059f0:	4013      	ands	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a06:	4a04      	ldr	r2, [pc, #16]	@ (8005a18 <__NVIC_SetPriorityGrouping+0x44>)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	60d3      	str	r3, [r2, #12]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	e000ed00 	.word	0xe000ed00

08005a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a20:	4b04      	ldr	r3, [pc, #16]	@ (8005a34 <__NVIC_GetPriorityGrouping+0x18>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	f003 0307 	and.w	r3, r3, #7
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	db0b      	blt.n	8005a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	f003 021f 	and.w	r2, r3, #31
 8005a50:	4907      	ldr	r1, [pc, #28]	@ (8005a70 <__NVIC_EnableIRQ+0x38>)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2001      	movs	r0, #1
 8005a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e100 	.word	0xe000e100

08005a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	db0a      	blt.n	8005a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	490c      	ldr	r1, [pc, #48]	@ (8005ac0 <__NVIC_SetPriority+0x4c>)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	0112      	lsls	r2, r2, #4
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	440b      	add	r3, r1
 8005a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a9c:	e00a      	b.n	8005ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	4908      	ldr	r1, [pc, #32]	@ (8005ac4 <__NVIC_SetPriority+0x50>)
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	3b04      	subs	r3, #4
 8005aac:	0112      	lsls	r2, r2, #4
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	440b      	add	r3, r1
 8005ab2:	761a      	strb	r2, [r3, #24]
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000e100 	.word	0xe000e100
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b089      	sub	sp, #36	@ 0x24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f1c3 0307 	rsb	r3, r3, #7
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	bf28      	it	cs
 8005ae6:	2304      	movcs	r3, #4
 8005ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d902      	bls.n	8005af8 <NVIC_EncodePriority+0x30>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3b03      	subs	r3, #3
 8005af6:	e000      	b.n	8005afa <NVIC_EncodePriority+0x32>
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43da      	mvns	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b10:	f04f 31ff 	mov.w	r1, #4294967295
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	43d9      	mvns	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b20:	4313      	orrs	r3, r2
         );
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b40:	d301      	bcc.n	8005b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b42:	2301      	movs	r3, #1
 8005b44:	e00f      	b.n	8005b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b46:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <SysTick_Config+0x40>)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b4e:	210f      	movs	r1, #15
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	f7ff ff8e 	bl	8005a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <SysTick_Config+0x40>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b5e:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <SysTick_Config+0x40>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010

08005b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff29 	bl	80059d4 <__NVIC_SetPriorityGrouping>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	4603      	mov	r3, r0
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b98:	f7ff ff40 	bl	8005a1c <__NVIC_GetPriorityGrouping>
 8005b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	6978      	ldr	r0, [r7, #20]
 8005ba4:	f7ff ff90 	bl	8005ac8 <NVIC_EncodePriority>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff ff5f 	bl	8005a74 <__NVIC_SetPriority>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff ff33 	bl	8005a38 <__NVIC_EnableIRQ>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff ffa4 	bl	8005b30 <SysTick_Config>
 8005be8:	4603      	mov	r3, r0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e08d      	b.n	8005d22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b47      	ldr	r3, [pc, #284]	@ (8005d2c <HAL_DMA_Init+0x138>)
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d80f      	bhi.n	8005c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	4b45      	ldr	r3, [pc, #276]	@ (8005d30 <HAL_DMA_Init+0x13c>)
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a45      	ldr	r2, [pc, #276]	@ (8005d34 <HAL_DMA_Init+0x140>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	009a      	lsls	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a42      	ldr	r2, [pc, #264]	@ (8005d38 <HAL_DMA_Init+0x144>)
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c30:	e00e      	b.n	8005c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	4b40      	ldr	r3, [pc, #256]	@ (8005d3c <HAL_DMA_Init+0x148>)
 8005c3a:	4413      	add	r3, r2
 8005c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005d34 <HAL_DMA_Init+0x140>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	091b      	lsrs	r3, r3, #4
 8005c44:	009a      	lsls	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d40 <HAL_DMA_Init+0x14c>)
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa76 	bl	8006194 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ccc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_DMA_Init+0x104>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d80c      	bhi.n	8005cf8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa96 	bl	8006210 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e008      	b.n	8005d0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40020407 	.word	0x40020407
 8005d30:	bffdfff8 	.word	0xbffdfff8
 8005d34:	cccccccd 	.word	0xcccccccd
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	bffdfbf8 	.word	0xbffdfbf8
 8005d40:	40020400 	.word	0x40020400

08005d44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_DMA_Start_IT+0x20>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e066      	b.n	8005e32 <HAL_DMA_Start_IT+0xee>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d155      	bne.n	8005e24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f9bb 	bl	8006118 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 020e 	orr.w	r2, r2, #14
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e00f      	b.n	8005ddc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 020a 	orr.w	r2, r2, #10
 8005dda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005df8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e005      	b.n	8005e30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d005      	beq.n	8005e5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2204      	movs	r2, #4
 8005e56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e037      	b.n	8005ece <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 020e 	bic.w	r2, r2, #14
 8005e6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	f003 021f 	and.w	r2, r3, #31
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005eaa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ecc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d00d      	beq.n	8005f20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2204      	movs	r2, #4
 8005f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	e047      	b.n	8005fb0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 020e 	bic.w	r2, r2, #14
 8005f2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f54:	f003 021f 	and.w	r2, r3, #31
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
    }
  }
  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2204      	movs	r2, #4
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d026      	beq.n	8006034 <HAL_DMA_IRQHandler+0x7a>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d021      	beq.n	8006034 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0204 	bic.w	r2, r2, #4
 800600c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006012:	f003 021f 	and.w	r2, r3, #31
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	2104      	movs	r1, #4
 800601c:	fa01 f202 	lsl.w	r2, r1, r2
 8006020:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d071      	beq.n	800610e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006032:	e06c      	b.n	800610e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2202      	movs	r2, #2
 800603e:	409a      	lsls	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02e      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d029      	beq.n	80060a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 020a 	bic.w	r2, r2, #10
 800606e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607c:	f003 021f 	and.w	r2, r3, #31
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	2102      	movs	r1, #2
 8006086:	fa01 f202 	lsl.w	r2, r1, r2
 800608a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d038      	beq.n	800610e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060a4:	e033      	b.n	800610e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2208      	movs	r2, #8
 80060b0:	409a      	lsls	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02a      	beq.n	8006110 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d025      	beq.n	8006110 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 020e 	bic.w	r2, r2, #14
 80060d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d8:	f003 021f 	and.w	r2, r3, #31
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	2101      	movs	r1, #1
 80060e2:	fa01 f202 	lsl.w	r2, r1, r2
 80060e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800610e:	bf00      	nop
 8006110:	bf00      	nop
}
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800612e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	f003 021f 	and.w	r2, r3, #31
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2101      	movs	r1, #1
 8006150:	fa01 f202 	lsl.w	r2, r1, r2
 8006154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b10      	cmp	r3, #16
 8006164:	d108      	bne.n	8006178 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006176:	e007      	b.n	8006188 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	60da      	str	r2, [r3, #12]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b16      	ldr	r3, [pc, #88]	@ (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d802      	bhi.n	80061ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80061a8:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e001      	b.n	80061b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80061ae:	4b15      	ldr	r3, [pc, #84]	@ (8006204 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061b0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	3b08      	subs	r3, #8
 80061be:	4a12      	ldr	r2, [pc, #72]	@ (8006208 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	009a      	lsls	r2, r3, #2
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a0b      	ldr	r2, [pc, #44]	@ (800620c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80061de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2201      	movs	r2, #1
 80061e8:	409a      	lsls	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40020407 	.word	0x40020407
 8006200:	40020800 	.word	0x40020800
 8006204:	40020820 	.word	0x40020820
 8006208:	cccccccd 	.word	0xcccccccd
 800620c:	40020880 	.word	0x40020880

08006210 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4b0b      	ldr	r3, [pc, #44]	@ (8006250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a08      	ldr	r2, [pc, #32]	@ (8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006232:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3b01      	subs	r3, #1
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	2201      	movs	r2, #1
 800623e:	409a      	lsls	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	1000823f 	.word	0x1000823f
 8006254:	40020940 	.word	0x40020940

08006258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006266:	e15a      	b.n	800651e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	2101      	movs	r1, #1
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	4013      	ands	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 814c 	beq.w	8006518 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d005      	beq.n	8006298 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006294:	2b02      	cmp	r3, #2
 8006296:	d130      	bne.n	80062fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	2203      	movs	r2, #3
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4013      	ands	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062ce:	2201      	movs	r2, #1
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43db      	mvns	r3, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4013      	ands	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f003 0201 	and.w	r2, r3, #1
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b03      	cmp	r3, #3
 8006304:	d017      	beq.n	8006336 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	2203      	movs	r2, #3
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	43db      	mvns	r3, r3
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4013      	ands	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d123      	bne.n	800638a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	08da      	lsrs	r2, r3, #3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3208      	adds	r2, #8
 800634a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	220f      	movs	r2, #15
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4013      	ands	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	08da      	lsrs	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3208      	adds	r2, #8
 8006384:	6939      	ldr	r1, [r7, #16]
 8006386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	2203      	movs	r2, #3
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4013      	ands	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 0203 	and.w	r2, r3, #3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	fa02 f303 	lsl.w	r3, r2, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80a6 	beq.w	8006518 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063cc:	4b5b      	ldr	r3, [pc, #364]	@ (800653c <HAL_GPIO_Init+0x2e4>)
 80063ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063d0:	4a5a      	ldr	r2, [pc, #360]	@ (800653c <HAL_GPIO_Init+0x2e4>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80063d8:	4b58      	ldr	r3, [pc, #352]	@ (800653c <HAL_GPIO_Init+0x2e4>)
 80063da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063e4:	4a56      	ldr	r2, [pc, #344]	@ (8006540 <HAL_GPIO_Init+0x2e8>)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	089b      	lsrs	r3, r3, #2
 80063ea:	3302      	adds	r3, #2
 80063ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	220f      	movs	r2, #15
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	43db      	mvns	r3, r3
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800640e:	d01f      	beq.n	8006450 <HAL_GPIO_Init+0x1f8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a4c      	ldr	r2, [pc, #304]	@ (8006544 <HAL_GPIO_Init+0x2ec>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d019      	beq.n	800644c <HAL_GPIO_Init+0x1f4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a4b      	ldr	r2, [pc, #300]	@ (8006548 <HAL_GPIO_Init+0x2f0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_GPIO_Init+0x1f0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a4a      	ldr	r2, [pc, #296]	@ (800654c <HAL_GPIO_Init+0x2f4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00d      	beq.n	8006444 <HAL_GPIO_Init+0x1ec>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a49      	ldr	r2, [pc, #292]	@ (8006550 <HAL_GPIO_Init+0x2f8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d007      	beq.n	8006440 <HAL_GPIO_Init+0x1e8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a48      	ldr	r2, [pc, #288]	@ (8006554 <HAL_GPIO_Init+0x2fc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <HAL_GPIO_Init+0x1e4>
 8006438:	2305      	movs	r3, #5
 800643a:	e00a      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 800643c:	2306      	movs	r3, #6
 800643e:	e008      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 8006440:	2304      	movs	r3, #4
 8006442:	e006      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 8006444:	2303      	movs	r3, #3
 8006446:	e004      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 8006448:	2302      	movs	r3, #2
 800644a:	e002      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_GPIO_Init+0x1fa>
 8006450:	2300      	movs	r3, #0
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	f002 0203 	and.w	r2, r2, #3
 8006458:	0092      	lsls	r2, r2, #2
 800645a:	4093      	lsls	r3, r2
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006462:	4937      	ldr	r1, [pc, #220]	@ (8006540 <HAL_GPIO_Init+0x2e8>)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	089b      	lsrs	r3, r3, #2
 8006468:	3302      	adds	r3, #2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006470:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <HAL_GPIO_Init+0x300>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	43db      	mvns	r3, r3
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4013      	ands	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006494:	4a30      	ldr	r2, [pc, #192]	@ (8006558 <HAL_GPIO_Init+0x300>)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800649a:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <HAL_GPIO_Init+0x300>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4013      	ands	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064be:	4a26      	ldr	r2, [pc, #152]	@ (8006558 <HAL_GPIO_Init+0x300>)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80064c4:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <HAL_GPIO_Init+0x300>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	43db      	mvns	r3, r3
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4013      	ands	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80064e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <HAL_GPIO_Init+0x300>)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <HAL_GPIO_Init+0x300>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006512:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <HAL_GPIO_Init+0x300>)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	3301      	adds	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f ae9d 	bne.w	8006268 <HAL_GPIO_Init+0x10>
  }
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40021000 	.word	0x40021000
 8006540:	40010000 	.word	0x40010000
 8006544:	48000400 	.word	0x48000400
 8006548:	48000800 	.word	0x48000800
 800654c:	48000c00 	.word	0x48000c00
 8006550:	48001000 	.word	0x48001000
 8006554:	48001400 	.word	0x48001400
 8006558:	40010400 	.word	0x40010400

0800655c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	4013      	ands	r3, r2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e001      	b.n	800657e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	807b      	strh	r3, [r7, #2]
 8006598:	4613      	mov	r3, r2
 800659a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800659c:	787b      	ldrb	r3, [r7, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065a2:	887a      	ldrh	r2, [r7, #2]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065a8:	e002      	b.n	80065b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065aa:	887a      	ldrh	r2, [r7, #2]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065c6:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d006      	beq.n	80065e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065d2:	4a05      	ldr	r2, [pc, #20]	@ (80065e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb fd70 	bl	80020c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40010400 	.word	0x40010400

080065ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e08d      	b.n	800671a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe fd9a 	bl	800514c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2224      	movs	r2, #36	@ 0x24
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800663c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800664c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d107      	bne.n	8006666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	e006      	b.n	8006674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d108      	bne.n	800668e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668a:	605a      	str	r2, [r3, #4]
 800668c:	e007      	b.n	800669e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800669c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69d9      	ldr	r1, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	d138      	bne.n	80067aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006742:	2302      	movs	r3, #2
 8006744:	e032      	b.n	80067ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2224      	movs	r2, #36	@ 0x24
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006774:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0201 	orr.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e000      	b.n	80067ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
  }
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d139      	bne.n	8006842 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067d8:	2302      	movs	r3, #2
 80067da:	e033      	b.n	8006844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2224      	movs	r2, #36	@ 0x24
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800680a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d141      	bne.n	80068e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800685e:	4b4b      	ldr	r3, [pc, #300]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686a:	d131      	bne.n	80068d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800686c:	4b47      	ldr	r3, [pc, #284]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006872:	4a46      	ldr	r2, [pc, #280]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800687c:	4b43      	ldr	r3, [pc, #268]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006884:	4a41      	ldr	r2, [pc, #260]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800688a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800688c:	4b40      	ldr	r3, [pc, #256]	@ (8006990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2232      	movs	r2, #50	@ 0x32
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	4a3f      	ldr	r2, [pc, #252]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	0c9b      	lsrs	r3, r3, #18
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068a2:	e002      	b.n	80068aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068aa:	4b38      	ldr	r3, [pc, #224]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b6:	d102      	bne.n	80068be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f2      	bne.n	80068a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068be:	4b33      	ldr	r3, [pc, #204]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ca:	d158      	bne.n	800697e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e057      	b.n	8006980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068d0:	4b2e      	ldr	r3, [pc, #184]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d6:	4a2d      	ldr	r2, [pc, #180]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80068e0:	e04d      	b.n	800697e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e8:	d141      	bne.n	800696e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068ea:	4b28      	ldr	r3, [pc, #160]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f6:	d131      	bne.n	800695c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f8:	4b24      	ldr	r3, [pc, #144]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	4a23      	ldr	r2, [pc, #140]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006908:	4b20      	ldr	r3, [pc, #128]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006910:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006918:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2232      	movs	r2, #50	@ 0x32
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	4a1c      	ldr	r2, [pc, #112]	@ (8006994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	0c9b      	lsrs	r3, r3, #18
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692e:	e002      	b.n	8006936 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3b01      	subs	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006936:	4b15      	ldr	r3, [pc, #84]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006942:	d102      	bne.n	800694a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f2      	bne.n	8006930 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800694a:	4b10      	ldr	r3, [pc, #64]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006956:	d112      	bne.n	800697e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e011      	b.n	8006980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800695c:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006962:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800696c:	e007      	b.n	800697e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800696e:	4b07      	ldr	r3, [pc, #28]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006976:	4a05      	ldr	r2, [pc, #20]	@ (800698c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800697c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40007000 	.word	0x40007000
 8006990:	20000014 	.word	0x20000014
 8006994:	431bde83 	.word	0x431bde83

08006998 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a04      	ldr	r2, [pc, #16]	@ (80069b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a6:	6093      	str	r3, [r2, #8]
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40007000 	.word	0x40007000

080069b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e2fe      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d075      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d6:	4b97      	ldr	r3, [pc, #604]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069e0:	4b94      	ldr	r3, [pc, #592]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	d102      	bne.n	80069f6 <HAL_RCC_OscConfig+0x3e>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d002      	beq.n	80069fc <HAL_RCC_OscConfig+0x44>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d10b      	bne.n	8006a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d05b      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x108>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d157      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e2d9      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a1c:	d106      	bne.n	8006a2c <HAL_RCC_OscConfig+0x74>
 8006a1e:	4b85      	ldr	r3, [pc, #532]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a84      	ldr	r2, [pc, #528]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e01d      	b.n	8006a68 <HAL_RCC_OscConfig+0xb0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCC_OscConfig+0x98>
 8006a36:	4b7f      	ldr	r3, [pc, #508]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	4b7c      	ldr	r3, [pc, #496]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a7b      	ldr	r2, [pc, #492]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e00b      	b.n	8006a68 <HAL_RCC_OscConfig+0xb0>
 8006a50:	4b78      	ldr	r3, [pc, #480]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a77      	ldr	r2, [pc, #476]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4b75      	ldr	r3, [pc, #468]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a74      	ldr	r2, [pc, #464]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d013      	beq.n	8006a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fe ffa4 	bl	80059bc <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a78:	f7fe ffa0 	bl	80059bc <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b64      	cmp	r3, #100	@ 0x64
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e29e      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0xc0>
 8006a96:	e014      	b.n	8006ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fe ff90 	bl	80059bc <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fe ff8c 	bl	80059bc <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	@ 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e28a      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ab2:	4b60      	ldr	r3, [pc, #384]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0xe8>
 8006abe:	e000      	b.n	8006ac2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d075      	beq.n	8006bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ace:	4b59      	ldr	r3, [pc, #356]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ad8:	4b56      	ldr	r3, [pc, #344]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b0c      	cmp	r3, #12
 8006ae6:	d102      	bne.n	8006aee <HAL_RCC_OscConfig+0x136>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d002      	beq.n	8006af4 <HAL_RCC_OscConfig+0x13c>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d11f      	bne.n	8006b34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006af4:	4b4f      	ldr	r3, [pc, #316]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <HAL_RCC_OscConfig+0x154>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e25d      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0c:	4b49      	ldr	r3, [pc, #292]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	061b      	lsls	r3, r3, #24
 8006b1a:	4946      	ldr	r1, [pc, #280]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <HAL_RCC_OscConfig+0x280>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fefd 	bl	8005924 <HAL_InitTick>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d043      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e249      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3c      	ldr	r2, [pc, #240]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fe ff38 	bl	80059bc <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fe ff34 	bl	80059bc <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e232      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b62:	4b34      	ldr	r3, [pc, #208]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6e:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	061b      	lsls	r3, r3, #24
 8006b7c:	492d      	ldr	r1, [pc, #180]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]
 8006b82:	e01a      	b.n	8006bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b84:	4b2b      	ldr	r3, [pc, #172]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006b8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b90:	f7fe ff14 	bl	80059bc <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b98:	f7fe ff10 	bl	80059bc <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e20e      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006baa:	4b22      	ldr	r3, [pc, #136]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x1e0>
 8006bb6:	e000      	b.n	8006bba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d041      	beq.n	8006c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01c      	beq.n	8006c08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bce:	4b19      	ldr	r3, [pc, #100]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bde:	f7fe feed 	bl	80059bc <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006be6:	f7fe fee9 	bl	80059bc <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e1e7      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <HAL_RCC_OscConfig+0x22e>
 8006c06:	e020      	b.n	8006c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c08:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c0e:	4a09      	ldr	r2, [pc, #36]	@ (8006c34 <HAL_RCC_OscConfig+0x27c>)
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c18:	f7fe fed0 	bl	80059bc <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c1e:	e00d      	b.n	8006c3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fe fecc 	bl	80059bc <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d906      	bls.n	8006c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e1ca      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
 8006c32:	bf00      	nop
 8006c34:	40021000 	.word	0x40021000
 8006c38:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1ea      	bne.n	8006c20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80a6 	beq.w	8006da4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c5c:	4b84      	ldr	r3, [pc, #528]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_OscConfig+0x2b4>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_RCC_OscConfig+0x2b6>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c72:	4b7f      	ldr	r3, [pc, #508]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	4a7e      	ldr	r2, [pc, #504]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c8e:	4b79      	ldr	r3, [pc, #484]	@ (8006e74 <HAL_RCC_OscConfig+0x4bc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d118      	bne.n	8006ccc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c9a:	4b76      	ldr	r3, [pc, #472]	@ (8006e74 <HAL_RCC_OscConfig+0x4bc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a75      	ldr	r2, [pc, #468]	@ (8006e74 <HAL_RCC_OscConfig+0x4bc>)
 8006ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fe fe89 	bl	80059bc <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fe fe85 	bl	80059bc <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e183      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e74 <HAL_RCC_OscConfig+0x4bc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d108      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x32e>
 8006cd4:	4b66      	ldr	r3, [pc, #408]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	4a65      	ldr	r2, [pc, #404]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ce4:	e024      	b.n	8006d30 <HAL_RCC_OscConfig+0x378>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d110      	bne.n	8006d10 <HAL_RCC_OscConfig+0x358>
 8006cee:	4b60      	ldr	r3, [pc, #384]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006cf6:	f043 0304 	orr.w	r3, r3, #4
 8006cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d04:	4a5a      	ldr	r2, [pc, #360]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d0e:	e00f      	b.n	8006d30 <HAL_RCC_OscConfig+0x378>
 8006d10:	4b57      	ldr	r3, [pc, #348]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d16:	4a56      	ldr	r2, [pc, #344]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d20:	4b53      	ldr	r3, [pc, #332]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	4a52      	ldr	r2, [pc, #328]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d28:	f023 0304 	bic.w	r3, r3, #4
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d016      	beq.n	8006d66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d38:	f7fe fe40 	bl	80059bc <HAL_GetTick>
 8006d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3e:	e00a      	b.n	8006d56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d40:	f7fe fe3c 	bl	80059bc <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e138      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d56:	4b46      	ldr	r3, [pc, #280]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0ed      	beq.n	8006d40 <HAL_RCC_OscConfig+0x388>
 8006d64:	e015      	b.n	8006d92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d66:	f7fe fe29 	bl	80059bc <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d6c:	e00a      	b.n	8006d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6e:	f7fe fe25 	bl	80059bc <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e121      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d84:	4b3a      	ldr	r3, [pc, #232]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1ed      	bne.n	8006d6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d105      	bne.n	8006da4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d98:	4b35      	ldr	r3, [pc, #212]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9c:	4a34      	ldr	r2, [pc, #208]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d03c      	beq.n	8006e2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01c      	beq.n	8006df2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006db8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fe fdf8 	bl	80059bc <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dd0:	f7fe fdf4 	bl	80059bc <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e0f2      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006de2:	4b23      	ldr	r3, [pc, #140]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0ef      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x418>
 8006df0:	e01b      	b.n	8006e2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006df2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006df8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e02:	f7fe fddb 	bl	80059bc <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e0a:	f7fe fdd7 	bl	80059bc <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0d5      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e1c:	4b14      	ldr	r3, [pc, #80]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ef      	bne.n	8006e0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80c9 	beq.w	8006fc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e34:	4b0e      	ldr	r3, [pc, #56]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	f000 8083 	beq.w	8006f48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d15e      	bne.n	8006f08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4a:	4b09      	ldr	r3, [pc, #36]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a08      	ldr	r2, [pc, #32]	@ (8006e70 <HAL_RCC_OscConfig+0x4b8>)
 8006e50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7fe fdb1 	bl	80059bc <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e5c:	e00c      	b.n	8006e78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e5e:	f7fe fdad 	bl	80059bc <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d905      	bls.n	8006e78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0ab      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
 8006e70:	40021000 	.word	0x40021000
 8006e74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e78:	4b55      	ldr	r3, [pc, #340]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ec      	bne.n	8006e5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e84:	4b52      	ldr	r3, [pc, #328]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	4b52      	ldr	r3, [pc, #328]	@ (8006fd4 <HAL_RCC_OscConfig+0x61c>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6a11      	ldr	r1, [r2, #32]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e94:	3a01      	subs	r2, #1
 8006e96:	0112      	lsls	r2, r2, #4
 8006e98:	4311      	orrs	r1, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006e9e:	0212      	lsls	r2, r2, #8
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ea6:	0852      	lsrs	r2, r2, #1
 8006ea8:	3a01      	subs	r2, #1
 8006eaa:	0552      	lsls	r2, r2, #21
 8006eac:	4311      	orrs	r1, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006eb2:	0852      	lsrs	r2, r2, #1
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	0652      	lsls	r2, r2, #25
 8006eb8:	4311      	orrs	r1, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ebe:	06d2      	lsls	r2, r2, #27
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	4943      	ldr	r1, [pc, #268]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec8:	4b41      	ldr	r3, [pc, #260]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a40      	ldr	r2, [pc, #256]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ed2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fe fd6c 	bl	80059bc <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7fe fd68 	bl	80059bc <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e066      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006efa:	4b35      	ldr	r3, [pc, #212]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x530>
 8006f06:	e05e      	b.n	8006fc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f08:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fe fd52 	bl	80059bc <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fe fd4e 	bl	80059bc <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e04c      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f2e:	4b28      	ldr	r3, [pc, #160]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f3a:	4b25      	ldr	r3, [pc, #148]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	4924      	ldr	r1, [pc, #144]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f40:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <HAL_RCC_OscConfig+0x620>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	60cb      	str	r3, [r1, #12]
 8006f46:	e03e      	b.n	8006fc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e039      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f54:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd0 <HAL_RCC_OscConfig+0x618>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f003 0203 	and.w	r2, r3, #3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d12c      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	3b01      	subs	r3, #1
 8006f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d123      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d11b      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d113      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d109      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	019f800c 	.word	0x019f800c
 8006fd8:	feeefffc 	.word	0xfeeefffc

08006fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e11e      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff4:	4b91      	ldr	r3, [pc, #580]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d910      	bls.n	8007024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007002:	4b8e      	ldr	r3, [pc, #568]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 020f 	bic.w	r2, r3, #15
 800700a:	498c      	ldr	r1, [pc, #560]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007012:	4b8a      	ldr	r3, [pc, #552]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e106      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d073      	beq.n	8007118 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d129      	bne.n	800708c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007038:	4b81      	ldr	r3, [pc, #516]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0f4      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007048:	f000 f99e 	bl	8007388 <RCC_GetSysClockFreqFromPLLSource>
 800704c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4a7c      	ldr	r2, [pc, #496]	@ (8007244 <HAL_RCC_ClockConfig+0x268>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d93f      	bls.n	80070d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007056:	4b7a      	ldr	r3, [pc, #488]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800706a:	2b00      	cmp	r3, #0
 800706c:	d033      	beq.n	80070d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007072:	2b00      	cmp	r3, #0
 8007074:	d12f      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007076:	4b72      	ldr	r3, [pc, #456]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800707e:	4a70      	ldr	r2, [pc, #448]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007086:	2380      	movs	r3, #128	@ 0x80
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e024      	b.n	80070d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d107      	bne.n	80070a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007094:	4b6a      	ldr	r3, [pc, #424]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0c6      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070a4:	4b66      	ldr	r3, [pc, #408]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0be      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070b4:	f000 f8ce 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 80070b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4a61      	ldr	r2, [pc, #388]	@ (8007244 <HAL_RCC_ClockConfig+0x268>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d909      	bls.n	80070d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070c2:	4b5f      	ldr	r3, [pc, #380]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070ca:	4a5d      	ldr	r2, [pc, #372]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80070cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070d2:	2380      	movs	r3, #128	@ 0x80
 80070d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070d6:	4b5a      	ldr	r3, [pc, #360]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f023 0203 	bic.w	r2, r3, #3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4957      	ldr	r1, [pc, #348]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e8:	f7fe fc68 	bl	80059bc <HAL_GetTick>
 80070ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f0:	f7fe fc64 	bl	80059bc <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e095      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007106:	4b4e      	ldr	r3, [pc, #312]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 020c 	and.w	r2, r3, #12
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	429a      	cmp	r2, r3
 8007116:	d1eb      	bne.n	80070f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d023      	beq.n	800716c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007130:	4b43      	ldr	r3, [pc, #268]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	4a42      	ldr	r2, [pc, #264]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800713a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007148:	4b3d      	ldr	r3, [pc, #244]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007150:	4a3b      	ldr	r2, [pc, #236]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007158:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4936      	ldr	r1, [pc, #216]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007166:	4313      	orrs	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
 800716a:	e008      	b.n	800717e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b80      	cmp	r3, #128	@ 0x80
 8007170:	d105      	bne.n	800717e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007172:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4a32      	ldr	r2, [pc, #200]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800717c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800717e:	4b2f      	ldr	r3, [pc, #188]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d21d      	bcs.n	80071c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718c:	4b2b      	ldr	r3, [pc, #172]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 020f 	bic.w	r2, r3, #15
 8007194:	4929      	ldr	r1, [pc, #164]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800719c:	f7fe fc0e 	bl	80059bc <HAL_GetTick>
 80071a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	e00a      	b.n	80071ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071a4:	f7fe fc0a 	bl	80059bc <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e03b      	b.n	8007232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b20      	ldr	r3, [pc, #128]	@ (800723c <HAL_RCC_ClockConfig+0x260>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d1ed      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	4917      	ldr	r1, [pc, #92]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071f2:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	490f      	ldr	r1, [pc, #60]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 8007202:	4313      	orrs	r3, r2
 8007204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007206:	f000 f825 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800720a:	4602      	mov	r2, r0
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <HAL_RCC_ClockConfig+0x264>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	490c      	ldr	r1, [pc, #48]	@ (8007248 <HAL_RCC_ClockConfig+0x26c>)
 8007218:	5ccb      	ldrb	r3, [r1, r3]
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	fa22 f303 	lsr.w	r3, r2, r3
 8007222:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <HAL_RCC_ClockConfig+0x270>)
 8007224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007226:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <HAL_RCC_ClockConfig+0x274>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fb7a 	bl	8005924 <HAL_InitTick>
 8007230:	4603      	mov	r3, r0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40022000 	.word	0x40022000
 8007240:	40021000 	.word	0x40021000
 8007244:	04c4b400 	.word	0x04c4b400
 8007248:	0800b518 	.word	0x0800b518
 800724c:	20000014 	.word	0x20000014
 8007250:	20000018 	.word	0x20000018

08007254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800725a:	4b2c      	ldr	r3, [pc, #176]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	2b04      	cmp	r3, #4
 8007264:	d102      	bne.n	800726c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007266:	4b2a      	ldr	r3, [pc, #168]	@ (8007310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	e047      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800726c:	4b27      	ldr	r3, [pc, #156]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	2b08      	cmp	r3, #8
 8007276:	d102      	bne.n	800727e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007278:	4b26      	ldr	r3, [pc, #152]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xc0>)
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	e03e      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800727e:	4b23      	ldr	r3, [pc, #140]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b0c      	cmp	r3, #12
 8007288:	d136      	bne.n	80072f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800728a:	4b20      	ldr	r3, [pc, #128]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007294:	4b1d      	ldr	r3, [pc, #116]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	3301      	adds	r3, #1
 80072a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d10c      	bne.n	80072c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b0:	4a16      	ldr	r2, [pc, #88]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b2:	68d2      	ldr	r2, [r2, #12]
 80072b4:	0a12      	lsrs	r2, r2, #8
 80072b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	617b      	str	r3, [r7, #20]
      break;
 80072c0:	e00c      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c2:	4a13      	ldr	r2, [pc, #76]	@ (8007310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	4a10      	ldr	r2, [pc, #64]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072cc:	68d2      	ldr	r2, [r2, #12]
 80072ce:	0a12      	lsrs	r2, r2, #8
 80072d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]
      break;
 80072da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072dc:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	0e5b      	lsrs	r3, r3, #25
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	3301      	adds	r3, #1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	e001      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80072fc:	693b      	ldr	r3, [r7, #16]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
 8007310:	00f42400 	.word	0x00f42400
 8007314:	007a1200 	.word	0x007a1200

08007318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800731c:	4b03      	ldr	r3, [pc, #12]	@ (800732c <HAL_RCC_GetHCLKFreq+0x14>)
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000014 	.word	0x20000014

08007330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007334:	f7ff fff0 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4904      	ldr	r1, [pc, #16]	@ (8007358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40021000 	.word	0x40021000
 8007358:	0800b528 	.word	0x0800b528

0800735c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007360:	f7ff ffda 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0adb      	lsrs	r3, r3, #11
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4904      	ldr	r1, [pc, #16]	@ (8007384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40021000 	.word	0x40021000
 8007384:	0800b528 	.word	0x0800b528

08007388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800738e:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007398:	4b1b      	ldr	r3, [pc, #108]	@ (8007408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	091b      	lsrs	r3, r3, #4
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d10c      	bne.n	80073c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073ac:	4a17      	ldr	r2, [pc, #92]	@ (800740c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073b6:	68d2      	ldr	r2, [r2, #12]
 80073b8:	0a12      	lsrs	r2, r2, #8
 80073ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	617b      	str	r3, [r7, #20]
    break;
 80073c4:	e00c      	b.n	80073e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073c6:	4a12      	ldr	r2, [pc, #72]	@ (8007410 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073d0:	68d2      	ldr	r2, [r2, #12]
 80073d2:	0a12      	lsrs	r2, r2, #8
 80073d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073d8:	fb02 f303 	mul.w	r3, r2, r3
 80073dc:	617b      	str	r3, [r7, #20]
    break;
 80073de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073e0:	4b09      	ldr	r3, [pc, #36]	@ (8007408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	0e5b      	lsrs	r3, r3, #25
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	3301      	adds	r3, #1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80073fa:	687b      	ldr	r3, [r7, #4]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40021000 	.word	0x40021000
 800740c:	007a1200 	.word	0x007a1200
 8007410:	00f42400 	.word	0x00f42400

08007414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800741c:	2300      	movs	r3, #0
 800741e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007420:	2300      	movs	r3, #0
 8007422:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8098 	beq.w	8007562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007432:	2300      	movs	r3, #0
 8007434:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007436:	4b43      	ldr	r3, [pc, #268]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	4b40      	ldr	r3, [pc, #256]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007446:	4a3f      	ldr	r2, [pc, #252]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800744c:	6593      	str	r3, [r2, #88]	@ 0x58
 800744e:	4b3d      	ldr	r3, [pc, #244]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007456:	60bb      	str	r3, [r7, #8]
 8007458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800745a:	2301      	movs	r3, #1
 800745c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800745e:	4b3a      	ldr	r3, [pc, #232]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a39      	ldr	r2, [pc, #228]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800746a:	f7fe faa7 	bl	80059bc <HAL_GetTick>
 800746e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007470:	e009      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007472:	f7fe faa3 	bl	80059bc <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d902      	bls.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	74fb      	strb	r3, [r7, #19]
        break;
 8007484:	e005      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007486:	4b30      	ldr	r3, [pc, #192]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0ef      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007492:	7cfb      	ldrb	r3, [r7, #19]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d159      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007498:	4b2a      	ldr	r3, [pc, #168]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01e      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d019      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074b4:	4b23      	ldr	r3, [pc, #140]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074c0:	4b20      	ldr	r3, [pc, #128]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074e0:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d016      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f2:	f7fe fa63 	bl	80059bc <HAL_GetTick>
 80074f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f8:	e00b      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fa:	f7fe fa5f 	bl	80059bc <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007508:	4293      	cmp	r3, r2
 800750a:	d902      	bls.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	74fb      	strb	r3, [r7, #19]
            break;
 8007510:	e006      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007512:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0ec      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007520:	7cfb      	ldrb	r3, [r7, #19]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007526:	4b07      	ldr	r3, [pc, #28]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007534:	4903      	ldr	r1, [pc, #12]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800753c:	e008      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800753e:	7cfb      	ldrb	r3, [r7, #19]
 8007540:	74bb      	strb	r3, [r7, #18]
 8007542:	e005      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007544:	40021000 	.word	0x40021000
 8007548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	7cfb      	ldrb	r3, [r7, #19]
 800754e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007550:	7c7b      	ldrb	r3, [r7, #17]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d105      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007556:	4ba6      	ldr	r3, [pc, #664]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755a:	4aa5      	ldr	r2, [pc, #660]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800755c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007560:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800756e:	4ba0      	ldr	r3, [pc, #640]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007574:	f023 0203 	bic.w	r2, r3, #3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	499c      	ldr	r1, [pc, #624]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00a      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007590:	4b97      	ldr	r3, [pc, #604]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007596:	f023 020c 	bic.w	r2, r3, #12
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	4994      	ldr	r1, [pc, #592]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075b2:	4b8f      	ldr	r3, [pc, #572]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	498b      	ldr	r1, [pc, #556]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00a      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075d4:	4b86      	ldr	r3, [pc, #536]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	4983      	ldr	r1, [pc, #524]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075f6:	4b7e      	ldr	r3, [pc, #504]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	497a      	ldr	r1, [pc, #488]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007606:	4313      	orrs	r3, r2
 8007608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007618:	4b75      	ldr	r3, [pc, #468]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800761e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	4972      	ldr	r1, [pc, #456]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800763a:	4b6d      	ldr	r3, [pc, #436]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4969      	ldr	r1, [pc, #420]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800765c:	4b64      	ldr	r3, [pc, #400]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007662:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	4961      	ldr	r1, [pc, #388]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800767e:	4b5c      	ldr	r3, [pc, #368]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007684:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	4958      	ldr	r1, [pc, #352]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800768e:	4313      	orrs	r3, r2
 8007690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800769c:	2b00      	cmp	r3, #0
 800769e:	d015      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076a0:	4b53      	ldr	r3, [pc, #332]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ae:	4950      	ldr	r1, [pc, #320]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076be:	d105      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c0:	4b4b      	ldr	r3, [pc, #300]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	4a4a      	ldr	r2, [pc, #296]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d015      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076d8:	4b45      	ldr	r3, [pc, #276]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	4942      	ldr	r1, [pc, #264]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076f6:	d105      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076f8:	4b3d      	ldr	r3, [pc, #244]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4a3c      	ldr	r2, [pc, #240]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007702:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d015      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007710:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007716:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	4934      	ldr	r1, [pc, #208]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800772e:	d105      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007730:	4b2f      	ldr	r3, [pc, #188]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4a2e      	ldr	r2, [pc, #184]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800773a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d015      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007748:	4b29      	ldr	r3, [pc, #164]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007756:	4926      	ldr	r1, [pc, #152]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007758:	4313      	orrs	r3, r2
 800775a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007766:	d105      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007768:	4b21      	ldr	r3, [pc, #132]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4a20      	ldr	r2, [pc, #128]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800776e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007772:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d015      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007780:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	4918      	ldr	r1, [pc, #96]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800779e:	d105      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077a0:	4b13      	ldr	r3, [pc, #76]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	4a12      	ldr	r2, [pc, #72]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d015      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077b8:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c6:	490a      	ldr	r1, [pc, #40]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d6:	d105      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077d8:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4a04      	ldr	r2, [pc, #16]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	40021000 	.word	0x40021000

080077f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e049      	b.n	800789a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fd fd56 	bl	80052cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f001 f82c 	bl	8008890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d001      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e04a      	b.n	8007952 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a21      	ldr	r2, [pc, #132]	@ (8007960 <HAL_TIM_Base_Start_IT+0xbc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007964 <HAL_TIM_Base_Start_IT+0xc0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007968 <HAL_TIM_Base_Start_IT+0xc4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1a      	ldr	r2, [pc, #104]	@ (800796c <HAL_TIM_Base_Start_IT+0xc8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x6c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a19      	ldr	r2, [pc, #100]	@ (8007970 <HAL_TIM_Base_Start_IT+0xcc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d115      	bne.n	800793c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	4b17      	ldr	r3, [pc, #92]	@ (8007974 <HAL_TIM_Base_Start_IT+0xd0>)
 8007918:	4013      	ands	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b06      	cmp	r3, #6
 8007920:	d015      	beq.n	800794e <HAL_TIM_Base_Start_IT+0xaa>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007928:	d011      	beq.n	800794e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e008      	b.n	800794e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e000      	b.n	8007950 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40013400 	.word	0x40013400
 8007970:	40014000 	.word	0x40014000
 8007974:	00010007 	.word	0x00010007

08007978 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a1a      	ldr	r2, [r3, #32]
 8007996:	f241 1311 	movw	r3, #4369	@ 0x1111
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10f      	bne.n	80079c0 <HAL_TIM_Base_Stop_IT+0x48>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d107      	bne.n	80079c0 <HAL_TIM_Base_Stop_IT+0x48>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0201 	bic.w	r2, r2, #1
 80079be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e049      	b.n	8007a7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d106      	bne.n	8007a02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fd fc1d 	bl	800523c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f000 ff3b 	bl	8008890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x24>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	e03c      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d109      	bne.n	8007ac2 <HAL_TIM_PWM_Start+0x3e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	bf14      	ite	ne
 8007aba:	2301      	movne	r3, #1
 8007abc:	2300      	moveq	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	e02f      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d109      	bne.n	8007adc <HAL_TIM_PWM_Start+0x58>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e022      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d109      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x72>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e015      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d109      	bne.n	8007b10 <HAL_TIM_PWM_Start+0x8c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e008      	b.n	8007b22 <HAL_TIM_PWM_Start+0x9e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e097      	b.n	8007c5a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d104      	bne.n	8007b3a <HAL_TIM_PWM_Start+0xb6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d104      	bne.n	8007b4a <HAL_TIM_PWM_Start+0xc6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b48:	e01b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_PWM_Start+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b58:	e013      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start+0xe6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b68:	e00b      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start+0xf6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b78:	e003      	b.n	8007b82 <HAL_TIM_PWM_Start+0xfe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2201      	movs	r2, #1
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 faae 	bl	80090ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a33      	ldr	r2, [pc, #204]	@ (8007c64 <HAL_TIM_PWM_Start+0x1e0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	@ (8007c68 <HAL_TIM_PWM_Start+0x1e4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	@ (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c70 <HAL_TIM_PWM_Start+0x1ec>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x13e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c74 <HAL_TIM_PWM_Start+0x1f0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x142>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIM_PWM_Start+0x144>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a20      	ldr	r2, [pc, #128]	@ (8007c64 <HAL_TIM_PWM_Start+0x1e0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bee:	d013      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a20      	ldr	r2, [pc, #128]	@ (8007c78 <HAL_TIM_PWM_Start+0x1f4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <HAL_TIM_PWM_Start+0x1f8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a17      	ldr	r2, [pc, #92]	@ (8007c68 <HAL_TIM_PWM_Start+0x1e4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x194>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a16      	ldr	r2, [pc, #88]	@ (8007c6c <HAL_TIM_PWM_Start+0x1e8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d115      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	4b18      	ldr	r3, [pc, #96]	@ (8007c80 <HAL_TIM_PWM_Start+0x1fc>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b06      	cmp	r3, #6
 8007c28:	d015      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c30:	d011      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	e008      	b.n	8007c56 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	00010007 	.word	0x00010007

08007c84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d109      	bne.n	8007cac <HAL_TIM_PWM_Start_IT+0x28>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	bf14      	ite	ne
 8007ca4:	2301      	movne	r3, #1
 8007ca6:	2300      	moveq	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	e03c      	b.n	8007d26 <HAL_TIM_PWM_Start_IT+0xa2>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d109      	bne.n	8007cc6 <HAL_TIM_PWM_Start_IT+0x42>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	e02f      	b.n	8007d26 <HAL_TIM_PWM_Start_IT+0xa2>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d109      	bne.n	8007ce0 <HAL_TIM_PWM_Start_IT+0x5c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	e022      	b.n	8007d26 <HAL_TIM_PWM_Start_IT+0xa2>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b0c      	cmp	r3, #12
 8007ce4:	d109      	bne.n	8007cfa <HAL_TIM_PWM_Start_IT+0x76>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	bf14      	ite	ne
 8007cf2:	2301      	movne	r3, #1
 8007cf4:	2300      	moveq	r3, #0
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	e015      	b.n	8007d26 <HAL_TIM_PWM_Start_IT+0xa2>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b10      	cmp	r3, #16
 8007cfe:	d109      	bne.n	8007d14 <HAL_TIM_PWM_Start_IT+0x90>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	bf14      	ite	ne
 8007d0c:	2301      	movne	r3, #1
 8007d0e:	2300      	moveq	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	e008      	b.n	8007d26 <HAL_TIM_PWM_Start_IT+0xa2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	bf14      	ite	ne
 8007d20:	2301      	movne	r3, #1
 8007d22:	2300      	moveq	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e0e2      	b.n	8007ef4 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_PWM_Start_IT+0xba>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d3c:	e023      	b.n	8007d86 <HAL_TIM_PWM_Start_IT+0x102>
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d104      	bne.n	8007d4e <HAL_TIM_PWM_Start_IT+0xca>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d4c:	e01b      	b.n	8007d86 <HAL_TIM_PWM_Start_IT+0x102>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d104      	bne.n	8007d5e <HAL_TIM_PWM_Start_IT+0xda>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d5c:	e013      	b.n	8007d86 <HAL_TIM_PWM_Start_IT+0x102>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b0c      	cmp	r3, #12
 8007d62:	d104      	bne.n	8007d6e <HAL_TIM_PWM_Start_IT+0xea>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d6c:	e00b      	b.n	8007d86 <HAL_TIM_PWM_Start_IT+0x102>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d104      	bne.n	8007d7e <HAL_TIM_PWM_Start_IT+0xfa>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d7c:	e003      	b.n	8007d86 <HAL_TIM_PWM_Start_IT+0x102>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b0c      	cmp	r3, #12
 8007d8a:	d841      	bhi.n	8007e10 <HAL_TIM_PWM_Start_IT+0x18c>
 8007d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <HAL_TIM_PWM_Start_IT+0x110>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dc9 	.word	0x08007dc9
 8007d98:	08007e11 	.word	0x08007e11
 8007d9c:	08007e11 	.word	0x08007e11
 8007da0:	08007e11 	.word	0x08007e11
 8007da4:	08007ddb 	.word	0x08007ddb
 8007da8:	08007e11 	.word	0x08007e11
 8007dac:	08007e11 	.word	0x08007e11
 8007db0:	08007e11 	.word	0x08007e11
 8007db4:	08007ded 	.word	0x08007ded
 8007db8:	08007e11 	.word	0x08007e11
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007e11 	.word	0x08007e11
 8007dc4:	08007dff 	.word	0x08007dff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0202 	orr.w	r2, r2, #2
 8007dd6:	60da      	str	r2, [r3, #12]
      break;
 8007dd8:	e01d      	b.n	8007e16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0204 	orr.w	r2, r2, #4
 8007de8:	60da      	str	r2, [r3, #12]
      break;
 8007dea:	e014      	b.n	8007e16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	60da      	str	r2, [r3, #12]
      break;
 8007dfc:	e00b      	b.n	8007e16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0210 	orr.w	r2, r2, #16
 8007e0c:	60da      	str	r2, [r3, #12]
      break;
 8007e0e:	e002      	b.n	8007e16 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
      break;
 8007e14:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d16a      	bne.n	8007ef2 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f961 	bl	80090ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a33      	ldr	r2, [pc, #204]	@ (8007efc <HAL_TIM_PWM_Start_IT+0x278>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a31      	ldr	r2, [pc, #196]	@ (8007f00 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00e      	beq.n	8007e5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a30      	ldr	r2, [pc, #192]	@ (8007f04 <HAL_TIM_PWM_Start_IT+0x280>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d009      	beq.n	8007e5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f08 <HAL_TIM_PWM_Start_IT+0x284>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d004      	beq.n	8007e5c <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2d      	ldr	r2, [pc, #180]	@ (8007f0c <HAL_TIM_PWM_Start_IT+0x288>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d101      	bne.n	8007e60 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <HAL_TIM_PWM_Start_IT+0x1de>
 8007e60:	2300      	movs	r3, #0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a20      	ldr	r2, [pc, #128]	@ (8007efc <HAL_TIM_PWM_Start_IT+0x278>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d018      	beq.n	8007eb2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e88:	d013      	beq.n	8007eb2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a20      	ldr	r2, [pc, #128]	@ (8007f10 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1e      	ldr	r2, [pc, #120]	@ (8007f14 <HAL_TIM_PWM_Start_IT+0x290>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a17      	ldr	r2, [pc, #92]	@ (8007f00 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIM_PWM_Start_IT+0x22e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <HAL_TIM_PWM_Start_IT+0x280>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d115      	bne.n	8007ede <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	4b17      	ldr	r3, [pc, #92]	@ (8007f18 <HAL_TIM_PWM_Start_IT+0x294>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d015      	beq.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x26c>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eca:	d011      	beq.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007edc:	e008      	b.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0201 	orr.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e000      	b.n	8007ef2 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40013400 	.word	0x40013400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400
 8007f0c:	40014800 	.word	0x40014800
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	00010007 	.word	0x00010007

08007f1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e097      	b.n	8008060 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fd fa1d 	bl	8005384 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007f60:	f023 0307 	bic.w	r3, r3, #7
 8007f64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f000 fc8d 	bl	8008890 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f9e:	f023 0303 	bic.w	r3, r3, #3
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007fbc:	f023 030c 	bic.w	r3, r3, #12
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	011a      	lsls	r2, r3, #4
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	031b      	lsls	r3, r3, #12
 8007fec:	4313      	orrs	r3, r2
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007ffa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	4313      	orrs	r3, r2
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008078:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008080:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008088:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008090:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d102      	bne.n	80080a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800809e:	7b7b      	ldrb	r3, [r7, #13]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e069      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b8:	e031      	b.n	800811e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d110      	bne.n	80080e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d102      	bne.n	80080cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c6:	7b3b      	ldrb	r3, [r7, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e055      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080e0:	e01d      	b.n	800811e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d108      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d105      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ee:	7b7b      	ldrb	r3, [r7, #13]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d102      	bne.n	80080fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080f4:	7b3b      	ldrb	r3, [r7, #12]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d001      	beq.n	80080fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e03e      	b.n	800817c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2202      	movs	r2, #2
 800811a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_TIM_Encoder_Start+0xc4>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d008      	beq.n	800813c <HAL_TIM_Encoder_Start+0xd4>
 800812a:	e00f      	b.n	800814c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f000 ffd9 	bl	80090ec <TIM_CCxChannelCmd>
      break;
 800813a:	e016      	b.n	800816a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2201      	movs	r2, #1
 8008142:	2104      	movs	r1, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f000 ffd1 	bl	80090ec <TIM_CCxChannelCmd>
      break;
 800814a:	e00e      	b.n	800816a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2201      	movs	r2, #1
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f000 ffc9 	bl	80090ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2201      	movs	r2, #1
 8008160:	2104      	movs	r1, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ffc2 	bl	80090ec <TIM_CCxChannelCmd>
      break;
 8008168:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d020      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01b      	beq.n	80081e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0202 	mvn.w	r2, #2
 80081b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fb40 	bl	8008854 <HAL_TIM_IC_CaptureCallback>
 80081d4:	e005      	b.n	80081e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fb32 	bl	8008840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb43 	bl	8008868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d020      	beq.n	8008234 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01b      	beq.n	8008234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0204 	mvn.w	r2, #4
 8008204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb1a 	bl	8008854 <HAL_TIM_IC_CaptureCallback>
 8008220:	e005      	b.n	800822e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fb0c 	bl	8008840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fb1d 	bl	8008868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d020      	beq.n	8008280 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01b      	beq.n	8008280 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0208 	mvn.w	r2, #8
 8008250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2204      	movs	r2, #4
 8008256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 faf4 	bl	8008854 <HAL_TIM_IC_CaptureCallback>
 800826c:	e005      	b.n	800827a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fae6 	bl	8008840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 faf7 	bl	8008868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	d020      	beq.n	80082cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01b      	beq.n	80082cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0210 	mvn.w	r2, #16
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2208      	movs	r2, #8
 80082a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 face 	bl	8008854 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fac0 	bl	8008840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fad1 	bl	8008868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0201 	mvn.w	r2, #1
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7f9 fe8c 	bl	8002008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f825 	bl	8009368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800833a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f81d 	bl	800937c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fa8b 	bl	800887c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f06f 0220 	mvn.w	r2, #32
 8008382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 ffe5 	bl	8009354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00c      	beq.n	80083ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fff1 	bl	8009390 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00c      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80083ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 ffe9 	bl	80093a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 ffe1 	bl	80093b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 ffd9 	bl	80093cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800843e:	2302      	movs	r3, #2
 8008440:	e0ff      	b.n	8008642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b14      	cmp	r3, #20
 800844e:	f200 80f0 	bhi.w	8008632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	080084ad 	.word	0x080084ad
 800845c:	08008633 	.word	0x08008633
 8008460:	08008633 	.word	0x08008633
 8008464:	08008633 	.word	0x08008633
 8008468:	080084ed 	.word	0x080084ed
 800846c:	08008633 	.word	0x08008633
 8008470:	08008633 	.word	0x08008633
 8008474:	08008633 	.word	0x08008633
 8008478:	0800852f 	.word	0x0800852f
 800847c:	08008633 	.word	0x08008633
 8008480:	08008633 	.word	0x08008633
 8008484:	08008633 	.word	0x08008633
 8008488:	0800856f 	.word	0x0800856f
 800848c:	08008633 	.word	0x08008633
 8008490:	08008633 	.word	0x08008633
 8008494:	08008633 	.word	0x08008633
 8008498:	080085b1 	.word	0x080085b1
 800849c:	08008633 	.word	0x08008633
 80084a0:	08008633 	.word	0x08008633
 80084a4:	08008633 	.word	0x08008633
 80084a8:	080085f1 	.word	0x080085f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fa88 	bl	80089c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0208 	orr.w	r2, r2, #8
 80084c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0204 	bic.w	r2, r2, #4
 80084d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6999      	ldr	r1, [r3, #24]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	619a      	str	r2, [r3, #24]
      break;
 80084ea:	e0a5      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 faf8 	bl	8008ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6999      	ldr	r1, [r3, #24]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	021a      	lsls	r2, r3, #8
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	619a      	str	r2, [r3, #24]
      break;
 800852c:	e084      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fb61 	bl	8008bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0208 	orr.w	r2, r2, #8
 8008548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0204 	bic.w	r2, r2, #4
 8008558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69d9      	ldr	r1, [r3, #28]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	61da      	str	r2, [r3, #28]
      break;
 800856c:	e064      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fbc9 	bl	8008d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69da      	ldr	r2, [r3, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69d9      	ldr	r1, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	021a      	lsls	r2, r3, #8
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	61da      	str	r2, [r3, #28]
      break;
 80085ae:	e043      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fc32 	bl	8008e20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0208 	orr.w	r2, r2, #8
 80085ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0204 	bic.w	r2, r2, #4
 80085da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085ee:	e023      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fc76 	bl	8008ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800860a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800861a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	021a      	lsls	r2, r3, #8
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008630:	e002      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
      break;
 8008636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop

0800864c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <HAL_TIM_ConfigClockSource+0x1c>
 8008664:	2302      	movs	r3, #2
 8008666:	e0de      	b.n	8008826 <HAL_TIM_ConfigClockSource+0x1da>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800868a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a63      	ldr	r2, [pc, #396]	@ (8008830 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	f000 80a9 	beq.w	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 80086a8:	4a61      	ldr	r2, [pc, #388]	@ (8008830 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	f200 80ae 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086b0:	4a60      	ldr	r2, [pc, #384]	@ (8008834 <HAL_TIM_ConfigClockSource+0x1e8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	f000 80a1 	beq.w	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 80086b8:	4a5e      	ldr	r2, [pc, #376]	@ (8008834 <HAL_TIM_ConfigClockSource+0x1e8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	f200 80a6 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086c0:	4a5d      	ldr	r2, [pc, #372]	@ (8008838 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	f000 8099 	beq.w	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 80086c8:	4a5b      	ldr	r2, [pc, #364]	@ (8008838 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	f200 809e 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086d0:	4a5a      	ldr	r2, [pc, #360]	@ (800883c <HAL_TIM_ConfigClockSource+0x1f0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	f000 8091 	beq.w	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 80086d8:	4a58      	ldr	r2, [pc, #352]	@ (800883c <HAL_TIM_ConfigClockSource+0x1f0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	f200 8096 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086e4:	f000 8089 	beq.w	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 80086e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086ec:	f200 808e 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086f4:	d03e      	beq.n	8008774 <HAL_TIM_ConfigClockSource+0x128>
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086fa:	f200 8087 	bhi.w	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 80086fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008702:	f000 8086 	beq.w	8008812 <HAL_TIM_ConfigClockSource+0x1c6>
 8008706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800870a:	d87f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 800870c:	2b70      	cmp	r3, #112	@ 0x70
 800870e:	d01a      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0xfa>
 8008710:	2b70      	cmp	r3, #112	@ 0x70
 8008712:	d87b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 8008714:	2b60      	cmp	r3, #96	@ 0x60
 8008716:	d050      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x16e>
 8008718:	2b60      	cmp	r3, #96	@ 0x60
 800871a:	d877      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 800871c:	2b50      	cmp	r3, #80	@ 0x50
 800871e:	d03c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x14e>
 8008720:	2b50      	cmp	r3, #80	@ 0x50
 8008722:	d873      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 8008724:	2b40      	cmp	r3, #64	@ 0x40
 8008726:	d058      	beq.n	80087da <HAL_TIM_ConfigClockSource+0x18e>
 8008728:	2b40      	cmp	r3, #64	@ 0x40
 800872a:	d86f      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 800872c:	2b30      	cmp	r3, #48	@ 0x30
 800872e:	d064      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008730:	2b30      	cmp	r3, #48	@ 0x30
 8008732:	d86b      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 8008734:	2b20      	cmp	r3, #32
 8008736:	d060      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008738:	2b20      	cmp	r3, #32
 800873a:	d867      	bhi.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05c      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008740:	2b10      	cmp	r3, #16
 8008742:	d05a      	beq.n	80087fa <HAL_TIM_ConfigClockSource+0x1ae>
 8008744:	e062      	b.n	800880c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008756:	f000 fca9 	bl	80090ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	609a      	str	r2, [r3, #8]
      break;
 8008772:	e04f      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008784:	f000 fc92 	bl	80090ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008796:	609a      	str	r2, [r3, #8]
      break;
 8008798:	e03c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087a6:	461a      	mov	r2, r3
 80087a8:	f000 fc04 	bl	8008fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2150      	movs	r1, #80	@ 0x50
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fc5d 	bl	8009072 <TIM_ITRx_SetConfig>
      break;
 80087b8:	e02c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087c6:	461a      	mov	r2, r3
 80087c8:	f000 fc23 	bl	8009012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2160      	movs	r1, #96	@ 0x60
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fc4d 	bl	8009072 <TIM_ITRx_SetConfig>
      break;
 80087d8:	e01c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e6:	461a      	mov	r2, r3
 80087e8:	f000 fbe4 	bl	8008fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2140      	movs	r1, #64	@ 0x40
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fc3d 	bl	8009072 <TIM_ITRx_SetConfig>
      break;
 80087f8:	e00c      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f000 fc34 	bl	8009072 <TIM_ITRx_SetConfig>
      break;
 800880a:	e003      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e000      	b.n	8008814 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	00100070 	.word	0x00100070
 8008834:	00100040 	.word	0x00100040
 8008838:	00100030 	.word	0x00100030
 800883c:	00100020 	.word	0x00100020

08008840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a42      	ldr	r2, [pc, #264]	@ (80089ac <TIM_Base_SetConfig+0x11c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00f      	beq.n	80088c8 <TIM_Base_SetConfig+0x38>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ae:	d00b      	beq.n	80088c8 <TIM_Base_SetConfig+0x38>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3f      	ldr	r2, [pc, #252]	@ (80089b0 <TIM_Base_SetConfig+0x120>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d007      	beq.n	80088c8 <TIM_Base_SetConfig+0x38>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a3e      	ldr	r2, [pc, #248]	@ (80089b4 <TIM_Base_SetConfig+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_Base_SetConfig+0x38>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a3d      	ldr	r2, [pc, #244]	@ (80089b8 <TIM_Base_SetConfig+0x128>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d108      	bne.n	80088da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a33      	ldr	r2, [pc, #204]	@ (80089ac <TIM_Base_SetConfig+0x11c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d01b      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e8:	d017      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a30      	ldr	r2, [pc, #192]	@ (80089b0 <TIM_Base_SetConfig+0x120>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2f      	ldr	r2, [pc, #188]	@ (80089b4 <TIM_Base_SetConfig+0x124>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00f      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a2e      	ldr	r2, [pc, #184]	@ (80089b8 <TIM_Base_SetConfig+0x128>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00b      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2d      	ldr	r2, [pc, #180]	@ (80089bc <TIM_Base_SetConfig+0x12c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d007      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a2c      	ldr	r2, [pc, #176]	@ (80089c0 <TIM_Base_SetConfig+0x130>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_Base_SetConfig+0x8a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2b      	ldr	r2, [pc, #172]	@ (80089c4 <TIM_Base_SetConfig+0x134>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d108      	bne.n	800892c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a16      	ldr	r2, [pc, #88]	@ (80089ac <TIM_Base_SetConfig+0x11c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00f      	beq.n	8008978 <TIM_Base_SetConfig+0xe8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a17      	ldr	r2, [pc, #92]	@ (80089b8 <TIM_Base_SetConfig+0x128>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00b      	beq.n	8008978 <TIM_Base_SetConfig+0xe8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a16      	ldr	r2, [pc, #88]	@ (80089bc <TIM_Base_SetConfig+0x12c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d007      	beq.n	8008978 <TIM_Base_SetConfig+0xe8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a15      	ldr	r2, [pc, #84]	@ (80089c0 <TIM_Base_SetConfig+0x130>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_Base_SetConfig+0xe8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a14      	ldr	r2, [pc, #80]	@ (80089c4 <TIM_Base_SetConfig+0x134>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d103      	bne.n	8008980 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b01      	cmp	r3, #1
 8008990:	d105      	bne.n	800899e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f023 0201 	bic.w	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	611a      	str	r2, [r3, #16]
  }
}
 800899e:	bf00      	nop
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40012c00 	.word	0x40012c00
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40013400 	.word	0x40013400
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40014400 	.word	0x40014400
 80089c4:	40014800 	.word	0x40014800

080089c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	f023 0201 	bic.w	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0303 	bic.w	r3, r3, #3
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f023 0302 	bic.w	r3, r3, #2
 8008a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad4 <TIM_OC1_SetConfig+0x10c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00f      	beq.n	8008a48 <TIM_OC1_SetConfig+0x80>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad8 <TIM_OC1_SetConfig+0x110>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_OC1_SetConfig+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a2a      	ldr	r2, [pc, #168]	@ (8008adc <TIM_OC1_SetConfig+0x114>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d007      	beq.n	8008a48 <TIM_OC1_SetConfig+0x80>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a29      	ldr	r2, [pc, #164]	@ (8008ae0 <TIM_OC1_SetConfig+0x118>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_OC1_SetConfig+0x80>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a28      	ldr	r2, [pc, #160]	@ (8008ae4 <TIM_OC1_SetConfig+0x11c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10c      	bne.n	8008a62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0308 	bic.w	r3, r3, #8
 8008a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f023 0304 	bic.w	r3, r3, #4
 8008a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad4 <TIM_OC1_SetConfig+0x10c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00f      	beq.n	8008a8a <TIM_OC1_SetConfig+0xc2>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ad8 <TIM_OC1_SetConfig+0x110>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <TIM_OC1_SetConfig+0xc2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a19      	ldr	r2, [pc, #100]	@ (8008adc <TIM_OC1_SetConfig+0x114>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d007      	beq.n	8008a8a <TIM_OC1_SetConfig+0xc2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ae0 <TIM_OC1_SetConfig+0x118>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_OC1_SetConfig+0xc2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a17      	ldr	r2, [pc, #92]	@ (8008ae4 <TIM_OC1_SetConfig+0x11c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d111      	bne.n	8008aae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	621a      	str	r2, [r3, #32]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40013400 	.word	0x40013400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40014400 	.word	0x40014400
 8008ae4:	40014800 	.word	0x40014800

08008ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f023 0210 	bic.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f023 0320 	bic.w	r3, r3, #32
 8008b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a28      	ldr	r2, [pc, #160]	@ (8008be8 <TIM_OC2_SetConfig+0x100>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d003      	beq.n	8008b54 <TIM_OC2_SetConfig+0x6c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a27      	ldr	r2, [pc, #156]	@ (8008bec <TIM_OC2_SetConfig+0x104>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d10d      	bne.n	8008b70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a1d      	ldr	r2, [pc, #116]	@ (8008be8 <TIM_OC2_SetConfig+0x100>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00f      	beq.n	8008b98 <TIM_OC2_SetConfig+0xb0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bec <TIM_OC2_SetConfig+0x104>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00b      	beq.n	8008b98 <TIM_OC2_SetConfig+0xb0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf0 <TIM_OC2_SetConfig+0x108>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <TIM_OC2_SetConfig+0xb0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf4 <TIM_OC2_SetConfig+0x10c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_OC2_SetConfig+0xb0>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a19      	ldr	r2, [pc, #100]	@ (8008bf8 <TIM_OC2_SetConfig+0x110>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d113      	bne.n	8008bc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40012c00 	.word	0x40012c00
 8008bec:	40013400 	.word	0x40013400
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40014400 	.word	0x40014400
 8008bf8:	40014800 	.word	0x40014800

08008bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a27      	ldr	r2, [pc, #156]	@ (8008cf8 <TIM_OC3_SetConfig+0xfc>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_OC3_SetConfig+0x6a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a26      	ldr	r2, [pc, #152]	@ (8008cfc <TIM_OC3_SetConfig+0x100>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d10d      	bne.n	8008c82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a1c      	ldr	r2, [pc, #112]	@ (8008cf8 <TIM_OC3_SetConfig+0xfc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d00f      	beq.n	8008caa <TIM_OC3_SetConfig+0xae>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008cfc <TIM_OC3_SetConfig+0x100>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00b      	beq.n	8008caa <TIM_OC3_SetConfig+0xae>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a1a      	ldr	r2, [pc, #104]	@ (8008d00 <TIM_OC3_SetConfig+0x104>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d007      	beq.n	8008caa <TIM_OC3_SetConfig+0xae>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a19      	ldr	r2, [pc, #100]	@ (8008d04 <TIM_OC3_SetConfig+0x108>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d003      	beq.n	8008caa <TIM_OC3_SetConfig+0xae>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a18      	ldr	r2, [pc, #96]	@ (8008d08 <TIM_OC3_SetConfig+0x10c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d113      	bne.n	8008cd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	621a      	str	r2, [r3, #32]
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800

08008d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	031b      	lsls	r3, r3, #12
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a28      	ldr	r2, [pc, #160]	@ (8008e0c <TIM_OC4_SetConfig+0x100>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_OC4_SetConfig+0x6c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a27      	ldr	r2, [pc, #156]	@ (8008e10 <TIM_OC4_SetConfig+0x104>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d10d      	bne.n	8008d94 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	031b      	lsls	r3, r3, #12
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a1d      	ldr	r2, [pc, #116]	@ (8008e0c <TIM_OC4_SetConfig+0x100>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00f      	beq.n	8008dbc <TIM_OC4_SetConfig+0xb0>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008e10 <TIM_OC4_SetConfig+0x104>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <TIM_OC4_SetConfig+0xb0>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e14 <TIM_OC4_SetConfig+0x108>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d007      	beq.n	8008dbc <TIM_OC4_SetConfig+0xb0>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a1a      	ldr	r2, [pc, #104]	@ (8008e18 <TIM_OC4_SetConfig+0x10c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d003      	beq.n	8008dbc <TIM_OC4_SetConfig+0xb0>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a19      	ldr	r2, [pc, #100]	@ (8008e1c <TIM_OC4_SetConfig+0x110>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d113      	bne.n	8008de4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	019b      	lsls	r3, r3, #6
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	019b      	lsls	r3, r3, #6
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	621a      	str	r2, [r3, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40013400 	.word	0x40013400
 8008e14:	40014000 	.word	0x40014000
 8008e18:	40014400 	.word	0x40014400
 8008e1c:	40014800 	.word	0x40014800

08008e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	041b      	lsls	r3, r3, #16
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a17      	ldr	r2, [pc, #92]	@ (8008ed4 <TIM_OC5_SetConfig+0xb4>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00f      	beq.n	8008e9a <TIM_OC5_SetConfig+0x7a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a16      	ldr	r2, [pc, #88]	@ (8008ed8 <TIM_OC5_SetConfig+0xb8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00b      	beq.n	8008e9a <TIM_OC5_SetConfig+0x7a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a15      	ldr	r2, [pc, #84]	@ (8008edc <TIM_OC5_SetConfig+0xbc>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <TIM_OC5_SetConfig+0x7a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a14      	ldr	r2, [pc, #80]	@ (8008ee0 <TIM_OC5_SetConfig+0xc0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC5_SetConfig+0x7a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a13      	ldr	r2, [pc, #76]	@ (8008ee4 <TIM_OC5_SetConfig+0xc4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d109      	bne.n	8008eae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	621a      	str	r2, [r3, #32]
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	40013400 	.word	0x40013400
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40014400 	.word	0x40014400
 8008ee4:	40014800 	.word	0x40014800

08008ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	051b      	lsls	r3, r3, #20
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a18      	ldr	r2, [pc, #96]	@ (8008fa0 <TIM_OC6_SetConfig+0xb8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d00f      	beq.n	8008f64 <TIM_OC6_SetConfig+0x7c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a17      	ldr	r2, [pc, #92]	@ (8008fa4 <TIM_OC6_SetConfig+0xbc>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00b      	beq.n	8008f64 <TIM_OC6_SetConfig+0x7c>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a16      	ldr	r2, [pc, #88]	@ (8008fa8 <TIM_OC6_SetConfig+0xc0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d007      	beq.n	8008f64 <TIM_OC6_SetConfig+0x7c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a15      	ldr	r2, [pc, #84]	@ (8008fac <TIM_OC6_SetConfig+0xc4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_OC6_SetConfig+0x7c>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a14      	ldr	r2, [pc, #80]	@ (8008fb0 <TIM_OC6_SetConfig+0xc8>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d109      	bne.n	8008f78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	029b      	lsls	r3, r3, #10
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40012c00 	.word	0x40012c00
 8008fa4:	40013400 	.word	0x40013400
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	40014800 	.word	0x40014800

08008fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f023 0201 	bic.w	r2, r3, #1
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f023 030a 	bic.w	r3, r3, #10
 8008ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	621a      	str	r2, [r3, #32]
}
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009012:	b480      	push	{r7}
 8009014:	b087      	sub	sp, #28
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f023 0210 	bic.w	r2, r3, #16
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800903c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	031b      	lsls	r3, r3, #12
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800904e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009072:	b480      	push	{r7}
 8009074:	b085      	sub	sp, #20
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800908c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4313      	orrs	r3, r2
 8009094:	f043 0307 	orr.w	r3, r3, #7
 8009098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	609a      	str	r2, [r3, #8]
}
 80090a0:	bf00      	nop
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	021a      	lsls	r2, r3, #8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	431a      	orrs	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	609a      	str	r2, [r3, #8]
}
 80090e0:	bf00      	nop
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	2201      	movs	r2, #1
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	43db      	mvns	r3, r3
 800910e:	401a      	ands	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a1a      	ldr	r2, [r3, #32]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	fa01 f303 	lsl.w	r3, r1, r3
 8009124:	431a      	orrs	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	621a      	str	r2, [r3, #32]
}
 800912a:	bf00      	nop
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
	...

08009138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800914c:	2302      	movs	r3, #2
 800914e:	e065      	b.n	800921c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a2c      	ldr	r2, [pc, #176]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d004      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a2b      	ldr	r2, [pc, #172]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d108      	bne.n	8009196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800918a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800919c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d018      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c6:	d013      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a18      	ldr	r2, [pc, #96]	@ (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00e      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a17      	ldr	r2, [pc, #92]	@ (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a12      	ldr	r2, [pc, #72]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a13      	ldr	r2, [pc, #76]	@ (8009238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10c      	bne.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	40012c00 	.word	0x40012c00
 800922c:	40013400 	.word	0x40013400
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40014000 	.word	0x40014000

0800923c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009254:	2302      	movs	r3, #2
 8009256:	e073      	b.n	8009340 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	041b      	lsls	r3, r3, #16
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a19      	ldr	r2, [pc, #100]	@ (800934c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d004      	beq.n	80092f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a18      	ldr	r2, [pc, #96]	@ (8009350 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d11c      	bne.n	800932e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fe:	051b      	lsls	r3, r3, #20
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40012c00 	.word	0x40012c00
 8009350:	40013400 	.word	0x40013400

08009354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e042      	b.n	8009478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fc f89f 	bl	8005548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2224      	movs	r2, #36	@ 0x24
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0201 	bic.w	r2, r2, #1
 8009420:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 ff40 	bl	800a2b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fc71 	bl	8009d18 <UART_SetConfig>
 8009436:	4603      	mov	r3, r0
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e01b      	b.n	8009478 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800944e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800945e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 ffbf 	bl	800a3f4 <UART_CheckIdleState>
 8009476:	4603      	mov	r3, r0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	@ 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009494:	2b20      	cmp	r3, #32
 8009496:	d167      	bne.n	8009568 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_UART_Transmit_DMA+0x24>
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e060      	b.n	800956a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	88fa      	ldrh	r2, [r7, #6]
 80094b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2221      	movs	r2, #33	@ 0x21
 80094ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d028      	beq.n	8009528 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094da:	4a26      	ldr	r2, [pc, #152]	@ (8009574 <HAL_UART_Transmit_DMA+0xf4>)
 80094dc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094e2:	4a25      	ldr	r2, [pc, #148]	@ (8009578 <HAL_UART_Transmit_DMA+0xf8>)
 80094e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ea:	4a24      	ldr	r2, [pc, #144]	@ (800957c <HAL_UART_Transmit_DMA+0xfc>)
 80094ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094f2:	2200      	movs	r2, #0
 80094f4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fe:	4619      	mov	r1, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3328      	adds	r3, #40	@ 0x28
 8009506:	461a      	mov	r2, r3
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	f7fc fc1b 	bl	8005d44 <HAL_DMA_Start_IT>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d009      	beq.n	8009528 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2210      	movs	r2, #16
 8009518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e020      	b.n	800956a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2240      	movs	r2, #64	@ 0x40
 800952e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3308      	adds	r3, #8
 8009536:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	613b      	str	r3, [r7, #16]
   return(result);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3308      	adds	r3, #8
 800954e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009550:	623a      	str	r2, [r7, #32]
 8009552:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	6a3a      	ldr	r2, [r7, #32]
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	61bb      	str	r3, [r7, #24]
   return(result);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e5      	bne.n	8009530 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	e000      	b.n	800956a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009568:	2302      	movs	r3, #2
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3728      	adds	r7, #40	@ 0x28
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	0800a8bf 	.word	0x0800a8bf
 8009578:	0800a959 	.word	0x0800a959
 800957c:	0800aadf 	.word	0x0800aadf

08009580 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	@ 0x28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009594:	2b20      	cmp	r3, #32
 8009596:	d137      	bne.n	8009608 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <HAL_UART_Receive_DMA+0x24>
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e030      	b.n	800960a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a18      	ldr	r2, [pc, #96]	@ (8009614 <HAL_UART_Receive_DMA+0x94>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d01f      	beq.n	80095f8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d018      	beq.n	80095f8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095da:	627b      	str	r3, [r7, #36]	@ 0x24
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	623b      	str	r3, [r7, #32]
 80095e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69f9      	ldr	r1, [r7, #28]
 80095ea:	6a3a      	ldr	r2, [r7, #32]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e6      	bne.n	80095c6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095f8:	88fb      	ldrh	r3, [r7, #6]
 80095fa:	461a      	mov	r2, r3
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f001 f810 	bl	800a624 <UART_Start_Receive_DMA>
 8009604:	4603      	mov	r3, r0
 8009606:	e000      	b.n	800960a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009608:	2302      	movs	r3, #2
  }
}
 800960a:	4618      	mov	r0, r3
 800960c:	3728      	adds	r7, #40	@ 0x28
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40008000 	.word	0x40008000

08009618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b0ba      	sub	sp, #232	@ 0xe8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800963e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009642:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009646:	4013      	ands	r3, r2
 8009648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800964c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d11b      	bne.n	800968c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d015      	beq.n	800968c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800966c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8300 	beq.w	8009c82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
      }
      return;
 800968a:	e2fa      	b.n	8009c82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800968c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8123 	beq.w	80098dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800969a:	4b8d      	ldr	r3, [pc, #564]	@ (80098d0 <HAL_UART_IRQHandler+0x2b8>)
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096a6:	4b8b      	ldr	r3, [pc, #556]	@ (80098d4 <HAL_UART_IRQHandler+0x2bc>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8116 	beq.w	80098dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d011      	beq.n	80096e0 <HAL_UART_IRQHandler+0xc8>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f043 0201 	orr.w	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d011      	beq.n	8009710 <HAL_UART_IRQHandler+0xf8>
 80096ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2202      	movs	r2, #2
 80096fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009706:	f043 0204 	orr.w	r2, r3, #4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d011      	beq.n	8009740 <HAL_UART_IRQHandler+0x128>
 800971c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2204      	movs	r2, #4
 800972e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009736:	f043 0202 	orr.w	r2, r3, #2
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d017      	beq.n	800977c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b00      	cmp	r3, #0
 8009756:	d105      	bne.n	8009764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800975c:	4b5c      	ldr	r3, [pc, #368]	@ (80098d0 <HAL_UART_IRQHandler+0x2b8>)
 800975e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2208      	movs	r2, #8
 800976a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009772:	f043 0208 	orr.w	r2, r3, #8
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800977c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <HAL_UART_IRQHandler+0x196>
 8009788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800978c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00c      	beq.n	80097ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800979c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a4:	f043 0220 	orr.w	r2, r3, #32
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8266 	beq.w	8009c86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097be:	f003 0320 	and.w	r3, r3, #32
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d013      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009802:	2b40      	cmp	r3, #64	@ 0x40
 8009804:	d005      	beq.n	8009812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800980a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d054      	beq.n	80098bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 ffed 	bl	800a7f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009822:	2b40      	cmp	r3, #64	@ 0x40
 8009824:	d146      	bne.n	80098b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800983c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800985e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800986a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1d9      	bne.n	8009826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009878:	2b00      	cmp	r3, #0
 800987a:	d017      	beq.n	80098ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009882:	4a15      	ldr	r2, [pc, #84]	@ (80098d8 <HAL_UART_IRQHandler+0x2c0>)
 8009884:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800988c:	4618      	mov	r0, r3
 800988e:	f7fc fb2d 	bl	8005eec <HAL_DMA_Abort_IT>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d019      	beq.n	80098cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098aa:	e00f      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa1d 	bl	8009cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b2:	e00b      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fa19 	bl	8009cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ba:	e007      	b.n	80098cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fa15 	bl	8009cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80098ca:	e1dc      	b.n	8009c86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098cc:	bf00      	nop
    return;
 80098ce:	e1da      	b.n	8009c86 <HAL_UART_IRQHandler+0x66e>
 80098d0:	10000001 	.word	0x10000001
 80098d4:	04000120 	.word	0x04000120
 80098d8:	0800ab5f 	.word	0x0800ab5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	f040 8170 	bne.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ea:	f003 0310 	and.w	r3, r3, #16
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 8169 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f8:	f003 0310 	and.w	r3, r3, #16
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8162 	beq.w	8009bc6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2210      	movs	r2, #16
 8009908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	f040 80d8 	bne.w	8009aca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80af 	beq.w	8009a90 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800993c:	429a      	cmp	r2, r3
 800993e:	f080 80a7 	bcs.w	8009a90 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 8087 	bne.w	8009a6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800997c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800998a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800998e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1da      	bne.n	8009960 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e1      	bne.n	80099aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a3c:	f023 0310 	bic.w	r3, r3, #16
 8009a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e4      	bne.n	8009a2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fc f9e6 	bl	8005e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2202      	movs	r2, #2
 8009a72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f939 	bl	8009d00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a8e:	e0fc      	b.n	8009c8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	f040 80f5 	bne.w	8009c8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	f040 80eb 	bne.w	8009c8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f91c 	bl	8009d00 <HAL_UARTEx_RxEventCallback>
      return;
 8009ac8:	e0df      	b.n	8009c8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80d1 	beq.w	8009c8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80cc 	beq.w	8009c8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	e853 3f00 	ldrex	r3, [r3]
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b20:	e841 2300 	strex	r3, r2, [r1]
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e4      	bne.n	8009af6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3308      	adds	r3, #8
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b54:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e1      	bne.n	8009b2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 0310 	bic.w	r3, r3, #16
 8009b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	69b9      	ldr	r1, [r7, #24]
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	617b      	str	r3, [r7, #20]
   return(result);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e4      	bne.n	8009b7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f89e 	bl	8009d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bc4:	e063      	b.n	8009c8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x5d8>
 8009bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009be6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fff5 	bl	800abd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bee:	e051      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d014      	beq.n	8009c26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d105      	bne.n	8009c14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d03a      	beq.n	8009c92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	4798      	blx	r3
    }
    return;
 8009c24:	e035      	b.n	8009c92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62e>
 8009c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 ff9f 	bl	800ab82 <UART_EndTransmit_IT>
    return;
 8009c44:	e026      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <HAL_UART_IRQHandler+0x64e>
 8009c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 ffce 	bl	800ac00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c64:	e016      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d010      	beq.n	8009c94 <HAL_UART_IRQHandler+0x67c>
 8009c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da0c      	bge.n	8009c94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 ffb6 	bl	800abec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c80:	e008      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c82:	bf00      	nop
 8009c84:	e006      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
    return;
 8009c86:	bf00      	nop
 8009c88:	e004      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c8a:	bf00      	nop
 8009c8c:	e002      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
      return;
 8009c8e:	bf00      	nop
 8009c90:	e000      	b.n	8009c94 <HAL_UART_IRQHandler+0x67c>
    return;
 8009c92:	bf00      	nop
  }
}
 8009c94:	37e8      	adds	r7, #232	@ 0xe8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop

08009c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d1c:	b08c      	sub	sp, #48	@ 0x30
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	431a      	orrs	r2, r3
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4bab      	ldr	r3, [pc, #684]	@ (8009ff4 <UART_SetConfig+0x2dc>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	6812      	ldr	r2, [r2, #0]
 8009d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d50:	430b      	orrs	r3, r1
 8009d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4aa0      	ldr	r2, [pc, #640]	@ (8009ff8 <UART_SetConfig+0x2e0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d004      	beq.n	8009d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d80:	4313      	orrs	r3, r2
 8009d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009d8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	6812      	ldr	r2, [r2, #0]
 8009d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d98:	430b      	orrs	r3, r1
 8009d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da2:	f023 010f 	bic.w	r1, r3, #15
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a91      	ldr	r2, [pc, #580]	@ (8009ffc <UART_SetConfig+0x2e4>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d125      	bne.n	8009e08 <UART_SetConfig+0xf0>
 8009dbc:	4b90      	ldr	r3, [pc, #576]	@ (800a000 <UART_SetConfig+0x2e8>)
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d81a      	bhi.n	8009e00 <UART_SetConfig+0xe8>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <UART_SetConfig+0xb8>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009de1 	.word	0x08009de1
 8009dd4:	08009df1 	.word	0x08009df1
 8009dd8:	08009de9 	.word	0x08009de9
 8009ddc:	08009df9 	.word	0x08009df9
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009de6:	e0d6      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009de8:	2302      	movs	r3, #2
 8009dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dee:	e0d2      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009df6:	e0ce      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dfe:	e0ca      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e06:	e0c6      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a7d      	ldr	r2, [pc, #500]	@ (800a004 <UART_SetConfig+0x2ec>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d138      	bne.n	8009e84 <UART_SetConfig+0x16c>
 8009e12:	4b7b      	ldr	r3, [pc, #492]	@ (800a000 <UART_SetConfig+0x2e8>)
 8009e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e18:	f003 030c 	and.w	r3, r3, #12
 8009e1c:	2b0c      	cmp	r3, #12
 8009e1e:	d82d      	bhi.n	8009e7c <UART_SetConfig+0x164>
 8009e20:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <UART_SetConfig+0x110>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e5d 	.word	0x08009e5d
 8009e2c:	08009e7d 	.word	0x08009e7d
 8009e30:	08009e7d 	.word	0x08009e7d
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e6d 	.word	0x08009e6d
 8009e3c:	08009e7d 	.word	0x08009e7d
 8009e40:	08009e7d 	.word	0x08009e7d
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e7d 	.word	0x08009e7d
 8009e50:	08009e7d 	.word	0x08009e7d
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	e098      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e64:	2302      	movs	r3, #2
 8009e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	e094      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e72:	e090      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e74:	2308      	movs	r3, #8
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7a:	e08c      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e82:	e088      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a5f      	ldr	r2, [pc, #380]	@ (800a008 <UART_SetConfig+0x2f0>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d125      	bne.n	8009eda <UART_SetConfig+0x1c2>
 8009e8e:	4b5c      	ldr	r3, [pc, #368]	@ (800a000 <UART_SetConfig+0x2e8>)
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e98:	2b30      	cmp	r3, #48	@ 0x30
 8009e9a:	d016      	beq.n	8009eca <UART_SetConfig+0x1b2>
 8009e9c:	2b30      	cmp	r3, #48	@ 0x30
 8009e9e:	d818      	bhi.n	8009ed2 <UART_SetConfig+0x1ba>
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d00a      	beq.n	8009eba <UART_SetConfig+0x1a2>
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d814      	bhi.n	8009ed2 <UART_SetConfig+0x1ba>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <UART_SetConfig+0x19a>
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d008      	beq.n	8009ec2 <UART_SetConfig+0x1aa>
 8009eb0:	e00f      	b.n	8009ed2 <UART_SetConfig+0x1ba>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb8:	e06d      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec0:	e069      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009ec2:	2304      	movs	r3, #4
 8009ec4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec8:	e065      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009eca:	2308      	movs	r3, #8
 8009ecc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed0:	e061      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009ed2:	2310      	movs	r3, #16
 8009ed4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed8:	e05d      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a4b      	ldr	r2, [pc, #300]	@ (800a00c <UART_SetConfig+0x2f4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d125      	bne.n	8009f30 <UART_SetConfig+0x218>
 8009ee4:	4b46      	ldr	r3, [pc, #280]	@ (800a000 <UART_SetConfig+0x2e8>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009eee:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ef0:	d016      	beq.n	8009f20 <UART_SetConfig+0x208>
 8009ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ef4:	d818      	bhi.n	8009f28 <UART_SetConfig+0x210>
 8009ef6:	2b80      	cmp	r3, #128	@ 0x80
 8009ef8:	d00a      	beq.n	8009f10 <UART_SetConfig+0x1f8>
 8009efa:	2b80      	cmp	r3, #128	@ 0x80
 8009efc:	d814      	bhi.n	8009f28 <UART_SetConfig+0x210>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <UART_SetConfig+0x1f0>
 8009f02:	2b40      	cmp	r3, #64	@ 0x40
 8009f04:	d008      	beq.n	8009f18 <UART_SetConfig+0x200>
 8009f06:	e00f      	b.n	8009f28 <UART_SetConfig+0x210>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f0e:	e042      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f10:	2302      	movs	r3, #2
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f16:	e03e      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f1e:	e03a      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f20:	2308      	movs	r3, #8
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f26:	e036      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f2e:	e032      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a30      	ldr	r2, [pc, #192]	@ (8009ff8 <UART_SetConfig+0x2e0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d12a      	bne.n	8009f90 <UART_SetConfig+0x278>
 8009f3a:	4b31      	ldr	r3, [pc, #196]	@ (800a000 <UART_SetConfig+0x2e8>)
 8009f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f48:	d01a      	beq.n	8009f80 <UART_SetConfig+0x268>
 8009f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f4e:	d81b      	bhi.n	8009f88 <UART_SetConfig+0x270>
 8009f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f54:	d00c      	beq.n	8009f70 <UART_SetConfig+0x258>
 8009f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f5a:	d815      	bhi.n	8009f88 <UART_SetConfig+0x270>
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <UART_SetConfig+0x250>
 8009f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f64:	d008      	beq.n	8009f78 <UART_SetConfig+0x260>
 8009f66:	e00f      	b.n	8009f88 <UART_SetConfig+0x270>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e012      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f70:	2302      	movs	r3, #2
 8009f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f76:	e00e      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f78:	2304      	movs	r3, #4
 8009f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	e00a      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f80:	2308      	movs	r3, #8
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f86:	e006      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8e:	e002      	b.n	8009f96 <UART_SetConfig+0x27e>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a17      	ldr	r2, [pc, #92]	@ (8009ff8 <UART_SetConfig+0x2e0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	f040 80a8 	bne.w	800a0f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d834      	bhi.n	800a014 <UART_SetConfig+0x2fc>
 8009faa:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <UART_SetConfig+0x298>)
 8009fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb0:	08009fd5 	.word	0x08009fd5
 8009fb4:	0800a015 	.word	0x0800a015
 8009fb8:	08009fdd 	.word	0x08009fdd
 8009fbc:	0800a015 	.word	0x0800a015
 8009fc0:	08009fe3 	.word	0x08009fe3
 8009fc4:	0800a015 	.word	0x0800a015
 8009fc8:	0800a015 	.word	0x0800a015
 8009fcc:	0800a015 	.word	0x0800a015
 8009fd0:	08009feb 	.word	0x08009feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd4:	f7fd f9ac 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8009fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fda:	e021      	b.n	800a020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fdc:	4b0c      	ldr	r3, [pc, #48]	@ (800a010 <UART_SetConfig+0x2f8>)
 8009fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fe0:	e01e      	b.n	800a020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fe2:	f7fd f937 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8009fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fe8:	e01a      	b.n	800a020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ff0:	e016      	b.n	800a020 <UART_SetConfig+0x308>
 8009ff2:	bf00      	nop
 8009ff4:	cfff69f3 	.word	0xcfff69f3
 8009ff8:	40008000 	.word	0x40008000
 8009ffc:	40013800 	.word	0x40013800
 800a000:	40021000 	.word	0x40021000
 800a004:	40004400 	.word	0x40004400
 800a008:	40004800 	.word	0x40004800
 800a00c:	40004c00 	.word	0x40004c00
 800a010:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a01e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 812a 	beq.w	800a27c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02c:	4a9e      	ldr	r2, [pc, #632]	@ (800a2a8 <UART_SetConfig+0x590>)
 800a02e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a032:	461a      	mov	r2, r3
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	fbb3 f3f2 	udiv	r3, r3, r2
 800a03a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	4413      	add	r3, r2
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d305      	bcc.n	800a058 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	429a      	cmp	r2, r3
 800a056:	d903      	bls.n	800a060 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a05e:	e10d      	b.n	800a27c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	2200      	movs	r2, #0
 800a064:	60bb      	str	r3, [r7, #8]
 800a066:	60fa      	str	r2, [r7, #12]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06c:	4a8e      	ldr	r2, [pc, #568]	@ (800a2a8 <UART_SetConfig+0x590>)
 800a06e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a072:	b29b      	uxth	r3, r3
 800a074:	2200      	movs	r2, #0
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a07e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a082:	f7f6 fd9f 	bl	8000bc4 <__aeabi_uldivmod>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4610      	mov	r0, r2
 800a08c:	4619      	mov	r1, r3
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	020b      	lsls	r3, r1, #8
 800a098:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a09c:	0202      	lsls	r2, r0, #8
 800a09e:	6979      	ldr	r1, [r7, #20]
 800a0a0:	6849      	ldr	r1, [r1, #4]
 800a0a2:	0849      	lsrs	r1, r1, #1
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	eb12 0804 	adds.w	r8, r2, r4
 800a0ae:	eb43 0905 	adc.w	r9, r3, r5
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	469a      	mov	sl, r3
 800a0ba:	4693      	mov	fp, r2
 800a0bc:	4652      	mov	r2, sl
 800a0be:	465b      	mov	r3, fp
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	f7f6 fd7e 	bl	8000bc4 <__aeabi_uldivmod>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0d6:	d308      	bcc.n	800a0ea <UART_SetConfig+0x3d2>
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0de:	d204      	bcs.n	800a0ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6a3a      	ldr	r2, [r7, #32]
 800a0e6:	60da      	str	r2, [r3, #12]
 800a0e8:	e0c8      	b.n	800a27c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a0f0:	e0c4      	b.n	800a27c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0fa:	d167      	bne.n	800a1cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a0fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a100:	2b08      	cmp	r3, #8
 800a102:	d828      	bhi.n	800a156 <UART_SetConfig+0x43e>
 800a104:	a201      	add	r2, pc, #4	@ (adr r2, 800a10c <UART_SetConfig+0x3f4>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a131 	.word	0x0800a131
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a141 	.word	0x0800a141
 800a118:	0800a157 	.word	0x0800a157
 800a11c:	0800a147 	.word	0x0800a147
 800a120:	0800a157 	.word	0x0800a157
 800a124:	0800a157 	.word	0x0800a157
 800a128:	0800a157 	.word	0x0800a157
 800a12c:	0800a14f 	.word	0x0800a14f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a130:	f7fd f8fe 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 800a134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a136:	e014      	b.n	800a162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a138:	f7fd f910 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 800a13c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a13e:	e010      	b.n	800a162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a140:	4b5a      	ldr	r3, [pc, #360]	@ (800a2ac <UART_SetConfig+0x594>)
 800a142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a144:	e00d      	b.n	800a162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a146:	f7fd f885 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800a14a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a14c:	e009      	b.n	800a162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a14e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a154:	e005      	b.n	800a162 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8089 	beq.w	800a27c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	4a4e      	ldr	r2, [pc, #312]	@ (800a2a8 <UART_SetConfig+0x590>)
 800a170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a174:	461a      	mov	r2, r3
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	fbb3 f3f2 	udiv	r3, r3, r2
 800a17c:	005a      	lsls	r2, r3, #1
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	441a      	add	r2, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	2b0f      	cmp	r3, #15
 800a194:	d916      	bls.n	800a1c4 <UART_SetConfig+0x4ac>
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a19c:	d212      	bcs.n	800a1c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f023 030f 	bic.w	r3, r3, #15
 800a1a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	8bfb      	ldrh	r3, [r7, #30]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	8bfa      	ldrh	r2, [r7, #30]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	e05b      	b.n	800a27c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1ca:	e057      	b.n	800a27c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d828      	bhi.n	800a226 <UART_SetConfig+0x50e>
 800a1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1dc <UART_SetConfig+0x4c4>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a201 	.word	0x0800a201
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	0800a227 	.word	0x0800a227
 800a1ec:	0800a217 	.word	0x0800a217
 800a1f0:	0800a227 	.word	0x0800a227
 800a1f4:	0800a227 	.word	0x0800a227
 800a1f8:	0800a227 	.word	0x0800a227
 800a1fc:	0800a21f 	.word	0x0800a21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a200:	f7fd f896 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 800a204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a206:	e014      	b.n	800a232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a208:	f7fd f8a8 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 800a20c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a20e:	e010      	b.n	800a232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a210:	4b26      	ldr	r3, [pc, #152]	@ (800a2ac <UART_SetConfig+0x594>)
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a214:	e00d      	b.n	800a232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a216:	f7fd f81d 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800a21a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a21c:	e009      	b.n	800a232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a224:	e005      	b.n	800a232 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a230:	bf00      	nop
    }

    if (pclk != 0U)
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	d021      	beq.n	800a27c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23c:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a8 <UART_SetConfig+0x590>)
 800a23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a242:	461a      	mov	r2, r3
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	fbb3 f2f2 	udiv	r2, r3, r2
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	441a      	add	r2, r3
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2b0f      	cmp	r3, #15
 800a260:	d909      	bls.n	800a276 <UART_SetConfig+0x55e>
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a268:	d205      	bcs.n	800a276 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60da      	str	r2, [r3, #12]
 800a274:	e002      	b.n	800a27c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2201      	movs	r2, #1
 800a280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2201      	movs	r2, #1
 800a288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2200      	movs	r2, #0
 800a290:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2200      	movs	r2, #0
 800a296:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a298:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3730      	adds	r7, #48	@ 0x30
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0800b530 	.word	0x0800b530
 800a2ac:	00f42400 	.word	0x00f42400

0800a2b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00a      	beq.n	800a31e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00a      	beq.n	800a362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00a      	beq.n	800a384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01a      	beq.n	800a3c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3ae:	d10a      	bne.n	800a3c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b098      	sub	sp, #96	@ 0x60
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a404:	f7fb fada 	bl	80059bc <HAL_GetTick>
 800a408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b08      	cmp	r3, #8
 800a416:	d12f      	bne.n	800a478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a420:	2200      	movs	r2, #0
 800a422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f88e 	bl	800a548 <UART_WaitOnFlagUntilTimeout>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d022      	beq.n	800a478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a446:	653b      	str	r3, [r7, #80]	@ 0x50
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a450:	647b      	str	r3, [r7, #68]	@ 0x44
 800a452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e6      	bne.n	800a432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e063      	b.n	800a540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b04      	cmp	r3, #4
 800a484:	d149      	bne.n	800a51a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a486:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a48e:	2200      	movs	r2, #0
 800a490:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f857 	bl	800a548 <UART_WaitOnFlagUntilTimeout>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d03c      	beq.n	800a51a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e6      	bne.n	800a4a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f023 0301 	bic.w	r3, r3, #1
 800a4e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4f2:	61fa      	str	r2, [r7, #28]
 800a4f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	69b9      	ldr	r1, [r7, #24]
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	617b      	str	r3, [r7, #20]
   return(result);
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e5      	bne.n	800a4d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2220      	movs	r2, #32
 800a50a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e012      	b.n	800a540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3758      	adds	r7, #88	@ 0x58
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a558:	e04f      	b.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d04b      	beq.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a562:	f7fb fa2b 	bl	80059bc <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d302      	bcc.n	800a578 <UART_WaitOnFlagUntilTimeout+0x30>
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e04e      	b.n	800a61a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d037      	beq.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b80      	cmp	r3, #128	@ 0x80
 800a58e:	d034      	beq.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b40      	cmp	r3, #64	@ 0x40
 800a594:	d031      	beq.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	d110      	bne.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 f920 	bl	800a7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2208      	movs	r2, #8
 800a5b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e029      	b.n	800a61a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5d4:	d111      	bne.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f000 f906 	bl	800a7f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e00f      	b.n	800a61a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4013      	ands	r3, r2
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	bf0c      	ite	eq
 800a60a:	2301      	moveq	r3, #1
 800a60c:	2300      	movne	r3, #0
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	429a      	cmp	r2, r3
 800a616:	d0a0      	beq.n	800a55a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b096      	sub	sp, #88	@ 0x58
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	88fa      	ldrh	r2, [r7, #6]
 800a63c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2222      	movs	r2, #34	@ 0x22
 800a64c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d02d      	beq.n	800a6b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a660:	4a40      	ldr	r2, [pc, #256]	@ (800a764 <UART_Start_Receive_DMA+0x140>)
 800a662:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a66a:	4a3f      	ldr	r2, [pc, #252]	@ (800a768 <UART_Start_Receive_DMA+0x144>)
 800a66c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a674:	4a3d      	ldr	r2, [pc, #244]	@ (800a76c <UART_Start_Receive_DMA+0x148>)
 800a676:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a67e:	2200      	movs	r2, #0
 800a680:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3324      	adds	r3, #36	@ 0x24
 800a68e:	4619      	mov	r1, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a694:	461a      	mov	r2, r3
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	f7fb fb54 	bl	8005d44 <HAL_DMA_Start_IT>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d009      	beq.n	800a6b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2210      	movs	r2, #16
 800a6a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e051      	b.n	800a75a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d018      	beq.n	800a6f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6e4:	e841 2300 	strex	r3, r2, [r1]
 800a6e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e6      	bne.n	800a6be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	653b      	str	r3, [r7, #80]	@ 0x50
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3308      	adds	r3, #8
 800a70e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a710:	637a      	str	r2, [r7, #52]	@ 0x34
 800a712:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a716:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e5      	bne.n	800a6f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3308      	adds	r3, #8
 800a72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	613b      	str	r3, [r7, #16]
   return(result);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3308      	adds	r3, #8
 800a742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a744:	623a      	str	r2, [r7, #32]
 800a746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	69f9      	ldr	r1, [r7, #28]
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	61bb      	str	r3, [r7, #24]
   return(result);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e5      	bne.n	800a724 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3758      	adds	r7, #88	@ 0x58
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	0800a975 	.word	0x0800a975
 800a768:	0800aaa1 	.word	0x0800aaa1
 800a76c:	0800aadf 	.word	0x0800aadf

0800a770 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b08f      	sub	sp, #60	@ 0x3c
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	e853 3f00 	ldrex	r3, [r3]
 800a784:	61fb      	str	r3, [r7, #28]
   return(result);
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a798:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a79e:	e841 2300 	strex	r3, r2, [r1]
 800a7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e6      	bne.n	800a778 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	e853 3f00 	ldrex	r3, [r3]
 800a7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a7c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ca:	61ba      	str	r2, [r7, #24]
 800a7cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	6979      	ldr	r1, [r7, #20]
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e5      	bne.n	800a7aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a7e6:	bf00      	nop
 800a7e8:	373c      	adds	r7, #60	@ 0x3c
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b095      	sub	sp, #84	@ 0x54
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a802:	e853 3f00 	ldrex	r3, [r3]
 800a806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a818:	643b      	str	r3, [r7, #64]	@ 0x40
 800a81a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a81e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e6      	bne.n	800a7fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a842:	f023 0301 	bic.w	r3, r3, #1
 800a846:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3308      	adds	r3, #8
 800a84e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a850:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a858:	e841 2300 	strex	r3, r2, [r1]
 800a85c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e3      	bne.n	800a82c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d118      	bne.n	800a89e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	60bb      	str	r3, [r7, #8]
   return(result);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f023 0310 	bic.w	r3, r3, #16
 800a880:	647b      	str	r3, [r7, #68]	@ 0x44
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6979      	ldr	r1, [r7, #20]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	613b      	str	r3, [r7, #16]
   return(result);
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e6      	bne.n	800a86c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8b2:	bf00      	nop
 800a8b4:	3754      	adds	r7, #84	@ 0x54
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b090      	sub	sp, #64	@ 0x40
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0320 	and.w	r3, r3, #32
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d137      	bne.n	800a94a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3308      	adds	r3, #8
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3308      	adds	r3, #8
 800a900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a902:	633a      	str	r2, [r7, #48]	@ 0x30
 800a904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e5      	bne.n	800a8e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	60fb      	str	r3, [r7, #12]
   return(result);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	61fb      	str	r3, [r7, #28]
 800a936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	69b9      	ldr	r1, [r7, #24]
 800a93a:	69fa      	ldr	r2, [r7, #28]
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	617b      	str	r3, [r7, #20]
   return(result);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a948:	e002      	b.n	800a950 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a94a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a94c:	f7ff f9a6 	bl	8009c9c <HAL_UART_TxCpltCallback>
}
 800a950:	bf00      	nop
 800a952:	3740      	adds	r7, #64	@ 0x40
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a964:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff f9a2 	bl	8009cb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b09c      	sub	sp, #112	@ 0x70
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a980:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d171      	bne.n	800aa74 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a992:	2200      	movs	r2, #0
 800a994:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9a0:	e853 3f00 	ldrex	r3, [r3]
 800a9a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9be:	e841 2300 	strex	r3, r2, [r1]
 800a9c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1e6      	bne.n	800a998 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9dc:	f023 0301 	bic.w	r3, r3, #1
 800a9e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a9ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800a9ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e5      	bne.n	800a9ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa14:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa1e:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e5      	bne.n	800a9fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d118      	bne.n	800aa74 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f023 0310 	bic.w	r3, r3, #16
 800aa56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	69b9      	ldr	r1, [r7, #24]
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e6      	bne.n	800aa42 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa76:	2200      	movs	r2, #0
 800aa78:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d107      	bne.n	800aa92 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa8c:	f7ff f938 	bl	8009d00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa90:	e002      	b.n	800aa98 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aa92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa94:	f7ff f916 	bl	8009cc4 <HAL_UART_RxCpltCallback>
}
 800aa98:	bf00      	nop
 800aa9a:	3770      	adds	r7, #112	@ 0x70
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2201      	movs	r2, #1
 800aab2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d109      	bne.n	800aad0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aac2:	085b      	lsrs	r3, r3, #1
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff f919 	bl	8009d00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aace:	e002      	b.n	800aad6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff f901 	bl	8009cd8 <HAL_UART_RxHalfCpltCallback>
}
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b086      	sub	sp, #24
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaf2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab06:	2b80      	cmp	r3, #128	@ 0x80
 800ab08:	d109      	bne.n	800ab1e <UART_DMAError+0x40>
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b21      	cmp	r3, #33	@ 0x21
 800ab0e:	d106      	bne.n	800ab1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ab18:	6978      	ldr	r0, [r7, #20]
 800ab1a:	f7ff fe29 	bl	800a770 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab28:	2b40      	cmp	r3, #64	@ 0x40
 800ab2a:	d109      	bne.n	800ab40 <UART_DMAError+0x62>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b22      	cmp	r3, #34	@ 0x22
 800ab30:	d106      	bne.n	800ab40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ab3a:	6978      	ldr	r0, [r7, #20]
 800ab3c:	f7ff fe59 	bl	800a7f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab46:	f043 0210 	orr.w	r2, r3, #16
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab50:	6978      	ldr	r0, [r7, #20]
 800ab52:	f7ff f8cb 	bl	8009cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab56:	bf00      	nop
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff f8b9 	bl	8009cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b088      	sub	sp, #32
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6979      	ldr	r1, [r7, #20]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	613b      	str	r3, [r7, #16]
   return(result);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e6      	bne.n	800ab8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff f866 	bl	8009c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abd0:	bf00      	nop
 800abd2:	3720      	adds	r7, #32
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d101      	bne.n	800ac2a <HAL_UARTEx_DisableFifoMode+0x16>
 800ac26:	2302      	movs	r3, #2
 800ac28:	e027      	b.n	800ac7a <HAL_UARTEx_DisableFifoMode+0x66>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2224      	movs	r2, #36	@ 0x24
 800ac36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d101      	bne.n	800ac9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e02d      	b.n	800acfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2224      	movs	r2, #36	@ 0x24
 800acaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0201 	bic.w	r2, r2, #1
 800acc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f850 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad16:	2302      	movs	r3, #2
 800ad18:	e02d      	b.n	800ad76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2224      	movs	r2, #36	@ 0x24
 800ad26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0201 	bic.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f812 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2220      	movs	r2, #32
 800ad68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d108      	bne.n	800ada2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ada0:	e031      	b.n	800ae06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ada2:	2308      	movs	r3, #8
 800ada4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ada6:	2308      	movs	r3, #8
 800ada8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	0e5b      	lsrs	r3, r3, #25
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	0f5b      	lsrs	r3, r3, #29
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	7b3a      	ldrb	r2, [r7, #12]
 800adce:	4911      	ldr	r1, [pc, #68]	@ (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800add0:	5c8a      	ldrb	r2, [r1, r2]
 800add2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800add6:	7b3a      	ldrb	r2, [r7, #12]
 800add8:	490f      	ldr	r1, [pc, #60]	@ (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800addc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	7b7a      	ldrb	r2, [r7, #13]
 800adec:	4909      	ldr	r1, [pc, #36]	@ (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800adee:	5c8a      	ldrb	r2, [r1, r2]
 800adf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adf4:	7b7a      	ldrb	r2, [r7, #13]
 800adf6:	4908      	ldr	r1, [pc, #32]	@ (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	0800b548 	.word	0x0800b548
 800ae18:	0800b550 	.word	0x0800b550

0800ae1c <realloc>:
 800ae1c:	4b02      	ldr	r3, [pc, #8]	@ (800ae28 <realloc+0xc>)
 800ae1e:	460a      	mov	r2, r1
 800ae20:	4601      	mov	r1, r0
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	f000 b802 	b.w	800ae2c <_realloc_r>
 800ae28:	20000020 	.word	0x20000020

0800ae2c <_realloc_r>:
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	4680      	mov	r8, r0
 800ae32:	4615      	mov	r5, r2
 800ae34:	460c      	mov	r4, r1
 800ae36:	b921      	cbnz	r1, 800ae42 <_realloc_r+0x16>
 800ae38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	f000 b8d1 	b.w	800afe4 <_malloc_r>
 800ae42:	b92a      	cbnz	r2, 800ae50 <_realloc_r+0x24>
 800ae44:	f000 f862 	bl	800af0c <_free_r>
 800ae48:	2400      	movs	r4, #0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	f000 f954 	bl	800b0fc <_malloc_usable_size_r>
 800ae54:	4285      	cmp	r5, r0
 800ae56:	4606      	mov	r6, r0
 800ae58:	d802      	bhi.n	800ae60 <_realloc_r+0x34>
 800ae5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae5e:	d8f4      	bhi.n	800ae4a <_realloc_r+0x1e>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4640      	mov	r0, r8
 800ae64:	f000 f8be 	bl	800afe4 <_malloc_r>
 800ae68:	4607      	mov	r7, r0
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0ec      	beq.n	800ae48 <_realloc_r+0x1c>
 800ae6e:	42b5      	cmp	r5, r6
 800ae70:	462a      	mov	r2, r5
 800ae72:	4621      	mov	r1, r4
 800ae74:	bf28      	it	cs
 800ae76:	4632      	movcs	r2, r6
 800ae78:	f000 f83a 	bl	800aef0 <memcpy>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4640      	mov	r0, r8
 800ae80:	f000 f844 	bl	800af0c <_free_r>
 800ae84:	463c      	mov	r4, r7
 800ae86:	e7e0      	b.n	800ae4a <_realloc_r+0x1e>

0800ae88 <memset>:
 800ae88:	4402      	add	r2, r0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d100      	bne.n	800ae92 <memset+0xa>
 800ae90:	4770      	bx	lr
 800ae92:	f803 1b01 	strb.w	r1, [r3], #1
 800ae96:	e7f9      	b.n	800ae8c <memset+0x4>

0800ae98 <__errno>:
 800ae98:	4b01      	ldr	r3, [pc, #4]	@ (800aea0 <__errno+0x8>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20000020 	.word	0x20000020

0800aea4 <__libc_init_array>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4d0d      	ldr	r5, [pc, #52]	@ (800aedc <__libc_init_array+0x38>)
 800aea8:	4c0d      	ldr	r4, [pc, #52]	@ (800aee0 <__libc_init_array+0x3c>)
 800aeaa:	1b64      	subs	r4, r4, r5
 800aeac:	10a4      	asrs	r4, r4, #2
 800aeae:	2600      	movs	r6, #0
 800aeb0:	42a6      	cmp	r6, r4
 800aeb2:	d109      	bne.n	800aec8 <__libc_init_array+0x24>
 800aeb4:	4d0b      	ldr	r5, [pc, #44]	@ (800aee4 <__libc_init_array+0x40>)
 800aeb6:	4c0c      	ldr	r4, [pc, #48]	@ (800aee8 <__libc_init_array+0x44>)
 800aeb8:	f000 f938 	bl	800b12c <_init>
 800aebc:	1b64      	subs	r4, r4, r5
 800aebe:	10a4      	asrs	r4, r4, #2
 800aec0:	2600      	movs	r6, #0
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	d105      	bne.n	800aed2 <__libc_init_array+0x2e>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aecc:	4798      	blx	r3
 800aece:	3601      	adds	r6, #1
 800aed0:	e7ee      	b.n	800aeb0 <__libc_init_array+0xc>
 800aed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed6:	4798      	blx	r3
 800aed8:	3601      	adds	r6, #1
 800aeda:	e7f2      	b.n	800aec2 <__libc_init_array+0x1e>
 800aedc:	0800b560 	.word	0x0800b560
 800aee0:	0800b560 	.word	0x0800b560
 800aee4:	0800b560 	.word	0x0800b560
 800aee8:	0800b56c 	.word	0x0800b56c

0800aeec <__retarget_lock_acquire_recursive>:
 800aeec:	4770      	bx	lr

0800aeee <__retarget_lock_release_recursive>:
 800aeee:	4770      	bx	lr

0800aef0 <memcpy>:
 800aef0:	440a      	add	r2, r1
 800aef2:	4291      	cmp	r1, r2
 800aef4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aef8:	d100      	bne.n	800aefc <memcpy+0xc>
 800aefa:	4770      	bx	lr
 800aefc:	b510      	push	{r4, lr}
 800aefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af06:	4291      	cmp	r1, r2
 800af08:	d1f9      	bne.n	800aefe <memcpy+0xe>
 800af0a:	bd10      	pop	{r4, pc}

0800af0c <_free_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4605      	mov	r5, r0
 800af10:	2900      	cmp	r1, #0
 800af12:	d041      	beq.n	800af98 <_free_r+0x8c>
 800af14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af18:	1f0c      	subs	r4, r1, #4
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bfb8      	it	lt
 800af1e:	18e4      	addlt	r4, r4, r3
 800af20:	f000 f8e0 	bl	800b0e4 <__malloc_lock>
 800af24:	4a1d      	ldr	r2, [pc, #116]	@ (800af9c <_free_r+0x90>)
 800af26:	6813      	ldr	r3, [r2, #0]
 800af28:	b933      	cbnz	r3, 800af38 <_free_r+0x2c>
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	6014      	str	r4, [r2, #0]
 800af2e:	4628      	mov	r0, r5
 800af30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af34:	f000 b8dc 	b.w	800b0f0 <__malloc_unlock>
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d908      	bls.n	800af4e <_free_r+0x42>
 800af3c:	6820      	ldr	r0, [r4, #0]
 800af3e:	1821      	adds	r1, r4, r0
 800af40:	428b      	cmp	r3, r1
 800af42:	bf01      	itttt	eq
 800af44:	6819      	ldreq	r1, [r3, #0]
 800af46:	685b      	ldreq	r3, [r3, #4]
 800af48:	1809      	addeq	r1, r1, r0
 800af4a:	6021      	streq	r1, [r4, #0]
 800af4c:	e7ed      	b.n	800af2a <_free_r+0x1e>
 800af4e:	461a      	mov	r2, r3
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	b10b      	cbz	r3, 800af58 <_free_r+0x4c>
 800af54:	42a3      	cmp	r3, r4
 800af56:	d9fa      	bls.n	800af4e <_free_r+0x42>
 800af58:	6811      	ldr	r1, [r2, #0]
 800af5a:	1850      	adds	r0, r2, r1
 800af5c:	42a0      	cmp	r0, r4
 800af5e:	d10b      	bne.n	800af78 <_free_r+0x6c>
 800af60:	6820      	ldr	r0, [r4, #0]
 800af62:	4401      	add	r1, r0
 800af64:	1850      	adds	r0, r2, r1
 800af66:	4283      	cmp	r3, r0
 800af68:	6011      	str	r1, [r2, #0]
 800af6a:	d1e0      	bne.n	800af2e <_free_r+0x22>
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	6053      	str	r3, [r2, #4]
 800af72:	4408      	add	r0, r1
 800af74:	6010      	str	r0, [r2, #0]
 800af76:	e7da      	b.n	800af2e <_free_r+0x22>
 800af78:	d902      	bls.n	800af80 <_free_r+0x74>
 800af7a:	230c      	movs	r3, #12
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	e7d6      	b.n	800af2e <_free_r+0x22>
 800af80:	6820      	ldr	r0, [r4, #0]
 800af82:	1821      	adds	r1, r4, r0
 800af84:	428b      	cmp	r3, r1
 800af86:	bf04      	itt	eq
 800af88:	6819      	ldreq	r1, [r3, #0]
 800af8a:	685b      	ldreq	r3, [r3, #4]
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	bf04      	itt	eq
 800af90:	1809      	addeq	r1, r1, r0
 800af92:	6021      	streq	r1, [r4, #0]
 800af94:	6054      	str	r4, [r2, #4]
 800af96:	e7ca      	b.n	800af2e <_free_r+0x22>
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop
 800af9c:	20001d58 	.word	0x20001d58

0800afa0 <sbrk_aligned>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4e0f      	ldr	r6, [pc, #60]	@ (800afe0 <sbrk_aligned+0x40>)
 800afa4:	460c      	mov	r4, r1
 800afa6:	6831      	ldr	r1, [r6, #0]
 800afa8:	4605      	mov	r5, r0
 800afaa:	b911      	cbnz	r1, 800afb2 <sbrk_aligned+0x12>
 800afac:	f000 f8ae 	bl	800b10c <_sbrk_r>
 800afb0:	6030      	str	r0, [r6, #0]
 800afb2:	4621      	mov	r1, r4
 800afb4:	4628      	mov	r0, r5
 800afb6:	f000 f8a9 	bl	800b10c <_sbrk_r>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d103      	bne.n	800afc6 <sbrk_aligned+0x26>
 800afbe:	f04f 34ff 	mov.w	r4, #4294967295
 800afc2:	4620      	mov	r0, r4
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	1cc4      	adds	r4, r0, #3
 800afc8:	f024 0403 	bic.w	r4, r4, #3
 800afcc:	42a0      	cmp	r0, r4
 800afce:	d0f8      	beq.n	800afc2 <sbrk_aligned+0x22>
 800afd0:	1a21      	subs	r1, r4, r0
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f89a 	bl	800b10c <_sbrk_r>
 800afd8:	3001      	adds	r0, #1
 800afda:	d1f2      	bne.n	800afc2 <sbrk_aligned+0x22>
 800afdc:	e7ef      	b.n	800afbe <sbrk_aligned+0x1e>
 800afde:	bf00      	nop
 800afe0:	20001d54 	.word	0x20001d54

0800afe4 <_malloc_r>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	1ccd      	adds	r5, r1, #3
 800afea:	f025 0503 	bic.w	r5, r5, #3
 800afee:	3508      	adds	r5, #8
 800aff0:	2d0c      	cmp	r5, #12
 800aff2:	bf38      	it	cc
 800aff4:	250c      	movcc	r5, #12
 800aff6:	2d00      	cmp	r5, #0
 800aff8:	4606      	mov	r6, r0
 800affa:	db01      	blt.n	800b000 <_malloc_r+0x1c>
 800affc:	42a9      	cmp	r1, r5
 800affe:	d904      	bls.n	800b00a <_malloc_r+0x26>
 800b000:	230c      	movs	r3, #12
 800b002:	6033      	str	r3, [r6, #0]
 800b004:	2000      	movs	r0, #0
 800b006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b00a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0e0 <_malloc_r+0xfc>
 800b00e:	f000 f869 	bl	800b0e4 <__malloc_lock>
 800b012:	f8d8 3000 	ldr.w	r3, [r8]
 800b016:	461c      	mov	r4, r3
 800b018:	bb44      	cbnz	r4, 800b06c <_malloc_r+0x88>
 800b01a:	4629      	mov	r1, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	f7ff ffbf 	bl	800afa0 <sbrk_aligned>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	4604      	mov	r4, r0
 800b026:	d158      	bne.n	800b0da <_malloc_r+0xf6>
 800b028:	f8d8 4000 	ldr.w	r4, [r8]
 800b02c:	4627      	mov	r7, r4
 800b02e:	2f00      	cmp	r7, #0
 800b030:	d143      	bne.n	800b0ba <_malloc_r+0xd6>
 800b032:	2c00      	cmp	r4, #0
 800b034:	d04b      	beq.n	800b0ce <_malloc_r+0xea>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	4639      	mov	r1, r7
 800b03a:	4630      	mov	r0, r6
 800b03c:	eb04 0903 	add.w	r9, r4, r3
 800b040:	f000 f864 	bl	800b10c <_sbrk_r>
 800b044:	4581      	cmp	r9, r0
 800b046:	d142      	bne.n	800b0ce <_malloc_r+0xea>
 800b048:	6821      	ldr	r1, [r4, #0]
 800b04a:	1a6d      	subs	r5, r5, r1
 800b04c:	4629      	mov	r1, r5
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff ffa6 	bl	800afa0 <sbrk_aligned>
 800b054:	3001      	adds	r0, #1
 800b056:	d03a      	beq.n	800b0ce <_malloc_r+0xea>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	442b      	add	r3, r5
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	f8d8 3000 	ldr.w	r3, [r8]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	bb62      	cbnz	r2, 800b0c0 <_malloc_r+0xdc>
 800b066:	f8c8 7000 	str.w	r7, [r8]
 800b06a:	e00f      	b.n	800b08c <_malloc_r+0xa8>
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	1b52      	subs	r2, r2, r5
 800b070:	d420      	bmi.n	800b0b4 <_malloc_r+0xd0>
 800b072:	2a0b      	cmp	r2, #11
 800b074:	d917      	bls.n	800b0a6 <_malloc_r+0xc2>
 800b076:	1961      	adds	r1, r4, r5
 800b078:	42a3      	cmp	r3, r4
 800b07a:	6025      	str	r5, [r4, #0]
 800b07c:	bf18      	it	ne
 800b07e:	6059      	strne	r1, [r3, #4]
 800b080:	6863      	ldr	r3, [r4, #4]
 800b082:	bf08      	it	eq
 800b084:	f8c8 1000 	streq.w	r1, [r8]
 800b088:	5162      	str	r2, [r4, r5]
 800b08a:	604b      	str	r3, [r1, #4]
 800b08c:	4630      	mov	r0, r6
 800b08e:	f000 f82f 	bl	800b0f0 <__malloc_unlock>
 800b092:	f104 000b 	add.w	r0, r4, #11
 800b096:	1d23      	adds	r3, r4, #4
 800b098:	f020 0007 	bic.w	r0, r0, #7
 800b09c:	1ac2      	subs	r2, r0, r3
 800b09e:	bf1c      	itt	ne
 800b0a0:	1a1b      	subne	r3, r3, r0
 800b0a2:	50a3      	strne	r3, [r4, r2]
 800b0a4:	e7af      	b.n	800b006 <_malloc_r+0x22>
 800b0a6:	6862      	ldr	r2, [r4, #4]
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	bf0c      	ite	eq
 800b0ac:	f8c8 2000 	streq.w	r2, [r8]
 800b0b0:	605a      	strne	r2, [r3, #4]
 800b0b2:	e7eb      	b.n	800b08c <_malloc_r+0xa8>
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	6864      	ldr	r4, [r4, #4]
 800b0b8:	e7ae      	b.n	800b018 <_malloc_r+0x34>
 800b0ba:	463c      	mov	r4, r7
 800b0bc:	687f      	ldr	r7, [r7, #4]
 800b0be:	e7b6      	b.n	800b02e <_malloc_r+0x4a>
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d1fb      	bne.n	800b0c0 <_malloc_r+0xdc>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	6053      	str	r3, [r2, #4]
 800b0cc:	e7de      	b.n	800b08c <_malloc_r+0xa8>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	6033      	str	r3, [r6, #0]
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f000 f80c 	bl	800b0f0 <__malloc_unlock>
 800b0d8:	e794      	b.n	800b004 <_malloc_r+0x20>
 800b0da:	6005      	str	r5, [r0, #0]
 800b0dc:	e7d6      	b.n	800b08c <_malloc_r+0xa8>
 800b0de:	bf00      	nop
 800b0e0:	20001d58 	.word	0x20001d58

0800b0e4 <__malloc_lock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_lock+0x8>)
 800b0e6:	f7ff bf01 	b.w	800aeec <__retarget_lock_acquire_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20001d50 	.word	0x20001d50

0800b0f0 <__malloc_unlock>:
 800b0f0:	4801      	ldr	r0, [pc, #4]	@ (800b0f8 <__malloc_unlock+0x8>)
 800b0f2:	f7ff befc 	b.w	800aeee <__retarget_lock_release_recursive>
 800b0f6:	bf00      	nop
 800b0f8:	20001d50 	.word	0x20001d50

0800b0fc <_malloc_usable_size_r>:
 800b0fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b100:	1f18      	subs	r0, r3, #4
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfbc      	itt	lt
 800b106:	580b      	ldrlt	r3, [r1, r0]
 800b108:	18c0      	addlt	r0, r0, r3
 800b10a:	4770      	bx	lr

0800b10c <_sbrk_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d06      	ldr	r5, [pc, #24]	@ (800b128 <_sbrk_r+0x1c>)
 800b110:	2300      	movs	r3, #0
 800b112:	4604      	mov	r4, r0
 800b114:	4608      	mov	r0, r1
 800b116:	602b      	str	r3, [r5, #0]
 800b118:	f7fa fb7a 	bl	8005810 <_sbrk>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_sbrk_r+0x1a>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_sbrk_r+0x1a>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20001d4c 	.word	0x20001d4c

0800b12c <_init>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	bf00      	nop
 800b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b132:	bc08      	pop	{r3}
 800b134:	469e      	mov	lr, r3
 800b136:	4770      	bx	lr

0800b138 <_fini>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	bf00      	nop
 800b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13e:	bc08      	pop	{r3}
 800b140:	469e      	mov	lr, r3
 800b142:	4770      	bx	lr
