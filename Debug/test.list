
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000420c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080043e4  080043e4  000053e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f4  080043f4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f4  080043f4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f4  080043f4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043fc  080043fc  000053fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004400  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  0800440c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800440c  00006304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001290f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd0  00000000  00000000  0001894b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d04  00000000  00000000  0001c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021234  00000000  00000000  0001d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147fe  00000000  00000000  0003e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c54e1  00000000  00000000  00052d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004634  00000000  00000000  0011824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080043cc 	.word	0x080043cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080043cc 	.word	0x080043cc

08000218 <_ZN8DC_motor5setupEv>:
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
    __HAL_TIM_SetCounter(enc_htim,0);
}
void DC_motor::setup(){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000228:	4619      	mov	r1, r3
 800022a:	4610      	mov	r0, r2
 800022c:	f002 fcf4 	bl	8002c18 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fee0 	bl	8002ffc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000240:	2104      	movs	r1, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f002 feda 	bl	8002ffc <HAL_TIM_Encoder_Start>
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 ff33 	bl	80010be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f812 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 fae2 	bl	8000824 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000260:	f000 f88e 	bl	8000380 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000264:	f000 f944 	bl	80004f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000268:	f000 f990 	bl	800058c <MX_TIM3_Init>
  MX_TIM4_Init();
 800026c:	f000 f9e4 	bl	8000638 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000270:	f000 fa38 	bl	80006e4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000274:	f000 f844 	bl	8000300 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000278:	f000 fc1c 	bl	8000ab4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <main+0x2c>

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	@ 0x50
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2238      	movs	r2, #56	@ 0x38
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 f870 	bl	8004374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002a6:	f001 fb6f 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2340      	movs	r3, #64	@ 0x40
 80002b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fc15 	bl	8001af0 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002cc:	f000 fb42 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	2301      	movs	r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 ff13 	bl	8002114 <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f4:	f000 fb2e 	bl	8000954 <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3750      	adds	r7, #80	@ 0x50
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000306:	4a1c      	ldr	r2, [pc, #112]	@ (8000378 <MX_I2C1_Init+0x78>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_I2C1_Init+0x74>)
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <MX_I2C1_Init+0x7c>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000322:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800033a:	480e      	ldr	r0, [pc, #56]	@ (8000374 <MX_I2C1_Init+0x74>)
 800033c:	f001 f9f2 	bl	8001724 <HAL_I2C_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000346:	f000 fb05 	bl	8000954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800034a:	2100      	movs	r1, #0
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <MX_I2C1_Init+0x74>)
 800034e:	f001 fa84 	bl	800185a <HAL_I2CEx_ConfigAnalogFilter>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000358:	f000 fafc 	bl	8000954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800035c:	2100      	movs	r1, #0
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_I2C1_Init+0x74>)
 8000360:	f001 fac6 	bl	80018f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800036a:	f000 faf3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028
 8000378:	40005400 	.word	0x40005400
 800037c:	00503d58 	.word	0x00503d58

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b098      	sub	sp, #96	@ 0x60
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
 80003a0:	611a      	str	r2, [r3, #16]
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2234      	movs	r2, #52	@ 0x34
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 ffe1 	bl	8004374 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b2:	4b4d      	ldr	r3, [pc, #308]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003b4:	4a4d      	ldr	r2, [pc, #308]	@ (80004ec <MX_TIM1_Init+0x16c>)
 80003b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80003b8:	4b4b      	ldr	r3, [pc, #300]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003ba:	220f      	movs	r2, #15
 80003bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b4a      	ldr	r3, [pc, #296]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80003c4:	4b48      	ldr	r3, [pc, #288]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003c6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80003ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003cc:	4b46      	ldr	r3, [pc, #280]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d2:	4b45      	ldr	r3, [pc, #276]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d8:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003de:	4842      	ldr	r0, [pc, #264]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80003e0:	f002 fac3 	bl	800296a <HAL_TIM_PWM_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003ea:	f000 fab3 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ee:	2300      	movs	r3, #0
 80003f0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003fe:	4619      	mov	r1, r3
 8000400:	4839      	ldr	r0, [pc, #228]	@ (80004e8 <MX_TIM1_Init+0x168>)
 8000402:	f003 fe63 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800040c:	f000 faa2 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000410:	2360      	movs	r3, #96	@ 0x60
 8000412:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000418:	2300      	movs	r3, #0
 800041a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800041c:	2300      	movs	r3, #0
 800041e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000430:	2200      	movs	r2, #0
 8000432:	4619      	mov	r1, r3
 8000434:	482c      	ldr	r0, [pc, #176]	@ (80004e8 <MX_TIM1_Init+0x168>)
 8000436:	f002 ffbf 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000440:	f000 fa88 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000444:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000448:	2204      	movs	r2, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4826      	ldr	r0, [pc, #152]	@ (80004e8 <MX_TIM1_Init+0x168>)
 800044e:	f002 ffb3 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000458:	f000 fa7c 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800045c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000460:	2208      	movs	r2, #8
 8000462:	4619      	mov	r1, r3
 8000464:	4820      	ldr	r0, [pc, #128]	@ (80004e8 <MX_TIM1_Init+0x168>)
 8000466:	f002 ffa7 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000470:	f000 fa70 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000474:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000478:	220c      	movs	r2, #12
 800047a:	4619      	mov	r1, r3
 800047c:	481a      	ldr	r0, [pc, #104]	@ (80004e8 <MX_TIM1_Init+0x168>)
 800047e:	f002 ff9b 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000488:	f000 fa64 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80004ca:	f003 fe81 	bl	80041d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80004d4:	f000 fa3e 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004d8:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <MX_TIM1_Init+0x168>)
 80004da:	f000 fcd9 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 80004de:	bf00      	nop
 80004e0:	3760      	adds	r7, #96	@ 0x60
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000007c 	.word	0x2000007c
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800050e:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000516:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000518:	220f      	movs	r2, #15
 800051a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_TIM2_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000522:	4b19      	ldr	r3, [pc, #100]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000524:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000528:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b17      	ldr	r3, [pc, #92]	@ (8000588 <MX_TIM2_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000536:	4814      	ldr	r0, [pc, #80]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000538:	f002 f9c0 	bl	80028bc <HAL_TIM_Base_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000542:	f000 fa07 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	480d      	ldr	r0, [pc, #52]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000554:	f003 f844 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800055e:	f000 f9f9 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000570:	f003 fdac 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800057a:	f000 f9eb 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000c8 	.word	0x200000c8

0800058c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	@ 0x30
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2224      	movs	r2, #36	@ 0x24
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 feea 	bl	8004374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <MX_TIM3_Init+0xa8>)
 80005ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_TIM3_Init+0xa4>)
 80005fc:	f002 fc58 	bl	8002eb0 <HAL_TIM_Encoder_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000606:	f000 f9a5 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_TIM3_Init+0xa4>)
 8000618:	f003 fd58 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000622:	f000 f997 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	@ 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000114 	.word	0x20000114
 8000634:	40000400 	.word	0x40000400

08000638 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	@ 0x30
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2224      	movs	r2, #36	@ 0x24
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fe94 	bl	8004374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_TIM4_Init+0xa4>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_TIM4_Init+0xa8>)
 800065a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_TIM4_Init+0xa4>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <MX_TIM4_Init+0xa4>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_TIM4_Init+0xa4>)
 800066a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800066e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_TIM4_Init+0xa4>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_TIM4_Init+0xa4>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800067c:	2301      	movs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_TIM4_Init+0xa4>)
 80006a8:	f002 fc02 	bl	8002eb0 <HAL_TIM_Encoder_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006b2:	f000 f94f 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_TIM4_Init+0xa4>)
 80006c4:	f003 fd02 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f941 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3730      	adds	r7, #48	@ 0x30
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000160 	.word	0x20000160
 80006e0:	40000800 	.word	0x40000800

080006e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b098      	sub	sp, #96	@ 0x60
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2234      	movs	r2, #52	@ 0x34
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fe2f 	bl	8004374 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000716:	4b41      	ldr	r3, [pc, #260]	@ (800081c <MX_TIM8_Init+0x138>)
 8000718:	4a41      	ldr	r2, [pc, #260]	@ (8000820 <MX_TIM8_Init+0x13c>)
 800071a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 800071c:	4b3f      	ldr	r3, [pc, #252]	@ (800081c <MX_TIM8_Init+0x138>)
 800071e:	220f      	movs	r2, #15
 8000720:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <MX_TIM8_Init+0x138>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000728:	4b3c      	ldr	r3, [pc, #240]	@ (800081c <MX_TIM8_Init+0x138>)
 800072a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <MX_TIM8_Init+0x138>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000736:	4b39      	ldr	r3, [pc, #228]	@ (800081c <MX_TIM8_Init+0x138>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b37      	ldr	r3, [pc, #220]	@ (800081c <MX_TIM8_Init+0x138>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000742:	4836      	ldr	r0, [pc, #216]	@ (800081c <MX_TIM8_Init+0x138>)
 8000744:	f002 f911 	bl	800296a <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 f901 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800075e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000762:	4619      	mov	r1, r3
 8000764:	482d      	ldr	r0, [pc, #180]	@ (800081c <MX_TIM8_Init+0x138>)
 8000766:	f003 fcb1 	bl	80040cc <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 f8f0 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000774:	2360      	movs	r3, #96	@ 0x60
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4820      	ldr	r0, [pc, #128]	@ (800081c <MX_TIM8_Init+0x138>)
 800079a:	f002 fe0d 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80007a4:	f000 f8d6 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ac:	2204      	movs	r2, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_TIM8_Init+0x138>)
 80007b2:	f002 fe01 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80007bc:	f000 f8ca 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM8_Init+0x138>)
 80007fe:	f003 fce7 	bl	80041d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000808:	f000 f8a4 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM8_Init+0x138>)
 800080e:	f000 fb3f 	bl	8000e90 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3760      	adds	r7, #96	@ 0x60
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001ac 	.word	0x200001ac
 8000820:	40013400 	.word	0x40013400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b43      	ldr	r3, [pc, #268]	@ (8000948 <MX_GPIO_Init+0x124>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a42      	ldr	r2, [pc, #264]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b40      	ldr	r3, [pc, #256]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3d      	ldr	r3, [pc, #244]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a3c      	ldr	r2, [pc, #240]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <MX_GPIO_Init+0x124>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a36      	ldr	r2, [pc, #216]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <MX_GPIO_Init+0x124>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f000 ff1a 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000890:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4829      	ldr	r0, [pc, #164]	@ (800094c <MX_GPIO_Init+0x128>)
 80008a8:	f000 fd8a 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f000 fd7d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	@ (8000950 <MX_GPIO_Init+0x12c>)
 80008de:	f000 fd6f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008e2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	4814      	ldr	r0, [pc, #80]	@ (800094c <MX_GPIO_Init+0x128>)
 80008fa:	f000 fd61 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f000 fd51 	bl	80013c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2017      	movs	r0, #23
 8000924:	f000 fd17 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000928:	2017      	movs	r0, #23
 800092a:	f000 fd2e 	bl	800138a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2028      	movs	r0, #40	@ 0x28
 8000934:	f000 fd0f 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000938:	2028      	movs	r0, #40	@ 0x28
 800093a:	f000 fd26 	bl	800138a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	48000800 	.word	0x48000800
 8000950:	48000400 	.word	0x48000400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <_ZN5servoC1EP17TIM_HandleTypeDefm>:
public:
    void setup();
    void update_pos(float goalpos,int responseTime);
    void run();

    servo(TIM_HandleTypeDef *_servo_htim, uint32_t _servo_TIM_CHANNEL){
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f04f 0200 	mov.w	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <_ZN5servoC1EP17TIM_HandleTypeDefm+0x70>)
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2200      	movs	r2, #0
 80009a4:	771a      	strb	r2, [r3, #28]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ac:	621a      	str	r2, [r3, #32]
    	servo_htim = _servo_htim;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
    	servo_TIM_CHANNEL = _servo_TIM_CHANNEL;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
    	updateFreqency = 1000;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009c0:	621a      	str	r2, [r3, #32]
    };
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	43960000 	.word	0x43960000

080009d4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
	void PI_run();
	void update_speed(int sign);
	float get_speed() const { return speed; }
	void setspeed(float target_speed);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim, uint32_t _PWM_TIM_CHANNEL) {
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4a25      	ldr	r2, [pc, #148]	@ (8000a7c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xa8>)
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xac>)
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f04f 0200 	mov.w	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb0>)
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb4>)
 8000a38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a46:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	639a      	str	r2, [r3, #56]	@ 0x38
		enc_htim = _enc_htim;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	63da      	str	r2, [r3, #60]	@ 0x3c
		dirPort = _dirPort;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	641a      	str	r2, [r3, #64]	@ 0x40
		dirPin = _dirPin;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		PWM_htim = _PWM_htim;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	649a      	str	r2, [r3, #72]	@ 0x48
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
	};
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	3e570a3d 	.word	0x3e570a3d
 8000a80:	3a03126f 	.word	0x3a03126f
 8000a84:	3a83126f 	.word	0x3a83126f
 8000a88:	41c00000 	.word	0x41c00000

08000a8c <_Z9setup_allv>:
float add = 0.01;
float angle = 30;
int keep = 0;
int gripperHighest = 0;
int gripperLowest = 0;
void setup_all(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	servo_gripper.setup();
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <_Z9setup_allv+0x1c>)
 8000a92:	f000 f885 	bl	8000ba0 <_ZN5servo5setupEv>
	Motor_forword.setup();
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <_Z9setup_allv+0x20>)
 8000a98:	f7ff fbbe 	bl	8000218 <_ZN8DC_motor5setupEv>
	Motor_updown.setup();
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <_Z9setup_allv+0x24>)
 8000a9e:	f7ff fbbb 	bl	8000218 <_ZN8DC_motor5setupEv>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000298 	.word	0x20000298
 8000aac:	200001f8 	.word	0x200001f8
 8000ab0:	20000248 	.word	0x20000248

08000ab4 <main_function>:
void main_function(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	setup_all();
 8000ab8:	f7ff ffe8 	bl	8000a8c <_Z9setup_allv>

	while(1){
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <main_function+0x8>

08000ac0 <HAL_GPIO_EXTI_Callback>:
		wait(3000, &htim2);
		*/
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ad0:	d009      	beq.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x26>
 8000ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ad6:	d10d      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x34>
		case GPIO_PIN_13:
			gripperHighest = 1;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
			gripperLowest = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
			break;
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_EXTI_Callback+0x34>
		case GPIO_PIN_12:
			gripperLowest = 1;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
			gripperHighest = 0;
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			break;
 8000af2:	bf00      	nop

	}
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	200002f0 	.word	0x200002f0
 8000b04:	200002f4 	.word	0x200002f4

08000b08 <_Z41__static_initialization_and_destruction_0ii>:
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d126      	bne.n	8000b66 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d121      	bne.n	8000b66 <_Z41__static_initialization_and_destruction_0ii+0x5e>
DC_motor Motor_forword = {&htim3, GPIOA, GPIO_PIN_9, &htim8, TIM_CHANNEL_1};
 8000b22:	2300      	movs	r3, #0
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b32:	4910      	ldr	r1, [pc, #64]	@ (8000b74 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000b34:	4810      	ldr	r0, [pc, #64]	@ (8000b78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000b36:	f7ff ff4d 	bl	80009d4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2};
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b4a:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000b4e:	f7ff ff41 	bl	80009d4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
servo servo_gripper = {&htim1, TIM_CHANNEL_3};
 8000b52:	2208      	movs	r2, #8
 8000b54:	490b      	ldr	r1, [pc, #44]	@ (8000b84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000b56:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000b58:	f7ff ff02 	bl	8000960 <_ZN5servoC1EP17TIM_HandleTypeDefm>
servo servo_trun = {&htim1, TIM_CHANNEL_2};
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	4909      	ldr	r1, [pc, #36]	@ (8000b84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000b60:	480a      	ldr	r0, [pc, #40]	@ (8000b8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000b62:	f7ff fefd 	bl	8000960 <_ZN5servoC1EP17TIM_HandleTypeDefm>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001ac 	.word	0x200001ac
 8000b74:	20000114 	.word	0x20000114
 8000b78:	200001f8 	.word	0x200001f8
 8000b7c:	20000160 	.word	0x20000160
 8000b80:	20000248 	.word	0x20000248
 8000b84:	2000007c 	.word	0x2000007c
 8000b88:	20000298 	.word	0x20000298
 8000b8c:	200002c4 	.word	0x200002c4

08000b90 <_GLOBAL__sub_I_Motor_forword>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff ffb5 	bl	8000b08 <_Z41__static_initialization_and_destruction_0ii>
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZN5servo5setupEv>:
#include "stm32g4xx_hal.h"
int pulse = 0;
float pos = 0;
float distance = 0;

void servo::setup(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(servo_htim, servo_TIM_CHANNEL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f001 ff30 	bl	8002a18 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_MspInit+0x44>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bca:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <HAL_MspInit+0x44>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_MspInit+0x44>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bf6:	f000 ff6b 	bl	8001ad0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09c      	sub	sp, #112	@ 0x70
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	2244      	movs	r2, #68	@ 0x44
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fba3 	bl	8004374 <memset>
  if(hi2c->Instance==I2C1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a2e      	ldr	r2, [pc, #184]	@ (8000cec <HAL_I2C_MspInit+0xe4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d154      	bne.n	8000ce2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c38:	2340      	movs	r3, #64	@ 0x40
 8000c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fc49 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c50:	f7ff fe80 	bl	8000954 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c58:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c60:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c96:	2304      	movs	r3, #4
 8000c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca4:	f000 fb8c 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <HAL_I2C_MspInit+0xec>)
 8000cc6:	f000 fb7b 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_I2C_MspInit+0xe8>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3770      	adds	r7, #112	@ 0x70
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_TIM_PWM_MspInit+0x5c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10c      	bne.n	8000d24 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d22:	e010      	b.n	8000d46 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0c      	ldr	r2, [pc, #48]	@ (8000d5c <HAL_TIM_PWM_MspInit+0x64>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10b      	bne.n	8000d46 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d32:	4a09      	ldr	r2, [pc, #36]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x60>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40013400 	.word	0x40013400

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fae1 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	201c      	movs	r0, #28
 8000d96:	f000 faf8 	bl	800138a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d129      	bne.n	8000e1e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dca:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	4a2e      	ldr	r2, [pc, #184]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	4a28      	ldr	r2, [pc, #160]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000dfa:	2350      	movs	r3, #80	@ 0x50
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 fad2 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e1c:	e02e      	b.n	8000e7c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d129      	bne.n	8000e7c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a16      	ldr	r2, [pc, #88]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e44:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e58:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f000 faa2 	bl	80013c0 <HAL_GPIO_Init>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	@ 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40000800 	.word	0x40000800

08000e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a22      	ldr	r2, [pc, #136]	@ (8000f38 <HAL_TIM_MspPostInit+0xa8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d11c      	bne.n	8000eec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a21      	ldr	r2, [pc, #132]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eda:	2302      	movs	r3, #2
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4816      	ldr	r0, [pc, #88]	@ (8000f40 <HAL_TIM_MspPostInit+0xb0>)
 8000ee6:	f000 fa6b 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000eea:	e020      	b.n	8000f2e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_TIM_MspPostInit+0xb4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11b      	bne.n	8000f2e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_TIM_MspPostInit+0xac>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	23c0      	movs	r3, #192	@ 0xc0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_TIM_MspPostInit+0xb0>)
 8000f2a:	f000 fa49 	bl	80013c0 <HAL_GPIO_Init>
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	@ 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000800 	.word	0x48000800
 8000f44:	40013400 	.word	0x40013400

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f8e1 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000faa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fae:	f000 fba1 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000fb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fb6:	f000 fb9d 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <TIM2_IRQHandler+0x10>)
 8000fc6:	f002 f8a7 	bl	8003118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000c8 	.word	0x200000c8

08000fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fd8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000fdc:	f000 fb8a 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000fe0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000fe4:	f000 fb86 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000fe8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000fec:	f000 fb82 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ff4:	f000 fb7e 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ff8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ffc:	f000 fb7a 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001000:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001004:	f000 fb76 	bl	80016f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <HAL_TIM_PeriodElapsedCallback>:
	}
	//HAL_TIM_Base_Stop_IT(htim);
	delay_count = 0;

}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001040:	d109      	bne.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x26>
		t_ms++;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800104a:	6013      	str	r3, [r2, #0]
		delay_count++;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001054:	6013      	str	r3, [r2, #0]
	}
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200002fc 	.word	0x200002fc
 8001068:	200002f8 	.word	0x200002f8

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffcc 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f003 f973 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff f8d7 	bl	8000250 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 80010b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b8:	20000304 	.word	0x20000304

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>

080010be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f939 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f80e 	bl	80010f0 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e001      	b.n	80010e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e0:	f7ff fd6e 	bl	8000bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e4:	79fb      	ldrb	r3, [r7, #7]

}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_InitTick+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d022      	beq.n	800114a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_InitTick+0x6c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_InitTick+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001110:	fbb1 f3f3 	udiv	r3, r1, r3
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f944 	bl	80013a6 <HAL_SYSTICK_Config>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10f      	bne.n	8001144 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d809      	bhi.n	800113e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	2200      	movs	r2, #0
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	f000 f910 	bl	8001356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_InitTick+0x70>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e007      	b.n	800114e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e004      	b.n	800114e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <HAL_IncTick+0x1c>)
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000300 	.word	0x20000300
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000300 	.word	0x20000300

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff40 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff90 	bl	8001294 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5f 	bl	8001240 <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff33 	bl	8001204 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa4 	bl	80012fc <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ce:	e15a      	b.n	8001686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 814c 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d005      	beq.n	8001400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d130      	bne.n	8001462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001436:	2201      	movs	r2, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 0201 	and.w	r2, r3, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d017      	beq.n	800149e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b5b      	ldr	r3, [pc, #364]	@ (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001538:	4a5a      	ldr	r2, [pc, #360]	@ (80016a4 <HAL_GPIO_Init+0x2e4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001540:	4b58      	ldr	r3, [pc, #352]	@ (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154c:	4a56      	ldr	r2, [pc, #344]	@ (80016a8 <HAL_GPIO_Init+0x2e8>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001576:	d01f      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_GPIO_Init+0x2ec>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d019      	beq.n	80015b4 <HAL_GPIO_Init+0x1f4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1f0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_GPIO_Init+0x2f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <HAL_GPIO_Init+0x2f8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a48      	ldr	r2, [pc, #288]	@ (80016bc <HAL_GPIO_Init+0x2fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1e4>
 80015a0:	2305      	movs	r3, #5
 80015a2:	e00a      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a4:	2306      	movs	r3, #6
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	@ (80016a8 <HAL_GPIO_Init+0x2e8>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015fc:	4a30      	ldr	r2, [pc, #192]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001602:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001626:	4a26      	ldr	r2, [pc, #152]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001650:	4a1b      	ldr	r2, [pc, #108]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_GPIO_Init+0x300>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae9d 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	48001400 	.word	0x48001400
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f9d4 	bl	8000ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e08d      	b.n	8001852 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fa5c 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	@ 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e006      	b.n	80017ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d108      	bne.n	80017c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	e007      	b.n	80017d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69d9      	ldr	r1, [r3, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b20      	cmp	r3, #32
 800186e:	d138      	bne.n	80018e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800187a:	2302      	movs	r3, #2
 800187c:	e032      	b.n	80018e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2224      	movs	r2, #36	@ 0x24
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b20      	cmp	r3, #32
 8001904:	d139      	bne.n	800197a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001910:	2302      	movs	r3, #2
 8001912:	e033      	b.n	800197c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	@ 0x24
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001942:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d141      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001996:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a2:	d131      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019a4:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019aa:	4a46      	ldr	r2, [pc, #280]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b4:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019bc:	4a41      	ldr	r2, [pc, #260]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c4:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2232      	movs	r2, #50	@ 0x32
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	4a3f      	ldr	r2, [pc, #252]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019da:	e002      	b.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3b01      	subs	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e2:	4b38      	ldr	r3, [pc, #224]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ee:	d102      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f2      	bne.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f6:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a02:	d158      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e057      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a18:	e04d      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a20:	d141      	bne.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a22:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2e:	d131      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a36:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2232      	movs	r2, #50	@ 0x32
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a66:	e002      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7a:	d102      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f2      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d112      	bne.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e011      	b.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001aa4:	e007      	b.n	8001ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ade:	6093      	str	r3, [r2, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40007000 	.word	0x40007000

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e2fe      	b.n	8002100 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4b97      	ldr	r3, [pc, #604]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4b94      	ldr	r3, [pc, #592]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3e>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b8d      	ldr	r3, [pc, #564]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e2d9      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b85      	ldr	r3, [pc, #532]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a84      	ldr	r2, [pc, #528]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7e      	ldr	r2, [pc, #504]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b78      	ldr	r3, [pc, #480]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a77      	ldr	r2, [pc, #476]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b75      	ldr	r3, [pc, #468]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a74      	ldr	r2, [pc, #464]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff faee 	bl	8001188 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff faea 	bl	8001188 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	@ 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e29e      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fada 	bl	8001188 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fad6 	bl	8001188 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	@ 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e28a      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4b60      	ldr	r3, [pc, #384]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b59      	ldr	r3, [pc, #356]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b56      	ldr	r3, [pc, #344]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x136>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x13c>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x154>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e25d      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b49      	ldr	r3, [pc, #292]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4946      	ldr	r1, [pc, #280]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b45      	ldr	r3, [pc, #276]	@ (8001d70 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa47 	bl	80010f0 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e249      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3c      	ldr	r2, [pc, #240]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa82 	bl	8001188 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fa7e 	bl	8001188 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e232      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	492d      	ldr	r1, [pc, #180]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fa5e 	bl	8001188 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fa5a 	bl	8001188 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e20e      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d041      	beq.n	8001d82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0c:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fa37 	bl	8001188 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fa33 	bl	8001188 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1e7      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x22e>
 8001d3e:	e020      	b.n	8001d82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_RCC_OscConfig+0x27c>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fa1a 	bl	8001188 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d56:	e00d      	b.n	8001d74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fa16 	bl	8001188 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d906      	bls.n	8001d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1ca      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d74:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ea      	bne.n	8001d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a6 	beq.w	8001edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d94:	4b84      	ldr	r3, [pc, #528]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2b4>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2b6>
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	4a7e      	ldr	r2, [pc, #504]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b79      	ldr	r3, [pc, #484]	@ (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd2:	4b76      	ldr	r3, [pc, #472]	@ (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f9d3 	bl	8001188 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff f9cf 	bl	8001188 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e183      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b6c      	ldr	r3, [pc, #432]	@ (8001fac <HAL_RCC_OscConfig+0x4bc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_RCC_OscConfig+0x32e>
 8001e0c:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e12:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e1c:	e024      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d110      	bne.n	8001e48 <HAL_RCC_OscConfig+0x358>
 8001e26:	4b60      	ldr	r3, [pc, #384]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2c:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e36:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e48:	4b57      	ldr	r3, [pc, #348]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	4a56      	ldr	r2, [pc, #344]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e58:	4b53      	ldr	r3, [pc, #332]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a52      	ldr	r2, [pc, #328]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff f98a 	bl	8001188 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff f986 	bl	8001188 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e138      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b46      	ldr	r3, [pc, #280]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCC_OscConfig+0x388>
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f973 	bl	8001188 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff f96f 	bl	8001188 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e121      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b35      	ldr	r3, [pc, #212]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	4a34      	ldr	r2, [pc, #208]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f942 	bl	8001188 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f08:	f7ff f93e 	bl	8001188 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0f2      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0x418>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f30:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f925 	bl	8001188 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7ff f921 	bl	8001188 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0d5      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80c9 	beq.w	80020fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f000 8083 	beq.w	8002080 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d15e      	bne.n	8002040 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f8fb 	bl	8001188 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f8f7 	bl	8001188 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d905      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0ab      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4b52      	ldr	r3, [pc, #328]	@ (800210c <HAL_RCC_OscConfig+0x61c>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6a11      	ldr	r1, [r2, #32]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fd6:	0212      	lsls	r2, r2, #8
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fea:	0852      	lsrs	r2, r2, #1
 8001fec:	3a01      	subs	r2, #1
 8001fee:	0652      	lsls	r2, r2, #25
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ff6:	06d2      	lsls	r2, r2, #27
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	4943      	ldr	r1, [pc, #268]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b41      	ldr	r3, [pc, #260]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a40      	ldr	r2, [pc, #256]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800200c:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a3d      	ldr	r2, [pc, #244]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f8b6 	bl	8001188 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8b2 	bl	8001188 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e066      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	4b35      	ldr	r3, [pc, #212]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x530>
 800203e:	e05e      	b.n	80020fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a30      	ldr	r2, [pc, #192]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f89c 	bl	8001188 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f898 	bl	8001188 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04c      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	4b28      	ldr	r3, [pc, #160]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002072:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4924      	ldr	r1, [pc, #144]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 8002078:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <HAL_RCC_OscConfig+0x620>)
 800207a:	4013      	ands	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]
 800207e:	e03e      	b.n	80020fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e039      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <HAL_RCC_OscConfig+0x618>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d12c      	bne.n	80020fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d123      	bne.n	80020fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d11b      	bne.n	80020fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d113      	bne.n	80020fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	3b01      	subs	r3, #1
 80020e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	019f800c 	.word	0x019f800c
 8002110:	feeefffc 	.word	0xfeeefffc

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e11e      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b91      	ldr	r3, [pc, #580]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b8e      	ldr	r3, [pc, #568]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 020f 	bic.w	r2, r3, #15
 8002142:	498c      	ldr	r1, [pc, #560]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b8a      	ldr	r3, [pc, #552]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e106      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d073      	beq.n	8002250 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d129      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002170:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0f4      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002180:	f000 f966 	bl	8002450 <RCC_GetSysClockFreqFromPLLSource>
 8002184:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4a7c      	ldr	r2, [pc, #496]	@ (800237c <HAL_RCC_ClockConfig+0x268>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d93f      	bls.n	800220e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800218e:	4b7a      	ldr	r3, [pc, #488]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d033      	beq.n	800220e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d12f      	bne.n	800220e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ae:	4b72      	ldr	r3, [pc, #456]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021b6:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021be:	2380      	movs	r3, #128	@ 0x80
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e024      	b.n	800220e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0c6      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0be      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021ec:	f000 f8ce 	bl	800238c <HAL_RCC_GetSysClockFreq>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4a61      	ldr	r2, [pc, #388]	@ (800237c <HAL_RCC_ClockConfig+0x268>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d909      	bls.n	800220e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002202:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4957      	ldr	r1, [pc, #348]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002220:	f7fe ffb2 	bl	8001188 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe ffae 	bl	8001188 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e095      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002268:	4b43      	ldr	r3, [pc, #268]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a42      	ldr	r2, [pc, #264]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800226e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002272:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002288:	4a3b      	ldr	r2, [pc, #236]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800228e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4936      	ldr	r1, [pc, #216]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b80      	cmp	r3, #128	@ 0x80
 80022a8:	d105      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022aa:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d21d      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 020f 	bic.w	r2, r3, #15
 80022cc:	4929      	ldr	r1, [pc, #164]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022d4:	f7fe ff58 	bl	8001188 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe ff54 	bl	8001188 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e03b      	b.n	800236a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1ed      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4917      	ldr	r1, [pc, #92]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490f      	ldr	r1, [pc, #60]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800233e:	f000 f825 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_RCC_ClockConfig+0x264>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490c      	ldr	r1, [pc, #48]	@ (8002380 <HAL_RCC_ClockConfig+0x26c>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_RCC_ClockConfig+0x270>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fec4 	bl	80010f0 <HAL_InitTick>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	04c4b400 	.word	0x04c4b400
 8002380:	080043e4 	.word	0x080043e4
 8002384:	20000000 	.word	0x20000000
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002392:	4b2c      	ldr	r3, [pc, #176]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e047      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b0:	4b26      	ldr	r3, [pc, #152]	@ (800244c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e03e      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d136      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	68d2      	ldr	r2, [r2, #12]
 80023ec:	0a12      	lsrs	r2, r2, #8
 80023ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e00c      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023fa:	4a13      	ldr	r2, [pc, #76]	@ (8002448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	0a12      	lsrs	r2, r2, #8
 8002408:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
      break;
 8002412:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0e5b      	lsrs	r3, r3, #25
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	e001      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002434:	693b      	ldr	r3, [r7, #16]
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d10c      	bne.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002474:	4a17      	ldr	r2, [pc, #92]	@ (80024d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
    break;
 800248c:	e00c      	b.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	0a12      	lsrs	r2, r2, #8
 800249c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    break;
 80024a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a8:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0e5b      	lsrs	r3, r3, #25
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	00f42400 	.word	0x00f42400

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8098 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b43      	ldr	r3, [pc, #268]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b40      	ldr	r3, [pc, #256]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250e:	4a3f      	ldr	r2, [pc, #252]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	@ 0x58
 8002516:	4b3d      	ldr	r3, [pc, #244]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002526:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002532:	f7fe fe29 	bl	8001188 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002538:	e009      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fe25 	bl	8001188 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	74fb      	strb	r3, [r7, #19]
        break;
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d159      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002560:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d019      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257c:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002588:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a1f      	ldr	r2, [pc, #124]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b1c      	ldr	r3, [pc, #112]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a1b      	ldr	r2, [pc, #108]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	4a18      	ldr	r2, [pc, #96]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fde5 	bl	8001188 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fde1 	bl	8001188 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
            break;
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ec      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4903      	ldr	r1, [pc, #12]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
 800260a:	e005      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4ba6      	ldr	r3, [pc, #664]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4aa5      	ldr	r2, [pc, #660]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4ba0      	ldr	r3, [pc, #640]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	499c      	ldr	r1, [pc, #624]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b97      	ldr	r3, [pc, #604]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4994      	ldr	r1, [pc, #592]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b8f      	ldr	r3, [pc, #572]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	498b      	ldr	r1, [pc, #556]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b86      	ldr	r3, [pc, #536]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4983      	ldr	r1, [pc, #524]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026be:	4b7e      	ldr	r3, [pc, #504]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	497a      	ldr	r1, [pc, #488]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e0:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4972      	ldr	r1, [pc, #456]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002702:	4b6d      	ldr	r3, [pc, #436]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4969      	ldr	r1, [pc, #420]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002724:	4b64      	ldr	r3, [pc, #400]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4961      	ldr	r1, [pc, #388]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002746:	4b5c      	ldr	r3, [pc, #368]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	4958      	ldr	r1, [pc, #352]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002768:	4b53      	ldr	r3, [pc, #332]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4950      	ldr	r1, [pc, #320]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a0:	4b45      	ldr	r3, [pc, #276]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	4942      	ldr	r1, [pc, #264]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d8:	4b37      	ldr	r3, [pc, #220]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4934      	ldr	r1, [pc, #208]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b2f      	ldr	r3, [pc, #188]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a2e      	ldr	r2, [pc, #184]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002810:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281e:	4926      	ldr	r1, [pc, #152]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002856:	4918      	ldr	r1, [pc, #96]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288e:	490a      	ldr	r1, [pc, #40]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e049      	b.n	8002962 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fa3c 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 ff92 	bl	8003824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e049      	b.n	8002a10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe f9b1 	bl	8000cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f000 ff3b 	bl	8003824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x24>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e03c      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x3e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e02f      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x58>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e022      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d109      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x72>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e015      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d109      	bne.n	8002aa4 <HAL_TIM_PWM_Start+0x8c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e008      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x9e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e097      	b.n	8002bee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0xb6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	e023      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Start+0xc6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002adc:	e01b      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aec:	e013      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start+0xe6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xf6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b0c:	e003      	b.n	8002b16 <HAL_TIM_PWM_Start+0xfe>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 faae 	bl	8004080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <HAL_TIM_PWM_Start+0x1e0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x13e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a32      	ldr	r2, [pc, #200]	@ (8002bfc <HAL_TIM_PWM_Start+0x1e4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x13e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_TIM_PWM_Start+0x1e8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x13e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2f      	ldr	r2, [pc, #188]	@ (8002c04 <HAL_TIM_PWM_Start+0x1ec>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x13e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2d      	ldr	r2, [pc, #180]	@ (8002c08 <HAL_TIM_PWM_Start+0x1f0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x142>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_PWM_Start+0x144>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a20      	ldr	r2, [pc, #128]	@ (8002bf8 <HAL_TIM_PWM_Start+0x1e0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_TIM_PWM_Start+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b82:	d013      	beq.n	8002bac <HAL_TIM_PWM_Start+0x194>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a20      	ldr	r2, [pc, #128]	@ (8002c0c <HAL_TIM_PWM_Start+0x1f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_PWM_Start+0x194>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <HAL_TIM_PWM_Start+0x1f8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_TIM_PWM_Start+0x194>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <HAL_TIM_PWM_Start+0x1e4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_TIM_PWM_Start+0x194>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <HAL_TIM_PWM_Start+0x1e8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d115      	bne.n	8002bd8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_TIM_PWM_Start+0x1fc>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d015      	beq.n	8002bea <HAL_TIM_PWM_Start+0x1d2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc4:	d011      	beq.n	8002bea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	e008      	b.n	8002bea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e000      	b.n	8002bec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40013400 	.word	0x40013400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40000800 	.word	0x40000800
 8002c14:	00010007 	.word	0x00010007

08002c18 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start_IT+0x28>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e03c      	b.n	8002cba <HAL_TIM_PWM_Start_IT+0xa2>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <HAL_TIM_PWM_Start_IT+0x42>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e02f      	b.n	8002cba <HAL_TIM_PWM_Start_IT+0xa2>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d109      	bne.n	8002c74 <HAL_TIM_PWM_Start_IT+0x5c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e022      	b.n	8002cba <HAL_TIM_PWM_Start_IT+0xa2>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d109      	bne.n	8002c8e <HAL_TIM_PWM_Start_IT+0x76>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e015      	b.n	8002cba <HAL_TIM_PWM_Start_IT+0xa2>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d109      	bne.n	8002ca8 <HAL_TIM_PWM_Start_IT+0x90>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e008      	b.n	8002cba <HAL_TIM_PWM_Start_IT+0xa2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e2      	b.n	8002e88 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <HAL_TIM_PWM_Start_IT+0xba>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cd0:	e023      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x102>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d104      	bne.n	8002ce2 <HAL_TIM_PWM_Start_IT+0xca>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce0:	e01b      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x102>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_PWM_Start_IT+0xda>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf0:	e013      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x102>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start_IT+0xea>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d00:	e00b      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x102>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Start_IT+0xfa>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d10:	e003      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x102>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d841      	bhi.n	8002da4 <HAL_TIM_PWM_Start_IT+0x18c>
 8002d20:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <HAL_TIM_PWM_Start_IT+0x110>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002da5 	.word	0x08002da5
 8002d30:	08002da5 	.word	0x08002da5
 8002d34:	08002da5 	.word	0x08002da5
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002da5 	.word	0x08002da5
 8002d44:	08002da5 	.word	0x08002da5
 8002d48:	08002d81 	.word	0x08002d81
 8002d4c:	08002da5 	.word	0x08002da5
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002da5 	.word	0x08002da5
 8002d58:	08002d93 	.word	0x08002d93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0202 	orr.w	r2, r2, #2
 8002d6a:	60da      	str	r2, [r3, #12]
      break;
 8002d6c:	e01d      	b.n	8002daa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0204 	orr.w	r2, r2, #4
 8002d7c:	60da      	str	r2, [r3, #12]
      break;
 8002d7e:	e014      	b.n	8002daa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0208 	orr.w	r2, r2, #8
 8002d8e:	60da      	str	r2, [r3, #12]
      break;
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0210 	orr.w	r2, r2, #16
 8002da0:	60da      	str	r2, [r3, #12]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      break;
 8002da8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d16a      	bne.n	8002e86 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f001 f961 	bl	8004080 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a33      	ldr	r2, [pc, #204]	@ (8002e90 <HAL_TIM_PWM_Start_IT+0x278>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_TIM_PWM_Start_IT+0x27c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_TIM_PWM_Start_IT+0x280>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e9c <HAL_TIM_PWM_Start_IT+0x284>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <HAL_TIM_PWM_Start_IT+0x288>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_TIM_PWM_Start_IT+0x1dc>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_TIM_PWM_Start_IT+0x1de>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a20      	ldr	r2, [pc, #128]	@ (8002e90 <HAL_TIM_PWM_Start_IT+0x278>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_TIM_PWM_Start_IT+0x22e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d013      	beq.n	8002e46 <HAL_TIM_PWM_Start_IT+0x22e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a20      	ldr	r2, [pc, #128]	@ (8002ea4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_TIM_PWM_Start_IT+0x22e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_TIM_PWM_Start_IT+0x290>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_TIM_PWM_Start_IT+0x22e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <HAL_TIM_PWM_Start_IT+0x27c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIM_PWM_Start_IT+0x22e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <HAL_TIM_PWM_Start_IT+0x280>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d115      	bne.n	8002e72 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <HAL_TIM_PWM_Start_IT+0x294>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d015      	beq.n	8002e84 <HAL_TIM_PWM_Start_IT+0x26c>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5e:	d011      	beq.n	8002e84 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e70:	e008      	b.n	8002e84 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e000      	b.n	8002e86 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e84:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40013400 	.word	0x40013400
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40014400 	.word	0x40014400
 8002ea0:	40014800 	.word	0x40014800
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	00010007 	.word	0x00010007

08002eb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e097      	b.n	8002ff4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fd ff65 	bl	8000da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002ef4:	f023 0307 	bic.w	r3, r3, #7
 8002ef8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 fc8d 	bl	8003824 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	4313      	orrs	r3, r2
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002f50:	f023 030c 	bic.w	r3, r3, #12
 8002f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	011a      	lsls	r2, r3, #4
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	4313      	orrs	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800300c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003014:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800301c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003024:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d110      	bne.n	800304e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d102      	bne.n	8003038 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003032:	7b7b      	ldrb	r3, [r7, #13]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d001      	beq.n	800303c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e069      	b.n	8003110 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304c:	e031      	b.n	80030b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d110      	bne.n	8003076 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003054:	7bbb      	ldrb	r3, [r7, #14]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800305a:	7b3b      	ldrb	r3, [r7, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e055      	b.n	8003110 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003074:	e01d      	b.n	80030b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d108      	bne.n	800308e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003082:	7b7b      	ldrb	r3, [r7, #13]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003088:	7b3b      	ldrb	r3, [r7, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e03e      	b.n	8003110 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_TIM_Encoder_Start+0xc4>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d008      	beq.n	80030d0 <HAL_TIM_Encoder_Start+0xd4>
 80030be:	e00f      	b.n	80030e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2201      	movs	r2, #1
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 ffd9 	bl	8004080 <TIM_CCxChannelCmd>
      break;
 80030ce:	e016      	b.n	80030fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	2104      	movs	r1, #4
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ffd1 	bl	8004080 <TIM_CCxChannelCmd>
      break;
 80030de:	e00e      	b.n	80030fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ffc9 	bl	8004080 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	2104      	movs	r1, #4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 ffc2 	bl	8004080 <TIM_CCxChannelCmd>
      break;
 80030fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fb40 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fb32 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fb43 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0204 	mvn.w	r2, #4
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fb1a 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fb0c 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fb1d 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 faf4 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fae6 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 faf7 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0210 	mvn.w	r2, #16
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2208      	movs	r2, #8
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 face 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fac0 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fad1 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0201 	mvn.w	r2, #1
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fed6 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00c      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80032aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 f825 	bl	80042fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f001 f81d 	bl	8004310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa8b 	bl	8003810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f06f 0220 	mvn.w	r2, #32
 8003316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ffe5 	bl	80042e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00c      	beq.n	8003342 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800333a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fff1 	bl	8004324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800335e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 ffe9 	bl	8004338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 ffe1 	bl	800434c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 ffd9 	bl	8004360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0ff      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b14      	cmp	r3, #20
 80033e2:	f200 80f0 	bhi.w	80035c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033e6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003441 	.word	0x08003441
 80033f0:	080035c7 	.word	0x080035c7
 80033f4:	080035c7 	.word	0x080035c7
 80033f8:	080035c7 	.word	0x080035c7
 80033fc:	08003481 	.word	0x08003481
 8003400:	080035c7 	.word	0x080035c7
 8003404:	080035c7 	.word	0x080035c7
 8003408:	080035c7 	.word	0x080035c7
 800340c:	080034c3 	.word	0x080034c3
 8003410:	080035c7 	.word	0x080035c7
 8003414:	080035c7 	.word	0x080035c7
 8003418:	080035c7 	.word	0x080035c7
 800341c:	08003503 	.word	0x08003503
 8003420:	080035c7 	.word	0x080035c7
 8003424:	080035c7 	.word	0x080035c7
 8003428:	080035c7 	.word	0x080035c7
 800342c:	08003545 	.word	0x08003545
 8003430:	080035c7 	.word	0x080035c7
 8003434:	080035c7 	.word	0x080035c7
 8003438:	080035c7 	.word	0x080035c7
 800343c:	08003585 	.word	0x08003585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa88 	bl	800395c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6999      	ldr	r1, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	619a      	str	r2, [r3, #24]
      break;
 800347e:	e0a5      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 faf8 	bl	8003a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e084      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fb61 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0204 	bic.w	r2, r2, #4
 80034ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]
      break;
 8003500:	e064      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fbc9 	bl	8003ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800351c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	61da      	str	r2, [r3, #28]
      break;
 8003542:	e043      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc32 	bl	8003db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0208 	orr.w	r2, r2, #8
 800355e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0204 	bic.w	r2, r2, #4
 800356e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003582:	e023      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fc76 	bl	8003e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800359e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80035c4:	e002      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_ConfigClockSource+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0de      	b.n	80037ba <HAL_TIM_ConfigClockSource+0x1da>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800361a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800361e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a63      	ldr	r2, [pc, #396]	@ (80037c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	f000 80a9 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 800363c:	4a61      	ldr	r2, [pc, #388]	@ (80037c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	f200 80ae 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003644:	4a60      	ldr	r2, [pc, #384]	@ (80037c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	f000 80a1 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 800364c:	4a5e      	ldr	r2, [pc, #376]	@ (80037c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	f200 80a6 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003654:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8003656:	4293      	cmp	r3, r2
 8003658:	f000 8099 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 800365c:	4a5b      	ldr	r2, [pc, #364]	@ (80037cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f200 809e 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003664:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f000 8091 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 800366c:	4a58      	ldr	r2, [pc, #352]	@ (80037d0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f200 8096 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003674:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003678:	f000 8089 	beq.w	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 800367c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003680:	f200 808e 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003688:	d03e      	beq.n	8003708 <HAL_TIM_ConfigClockSource+0x128>
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368e:	f200 8087 	bhi.w	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003696:	f000 8086 	beq.w	80037a6 <HAL_TIM_ConfigClockSource+0x1c6>
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369e:	d87f      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036a0:	2b70      	cmp	r3, #112	@ 0x70
 80036a2:	d01a      	beq.n	80036da <HAL_TIM_ConfigClockSource+0xfa>
 80036a4:	2b70      	cmp	r3, #112	@ 0x70
 80036a6:	d87b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036a8:	2b60      	cmp	r3, #96	@ 0x60
 80036aa:	d050      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x16e>
 80036ac:	2b60      	cmp	r3, #96	@ 0x60
 80036ae:	d877      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036b0:	2b50      	cmp	r3, #80	@ 0x50
 80036b2:	d03c      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x14e>
 80036b4:	2b50      	cmp	r3, #80	@ 0x50
 80036b6:	d873      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	d058      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x18e>
 80036bc:	2b40      	cmp	r3, #64	@ 0x40
 80036be:	d86f      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c0:	2b30      	cmp	r3, #48	@ 0x30
 80036c2:	d064      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 80036c4:	2b30      	cmp	r3, #48	@ 0x30
 80036c6:	d86b      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d060      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d867      	bhi.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d05a      	beq.n	800378e <HAL_TIM_ConfigClockSource+0x1ae>
 80036d8:	e062      	b.n	80037a0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ea:	f000 fca9 	bl	8004040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
      break;
 8003706:	e04f      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003718:	f000 fc92 	bl	8004040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800372a:	609a      	str	r2, [r3, #8]
      break;
 800372c:	e03c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	461a      	mov	r2, r3
 800373c:	f000 fc04 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2150      	movs	r1, #80	@ 0x50
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fc5d 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 800374c:	e02c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	461a      	mov	r2, r3
 800375c:	f000 fc23 	bl	8003fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2160      	movs	r1, #96	@ 0x60
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fc4d 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 800376c:	e01c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	461a      	mov	r2, r3
 800377c:	f000 fbe4 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2140      	movs	r1, #64	@ 0x40
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fc3d 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 800378c:	e00c      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fc34 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 800379e:	e003      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80037a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00100070 	.word	0x00100070
 80037c8:	00100040 	.word	0x00100040
 80037cc:	00100030 	.word	0x00100030
 80037d0:	00100020 	.word	0x00100020

080037d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <TIM_Base_SetConfig+0x11c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00f      	beq.n	800385c <TIM_Base_SetConfig+0x38>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003842:	d00b      	beq.n	800385c <TIM_Base_SetConfig+0x38>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3f      	ldr	r2, [pc, #252]	@ (8003944 <TIM_Base_SetConfig+0x120>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <TIM_Base_SetConfig+0x38>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3e      	ldr	r2, [pc, #248]	@ (8003948 <TIM_Base_SetConfig+0x124>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0x38>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3d      	ldr	r2, [pc, #244]	@ (800394c <TIM_Base_SetConfig+0x128>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d108      	bne.n	800386e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a33      	ldr	r2, [pc, #204]	@ (8003940 <TIM_Base_SetConfig+0x11c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01b      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387c:	d017      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a30      	ldr	r2, [pc, #192]	@ (8003944 <TIM_Base_SetConfig+0x120>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2f      	ldr	r2, [pc, #188]	@ (8003948 <TIM_Base_SetConfig+0x124>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00f      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2e      	ldr	r2, [pc, #184]	@ (800394c <TIM_Base_SetConfig+0x128>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00b      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2d      	ldr	r2, [pc, #180]	@ (8003950 <TIM_Base_SetConfig+0x12c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <TIM_Base_SetConfig+0x130>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d003      	beq.n	80038ae <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003958 <TIM_Base_SetConfig+0x134>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d108      	bne.n	80038c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <TIM_Base_SetConfig+0x11c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <TIM_Base_SetConfig+0xe8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a17      	ldr	r2, [pc, #92]	@ (800394c <TIM_Base_SetConfig+0x128>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <TIM_Base_SetConfig+0xe8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <TIM_Base_SetConfig+0x12c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_Base_SetConfig+0xe8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a15      	ldr	r2, [pc, #84]	@ (8003954 <TIM_Base_SetConfig+0x130>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_Base_SetConfig+0xe8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a14      	ldr	r2, [pc, #80]	@ (8003958 <TIM_Base_SetConfig+0x134>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d103      	bne.n	8003914 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f023 0201 	bic.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]
  }
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800

0800395c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f023 0201 	bic.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 0302 	bic.w	r3, r3, #2
 80039a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <TIM_OC1_SetConfig+0x10c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00f      	beq.n	80039dc <TIM_OC1_SetConfig+0x80>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <TIM_OC1_SetConfig+0x110>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_OC1_SetConfig+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <TIM_OC1_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_OC1_SetConfig+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <TIM_OC1_SetConfig+0x118>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_OC1_SetConfig+0x80>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a28      	ldr	r2, [pc, #160]	@ (8003a78 <TIM_OC1_SetConfig+0x11c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10c      	bne.n	80039f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0308 	bic.w	r3, r3, #8
 80039e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a68 <TIM_OC1_SetConfig+0x10c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00f      	beq.n	8003a1e <TIM_OC1_SetConfig+0xc2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <TIM_OC1_SetConfig+0x110>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <TIM_OC1_SetConfig+0xc2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <TIM_OC1_SetConfig+0x114>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <TIM_OC1_SetConfig+0xc2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a18      	ldr	r2, [pc, #96]	@ (8003a74 <TIM_OC1_SetConfig+0x118>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC1_SetConfig+0xc2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <TIM_OC1_SetConfig+0x11c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d111      	bne.n	8003a42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	621a      	str	r2, [r3, #32]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40013400 	.word	0x40013400
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800

08003a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 0210 	bic.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <TIM_OC2_SetConfig+0x100>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC2_SetConfig+0x6c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <TIM_OC2_SetConfig+0x104>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10d      	bne.n	8003b04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <TIM_OC2_SetConfig+0x100>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00f      	beq.n	8003b2c <TIM_OC2_SetConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b80 <TIM_OC2_SetConfig+0x104>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_OC2_SetConfig+0xb0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1b      	ldr	r2, [pc, #108]	@ (8003b84 <TIM_OC2_SetConfig+0x108>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_OC2_SetConfig+0xb0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <TIM_OC2_SetConfig+0x10c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC2_SetConfig+0xb0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a19      	ldr	r2, [pc, #100]	@ (8003b8c <TIM_OC2_SetConfig+0x110>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a27      	ldr	r2, [pc, #156]	@ (8003c8c <TIM_OC3_SetConfig+0xfc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC3_SetConfig+0x6a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <TIM_OC3_SetConfig+0x100>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10d      	bne.n	8003c16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <TIM_OC3_SetConfig+0xfc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00f      	beq.n	8003c3e <TIM_OC3_SetConfig+0xae>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <TIM_OC3_SetConfig+0x100>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <TIM_OC3_SetConfig+0xae>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1a      	ldr	r2, [pc, #104]	@ (8003c94 <TIM_OC3_SetConfig+0x104>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_OC3_SetConfig+0xae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <TIM_OC3_SetConfig+0x108>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_OC3_SetConfig+0xae>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a18      	ldr	r2, [pc, #96]	@ (8003c9c <TIM_OC3_SetConfig+0x10c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <TIM_OC4_SetConfig+0x100>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC4_SetConfig+0x6c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a27      	ldr	r2, [pc, #156]	@ (8003da4 <TIM_OC4_SetConfig+0x104>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10d      	bne.n	8003d28 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003da0 <TIM_OC4_SetConfig+0x100>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_OC4_SetConfig+0xb0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1c      	ldr	r2, [pc, #112]	@ (8003da4 <TIM_OC4_SetConfig+0x104>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_OC4_SetConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <TIM_OC4_SetConfig+0x108>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC4_SetConfig+0xb0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a1a      	ldr	r2, [pc, #104]	@ (8003dac <TIM_OC4_SetConfig+0x10c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC4_SetConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <TIM_OC4_SetConfig+0x110>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	019b      	lsls	r3, r3, #6
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40013400 	.word	0x40013400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800

08003db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a17      	ldr	r2, [pc, #92]	@ (8003e68 <TIM_OC5_SetConfig+0xb4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_OC5_SetConfig+0x7a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a16      	ldr	r2, [pc, #88]	@ (8003e6c <TIM_OC5_SetConfig+0xb8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_OC5_SetConfig+0x7a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a15      	ldr	r2, [pc, #84]	@ (8003e70 <TIM_OC5_SetConfig+0xbc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_OC5_SetConfig+0x7a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <TIM_OC5_SetConfig+0xc0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_OC5_SetConfig+0x7a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a13      	ldr	r2, [pc, #76]	@ (8003e78 <TIM_OC5_SetConfig+0xc4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d109      	bne.n	8003e42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	621a      	str	r2, [r3, #32]
}
 8003e5c:	bf00      	nop
 8003e5e:	371c      	adds	r7, #28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800

08003e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	051b      	lsls	r3, r3, #20
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <TIM_OC6_SetConfig+0xb8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_OC6_SetConfig+0x7c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <TIM_OC6_SetConfig+0xbc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_OC6_SetConfig+0x7c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <TIM_OC6_SetConfig+0xc0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_OC6_SetConfig+0x7c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <TIM_OC6_SetConfig+0xc4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC6_SetConfig+0x7c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a14      	ldr	r2, [pc, #80]	@ (8003f44 <TIM_OC6_SetConfig+0xc8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d109      	bne.n	8003f0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	029b      	lsls	r3, r3, #10
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 030a 	bic.w	r3, r3, #10
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 0210 	bic.w	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800401c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	f043 0307 	orr.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800405a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	431a      	orrs	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2201      	movs	r2, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1a      	ldr	r2, [r3, #32]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e065      	b.n	80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2c      	ldr	r2, [pc, #176]	@ (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800411e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415a:	d013      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10c      	bne.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800418a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40012c00 	.word	0x40012c00
 80041c0:	40013400 	.word	0x40013400
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40014000 	.word	0x40014000

080041d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e073      	b.n	80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d11c      	bne.n	80042c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	051b      	lsls	r3, r3, #20
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40013400 	.word	0x40013400

080042e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <memset>:
 8004374:	4402      	add	r2, r0
 8004376:	4603      	mov	r3, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	d100      	bne.n	800437e <memset+0xa>
 800437c:	4770      	bx	lr
 800437e:	f803 1b01 	strb.w	r1, [r3], #1
 8004382:	e7f9      	b.n	8004378 <memset+0x4>

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4d0d      	ldr	r5, [pc, #52]	@ (80043bc <__libc_init_array+0x38>)
 8004388:	4c0d      	ldr	r4, [pc, #52]	@ (80043c0 <__libc_init_array+0x3c>)
 800438a:	1b64      	subs	r4, r4, r5
 800438c:	10a4      	asrs	r4, r4, #2
 800438e:	2600      	movs	r6, #0
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	4d0b      	ldr	r5, [pc, #44]	@ (80043c4 <__libc_init_array+0x40>)
 8004396:	4c0c      	ldr	r4, [pc, #48]	@ (80043c8 <__libc_init_array+0x44>)
 8004398:	f000 f818 	bl	80043cc <_init>
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	2600      	movs	r6, #0
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	080043f4 	.word	0x080043f4
 80043c0:	080043f4 	.word	0x080043f4
 80043c4:	080043f4 	.word	0x080043f4
 80043c8:	080043fc 	.word	0x080043fc

080043cc <_init>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr

080043d8 <_fini>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr
