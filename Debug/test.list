
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009714  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080098ec  080098ec  0000a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c34  08009c34  0000ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009c38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000060  08009c98  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c00  08009c98  0000bc00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002208a  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f8  00000000  00000000  0002d11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00031318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a3  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c51  00000000  00000000  00033d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e804  00000000  00000000  000549dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf990  00000000  00000000  000731e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  00142bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001495c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080098d4 	.word	0x080098d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	080098d4 	.word	0x080098d4

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2iz>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d215      	bcs.n	800082a <__aeabi_d2iz+0x36>
 80007fe:	d511      	bpl.n	8000824 <__aeabi_d2iz+0x30>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d912      	bls.n	8000830 <__aeabi_d2iz+0x3c>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081a:	fa23 f002 	lsr.w	r0, r3, r2
 800081e:	bf18      	it	ne
 8000820:	4240      	negne	r0, r0
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d105      	bne.n	800083c <__aeabi_d2iz+0x48>
 8000830:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000834:	bf08      	it	eq
 8000836:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800083a:	4770      	bx	lr
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b96a 	b.w	8000b30 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	460c      	mov	r4, r1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d14e      	bne.n	800091e <__udivmoddi4+0xaa>
 8000880:	4694      	mov	ip, r2
 8000882:	458c      	cmp	ip, r1
 8000884:	4686      	mov	lr, r0
 8000886:	fab2 f282 	clz	r2, r2
 800088a:	d962      	bls.n	8000952 <__udivmoddi4+0xde>
 800088c:	b14a      	cbz	r2, 80008a2 <__udivmoddi4+0x2e>
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	4091      	lsls	r1, r2
 8000894:	fa20 f303 	lsr.w	r3, r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	4319      	orrs	r1, r3
 800089e:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f f68c 	uxth.w	r6, ip
 80008aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb07 1114 	mls	r1, r7, r4, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb04 f106 	mul.w	r1, r4, r6
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008ca:	f080 8112 	bcs.w	8000af2 <__udivmoddi4+0x27e>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 810f 	bls.w	8000af2 <__udivmoddi4+0x27e>
 80008d4:	3c02      	subs	r4, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a59      	subs	r1, r3, r1
 80008da:	fa1f f38e 	uxth.w	r3, lr
 80008de:	fbb1 f0f7 	udiv	r0, r1, r7
 80008e2:	fb07 1110 	mls	r1, r7, r0, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb00 f606 	mul.w	r6, r0, r6
 80008ee:	429e      	cmp	r6, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x94>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008fa:	f080 80fc 	bcs.w	8000af6 <__udivmoddi4+0x282>
 80008fe:	429e      	cmp	r6, r3
 8000900:	f240 80f9 	bls.w	8000af6 <__udivmoddi4+0x282>
 8000904:	4463      	add	r3, ip
 8000906:	3802      	subs	r0, #2
 8000908:	1b9b      	subs	r3, r3, r6
 800090a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800090e:	2100      	movs	r1, #0
 8000910:	b11d      	cbz	r5, 800091a <__udivmoddi4+0xa6>
 8000912:	40d3      	lsrs	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	e9c5 3200 	strd	r3, r2, [r5]
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d905      	bls.n	800092e <__udivmoddi4+0xba>
 8000922:	b10d      	cbz	r5, 8000928 <__udivmoddi4+0xb4>
 8000924:	e9c5 0100 	strd	r0, r1, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	4608      	mov	r0, r1
 800092c:	e7f5      	b.n	800091a <__udivmoddi4+0xa6>
 800092e:	fab3 f183 	clz	r1, r3
 8000932:	2900      	cmp	r1, #0
 8000934:	d146      	bne.n	80009c4 <__udivmoddi4+0x150>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d302      	bcc.n	8000940 <__udivmoddi4+0xcc>
 800093a:	4290      	cmp	r0, r2
 800093c:	f0c0 80f0 	bcc.w	8000b20 <__udivmoddi4+0x2ac>
 8000940:	1a86      	subs	r6, r0, r2
 8000942:	eb64 0303 	sbc.w	r3, r4, r3
 8000946:	2001      	movs	r0, #1
 8000948:	2d00      	cmp	r5, #0
 800094a:	d0e6      	beq.n	800091a <__udivmoddi4+0xa6>
 800094c:	e9c5 6300 	strd	r6, r3, [r5]
 8000950:	e7e3      	b.n	800091a <__udivmoddi4+0xa6>
 8000952:	2a00      	cmp	r2, #0
 8000954:	f040 8090 	bne.w	8000a78 <__udivmoddi4+0x204>
 8000958:	eba1 040c 	sub.w	r4, r1, ip
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	fa1f f78c 	uxth.w	r7, ip
 8000964:	2101      	movs	r1, #1
 8000966:	fbb4 f6f8 	udiv	r6, r4, r8
 800096a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096e:	fb08 4416 	mls	r4, r8, r6, r4
 8000972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000976:	fb07 f006 	mul.w	r0, r7, r6
 800097a:	4298      	cmp	r0, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x11c>
 800097e:	eb1c 0303 	adds.w	r3, ip, r3
 8000982:	f106 34ff 	add.w	r4, r6, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x11a>
 8000988:	4298      	cmp	r0, r3
 800098a:	f200 80cd 	bhi.w	8000b28 <__udivmoddi4+0x2b4>
 800098e:	4626      	mov	r6, r4
 8000990:	1a1c      	subs	r4, r3, r0
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb4 f0f8 	udiv	r0, r4, r8
 800099a:	fb08 4410 	mls	r4, r8, r0, r4
 800099e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a2:	fb00 f707 	mul.w	r7, r0, r7
 80009a6:	429f      	cmp	r7, r3
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x148>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x146>
 80009b4:	429f      	cmp	r7, r3
 80009b6:	f200 80b0 	bhi.w	8000b1a <__udivmoddi4+0x2a6>
 80009ba:	4620      	mov	r0, r4
 80009bc:	1bdb      	subs	r3, r3, r7
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	e7a5      	b.n	8000910 <__udivmoddi4+0x9c>
 80009c4:	f1c1 0620 	rsb	r6, r1, #32
 80009c8:	408b      	lsls	r3, r1
 80009ca:	fa22 f706 	lsr.w	r7, r2, r6
 80009ce:	431f      	orrs	r7, r3
 80009d0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009d4:	fa04 f301 	lsl.w	r3, r4, r1
 80009d8:	ea43 030c 	orr.w	r3, r3, ip
 80009dc:	40f4      	lsrs	r4, r6
 80009de:	fa00 f801 	lsl.w	r8, r0, r1
 80009e2:	0c38      	lsrs	r0, r7, #16
 80009e4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009e8:	fbb4 fef0 	udiv	lr, r4, r0
 80009ec:	fa1f fc87 	uxth.w	ip, r7
 80009f0:	fb00 441e 	mls	r4, r0, lr, r4
 80009f4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009f8:	fb0e f90c 	mul.w	r9, lr, ip
 80009fc:	45a1      	cmp	r9, r4
 80009fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000a02:	d90a      	bls.n	8000a1a <__udivmoddi4+0x1a6>
 8000a04:	193c      	adds	r4, r7, r4
 8000a06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a0a:	f080 8084 	bcs.w	8000b16 <__udivmoddi4+0x2a2>
 8000a0e:	45a1      	cmp	r9, r4
 8000a10:	f240 8081 	bls.w	8000b16 <__udivmoddi4+0x2a2>
 8000a14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a18:	443c      	add	r4, r7
 8000a1a:	eba4 0409 	sub.w	r4, r4, r9
 8000a1e:	fa1f f983 	uxth.w	r9, r3
 8000a22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a26:	fb00 4413 	mls	r4, r0, r3, r4
 8000a2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d907      	bls.n	8000a46 <__udivmoddi4+0x1d2>
 8000a36:	193c      	adds	r4, r7, r4
 8000a38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a3c:	d267      	bcs.n	8000b0e <__udivmoddi4+0x29a>
 8000a3e:	45a4      	cmp	ip, r4
 8000a40:	d965      	bls.n	8000b0e <__udivmoddi4+0x29a>
 8000a42:	3b02      	subs	r3, #2
 8000a44:	443c      	add	r4, r7
 8000a46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a4e:	eba4 040c 	sub.w	r4, r4, ip
 8000a52:	429c      	cmp	r4, r3
 8000a54:	46ce      	mov	lr, r9
 8000a56:	469c      	mov	ip, r3
 8000a58:	d351      	bcc.n	8000afe <__udivmoddi4+0x28a>
 8000a5a:	d04e      	beq.n	8000afa <__udivmoddi4+0x286>
 8000a5c:	b155      	cbz	r5, 8000a74 <__udivmoddi4+0x200>
 8000a5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a62:	eb64 040c 	sbc.w	r4, r4, ip
 8000a66:	fa04 f606 	lsl.w	r6, r4, r6
 8000a6a:	40cb      	lsrs	r3, r1
 8000a6c:	431e      	orrs	r6, r3
 8000a6e:	40cc      	lsrs	r4, r1
 8000a70:	e9c5 6400 	strd	r6, r4, [r5]
 8000a74:	2100      	movs	r1, #0
 8000a76:	e750      	b.n	800091a <__udivmoddi4+0xa6>
 8000a78:	f1c2 0320 	rsb	r3, r2, #32
 8000a7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a84:	fa24 f303 	lsr.w	r3, r4, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	430c      	orrs	r4, r1
 8000a8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a94:	fa1f f78c 	uxth.w	r7, ip
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000aa0:	0c23      	lsrs	r3, r4, #16
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb00 f107 	mul.w	r1, r0, r7
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x24c>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ab6:	d22c      	bcs.n	8000b12 <__udivmoddi4+0x29e>
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d92a      	bls.n	8000b12 <__udivmoddi4+0x29e>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	1a5b      	subs	r3, r3, r1
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ac8:	fb08 3311 	mls	r3, r8, r1, r3
 8000acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad0:	fb01 f307 	mul.w	r3, r1, r7
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x276>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ae0:	d213      	bcs.n	8000b0a <__udivmoddi4+0x296>
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	d911      	bls.n	8000b0a <__udivmoddi4+0x296>
 8000ae6:	3902      	subs	r1, #2
 8000ae8:	4464      	add	r4, ip
 8000aea:	1ae4      	subs	r4, r4, r3
 8000aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000af0:	e739      	b.n	8000966 <__udivmoddi4+0xf2>
 8000af2:	4604      	mov	r4, r0
 8000af4:	e6f0      	b.n	80008d8 <__udivmoddi4+0x64>
 8000af6:	4608      	mov	r0, r1
 8000af8:	e706      	b.n	8000908 <__udivmoddi4+0x94>
 8000afa:	45c8      	cmp	r8, r9
 8000afc:	d2ae      	bcs.n	8000a5c <__udivmoddi4+0x1e8>
 8000afe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b06:	3801      	subs	r0, #1
 8000b08:	e7a8      	b.n	8000a5c <__udivmoddi4+0x1e8>
 8000b0a:	4631      	mov	r1, r6
 8000b0c:	e7ed      	b.n	8000aea <__udivmoddi4+0x276>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	e799      	b.n	8000a46 <__udivmoddi4+0x1d2>
 8000b12:	4630      	mov	r0, r6
 8000b14:	e7d4      	b.n	8000ac0 <__udivmoddi4+0x24c>
 8000b16:	46d6      	mov	lr, sl
 8000b18:	e77f      	b.n	8000a1a <__udivmoddi4+0x1a6>
 8000b1a:	4463      	add	r3, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	e74d      	b.n	80009bc <__udivmoddi4+0x148>
 8000b20:	4606      	mov	r6, r0
 8000b22:	4623      	mov	r3, r4
 8000b24:	4608      	mov	r0, r1
 8000b26:	e70f      	b.n	8000948 <__udivmoddi4+0xd4>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	e730      	b.n	8000990 <__udivmoddi4+0x11c>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_idiv0>:
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0a5a      	lsrs	r2, r3, #9
 8000b44:	490f      	ldr	r1, [pc, #60]	@ (8000b84 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b46:	fba1 1202 	umull	r1, r2, r1, r2
 8000b4a:	09d2      	lsrs	r2, r2, #7
 8000b4c:	490e      	ldr	r1, [pc, #56]	@ (8000b88 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	0a5b      	lsrs	r3, r3, #9
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	09db      	lsrs	r3, r3, #7
 8000b64:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	441a      	add	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	00044b83 	.word	0x00044b83
 8000b88:	3b9aca00 	.word	0x3b9aca00

08000b8c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bac:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	edd3 6a03 	vldr	s13, [r3, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d503      	bpl.n	8000c18 <_ZN8DC_motor6PI_runEv+0x8c>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	e012      	b.n	8000c3e <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c22:	eef1 7a67 	vneg.f32	s15, s15
 8000c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	d506      	bpl.n	8000c3e <_ZN8DC_motor6PI_runEv+0xb2>
 8000c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c34:	eef1 7a67 	vneg.f32	s15, s15
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	edd3 6a02 	vldr	s13, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c76:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8000c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	dd03      	ble.n	8000c9c <_ZN8DC_motor6PI_runEv+0x110>
 8000c94:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e00a      	b.n	8000cb2 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 8000c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ca0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cac:	d501      	bpl.n	8000cb2 <_ZN8DC_motor6PI_runEv+0x126>
 8000cae:	4b56      	ldr	r3, [pc, #344]	@ (8000e08 <_ZN8DC_motor6PI_runEv+0x27c>)
 8000cb0:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8000cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8000cba:	ee17 0a90 	vmov	r0, s15
 8000cbe:	f7ff fd41 	bl	8000744 <__aeabi_f2d>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd28 	bl	8000720 <__aeabi_i2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	f7ff faa6 	bl	8000228 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fd86 	bl	80007f4 <__aeabi_d2iz>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d124      	bne.n	8000d40 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8000cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd09      	ble.n	8000d18 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	f004 f9cb 	bl	80050ac <HAL_GPIO_WritePin>
 8000d16:	e03c      	b.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8000d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d24:	d509      	bpl.n	8000d3a <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	f004 f9ba 	bl	80050ac <HAL_GPIO_WritePin>
 8000d38:	e02b      	b.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e028      	b.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d123      	bne.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 8000d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	dd09      	ble.n	8000d6c <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	f004 f9a1 	bl	80050ac <HAL_GPIO_WritePin>
 8000d6a:	e012      	b.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8000d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d78:	d509      	bpl.n	8000d8e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	f004 f990 	bl	80050ac <HAL_GPIO_WritePin>
 8000d8c:	e001      	b.n	8000d92 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <_ZN8DC_motor6PI_runEv+0x21a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000da4:	e02c      	b.n	8000e00 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d105      	bne.n	8000dba <_ZN8DC_motor6PI_runEv+0x22e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000db8:	e022      	b.n	8000e00 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d105      	bne.n	8000dce <_ZN8DC_motor6PI_runEv+0x242>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000dcc:	e018      	b.n	8000e00 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd2:	2b0c      	cmp	r3, #12
 8000dd4:	d105      	bne.n	8000de2 <_ZN8DC_motor6PI_runEv+0x256>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000de0:	e00e      	b.n	8000e00 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d105      	bne.n	8000df6 <_ZN8DC_motor6PI_runEv+0x26a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000df4:	e004      	b.n	8000e00 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bdb0      	pop	{r4, r5, r7, pc}
 8000e08:	bf800000 	.word	0xbf800000

08000e0c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	621a      	str	r2, [r3, #32]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	edc3 7a07 	vstr	s15, [r3, #28]
    __HAL_TIM_SetCounter(enc_htim,0);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4610      	mov	r0, r2
 8000eae:	f005 fc79 	bl	80067a4 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fe65 	bl	8006b88 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fe5f 	bl	8006b88 <HAL_TIM_Encoder_Start>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f003 fa9c 	bl	8004412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f818 	bl	8000f0e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fba1 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee2:	f000 fb6d 	bl	80015c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000ee6:	f000 f893 	bl	8001010 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eea:	f000 f949 	bl	8001180 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eee:	f000 f995 	bl	800121c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ef2:	f000 f9ed 	bl	80012d0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ef6:	f000 fa77 	bl	80013e8 <MX_TIM8_Init>
  MX_I2C1_Init();
 8000efa:	f000 f849 	bl	8000f90 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000efe:	f000 fb13 	bl	8001528 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000f02:	f000 fa3b 	bl	800137c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000f06:	f000 fd05 	bl	8001914 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0a:	bf00      	nop
 8000f0c:	e7fd      	b.n	8000f0a <main+0x38>

08000f0e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b094      	sub	sp, #80	@ 0x50
 8000f12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f14:	f107 0318 	add.w	r3, r7, #24
 8000f18:	2238      	movs	r2, #56	@ 0x38
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fb87 	bl	8009630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f34:	f004 fa1c 	bl	8005370 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f004 fac2 	bl	80054d8 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f5a:	f000 fc07 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 fdc0 	bl	8005afc <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f82:	f000 fbf3 	bl	800176c <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	@ 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <MX_I2C1_Init+0x78>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <MX_I2C1_Init+0x7c>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fca:	480e      	ldr	r0, [pc, #56]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fcc:	f004 f89e 	bl	800510c <HAL_I2C_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fd6:	f000 fbc9 	bl	800176c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4809      	ldr	r0, [pc, #36]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000fde:	f004 f930 	bl	8005242 <HAL_I2CEx_ConfigAnalogFilter>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe8:	f000 fbc0 	bl	800176c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_I2C1_Init+0x74>)
 8000ff0:	f004 f972 	bl	80052d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ffa:	f000 fbb7 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000007c 	.word	0x2000007c
 8001008:	40005400 	.word	0x40005400
 800100c:	00503d58 	.word	0x00503d58

08001010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b098      	sub	sp, #96	@ 0x60
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2234      	movs	r2, #52	@ 0x34
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f008 faf7 	bl	8009630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001042:	4b4d      	ldr	r3, [pc, #308]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001044:	4a4d      	ldr	r2, [pc, #308]	@ (800117c <MX_TIM1_Init+0x16c>)
 8001046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001048:	4b4b      	ldr	r3, [pc, #300]	@ (8001178 <MX_TIM1_Init+0x168>)
 800104a:	220f      	movs	r2, #15
 800104c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b4a      	ldr	r3, [pc, #296]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001054:	4b48      	ldr	r3, [pc, #288]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001056:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800105a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b46      	ldr	r3, [pc, #280]	@ (8001178 <MX_TIM1_Init+0x168>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001062:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b43      	ldr	r3, [pc, #268]	@ (8001178 <MX_TIM1_Init+0x168>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106e:	4842      	ldr	r0, [pc, #264]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001070:	f005 fa41 	bl	80064f6 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 fb77 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108e:	4619      	mov	r1, r3
 8001090:	4839      	ldr	r0, [pc, #228]	@ (8001178 <MX_TIM1_Init+0x168>)
 8001092:	f006 fde1 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 fb66 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	@ 0x60
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	482c      	ldr	r0, [pc, #176]	@ (8001178 <MX_TIM1_Init+0x168>)
 80010c6:	f005 ff3d 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d0:	f000 fb4c 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d8:	2204      	movs	r2, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4826      	ldr	r0, [pc, #152]	@ (8001178 <MX_TIM1_Init+0x168>)
 80010de:	f005 ff31 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010e8:	f000 fb40 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010f0:	2208      	movs	r2, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	4820      	ldr	r0, [pc, #128]	@ (8001178 <MX_TIM1_Init+0x168>)
 80010f6:	f005 ff25 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001100:	f000 fb34 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001104:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001108:	220c      	movs	r2, #12
 800110a:	4619      	mov	r1, r3
 800110c:	481a      	ldr	r0, [pc, #104]	@ (8001178 <MX_TIM1_Init+0x168>)
 800110e:	f005 ff19 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001118:	f000 fb28 	bl	800176c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001130:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	@ (8001178 <MX_TIM1_Init+0x168>)
 800115a:	f006 fdff 	bl	8007d5c <HAL_TIMEx_ConfigBreakDeadTime>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001164:	f000 fb02 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <MX_TIM1_Init+0x168>)
 800116a:	f002 ff13 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3760      	adds	r7, #96	@ 0x60
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000d0 	.word	0x200000d0
 800117c:	40012c00 	.word	0x40012c00

08001180 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011a8:	220f      	movs	r2, #15
 80011aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011c8:	f005 f8a4 	bl	8006314 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011d2:	f000 facb 	bl	800176c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <MX_TIM2_Init+0x98>)
 80011e4:	f005 ffc2 	bl	800716c <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ee:	f000 fabd 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_TIM2_Init+0x98>)
 8001200:	f006 fd2a 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 faaf 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000011c 	.word	0x2000011c

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001240:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001242:	4a22      	ldr	r2, [pc, #136]	@ (80012cc <MX_TIM3_Init+0xb0>)
 8001244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001248:	220f      	movs	r2, #15
 800124a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_TIM3_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001254:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001258:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <MX_TIM3_Init+0xac>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001266:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001268:	f005 f945 	bl	80064f6 <HAL_TIM_PWM_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001272:	f000 fa7b 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4810      	ldr	r0, [pc, #64]	@ (80012c8 <MX_TIM3_Init+0xac>)
 8001286:	f006 fce7 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001290:	f000 fa6c 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001294:	2360      	movs	r3, #96	@ 0x60
 8001296:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM3_Init+0xac>)
 80012ac:	f005 fe4a 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012b6:	f000 fa59 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012ba:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM3_Init+0xac>)
 80012bc:	f002 fe6a 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	@ 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000168 	.word	0x20000168
 80012cc:	40000400 	.word	0x40000400

080012d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	@ 0x30
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2224      	movs	r2, #36	@ 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 f9a6 	bl	8009630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_TIM4_Init+0xa4>)
 80012f0:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <MX_TIM4_Init+0xa8>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_TIM4_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_TIM4_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_TIM4_Init+0xa4>)
 8001302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_TIM4_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_TIM4_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001314:	2303      	movs	r3, #3
 8001316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800132c:	2301      	movs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_TIM4_Init+0xa4>)
 8001340:	f005 fb7c 	bl	8006a3c <HAL_TIM_Encoder_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800134a:	f000 fa0f 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_TIM4_Init+0xa4>)
 800135c:	f006 fc7c 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001366:	f000 fa01 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	@ 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001b4 	.word	0x200001b4
 8001378:	40000800 	.word	0x40000800

0800137c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_TIM6_Init+0x64>)
 800138e:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <MX_TIM6_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_TIM6_Init+0x64>)
 8001394:	220f      	movs	r2, #15
 8001396:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_TIM6_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_TIM6_Init+0x64>)
 80013a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_TIM6_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <MX_TIM6_Init+0x64>)
 80013ae:	f004 ffb1 	bl	8006314 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013b8:	f000 f9d8 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_TIM6_Init+0x64>)
 80013ca:	f006 fc45 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013d4:	f000 f9ca 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000200 	.word	0x20000200
 80013e4:	40001000 	.word	0x40001000

080013e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b098      	sub	sp, #96	@ 0x60
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2234      	movs	r2, #52	@ 0x34
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f008 f90b 	bl	8009630 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <MX_TIM8_Init+0x138>)
 800141c:	4a41      	ldr	r2, [pc, #260]	@ (8001524 <MX_TIM8_Init+0x13c>)
 800141e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8001420:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001422:	220f      	movs	r2, #15
 8001424:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800142c:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_TIM8_Init+0x138>)
 800142e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001432:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b3a      	ldr	r3, [pc, #232]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <MX_TIM8_Init+0x138>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001446:	4836      	ldr	r0, [pc, #216]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001448:	f005 f855 	bl	80064f6 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 f98b 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001462:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001466:	4619      	mov	r1, r3
 8001468:	482d      	ldr	r0, [pc, #180]	@ (8001520 <MX_TIM8_Init+0x138>)
 800146a:	f006 fbf5 	bl	8007c58 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001474:	f000 f97a 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	@ 0x60
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	@ (8001520 <MX_TIM8_Init+0x138>)
 800149e:	f005 fd51 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014a8:	f000 f960 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	481a      	ldr	r0, [pc, #104]	@ (8001520 <MX_TIM8_Init+0x138>)
 80014b6:	f005 fd45 	bl	8006f44 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80014c0:	f000 f954 	bl	800176c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001502:	f006 fc2b 	bl	8007d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800150c:	f000 f92e 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_TIM8_Init+0x138>)
 8001512:	f002 fd3f 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3760      	adds	r7, #96	@ 0x60
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000024c 	.word	0x2000024c
 8001524:	40013400 	.word	0x40013400

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 800152e:	4a23      	ldr	r2, [pc, #140]	@ (80015bc <MX_USART2_UART_Init+0x94>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001570:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001572:	f006 fcc5 	bl	8007f00 <HAL_UART_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 f8f6 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001584:	f007 ff53 	bl	800942e <HAL_UARTEx_SetTxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800158e:	f000 f8ed 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 8001596:	f007 ff88 	bl	80094aa <HAL_UARTEx_SetRxFifoThreshold>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015a0:	f000 f8e4 	bl	800176c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_USART2_UART_Init+0x90>)
 80015a6:	f007 ff09 	bl	80093bc <HAL_UARTEx_DisableFifoMode>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f000 f8dc 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000298 	.word	0x20000298
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <MX_DMA_Init+0x60>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ca:	4a15      	ldr	r2, [pc, #84]	@ (8001620 <MX_DMA_Init+0x60>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_DMA_Init+0x60>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x60>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x60>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x60>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200d      	movs	r0, #13
 80015fc:	f003 f855 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001600:	200d      	movs	r0, #13
 8001602:	f003 f86c 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200e      	movs	r0, #14
 800160c:	f003 f84d 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001610:	200e      	movs	r0, #14
 8001612:	f003 f864 	bl	80046de <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b49      	ldr	r3, [pc, #292]	@ (8001760 <MX_GPIO_Init+0x13c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a48      	ldr	r2, [pc, #288]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b46      	ldr	r3, [pc, #280]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001652:	4b43      	ldr	r3, [pc, #268]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a42      	ldr	r2, [pc, #264]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <MX_GPIO_Init+0x13c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b3a      	ldr	r3, [pc, #232]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a36      	ldr	r2, [pc, #216]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <MX_GPIO_Init+0x13c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f240 6109 	movw	r1, #1545	@ 0x609
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f003 fd02 	bl	80050ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80016a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4829      	ldr	r0, [pc, #164]	@ (8001764 <MX_GPIO_Init+0x140>)
 80016c0:	f003 fb5a 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f240 6309 	movw	r3, #1545	@ 0x609
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e0:	f003 fb4a 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016e4:	2306      	movs	r3, #6
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f003 fb3c 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001700:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001706:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_GPIO_Init+0x144>)
 8001718:	f003 fb2e 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800171c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001722:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_GPIO_Init+0x140>)
 8001734:	f003 fb20 	bl	8004d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2017      	movs	r0, #23
 800173e:	f002 ffb4 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001742:	2017      	movs	r0, #23
 8001744:	f002 ffcb 	bl	80046de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2028      	movs	r0, #40	@ 0x28
 800174e:	f002 ffac 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001752:	2028      	movs	r0, #40	@ 0x28
 8001754:	f002 ffc3 	bl	80046de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	48000800 	.word	0x48000800
 8001768:	48000400 	.word	0x48000400

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <Error_Handler+0x8>

08001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>:
		int maxPulse = 2500;
		int minPulse = 500;


	public:
		Servo(TIM_HandleTypeDef* h, uint32_t ch,int MaxAngle = 300,int MinPulse = 500,int MaxPulse = 2500) {
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800179c:	615a      	str	r2, [r3, #20]
			htim = h;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	609a      	str	r2, [r3, #8]
			channel = ch;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
			maxAng = MaxAngle;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	60da      	str	r2, [r3, #12]
			minPulse = MinPulse;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	615a      	str	r2, [r3, #20]
			maxPulse = MaxPulse;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	611a      	str	r2, [r3, #16]
		}
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void setspeed(float target_speed);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);


	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6178      	str	r0, [r7, #20]
 80017d4:	6139      	str	r1, [r7, #16]
 80017d6:	60fa      	str	r2, [r7, #12]
 80017d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80017dc:	edc7 0a00 	vstr	s1, [r7]
 80017e0:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2264      	movs	r2, #100	@ 0x64
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 800183c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800184a:	635a      	str	r2, [r3, #52]	@ 0x34
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	897a      	ldrh	r2, [r7, #10]
 8001872:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	6a3a      	ldr	r2, [r7, #32]
 800187a:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001880:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001888:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]
	};
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	3a83126f 	.word	0x3a83126f

080018ac <_Z9setup_allv>:
int gripperLowest = 0;
int ms = 0;
int32_t total_steps = 0;  // 用來記錄總步數


void setup_all(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	servo_gripper.setup(0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	4810      	ldr	r0, [pc, #64]	@ (80018f4 <_Z9setup_allv+0x48>)
 80018b4:	f002 f937 	bl	8003b26 <_ZN5Servo5setupEi>
	servo_right.setup(0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	480f      	ldr	r0, [pc, #60]	@ (80018f8 <_Z9setup_allv+0x4c>)
 80018bc:	f002 f933 	bl	8003b26 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	480e      	ldr	r0, [pc, #56]	@ (80018fc <_Z9setup_allv+0x50>)
 80018c4:	f002 f92f 	bl	8003b26 <_ZN5Servo5setupEi>
	servo_forward.setup(90);
 80018c8:	215a      	movs	r1, #90	@ 0x5a
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <_Z9setup_allv+0x54>)
 80018cc:	f002 f92b 	bl	8003b26 <_ZN5Servo5setupEi>
	servo_turn.setup(0);
 80018d0:	2100      	movs	r1, #0
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <_Z9setup_allv+0x58>)
 80018d4:	f002 f927 	bl	8003b26 <_ZN5Servo5setupEi>
	Motor_updown.setup();
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <_Z9setup_allv+0x5c>)
 80018da:	f7ff fade 	bl	8000e9a <_ZN8DC_motor5setupEv>
	HAL_TIM_Base_Start_IT(&htim6);
 80018de:	480b      	ldr	r0, [pc, #44]	@ (800190c <_Z9setup_allv+0x60>)
 80018e0:	f004 fd70 	bl	80063c4 <HAL_TIM_Base_Start_IT>
	ms++;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <_Z9setup_allv+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <_Z9setup_allv+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000045c 	.word	0x2000045c
 80018f8:	2000048c 	.word	0x2000048c
 80018fc:	20000474 	.word	0x20000474
 8001900:	200004a4 	.word	0x200004a4
 8001904:	20000444 	.word	0x20000444
 8001908:	200003ec 	.word	0x200003ec
 800190c:	20000200 	.word	0x20000200
 8001910:	200004c4 	.word	0x200004c4

08001914 <main_function>:
void main_function(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	setup_all();
 8001918:	f7ff ffc8 	bl	80018ac <_Z9setup_allv>

	while(1){
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <main_function+0x8>

08001920 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 800192a:	6838      	ldr	r0, [r7, #0]
 800192c:	f004 fd4a 	bl	80063c4 <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001930:	bf00      	nop
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dcfa      	bgt.n	8001932 <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f004 fdab 	bl	8006498 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8001942:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200004c0 	.word	0x200004c0

08001954 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001964:	d104      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 800196e:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0e      	ldr	r2, [pc, #56]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d113      	bne.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		Motor_updown.PI_run();
 800197a:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800197c:	f7ff f906 	bl	8000b8c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(1);
 8001980:	2101      	movs	r1, #1
 8001982:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001984:	f7ff fa51 	bl	8000e2a <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001994:	f7ff fa3a 	bl	8000e0c <_ZN8DC_motor8setspeedEf>
		ms++;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019a0:	6013      	str	r3, [r2, #0]
	}
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200004c0 	.word	0x200004c0
 80019b0:	40001000 	.word	0x40001000
 80019b4:	200003ec 	.word	0x200003ec
 80019b8:	200004bc 	.word	0x200004bc
 80019bc:	200004c4 	.word	0x200004c4

080019c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_EXTI_Callback+0x46>
 80019d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d6:	d133      	bne.n	8001a40 <HAL_GPIO_EXTI_Callback+0x80>
		case GPIO_PIN_13:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	4619      	mov	r1, r3
 80019dc:	481a      	ldr	r0, [pc, #104]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x88>)
 80019de:	f003 fb4d 	bl	800507c <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d023      	beq.n	8001a3a <HAL_GPIO_EXTI_Callback+0x7a>
				speeds = 0;
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x8c>)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
				wait(5000, &htim2);
 80019fa:	4915      	ldr	r1, [pc, #84]	@ (8001a50 <HAL_GPIO_EXTI_Callback+0x90>)
 80019fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a00:	f7ff ff8e 	bl	8001920 <_Z4waitiP17TIM_HandleTypeDef>
			}
			//Motor_updown.setspeed(speeds);
			break;
 8001a04:	e019      	b.n	8001a3a <HAL_GPIO_EXTI_Callback+0x7a>
		case GPIO_PIN_12:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480f      	ldr	r0, [pc, #60]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a0c:	f003 fb36 	bl	800507c <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <HAL_GPIO_EXTI_Callback+0x7e>
				initialized = false;  // 重置初始化狀態
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_GPIO_EXTI_Callback+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
				wait(5000, &htim2);
 8001a2e:	4908      	ldr	r1, [pc, #32]	@ (8001a50 <HAL_GPIO_EXTI_Callback+0x90>)
 8001a30:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a34:	f7ff ff74 	bl	8001920 <_Z4waitiP17TIM_HandleTypeDef>
				//HAL_Delay(1000);
			}

			//Motor_updown.setspeed(speeds);
			break;
 8001a38:	e001      	b.n	8001a3e <HAL_GPIO_EXTI_Callback+0x7e>
			break;
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_EXTI_Callback+0x80>
			break;
 8001a3e:	bf00      	nop

	}
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	200004bc 	.word	0x200004bc
 8001a50:	2000011c 	.word	0x2000011c
 8001a54:	20000000 	.word	0x20000000

08001a58 <_Z41__static_initialization_and_destruction_0ii>:
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d157      	bne.n	8001b18 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d152      	bne.n	8001b18 <_Z41__static_initialization_and_destruction_0ii+0xc0>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_9, &htim8, TIM_CHANNEL_1,0,4,12};
 8001a72:	2300      	movs	r3, #0
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2300      	movs	r3, #0
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001a82:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a8a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001a8e:	4925      	ldr	r1, [pc, #148]	@ (8001b24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001a90:	4825      	ldr	r0, [pc, #148]	@ (8001b28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001a92:	f7ff fe9b 	bl	80017cc <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_1, 1800};
 8001a96:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4920      	ldr	r1, [pc, #128]	@ (8001b2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001aaa:	4821      	ldr	r0, [pc, #132]	@ (8001b30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001aac:	f7ff fe64 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2};
 8001ab0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	491c      	ldr	r1, [pc, #112]	@ (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001ac4:	481c      	ldr	r0, [pc, #112]	@ (8001b38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001ac6:	f7ff fe57 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>
Servo servo_left = {&htim1, TIM_CHANNEL_3};
 8001aca:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ada:	2208      	movs	r2, #8
 8001adc:	4915      	ldr	r1, [pc, #84]	@ (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001ade:	4817      	ldr	r0, [pc, #92]	@ (8001b3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001ae0:	f7ff fe4a 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>
Servo servo_right = {&htim1, TIM_CHANNEL_4};
 8001ae4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001af4:	220c      	movs	r2, #12
 8001af6:	490f      	ldr	r1, [pc, #60]	@ (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001af8:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001afa:	f7ff fe3d 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, 1800};
 8001afe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001b12:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8001b14:	f7ff fe30 	bl	8001778 <_ZN5ServoC1EP17TIM_HandleTypeDefmiii>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000024c 	.word	0x2000024c
 8001b24:	200001b4 	.word	0x200001b4
 8001b28:	200003ec 	.word	0x200003ec
 8001b2c:	20000168 	.word	0x20000168
 8001b30:	20000444 	.word	0x20000444
 8001b34:	200000d0 	.word	0x200000d0
 8001b38:	2000045c 	.word	0x2000045c
 8001b3c:	20000474 	.word	0x20000474
 8001b40:	2000048c 	.word	0x2000048c
 8001b44:	200004a4 	.word	0x200004a4

08001b48 <_GLOBAL__sub_I_Motor_updown>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff ff81 	bl	8001a58 <_Z41__static_initialization_and_destruction_0ii>
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	if(open){
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <_Z14gripperControlb+0x1c>
		servo_gripper.write(300);  //open
 8001b68:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <_Z14gripperControlb+0x2c>)
 8001b6e:	f001 ffef 	bl	8003b50 <_ZN5Servo5writeEi>
	}
	else{
		servo_gripper.write(0); //off
	}
}
 8001b72:	e003      	b.n	8001b7c <_Z14gripperControlb+0x24>
		servo_gripper.write(0); //off
 8001b74:	2100      	movs	r1, #0
 8001b76:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <_Z14gripperControlb+0x2c>)
 8001b78:	f001 ffea 	bl	8003b50 <_ZN5Servo5writeEi>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000045c 	.word	0x2000045c

08001b88 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	08009bd0 	.word	0x08009bd0

08001bcc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
      data()
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffe8 	bl	8001bac <_ZN3ros3MsgC1Ev>
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3304      	adds	r3, #4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ffce 	bl	8001b88 <_ZN3ros4TimeC1Ev>
    {
    }
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08009bb8 	.word	0x08009bb8

08001bfc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	0a19      	lsrs	r1, r3, #8
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3301      	adds	r3, #1
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0c19      	lsrs	r1, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3302      	adds	r3, #2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	b2ca      	uxtb	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	0e19      	lsrs	r1, r3, #24
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3303      	adds	r3, #3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6899      	ldr	r1, [r3, #8]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0a19      	lsrs	r1, r3, #8
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	0c19      	lsrs	r1, r3, #16
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0e19      	lsrs	r1, r3, #24
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3303      	adds	r3, #3
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	440b      	add	r3, r1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	440b      	add	r3, r1
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	061b      	lsls	r3, r3, #24
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	440b      	add	r3, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	440b      	add	r3, r1
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3303      	adds	r3, #3
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	440b      	add	r3, r1
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3304      	adds	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d66:	68fb      	ldr	r3, [r7, #12]
    }
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	080098ec 	.word	0x080098ec

08001d90 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	080098fc 	.word	0x080098fc

08001dac <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fef8 	bl	8001bac <_ZN3ros3MsgC1Ev>
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a09      	ldr	r2, [pc, #36]	@ (8001df0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dcc:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dd2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001dd8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
    {
    }
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	08009ba0 	.word	0x08009ba0
 8001df0:	08009920 	.word	0x08009920

08001df4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8899      	ldrh	r1, [r3, #4]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	b299      	uxth	r1, r3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3302      	adds	r3, #2
 8001e28:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe f9f2 	bl	8000218 <strlen>
 8001e34:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	69b9      	ldr	r1, [r7, #24]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 ff53 	bl	8002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3304      	adds	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	18d0      	adds	r0, r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4619      	mov	r1, r3
 8001e58:	f007 fc1e 	bl	8009698 <memcpy>
      offset += length_topic_name;
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4413      	add	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe f9d5 	bl	8000218 <strlen>
 8001e6e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	6979      	ldr	r1, [r7, #20]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ff36 	bl	8002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	18d0      	adds	r0, r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f007 fc01 	bl	8009698 <memcpy>
      offset += length_message_type;
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe f9b8 	bl	8000218 <strlen>
 8001ea8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	6939      	ldr	r1, [r7, #16]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 ff19 	bl	8002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	18d0      	adds	r0, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f007 fbe4 	bl	8009698 <memcpy>
      offset += length_md5sum;
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ede:	68f9      	ldr	r1, [r7, #12]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2ca      	uxtb	r2, r1
 8001ee8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0a19      	lsrs	r1, r3, #8
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0c19      	lsrs	r1, r3, #16
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3302      	adds	r3, #2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0e19      	lsrs	r1, r3, #24
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3303      	adds	r3, #3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001f20:	69fb      	ldr	r3, [r7, #28]
    }
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	@ 0x28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	440b      	add	r3, r1
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	3302      	adds	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	441a      	add	r2, r3
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fed6 	bl	8002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f86:	e00b      	b.n	8001fa0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	3b01      	subs	r3, #1
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	440b      	add	r3, r1
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d3ed      	bcc.n	8001f88 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fea3 	bl	8002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	e00b      	b.n	8002006 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	3301      	adds	r3, #1
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	429a      	cmp	r2, r3
 8002010:	d3ed      	bcc.n	8001fee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	3b01      	subs	r3, #1
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4413      	add	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	3b01      	subs	r3, #1
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	441a      	add	r2, r3
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fe70 	bl	8002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	3304      	adds	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e00b      	b.n	800206c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	441a      	add	r2, r3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b01      	subs	r3, #1
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	440b      	add	r3, r1
 8002062:	7812      	ldrb	r2, [r2, #0]
 8002064:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3ed      	bcc.n	8002054 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	3b01      	subs	r3, #1
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	3b01      	subs	r3, #1
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	440a      	add	r2, r1
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3301      	adds	r3, #1
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	440b      	add	r3, r1
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4313      	orrs	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	3302      	adds	r3, #2
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	440b      	add	r3, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3303      	adds	r3, #3
 80020d8:	6839      	ldr	r1, [r7, #0]
 80020da:	440b      	add	r3, r1
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3304      	adds	r3, #4
 80020ee:	61bb      	str	r3, [r7, #24]
     return offset;
 80020f0:	69bb      	ldr	r3, [r7, #24]
    }
 80020f2:	4618      	mov	r0, r3
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	08009924 	.word	0x08009924

08002118 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	08009940 	.word	0x08009940

08002134 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd34 	bl	8001bac <_ZN3ros3MsgC1Ev>
 8002144:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
      level(0),
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002154:	609a      	str	r2, [r3, #8]
    {
    }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	08009b88 	.word	0x08009b88
 8002164:	08009920 	.word	0x08009920

08002168 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	7912      	ldrb	r2, [r2, #4]
 8002180:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f843 	bl	8000218 <strlen>
 8002192:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fda4 	bl	8002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	18d0      	adds	r0, r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f007 fa6f 	bl	8009698 <memcpy>
      offset += length_msg;
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021c2:	68fb      	ldr	r3, [r7, #12]
    }
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3301      	adds	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	441a      	add	r2, r3
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fd95 	bl	8002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3304      	adds	r3, #4
 8002202:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00b      	b.n	8002222 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	441a      	add	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3b01      	subs	r3, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	440b      	add	r3, r1
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3ed      	bcc.n	800220a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	3b01      	subs	r3, #1
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	4413      	add	r3, r2
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3b01      	subs	r3, #1
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
     return offset;
 8002252:	693b      	ldr	r3, [r7, #16]
    }
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	08009964 	.word	0x08009964

08002278 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	08009978 	.word	0x08009978

08002294 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc84 	bl	8001bac <_ZN3ros3MsgC1Ev>
 80022a4:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	61da      	str	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	08009b70 	.word	0x08009b70

080022dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0a19      	lsrs	r1, r3, #8
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	b2ca      	uxtb	r2, r1
 8002308:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0c19      	lsrs	r1, r3, #16
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	3302      	adds	r3, #2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	b2ca      	uxtb	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	0e19      	lsrs	r1, r3, #24
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	3303      	adds	r3, #3
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	3304      	adds	r3, #4
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	e02a      	b.n	8002390 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002348:	6939      	ldr	r1, [r7, #16]
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	0a19      	lsrs	r1, r3, #8
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	3301      	adds	r3, #1
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	0c19      	lsrs	r1, r3, #16
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	3302      	adds	r3, #2
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	0e19      	lsrs	r1, r3, #24
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3303      	adds	r3, #3
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4413      	add	r3, r2
 8002380:	b2ca      	uxtb	r2, r1
 8002382:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	3304      	adds	r3, #4
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	3301      	adds	r3, #1
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	429a      	cmp	r2, r3
 8002398:	d3cf      	bcc.n	800233a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	b2ca      	uxtb	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	0a19      	lsrs	r1, r3, #8
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	b2ca      	uxtb	r2, r1
 80023b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	0c19      	lsrs	r1, r3, #16
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	3302      	adds	r3, #2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	0e19      	lsrs	r1, r3, #24
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	3303      	adds	r3, #3
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	3304      	adds	r3, #4
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	e02a      	b.n	8002440 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	0a19      	lsrs	r1, r3, #8
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	3301      	adds	r3, #1
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0c19      	lsrs	r1, r3, #16
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	3302      	adds	r3, #2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	b2ca      	uxtb	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	0e19      	lsrs	r1, r3, #24
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	3303      	adds	r3, #3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	3304      	adds	r3, #4
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3cf      	bcc.n	80023ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69d9      	ldr	r1, [r3, #28]
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	b2ca      	uxtb	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	0a19      	lsrs	r1, r3, #8
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	3301      	adds	r3, #1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4413      	add	r3, r2
 8002466:	b2ca      	uxtb	r2, r1
 8002468:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	0c19      	lsrs	r1, r3, #16
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	3302      	adds	r3, #2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b2ca      	uxtb	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	0e19      	lsrs	r1, r3, #24
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	3303      	adds	r3, #3
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3304      	adds	r3, #4
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e027      	b.n	80024ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd feb6 	bl	8000218 <strlen>
 80024ac:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fc17 	bl	8002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	3304      	adds	r3, #4
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	18d0      	adds	r0, r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f007 f8de 	bl	8009698 <memcpy>
      offset += length_stringsi;
 80024dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4413      	add	r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	3301      	adds	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3d2      	bcc.n	800249a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024f6:	4618      	mov	r0, r3
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024fe:	b580      	push	{r7, lr}
 8002500:	b08e      	sub	sp, #56	@ 0x38
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002518:	3301      	adds	r3, #1
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	6a3a      	ldr	r2, [r7, #32]
 8002524:	4313      	orrs	r3, r2
 8002526:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252a:	3302      	adds	r3, #2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	4313      	orrs	r3, r2
 8002538:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800253a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253c:	3303      	adds	r3, #3
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	4313      	orrs	r3, r2
 800254a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	3304      	adds	r3, #4
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d90a      	bls.n	8002572 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f007 f82c 	bl	80095c4 <realloc>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	@ 0x30
 800257c:	e035      	b.n	80025ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	440a      	add	r2, r1
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002594:	3301      	adds	r3, #1
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	440b      	add	r3, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	3302      	adds	r3, #2
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	440b      	add	r3, r1
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	3303      	adds	r3, #3
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	440b      	add	r3, r1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80025cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ce:	3304      	adds	r3, #4
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	3301      	adds	r3, #1
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3c4      	bcc.n	800257e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	3301      	adds	r3, #1
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4313      	orrs	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002612:	3302      	adds	r3, #2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	4313      	orrs	r3, r2
 8002620:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002624:	3303      	adds	r3, #3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002636:	3304      	adds	r3, #4
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	d90a      	bls.n	800265a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f006 ffb8 	bl	80095c4 <realloc>
 8002654:	4602      	mov	r2, r0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002664:	e035      	b.n	80026d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	440a      	add	r2, r1
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267c:	3301      	adds	r3, #1
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	440b      	add	r3, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268e:	3302      	adds	r3, #2
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	440b      	add	r3, r1
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a0:	3303      	adds	r3, #3
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	440b      	add	r3, r1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	3304      	adds	r3, #4
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	3214      	adds	r2, #20
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80026cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ce:	3301      	adds	r3, #1
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3c4      	bcc.n	8002666 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e8:	3301      	adds	r3, #1
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fa:	3302      	adds	r3, #2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	3303      	adds	r3, #3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800271c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271e:	3304      	adds	r3, #4
 8002720:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	429a      	cmp	r2, r3
 800272a:	d90a      	bls.n	8002742 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f006 ff44 	bl	80095c4 <realloc>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800274c:	e03e      	b.n	80027cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800274e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	441a      	add	r2, r3
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fae4 	bl	8002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002762:	3304      	adds	r3, #4
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
 800276a:	e00b      	b.n	8002784 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	441a      	add	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	3b01      	subs	r3, #1
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	440b      	add	r3, r1
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	3301      	adds	r3, #1
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
 8002784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4413      	add	r3, r2
 800278a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278c:	429a      	cmp	r2, r3
 800278e:	d3ed      	bcc.n	800276c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	3b01      	subs	r3, #1
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80027a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a2:	3b01      	subs	r3, #1
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	441a      	add	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80027ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	3220      	adds	r2, #32
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	3301      	adds	r3, #1
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3bb      	bcc.n	800274e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80027d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80027d8:	4618      	mov	r0, r3
 80027da:	3738      	adds	r7, #56	@ 0x38
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	08009aac 	.word	0x08009aac

080027fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	0800999c 	.word	0x0800999c

08002818 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	601a      	str	r2, [r3, #0]
    msg_(msg),
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
  }
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a4:	461a      	mov	r2, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	6093      	str	r3, [r2, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b0:	461a      	mov	r2, r3
 80028b2:	2300      	movs	r3, #0
 80028b4:	60d3      	str	r3, [r2, #12]
    }
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	20000298 	.word	0x20000298

080028c8 <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
      int c = -1;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ffbe 	bl	800285e <_ZN13STM32Hardware10getRdmaIndEv>
 80028e2:	4603      	mov	r3, r0
 80028e4:	429c      	cmp	r4, r3
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80028f8:	1c59      	adds	r1, r3, #1
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800290e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 8002918:	68fb      	ldr	r3, [r7, #12]
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
	...

08002924 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	2b20      	cmp	r3, #32
 8002936:	d108      	bne.n	800294a <_ZN13STM32Hardware5flushEv+0x26>
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <_ZN13STM32Hardware5flushEv+0xc8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <_ZN13STM32Hardware5flushEv+0x26>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <_ZN13STM32Hardware5flushEv+0x28>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d049      	beq.n	80029e4 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002950:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <_ZN13STM32Hardware5flushEv+0xc8>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d039      	beq.n	80029de <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	d20c      	bcs.n	8002998 <_ZN13STM32Hardware5flushEv+0x74>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	b29b      	uxth	r3, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	e007      	b.n	80029a8 <_ZN13STM32Hardware5flushEv+0x84>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	89fa      	ldrh	r2, [r7, #14]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f005 faed 	bl	8007fa0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	4413      	add	r3, r2
 80029d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029dc:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80029de:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <_ZN13STM32Hardware5flushEv+0xc8>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
      }
    }
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200004c8 	.word	0x200004c8

080029f0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
      int n = length;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a06:	bfa8      	it	ge
 8002a08:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8002a0c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bf28      	it	cs
 8002a20:	4613      	movcs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f006 fe2d 	bl	8009698 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a54:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d00b      	beq.n	8002a76 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	18d1      	adds	r1, r2, r3
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	f006 fe11 	bl	8009698 <memcpy>
      }

      flush();
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ff54 	bl	8002924 <_ZN13STM32Hardware5flushEv>
    }
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	f001 fd26 	bl	80044dc <HAL_GetTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
      data(0)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f880 	bl	8001bac <_ZN3ros3MsgC1Ev>
 8002aac:	4a05      	ldr	r2, [pc, #20]	@ (8002ac4 <_ZN8std_msgs5Int32C1Ev+0x28>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	605a      	str	r2, [r3, #4]
    {
    }
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	08009b2c 	.word	0x08009b2c

08002ac8 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b2ca      	uxtb	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	0a19      	lsrs	r1, r3, #8
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3301      	adds	r3, #1
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	b2ca      	uxtb	r2, r1
 8002af6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0c19      	lsrs	r1, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3302      	adds	r3, #2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	0e19      	lsrs	r1, r3, #24
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3303      	adds	r3, #3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	b2ca      	uxtb	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    }
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	440a      	add	r2, r1
 8002b46:	7812      	ldrb	r2, [r2, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3301      	adds	r3, #1
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	440b      	add	r3, r1
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3302      	adds	r3, #2
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	440b      	add	r3, r1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3303      	adds	r3, #3
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	440b      	add	r3, r1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	080099c0 	.word	0x080099c0

08002bb8 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	080099d0 	.word	0x080099d0

08002bd4 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
      data(0)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe ffe4 	bl	8001bac <_ZN3ros3MsgC1Ev>
 8002be4:	4a05      	ldr	r2, [pc, #20]	@ (8002bfc <_ZN8std_msgs4BoolC1Ev+0x28>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	711a      	strb	r2, [r3, #4]
    {
    }
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08009b14 	.word	0x08009b14

08002c00 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	791b      	ldrb	r3, [r3, #4]
 8002c12:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	7a3a      	ldrb	r2, [r7, #8]
 8002c1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c24:	68fb      	ldr	r3, [r7, #12]
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c44:	7a3a      	ldrb	r2, [r7, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	440b      	add	r3, r1
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002c54:	7a3a      	ldrb	r2, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c60:	68fb      	ldr	r3, [r7, #12]
    }
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	080099f4 	.word	0x080099f4

08002c8c <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	08009a04 	.word	0x08009a04

08002ca8 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:

  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
     gripperControl(msg.data);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	791b      	ldrb	r3, [r3, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe ff4f 	bl	8001b58 <_Z14gripperControlb>
    // else runIntake = false;
    return;
 8002cba:	bf00      	nop
  }
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
    // runElevator = msg.data;
    return;
 8002cca:	bf00      	nop
  }
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 8002cde:	bf00      	nop
  }
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e00c      	b.n	8002d14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	fa22 f103 	lsr.w	r1, r2, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b2ca      	uxtb	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d9ef      	bls.n	8002cfa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e010      	b.n	8002d60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	440a      	add	r2, r1
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d9eb      	bls.n	8002d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	08009b5c 	.word	0x08009b5c

08002d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffe8 	bl	8002d74 <_ZN3ros15NodeHandleBase_C1Ev>
 8002da4:	4a47      	ldr	r2, [pc, #284]	@ (8002ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fd6a 	bl	8002888 <_ZN13STM32HardwareC1Ev>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa63 	bl	8002294 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e00a      	b.n	8002dea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b18      	cmp	r3, #24
 8002dee:	d9f1      	bls.n	8002dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e009      	b.n	8002e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3301      	adds	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b18      	cmp	r3, #24
 8002e0e:	d9f2      	bls.n	8002df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e00a      	b.n	8002e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8002e20:	3304      	adds	r3, #4
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e32:	d3f0      	bcc.n	8002e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	e00a      	b.n	8002e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8002e44:	3304      	adds	r3, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e56:	d3f0      	bcc.n	8002e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6213      	str	r3, [r2, #32]
  }
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	08009b00 	.word	0x08009b00

08002ec8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	08009b44 	.word	0x08009b44

08002ee8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ffe5 	bl	8002ec8 <_ZN3ros11Subscriber_C1Ev>
 8002efe:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	330c      	adds	r3, #12
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe63 	bl	8002bd4 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
  };
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08009ae8 	.word	0x08009ae8

08002f30 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ffc1 	bl	8002ec8 <_ZN3ros11Subscriber_C1Ev>
 8002f46:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fda3 	bl	8002a9c <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	609a      	str	r2, [r3, #8]
  };
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	08009ad0 	.word	0x08009ad0

08002f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fd7d 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 8002f8a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d905      	bls.n	8002fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d906      	bls.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fd4a 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad2      	subs	r2, r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	bf8c      	ite	hi
 8003002:	2301      	movhi	r3, #1
 8003004:	2300      	movls	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800300c:	f06f 0301 	mvn.w	r3, #1
 8003010:	e226      	b.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      int data = hardware_.read();
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc56 	bl	80028c8 <_ZN13STM32Hardware4readEv>
 800301c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f2c0 81ff 	blt.w	8003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
        break;
      checksum_ += data;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4413      	add	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303a:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003044:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003048:	2b07      	cmp	r3, #7
 800304a:	d12d      	bne.n	80030a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
      {
        message_in[index_++] = data;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003052:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800305e:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	b2d1      	uxtb	r1, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800306e:	3304      	adds	r3, #4
 8003070:	460a      	mov	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800307a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800307e:	3b01      	subs	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003086:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003090:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1a0      	bne.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309e:	461a      	mov	r2, r3
 80030a0:	2308      	movs	r3, #8
 80030a2:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80030a6:	e798      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d130      	bne.n	8003118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
      {
        if (data == 0xff)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2bff      	cmp	r3, #255	@ 0xff
 80030ba:	d112      	bne.n	80030e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
        {
          mode_++;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80030c6:	3301      	adds	r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030ce:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3314      	adds	r3, #20
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030dc:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 80030e0:	e77b      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fccc 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bf8c      	ite	hi
 80030fa:	2301      	movhi	r3, #1
 80030fc:	2300      	movls	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	f43f af6a 	beq.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 8003112:	f06f 0301 	mvn.w	r3, #1
 8003116:	e1a3      	b.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800311e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003122:	2b01      	cmp	r3, #1
 8003124:	d121      	bne.n	800316a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
      {
        if (data == PROTOCOL_VER)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2bfe      	cmp	r3, #254	@ 0xfe
 800312a:	d10b      	bne.n	8003144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
        {
          mode_++;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003132:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800313e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003142:	e74a      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003158:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f af3c 	bne.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f980 	bl	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003168:	e737      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003170:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003174:	2b02      	cmp	r3, #2
 8003176:	d120      	bne.n	80031ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
      {
        bytes_ = data;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800317e:	461a      	mov	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800319a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800319e:	3301      	adds	r3, #1
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031a6:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80031b8:	e70f      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d118      	bne.n	80031fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
      {
        bytes_ += data << 8;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ce:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	4413      	add	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031de:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80031ec:	3301      	adds	r3, #1
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031f4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80031f8:	e6ef      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003200:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003204:	2b04      	cmp	r3, #4
 8003206:	d11f      	bne.n	8003248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
      {
        if ((checksum_ % 256) == 255)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800320e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003212:	425a      	negs	r2, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	bf58      	it	pl
 800321a:	4253      	negpl	r3, r2
 800321c:	2bff      	cmp	r3, #255	@ 0xff
 800321e:	d10b      	bne.n	8003238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003226:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800322a:	3301      	adds	r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003232:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003236:	e6d0      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8003246:	e6c8      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800324e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003252:	2b05      	cmp	r3, #5
 8003254:	d119      	bne.n	800328a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
      {
        topic_ = data;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800326a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800326e:	3301      	adds	r3, #1
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003276:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 8003288:	e6a7      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003290:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8003294:	2b06      	cmp	r3, #6
 8003296:	d123      	bne.n	80032e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
      {
        topic_ += data << 8;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	4413      	add	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032ae:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b8:	461a      	mov	r2, r3
 80032ba:	2307      	movs	r3, #7
 80032bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f47f ae85 	bne.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d6:	461a      	mov	r2, r3
 80032d8:	2308      	movs	r3, #8
 80032da:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80032de:	e67c      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	f47f ae75 	bne.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f6:	461a      	mov	r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003304:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003308:	425a      	negs	r2, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	2bff      	cmp	r3, #255	@ 0xff
 8003314:	f47f ae61 	bne.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
          {
            requestSyncTime();
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f89e 	bl	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8ba 	bl	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003338:	461a      	mov	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e085      	b.n	8003460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800335a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800335e:	2b0a      	cmp	r3, #10
 8003360:	d108      	bne.n	8003374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
          {
            syncTime(message_in);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003368:	3304      	adds	r3, #4
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f97b 	bl	8003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003372:	e632      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d112      	bne.n	80033a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
          {
            req_param_resp.deserialize(message_in);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003388:	3314      	adds	r3, #20
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 8003390:	3204      	adds	r2, #4
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f8b2 	bl	80024fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 80033a6:	e618      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ae:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80033b2:	2b0b      	cmp	r3, #11
 80033b4:	d106      	bne.n	80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
          {
            configured_ = false;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80033c2:	e60a      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ca:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80033ce:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f43f adfc 	beq.w	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80033ec:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80033f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003400:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8003404:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800340e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4790      	blx	r2
    while (true)
 8003422:	e5da      	b.n	8002fda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8003424:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800342c:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003430:	2b00      	cmp	r3, #0
 8003432:	d014      	beq.n	800345e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003446:	4293      	cmp	r3, r2
 8003448:	d909      	bls.n	800345e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
    {
      requestSyncTime();
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f80c 	bl	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    }

    return SPIN_OK;
 800345e:	2300      	movs	r3, #0
  }
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fba9 	bl	8001bcc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f107 020c 	add.w	r2, r7, #12
 8003484:	210a      	movs	r1, #10
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
    rt_time = hardware_.time();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff faf8 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349c:	615a      	str	r2, [r3, #20]
  }
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b08b      	sub	sp, #44	@ 0x2c
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80034ae:	f107 030c 	add.w	r3, r7, #12
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fc7a 	bl	8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80034bc:	e062      	b.n	8003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d056      	beq.n	800357e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3308      	adds	r3, #8
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4608      	mov	r0, r1
 800351e:	4798      	blx	r3
 8003520:	4603      	mov	r3, r0
 8003522:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4608      	mov	r0, r1
 800354c:	4798      	blx	r3
 800354e:	4603      	mov	r3, r0
 8003550:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003556:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681c      	ldr	r4, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff f96a 	bl	8002846 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003572:	4601      	mov	r1, r0
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	461a      	mov	r2, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	3301      	adds	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	2b18      	cmp	r3, #24
 8003588:	dd99      	ble.n	80034be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
 800358e:	e05e      	b.n	800364e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d053      	beq.n	8003648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c6:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4608      	mov	r0, r1
 80035e2:	4798      	blx	r3
 80035e4:	4603      	mov	r3, r0
 80035e6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4608      	mov	r0, r1
 8003608:	4798      	blx	r3
 800360a:	4603      	mov	r3, r0
 800360c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800360e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003612:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361e:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800362e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4608      	mov	r0, r1
 800363a:	4798      	blx	r3
 800363c:	4601      	mov	r1, r0
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	461a      	mov	r2, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	3301      	adds	r3, #1
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	2b18      	cmp	r3, #24
 8003652:	dd9d      	ble.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 8003660:	bf00      	nop
 8003662:	372c      	adds	r7, #44	@ 0x2c
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}

08003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003672:	f107 0308 	add.w	r3, r7, #8
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe faa8 	bl	8001bcc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f9ff 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003694:	f107 0308 	add.w	r3, r7, #8
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fb06 	bl	8001cac <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4915      	ldr	r1, [pc, #84]	@ (80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80036a6:	fba1 1303 	umull	r1, r3, r1, r3
 80036aa:	099b      	lsrs	r3, r3, #6
 80036ac:	4413      	add	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80036b0:	6939      	ldr	r1, [r7, #16]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80036b6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036c0:	fb00 f303 	mul.w	r3, r0, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	440b      	add	r3, r1
 80036ce:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8bf 	bl	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f9ce 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f0:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	10624dd3 	.word	0x10624dd3
 8003700:	000f4240 	.word	0x000f4240

08003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b63      	cmp	r3, #99	@ 0x63
 8003714:	dd0b      	ble.n	800372e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800371c:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800372a:	2300      	movs	r3, #0
 800372c:	e090      	b.n	8003850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800373a:	3304      	adds	r3, #4
 800373c:	3307      	adds	r3, #7
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4790      	blx	r2
 8003744:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800374c:	22ff      	movs	r2, #255	@ 0xff
 800374e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003758:	22fe      	movs	r2, #254	@ 0xfe
 800375a:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003768:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	b29b      	uxth	r3, r3
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800377c:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003786:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003790:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8003794:	4413      	add	r3, r2
 8003796:	b2db      	uxtb	r3, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037a2:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037b0:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	121b      	asrs	r3, r3, #8
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c4:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80037cc:	2305      	movs	r3, #5
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	e00d      	b.n	80037ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 80037dc:	3304      	adds	r3, #4
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3306      	adds	r3, #6
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	ddec      	ble.n	80037d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3307      	adds	r3, #7
 80037fc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	425a      	negs	r2, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	bf58      	it	pl
 8003808:	4253      	negpl	r3, r2
 800380a:	b2da      	uxtb	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	6179      	str	r1, [r7, #20]
 8003812:	43d2      	mvns	r2, r2
 8003814:	b2d1      	uxtb	r1, r2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800381e:	3304      	adds	r3, #4
 8003820:	460a      	mov	r2, r1
 8003822:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382a:	dc0b      	bgt.n	8003844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1d18      	adds	r0, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003836:	3304      	adds	r3, #4
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4619      	mov	r1, r3
 800383c:	f7ff f8d8 	bl	80029f0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	e005      	b.n	8003850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003844:	4904      	ldr	r1, [pc, #16]	@ (8003858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f84c 	bl	80038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	08009a28 	.word	0x08009a28

0800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff f90a 	bl	8002a84 <_ZN13STM32Hardware4timeEv>
 8003870:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4917      	ldr	r1, [pc, #92]	@ (80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800387a:	fba1 1303 	umull	r1, r3, r1, r3
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800388a:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003894:	fba3 0302 	umull	r0, r3, r3, r2
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800389e:	fb00 f303 	mul.w	r3, r0, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1aca      	subs	r2, r1, r3
 80038ac:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 80038ae:	4413      	add	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038b6:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038be:	3318      	adds	r3, #24
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038c6:	321c      	adds	r2, #28
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd f932 	bl	8000b34 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	10624dd3 	.word	0x10624dd3
 80038dc:	000f4240 	.word	0x000f4240
 80038e0:	3b9aca00 	.word	0x3b9aca00

080038e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	2103      	movs	r1, #3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f804 	bl	8003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	460b      	mov	r3, r1
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fc0e 	bl	8002134 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f107 0214 	add.w	r2, r7, #20
 800392a:	2107      	movs	r1, #7
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	4798      	blx	r3
  }
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_Z41__static_initialization_and_destruction_0ii>:
}
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d134      	bne.n	80039b2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800394e:	4293      	cmp	r3, r2
 8003950:	d12f      	bne.n	80039b2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8003952:	481a      	ldr	r0, [pc, #104]	@ (80039bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003954:	f7ff fa1e 	bl	8002d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperOpen;
 8003958:	4819      	ldr	r0, [pc, #100]	@ (80039c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800395a:	f7ff f93b 	bl	8002bd4 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperOpen);
 800395e:	2300      	movs	r3, #0
 8003960:	4a17      	ldr	r2, [pc, #92]	@ (80039c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003962:	4918      	ldr	r1, [pc, #96]	@ (80039c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003964:	4818      	ldr	r0, [pc, #96]	@ (80039c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003966:	f7fe ff57 	bl	8002818 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketOpen;
 800396a:	4818      	ldr	r0, [pc, #96]	@ (80039cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800396c:	f7ff f932 	bl	8002bd4 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketOpen);
 8003970:	2300      	movs	r3, #0
 8003972:	4a16      	ldr	r2, [pc, #88]	@ (80039cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003974:	4916      	ldr	r1, [pc, #88]	@ (80039d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003976:	4817      	ldr	r0, [pc, #92]	@ (80039d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003978:	f7fe ff4e 	bl	8002818 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int32 elevator;
 800397c:	4816      	ldr	r0, [pc, #88]	@ (80039d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800397e:	f7ff f88d 	bl	8002a9c <_ZN8std_msgs5Int32C1Ev>
ros::Publisher pub_elevator("/gripper", &elevator);
 8003982:	2300      	movs	r3, #0
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003986:	490f      	ldr	r1, [pc, #60]	@ (80039c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003988:	4814      	ldr	r0, [pc, #80]	@ (80039dc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800398a:	f7fe ff45 	bl	8002818 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 800398e:	2301      	movs	r3, #1
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003992:	4914      	ldr	r1, [pc, #80]	@ (80039e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003994:	4814      	ldr	r0, [pc, #80]	@ (80039e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003996:	f7ff faa7 	bl	8002ee8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevator("/cmd_elevator", ROS1::callback_Elevator);
 800399a:	2301      	movs	r3, #1
 800399c:	4a13      	ldr	r2, [pc, #76]	@ (80039ec <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800399e:	4914      	ldr	r1, [pc, #80]	@ (80039f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80039a0:	4814      	ldr	r0, [pc, #80]	@ (80039f4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80039a2:	f7ff fac5 	bl	8002f30 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 80039a6:	2301      	movs	r3, #1
 80039a8:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80039aa:	4914      	ldr	r1, [pc, #80]	@ (80039fc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80039ac:	4814      	ldr	r0, [pc, #80]	@ (8003a00 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80039ae:	f7ff fa9b 	bl	8002ee8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200004cc 	.word	0x200004cc
 80039c0:	20001a08 	.word	0x20001a08
 80039c4:	08009a64 	.word	0x08009a64
 80039c8:	20001a10 	.word	0x20001a10
 80039cc:	20001a24 	.word	0x20001a24
 80039d0:	08009a70 	.word	0x08009a70
 80039d4:	20001a2c 	.word	0x20001a2c
 80039d8:	20001a40 	.word	0x20001a40
 80039dc:	20001a48 	.word	0x20001a48
 80039e0:	08002ca9 	.word	0x08002ca9
 80039e4:	08009a78 	.word	0x08009a78
 80039e8:	20001a5c 	.word	0x20001a5c
 80039ec:	08002cc3 	.word	0x08002cc3
 80039f0:	08009a8c 	.word	0x08009a8c
 80039f4:	20001a78 	.word	0x20001a78
 80039f8:	08002cd7 	.word	0x08002cd7
 80039fc:	08009a9c 	.word	0x08009a9c
 8003a00:	20001a94 	.word	0x20001a94

08003a04 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f889 	bl	8002b2c <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	320c      	adds	r2, #12
 8003a22:	4610      	mov	r0, r2
 8003a24:	4798      	blx	r3
  }
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
  }
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	330c      	adds	r3, #12
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff f8a2 	bl	8002b9c <_ZN8std_msgs5Int327getTypeEv>
 8003a58:	4603      	mov	r3, r0
  }
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f8a2 	bl	8002bb8 <_ZN8std_msgs5Int326getMD5Ev>
 8003a74:	4603      	mov	r3, r0
  }
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f8cf 	bl	8002c32 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	320c      	adds	r2, #12
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4798      	blx	r3
  }
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
  }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	330c      	adds	r3, #12
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff f8cf 	bl	8002c70 <_ZN8std_msgs4Bool7getTypeEv>
 8003ad2:	4603      	mov	r3, r0
  }
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f8cf 	bl	8002c8c <_ZN8std_msgs4Bool6getMD5Ev>
 8003aee:	4603      	mov	r3, r0
  }
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    return configured_;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b06:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_GLOBAL__sub_I_nh>:
 8003b16:	b580      	push	{r7, lr}
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7ff ff0a 	bl	8003938 <_Z41__static_initialization_and_destruction_0ii>
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZN5Servo5setupEi>:
 */

#include "stm32g4xx_hal.h"
#include "servo.h"

void Servo::setup(int startAngle){
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f002 fd32 	bl	80065a4 <HAL_TIM_PWM_Start>
	write(startAngle);
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f804 	bl	8003b50 <_ZN5Servo5writeEi>
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	maxPulse = max;
	minPulse = min;
}

void Servo::write(int ang) {
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
	
	angle = ang;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
	int pulseRange = maxPulse - minPulse;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	60bb      	str	r3, [r7, #8]
	float pulse = minPulse + (float)pulseRange * (float)ang / (float)maxAng;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b8c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b9c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > maxPulse)pulse = maxPulse;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc0:	dd08      	ble.n	8003bd4 <_ZN5Servo5writeEi+0x84>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bce:	edc7 7a03 	vstr	s15, [r7, #12]
 8003bd2:	e014      	b.n	8003bfe <_ZN5Servo5writeEi+0xae>
	else if(pulse < minPulse)pulse = minPulse;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bec:	d507      	bpl.n	8003bfe <_ZN5Servo5writeEi+0xae>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfa:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <_ZN5Servo5writeEi+0xcc>
 8003c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	ee17 2a90 	vmov	r2, s15
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34



}
 8003c1a:	e045      	b.n	8003ca8 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d10a      	bne.n	8003c3a <_ZN5Servo5writeEi+0xea>
 8003c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	ee17 2a90 	vmov	r2, s15
 8003c36:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c38:	e036      	b.n	8003ca8 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d10a      	bne.n	8003c58 <_ZN5Servo5writeEi+0x108>
 8003c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	ee17 2a90 	vmov	r2, s15
 8003c54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003c56:	e027      	b.n	8003ca8 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d10a      	bne.n	8003c76 <_ZN5Servo5writeEi+0x126>
 8003c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	ee17 2a90 	vmov	r2, s15
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003c74:	e018      	b.n	8003ca8 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d10a      	bne.n	8003c94 <_ZN5Servo5writeEi+0x144>
 8003c7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	ee17 2a90 	vmov	r2, s15
 8003c90:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003c92:	e009      	b.n	8003ca8 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8003c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	ee17 2a90 	vmov	r2, s15
 8003ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_MspInit+0x54>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_MspInit+0x54>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_MspInit+0x54>)
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <HAL_MspInit+0x54>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <HAL_MspInit+0x54>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_MspInit+0x54>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2005      	movs	r0, #5
 8003cf0:	f000 fcdb 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003cf4:	2005      	movs	r0, #5
 8003cf6:	f000 fcf2 	bl	80046de <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003cfa:	f001 fbdd 	bl	80054b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b09c      	sub	sp, #112	@ 0x70
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	2244      	movs	r2, #68	@ 0x44
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 fc7f 	bl	8009630 <memset>
  if(hi2c->Instance==I2C1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2e      	ldr	r2, [pc, #184]	@ (8003df0 <HAL_I2C_MspInit+0xe4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d154      	bne.n	8003de6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d3c:	2340      	movs	r3, #64	@ 0x40
 8003d3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d40:	2300      	movs	r3, #0
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 f8f3 	bl	8005f34 <HAL_RCCEx_PeriphCLKConfig>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003d54:	f7fd fd0a 	bl	800176c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d58:	4b26      	ldr	r3, [pc, #152]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d64:	4b23      	ldr	r3, [pc, #140]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d70:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d74:	4a1f      	ldr	r2, [pc, #124]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d8e:	2312      	movs	r3, #18
 8003d90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003da2:	4619      	mov	r1, r3
 8003da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003da8:	f000 ffe6 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db2:	2312      	movs	r3, #18
 8003db4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	480b      	ldr	r0, [pc, #44]	@ (8003df8 <HAL_I2C_MspInit+0xec>)
 8003dca:	f000 ffd5 	bl	8004d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	4a08      	ldr	r2, [pc, #32]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003dd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dda:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_I2C_MspInit+0xe8>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003de6:	bf00      	nop
 8003de8:	3770      	adds	r7, #112	@ 0x70
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40005400 	.word	0x40005400
 8003df4:	40021000 	.word	0x40021000
 8003df8:	48000400 	.word	0x48000400

08003dfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <HAL_TIM_PWM_MspInit+0x80>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10c      	bne.n	8003e28 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e12:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e1a:	4b19      	ldr	r3, [pc, #100]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e26:	e022      	b.n	8003e6e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <HAL_TIM_PWM_MspInit+0x88>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10c      	bne.n	8003e4c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e32:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3e:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]
}
 8003e4a:	e010      	b.n	8003e6e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <HAL_TIM_PWM_MspInit+0x8c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10b      	bne.n	8003e6e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	4a09      	ldr	r2, [pc, #36]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_TIM_PWM_MspInit+0x84>)
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40013400 	.word	0x40013400

08003e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d114      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea2:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eaa:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	201c      	movs	r0, #28
 8003ebc:	f000 fbf5 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ec0:	201c      	movs	r0, #28
 8003ec2:	f000 fc0c 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003ec6:	e018      	b.n	8003efa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f08 <HAL_TIM_Base_MspInit+0x7c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d113      	bne.n	8003efa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003ed8:	f043 0310 	orr.w	r3, r3, #16
 8003edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_TIM_Base_MspInit+0x78>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	2036      	movs	r0, #54	@ 0x36
 8003ef0:	f000 fbdb 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ef4:	2036      	movs	r0, #54	@ 0x36
 8003ef6:	f000 fbf2 	bl	80046de <HAL_NVIC_EnableIRQ>
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40001000 	.word	0x40001000

08003f0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <HAL_TIM_Encoder_MspInit+0x80>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d129      	bne.n	8003f82 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f2e:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f32:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3a:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	4a11      	ldr	r2, [pc, #68]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f52:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <HAL_TIM_Encoder_MspInit+0x84>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003f5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003f70:	230a      	movs	r3, #10
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f7e:	f000 fefb 	bl	8004d78 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003f82:	bf00      	nop
 8003f84:	3728      	adds	r7, #40	@ 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40021000 	.word	0x40021000

08003f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	@ 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a33      	ldr	r2, [pc, #204]	@ (8004080 <HAL_TIM_MspPostInit+0xec>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb6:	4b33      	ldr	r3, [pc, #204]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	4a32      	ldr	r2, [pc, #200]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc2:	4b30      	ldr	r3, [pc, #192]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003fce:	230f      	movs	r3, #15
 8003fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4827      	ldr	r0, [pc, #156]	@ (8004088 <HAL_TIM_MspPostInit+0xf4>)
 8003fea:	f000 fec5 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003fee:	e043      	b.n	8004078 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a25      	ldr	r2, [pc, #148]	@ (800408c <HAL_TIM_MspPostInit+0xf8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d11d      	bne.n	8004036 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004006:	4b1f      	ldr	r3, [pc, #124]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004012:	2340      	movs	r3, #64	@ 0x40
 8004014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004022:	2302      	movs	r3, #2
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004026:	f107 0314 	add.w	r3, r7, #20
 800402a:	4619      	mov	r1, r3
 800402c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004030:	f000 fea2 	bl	8004d78 <HAL_GPIO_Init>
}
 8004034:	e020      	b.n	8004078 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a15      	ldr	r2, [pc, #84]	@ (8004090 <HAL_TIM_MspPostInit+0xfc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8004042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004044:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_TIM_MspPostInit+0xf0>)
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004058:	23c0      	movs	r3, #192	@ 0xc0
 800405a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004064:	2300      	movs	r3, #0
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004068:	2304      	movs	r3, #4
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	4619      	mov	r1, r3
 8004072:	4805      	ldr	r0, [pc, #20]	@ (8004088 <HAL_TIM_MspPostInit+0xf4>)
 8004074:	f000 fe80 	bl	8004d78 <HAL_GPIO_Init>
}
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40021000 	.word	0x40021000
 8004088:	48000800 	.word	0x48000800
 800408c:	40000400 	.word	0x40000400
 8004090:	40013400 	.word	0x40013400

08004094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b09a      	sub	sp, #104	@ 0x68
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040ac:	f107 0310 	add.w	r3, r7, #16
 80040b0:	2244      	movs	r2, #68	@ 0x44
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f005 fabb 	bl	8009630 <memset>
  if(huart->Instance==USART2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a4d      	ldr	r2, [pc, #308]	@ (80041f4 <HAL_UART_MspInit+0x160>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	f040 8093 	bne.w	80041ec <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040c6:	2302      	movs	r3, #2
 80040c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ce:	f107 0310 	add.w	r3, r7, #16
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 ff2e 	bl	8005f34 <HAL_RCCEx_PeriphCLKConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80040de:	f7fd fb45 	bl	800176c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040e2:	4b45      	ldr	r3, [pc, #276]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	4a44      	ldr	r2, [pc, #272]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ee:	4b42      	ldr	r3, [pc, #264]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	4b3f      	ldr	r3, [pc, #252]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	4a3e      	ldr	r2, [pc, #248]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004106:	4b3c      	ldr	r3, [pc, #240]	@ (80041f8 <HAL_UART_MspInit+0x164>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004112:	2318      	movs	r3, #24
 8004114:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	2302      	movs	r3, #2
 8004118:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004122:	2307      	movs	r3, #7
 8004124:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004126:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800412a:	4619      	mov	r1, r3
 800412c:	4833      	ldr	r0, [pc, #204]	@ (80041fc <HAL_UART_MspInit+0x168>)
 800412e:	f000 fe23 	bl	8004d78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004134:	4a33      	ldr	r2, [pc, #204]	@ (8004204 <HAL_UART_MspInit+0x170>)
 8004136:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004138:	4b31      	ldr	r3, [pc, #196]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 800413a:	221b      	movs	r2, #27
 800413c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800413e:	4b30      	ldr	r3, [pc, #192]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004140:	2210      	movs	r2, #16
 8004142:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004144:	4b2e      	ldr	r3, [pc, #184]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004150:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004152:	2200      	movs	r2, #0
 8004154:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004156:	4b2a      	ldr	r3, [pc, #168]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800415c:	4b28      	ldr	r3, [pc, #160]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 800415e:	2200      	movs	r2, #0
 8004160:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004162:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004168:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800416a:	4825      	ldr	r0, [pc, #148]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 800416c:	f000 fad2 	bl	8004714 <HAL_DMA_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004176:	f7fd faf9 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 800417e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004180:	4a1f      	ldr	r2, [pc, #124]	@ (8004200 <HAL_UART_MspInit+0x16c>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel4;
 8004186:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <HAL_UART_MspInit+0x174>)
 8004188:	4a20      	ldr	r2, [pc, #128]	@ (800420c <HAL_UART_MspInit+0x178>)
 800418a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800418c:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <HAL_UART_MspInit+0x174>)
 800418e:	221a      	movs	r2, #26
 8004190:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <HAL_UART_MspInit+0x174>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_UART_MspInit+0x174>)
 800419a:	2200      	movs	r2, #0
 800419c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800419e:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041a0:	2280      	movs	r2, #128	@ 0x80
 80041a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041a4:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80041b0:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041be:	4812      	ldr	r0, [pc, #72]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041c0:	f000 faa8 	bl	8004714 <HAL_DMA_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80041ca:	f7fd facf 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <HAL_UART_MspInit+0x174>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	2026      	movs	r0, #38	@ 0x26
 80041e2:	f000 fa62 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041e6:	2026      	movs	r0, #38	@ 0x26
 80041e8:	f000 fa79 	bl	80046de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80041ec:	bf00      	nop
 80041ee:	3768      	adds	r7, #104	@ 0x68
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40004400 	.word	0x40004400
 80041f8:	40021000 	.word	0x40021000
 80041fc:	48000400 	.word	0x48000400
 8004200:	2000032c 	.word	0x2000032c
 8004204:	40020030 	.word	0x40020030
 8004208:	2000038c 	.word	0x2000038c
 800420c:	40020044 	.word	0x40020044

08004210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <NMI_Handler+0x4>

08004218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <HardFault_Handler+0x4>

08004220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <MemManage_Handler+0x4>

08004228 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <BusFault_Handler+0x4>

08004230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <UsageFault_Handler+0x4>

08004238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004266:	f000 f927 	bl	80044b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}

0800426e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004280:	4802      	ldr	r0, [pc, #8]	@ (800428c <DMA1_Channel3_IRQHandler+0x10>)
 8004282:	f000 fc2a 	bl	8004ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000032c 	.word	0x2000032c

08004290 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004294:	4802      	ldr	r0, [pc, #8]	@ (80042a0 <DMA1_Channel4_IRQHandler+0x10>)
 8004296:	f000 fc20 	bl	8004ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000038c 	.word	0x2000038c

080042a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80042a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80042ac:	f000 ff16 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80042b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80042b4:	f000 ff12 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042c0:	4802      	ldr	r0, [pc, #8]	@ (80042cc <TIM2_IRQHandler+0x10>)
 80042c2:	f002 fcef 	bl	8006ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000011c 	.word	0x2000011c

080042d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042d4:	4802      	ldr	r0, [pc, #8]	@ (80042e0 <USART2_IRQHandler+0x10>)
 80042d6:	f003 fee3 	bl	80080a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000298 	.word	0x20000298

080042e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80042e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80042ec:	f000 fef6 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80042f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042f4:	f000 fef2 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80042f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80042fc:	f000 feee 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004300:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004304:	f000 feea 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004308:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800430c:	f000 fee6 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004310:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004314:	f000 fee2 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}

0800431c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004320:	4802      	ldr	r0, [pc, #8]	@ (800432c <TIM6_DAC_IRQHandler+0x10>)
 8004322:	f002 fcbf 	bl	8006ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000200 	.word	0x20000200

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	@ (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f005 f96e 	bl	8009640 <__errno>
 8004364:	4603      	mov	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	4a05      	ldr	r2, [pc, #20]	@ (8004394 <_sbrk+0x64>)
 8004380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20008000 	.word	0x20008000
 8004390:	00000400 	.word	0x00000400
 8004394:	20001ab0 	.word	0x20001ab0
 8004398:	20001c00 	.word	0x20001c00

0800439c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043c0:	480d      	ldr	r0, [pc, #52]	@ (80043f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80043c4:	f7ff ffea 	bl	800439c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043c8:	480c      	ldr	r0, [pc, #48]	@ (80043fc <LoopForever+0x6>)
  ldr r1, =_edata
 80043ca:	490d      	ldr	r1, [pc, #52]	@ (8004400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <LoopForever+0xe>)
  movs r3, #0
 80043ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80043d0:	e002      	b.n	80043d8 <LoopCopyDataInit>

080043d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043d6:	3304      	adds	r3, #4

080043d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043dc:	d3f9      	bcc.n	80043d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043de:	4a0a      	ldr	r2, [pc, #40]	@ (8004408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e0:	4c0a      	ldr	r4, [pc, #40]	@ (800440c <LoopForever+0x16>)
  movs r3, #0
 80043e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e4:	e001      	b.n	80043ea <LoopFillZerobss>

080043e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e8:	3204      	adds	r2, #4

080043ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ec:	d3fb      	bcc.n	80043e6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80043ee:	f005 f92d 	bl	800964c <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80043f2:	f7fc fd6e 	bl	8000ed2 <main>

080043f6 <LoopForever>:

LoopForever:
    b LoopForever
 80043f6:	e7fe      	b.n	80043f6 <LoopForever>
  ldr   r0, =_estack
 80043f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80043fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004400:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004404:	08009c38 	.word	0x08009c38
  ldr r2, =_sbss
 8004408:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800440c:	20001c00 	.word	0x20001c00

08004410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004410:	e7fe      	b.n	8004410 <ADC1_2_IRQHandler>

08004412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800441c:	2003      	movs	r0, #3
 800441e:	f000 f939 	bl	8004694 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004422:	200f      	movs	r0, #15
 8004424:	f000 f80e 	bl	8004444 <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	71fb      	strb	r3, [r7, #7]
 8004432:	e001      	b.n	8004438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004434:	f7ff fc3e 	bl	8003cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004438:	79fb      	ldrb	r3, [r7, #7]

}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004450:	4b16      	ldr	r3, [pc, #88]	@ (80044ac <HAL_InitTick+0x68>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d022      	beq.n	800449e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004458:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_InitTick+0x6c>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <HAL_InitTick+0x68>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004464:	fbb1 f3f3 	udiv	r3, r1, r3
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f944 	bl	80046fa <HAL_SYSTICK_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10f      	bne.n	8004498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d809      	bhi.n	8004492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800447e:	2200      	movs	r2, #0
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	f04f 30ff 	mov.w	r0, #4294967295
 8004486:	f000 f910 	bl	80046aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800448a:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <HAL_InitTick+0x70>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e007      	b.n	80044a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	e004      	b.n	80044a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e001      	b.n	80044a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	20000004 	.word	0x20000004
 80044b4:	20000008 	.word	0x20000008

080044b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_IncTick+0x1c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_IncTick+0x20>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	4a03      	ldr	r2, [pc, #12]	@ (80044d4 <HAL_IncTick+0x1c>)
 80044c8:	6013      	str	r3, [r2, #0]
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20001ab4 	.word	0x20001ab4
 80044d8:	2000000c 	.word	0x2000000c

080044dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return uwTick;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <HAL_GetTick+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20001ab4 	.word	0x20001ab4

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	@ (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	@ (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	@ 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004660:	d301      	bcc.n	8004666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004662:	2301      	movs	r3, #1
 8004664:	e00f      	b.n	8004686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004666:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <SysTick_Config+0x40>)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466e:	210f      	movs	r1, #15
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	f7ff ff8e 	bl	8004594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <SysTick_Config+0x40>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467e:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <SysTick_Config+0x40>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010

08004694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff29 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff40 	bl	800453c <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff90 	bl	80045e8 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5f 	bl	8004594 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff33 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa4 	bl	8004650 <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e08d      	b.n	8004842 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	4b47      	ldr	r3, [pc, #284]	@ (800484c <HAL_DMA_Init+0x138>)
 800472e:	429a      	cmp	r2, r3
 8004730:	d80f      	bhi.n	8004752 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	4b45      	ldr	r3, [pc, #276]	@ (8004850 <HAL_DMA_Init+0x13c>)
 800473a:	4413      	add	r3, r2
 800473c:	4a45      	ldr	r2, [pc, #276]	@ (8004854 <HAL_DMA_Init+0x140>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	009a      	lsls	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a42      	ldr	r2, [pc, #264]	@ (8004858 <HAL_DMA_Init+0x144>)
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004750:	e00e      	b.n	8004770 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b40      	ldr	r3, [pc, #256]	@ (800485c <HAL_DMA_Init+0x148>)
 800475a:	4413      	add	r3, r2
 800475c:	4a3d      	ldr	r2, [pc, #244]	@ (8004854 <HAL_DMA_Init+0x140>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	009a      	lsls	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a3c      	ldr	r2, [pc, #240]	@ (8004860 <HAL_DMA_Init+0x14c>)
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa76 	bl	8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047d0:	d102      	bne.n	80047d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d010      	beq.n	8004818 <HAL_DMA_Init+0x104>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d80c      	bhi.n	8004818 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa96 	bl	8004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	e008      	b.n	800482a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40020407 	.word	0x40020407
 8004850:	bffdfff8 	.word	0xbffdfff8
 8004854:	cccccccd 	.word	0xcccccccd
 8004858:	40020000 	.word	0x40020000
 800485c:	bffdfbf8 	.word	0xbffdfbf8
 8004860:	40020400 	.word	0x40020400

08004864 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_DMA_Start_IT+0x20>
 8004880:	2302      	movs	r3, #2
 8004882:	e066      	b.n	8004952 <HAL_DMA_Start_IT+0xee>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d155      	bne.n	8004944 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f9bb 	bl	8004c38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 020e 	orr.w	r2, r2, #14
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e00f      	b.n	80048fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0204 	bic.w	r2, r2, #4
 80048ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 020a 	orr.w	r2, r2, #10
 80048fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004918:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e005      	b.n	8004950 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800494c:	2302      	movs	r3, #2
 800494e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d005      	beq.n	800497e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2204      	movs	r2, #4
 8004976:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e037      	b.n	80049ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 020e 	bic.w	r2, r2, #14
 800498c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800499c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f003 021f 	and.w	r2, r3, #31
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	2101      	movs	r1, #1
 80049bc:	fa01 f202 	lsl.w	r2, r1, r2
 80049c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d00d      	beq.n	8004a40 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2204      	movs	r2, #4
 8004a28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e047      	b.n	8004ad0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 020e 	bic.w	r2, r2, #14
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a74:	f003 021f 	and.w	r2, r3, #31
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004aae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
    }
  }
  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2204      	movs	r2, #4
 8004afc:	409a      	lsls	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d026      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x7a>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0204 	bic.w	r2, r2, #4
 8004b2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f003 021f 	and.w	r2, r3, #31
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d071      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b52:	e06c      	b.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02e      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d029      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 020a 	bic.w	r2, r2, #10
 8004b8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8004baa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d038      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bc4:	e033      	b.n	8004c2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2208      	movs	r2, #8
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02a      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d025      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 020e 	bic.w	r2, r2, #14
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf8:	f003 021f 	and.w	r2, r3, #31
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
}
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f003 021f 	and.w	r2, r3, #31
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f202 	lsl.w	r2, r1, r2
 8004c74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d108      	bne.n	8004c98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c96:	e007      	b.n	8004ca8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d802      	bhi.n	8004cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004cc8:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e001      	b.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004cd0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3b08      	subs	r3, #8
 8004cde:	4a12      	ldr	r2, [pc, #72]	@ (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	009a      	lsls	r2, r3, #2
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40020407 	.word	0x40020407
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020820 	.word	0x40020820
 8004d28:	cccccccd 	.word	0xcccccccd
 8004d2c:	40020880 	.word	0x40020880

08004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d52:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	1000823f 	.word	0x1000823f
 8004d74:	40020940 	.word	0x40020940

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d86:	e15a      	b.n	800503e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 814c 	beq.w	8005038 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d005      	beq.n	8004db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d130      	bne.n	8004e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dee:	2201      	movs	r2, #1
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43db      	mvns	r3, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0201 	and.w	r2, r3, #1
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d017      	beq.n	8004e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d123      	bne.n	8004eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	08da      	lsrs	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3208      	adds	r2, #8
 8004e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	08da      	lsrs	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3208      	adds	r2, #8
 8004ea4:	6939      	ldr	r1, [r7, #16]
 8004ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a6 	beq.w	8005038 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eec:	4b5b      	ldr	r3, [pc, #364]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ef8:	4b58      	ldr	r3, [pc, #352]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f04:	4a56      	ldr	r2, [pc, #344]	@ (8005060 <HAL_GPIO_Init+0x2e8>)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f2e:	d01f      	beq.n	8004f70 <HAL_GPIO_Init+0x1f8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a4c      	ldr	r2, [pc, #304]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d019      	beq.n	8004f6c <HAL_GPIO_Init+0x1f4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8005068 <HAL_GPIO_Init+0x2f0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a4a      	ldr	r2, [pc, #296]	@ (800506c <HAL_GPIO_Init+0x2f4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00d      	beq.n	8004f64 <HAL_GPIO_Init+0x1ec>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a49      	ldr	r2, [pc, #292]	@ (8005070 <HAL_GPIO_Init+0x2f8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d007      	beq.n	8004f60 <HAL_GPIO_Init+0x1e8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a48      	ldr	r2, [pc, #288]	@ (8005074 <HAL_GPIO_Init+0x2fc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_GPIO_Init+0x1e4>
 8004f58:	2305      	movs	r3, #5
 8004f5a:	e00a      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f5c:	2306      	movs	r3, #6
 8004f5e:	e008      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f60:	2304      	movs	r3, #4
 8004f62:	e006      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f64:	2303      	movs	r3, #3
 8004f66:	e004      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e002      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_GPIO_Init+0x1fa>
 8004f70:	2300      	movs	r3, #0
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	f002 0203 	and.w	r2, r2, #3
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	4093      	lsls	r3, r2
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f82:	4937      	ldr	r1, [pc, #220]	@ (8005060 <HAL_GPIO_Init+0x2e8>)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fb4:	4a30      	ldr	r2, [pc, #192]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fba:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fde:	4a26      	ldr	r2, [pc, #152]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fe4:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005008:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <HAL_GPIO_Init+0x300>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	43db      	mvns	r3, r3
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005032:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <HAL_GPIO_Init+0x300>)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3301      	adds	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f ae9d 	bne.w	8004d88 <HAL_GPIO_Init+0x10>
  }
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40021000 	.word	0x40021000
 8005060:	40010000 	.word	0x40010000
 8005064:	48000400 	.word	0x48000400
 8005068:	48000800 	.word	0x48000800
 800506c:	48000c00 	.word	0x48000c00
 8005070:	48001000 	.word	0x48001000
 8005074:	48001400 	.word	0x48001400
 8005078:	40010400 	.word	0x40010400

0800507c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e001      	b.n	800509e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
 80050b8:	4613      	mov	r3, r2
 80050ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050bc:	787b      	ldrb	r3, [r7, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050c8:	e002      	b.n	80050d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050e6:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f2:	4a05      	ldr	r2, [pc, #20]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fc60 	bl	80019c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40010400 	.word	0x40010400

0800510c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e08d      	b.n	800523a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fe fdea 	bl	8003d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800515c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800516c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	e006      	b.n	8005194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d108      	bne.n	80051ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	e007      	b.n	80051be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	d138      	bne.n	80052ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005262:	2302      	movs	r3, #2
 8005264:	e032      	b.n	80052cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2224      	movs	r2, #36	@ 0x24
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005294:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d139      	bne.n	8005362 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e033      	b.n	8005364 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	@ 0x24
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800532a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d141      	bne.n	8005402 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800537e:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d131      	bne.n	80053f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800538c:	4b47      	ldr	r3, [pc, #284]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005392:	4a46      	ldr	r2, [pc, #280]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800539c:	4b43      	ldr	r3, [pc, #268]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053a4:	4a41      	ldr	r2, [pc, #260]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ac:	4b40      	ldr	r3, [pc, #256]	@ (80054b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2232      	movs	r2, #50	@ 0x32
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a3f      	ldr	r2, [pc, #252]	@ (80054b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	0c9b      	lsrs	r3, r3, #18
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c2:	e002      	b.n	80053ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ca:	4b38      	ldr	r3, [pc, #224]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d6:	d102      	bne.n	80053de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f2      	bne.n	80053c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053de:	4b33      	ldr	r3, [pc, #204]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ea:	d158      	bne.n	800549e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e057      	b.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f0:	4b2e      	ldr	r3, [pc, #184]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f6:	4a2d      	ldr	r2, [pc, #180]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005400:	e04d      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005408:	d141      	bne.n	800548e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800540a:	4b28      	ldr	r3, [pc, #160]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005416:	d131      	bne.n	800547c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005418:	4b24      	ldr	r3, [pc, #144]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800541e:	4a23      	ldr	r2, [pc, #140]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005428:	4b20      	ldr	r3, [pc, #128]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005430:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005438:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2232      	movs	r2, #50	@ 0x32
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	4a1c      	ldr	r2, [pc, #112]	@ (80054b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	0c9b      	lsrs	r3, r3, #18
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800544e:	e002      	b.n	8005456 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005462:	d102      	bne.n	800546a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f2      	bne.n	8005450 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800546a:	4b10      	ldr	r3, [pc, #64]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d112      	bne.n	800549e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e011      	b.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005482:	4a0a      	ldr	r2, [pc, #40]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800548c:	e007      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800548e:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005496:	4a05      	ldr	r2, [pc, #20]	@ (80054ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005498:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800549c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40007000 	.word	0x40007000
 80054b0:	20000004 	.word	0x20000004
 80054b4:	431bde83 	.word	0x431bde83

080054b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a04      	ldr	r2, [pc, #16]	@ (80054d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054c6:	6093      	str	r3, [r2, #8]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40007000 	.word	0x40007000

080054d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e2fe      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d075      	beq.n	80055e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f6:	4b97      	ldr	r3, [pc, #604]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005500:	4b94      	ldr	r3, [pc, #592]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d102      	bne.n	8005516 <HAL_RCC_OscConfig+0x3e>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d002      	beq.n	800551c <HAL_RCC_OscConfig+0x44>
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d10b      	bne.n	8005534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	4b8d      	ldr	r3, [pc, #564]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05b      	beq.n	80055e0 <HAL_RCC_OscConfig+0x108>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d157      	bne.n	80055e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e2d9      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553c:	d106      	bne.n	800554c <HAL_RCC_OscConfig+0x74>
 800553e:	4b85      	ldr	r3, [pc, #532]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a84      	ldr	r2, [pc, #528]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01d      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x98>
 8005556:	4b7f      	ldr	r3, [pc, #508]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a7e      	ldr	r2, [pc, #504]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b7c      	ldr	r3, [pc, #496]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a7b      	ldr	r2, [pc, #492]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 8005570:	4b78      	ldr	r3, [pc, #480]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a77      	ldr	r2, [pc, #476]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b75      	ldr	r3, [pc, #468]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a74      	ldr	r2, [pc, #464]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fe ffa4 	bl	80044dc <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7fe ffa0 	bl	80044dc <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	@ 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e29e      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0xc0>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fe ff90 	bl	80044dc <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c0:	f7fe ff8c 	bl	80044dc <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	@ 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e28a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d2:	4b60      	ldr	r3, [pc, #384]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0xe8>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d075      	beq.n	80056da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ee:	4b59      	ldr	r3, [pc, #356]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f8:	4b56      	ldr	r3, [pc, #344]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	d102      	bne.n	800560e <HAL_RCC_OscConfig+0x136>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d002      	beq.n	8005614 <HAL_RCC_OscConfig+0x13c>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d11f      	bne.n	8005654 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005614:	4b4f      	ldr	r3, [pc, #316]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_OscConfig+0x154>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e25d      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562c:	4b49      	ldr	r3, [pc, #292]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	4946      	ldr	r1, [pc, #280]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005640:	4b45      	ldr	r3, [pc, #276]	@ (8005758 <HAL_RCC_OscConfig+0x280>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe fefd 	bl	8004444 <HAL_InitTick>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d043      	beq.n	80056d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e249      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d023      	beq.n	80056a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800565c:	4b3d      	ldr	r3, [pc, #244]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a3c      	ldr	r2, [pc, #240]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fe ff38 	bl	80044dc <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005670:	f7fe ff34 	bl	80044dc <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e232      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005682:	4b34      	ldr	r3, [pc, #208]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568e:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	492d      	ldr	r1, [pc, #180]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
 80056a2:	e01a      	b.n	80056da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fe ff14 	bl	80044dc <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b8:	f7fe ff10 	bl	80044dc <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e20e      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ca:	4b22      	ldr	r3, [pc, #136]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x1e0>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d041      	beq.n	800576a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01c      	beq.n	8005728 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ee:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f4:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fe feed 	bl	80044dc <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005706:	f7fe fee9 	bl	80044dc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e1e7      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005718:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800571a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ef      	beq.n	8005706 <HAL_RCC_OscConfig+0x22e>
 8005726:	e020      	b.n	800576a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800572e:	4a09      	ldr	r2, [pc, #36]	@ (8005754 <HAL_RCC_OscConfig+0x27c>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fe fed0 	bl	80044dc <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800573e:	e00d      	b.n	800575c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005740:	f7fe fecc 	bl	80044dc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d906      	bls.n	800575c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1ca      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800575c:	4b8c      	ldr	r3, [pc, #560]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ea      	bne.n	8005740 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80a6 	beq.w	80058c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005778:	2300      	movs	r3, #0
 800577a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800577c:	4b84      	ldr	r3, [pc, #528]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_OscConfig+0x2b4>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x2b6>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005792:	4b7f      	ldr	r3, [pc, #508]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005796:	4a7e      	ldr	r2, [pc, #504]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800579c:	6593      	str	r3, [r2, #88]	@ 0x58
 800579e:	4b7c      	ldr	r3, [pc, #496]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057aa:	2301      	movs	r3, #1
 80057ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ae:	4b79      	ldr	r3, [pc, #484]	@ (8005994 <HAL_RCC_OscConfig+0x4bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d118      	bne.n	80057ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ba:	4b76      	ldr	r3, [pc, #472]	@ (8005994 <HAL_RCC_OscConfig+0x4bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a75      	ldr	r2, [pc, #468]	@ (8005994 <HAL_RCC_OscConfig+0x4bc>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fe fe89 	bl	80044dc <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fe fe85 	bl	80044dc <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e183      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005994 <HAL_RCC_OscConfig+0x4bc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d108      	bne.n	8005806 <HAL_RCC_OscConfig+0x32e>
 80057f4:	4b66      	ldr	r3, [pc, #408]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	4a65      	ldr	r2, [pc, #404]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005804:	e024      	b.n	8005850 <HAL_RCC_OscConfig+0x378>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b05      	cmp	r3, #5
 800580c:	d110      	bne.n	8005830 <HAL_RCC_OscConfig+0x358>
 800580e:	4b60      	ldr	r3, [pc, #384]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	4a5e      	ldr	r2, [pc, #376]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005816:	f043 0304 	orr.w	r3, r3, #4
 800581a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800581e:	4b5c      	ldr	r3, [pc, #368]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005824:	4a5a      	ldr	r2, [pc, #360]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800582e:	e00f      	b.n	8005850 <HAL_RCC_OscConfig+0x378>
 8005830:	4b57      	ldr	r3, [pc, #348]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	4a56      	ldr	r2, [pc, #344]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005840:	4b53      	ldr	r3, [pc, #332]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005846:	4a52      	ldr	r2, [pc, #328]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d016      	beq.n	8005886 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fe fe40 	bl	80044dc <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585e:	e00a      	b.n	8005876 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fe fe3c 	bl	80044dc <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e138      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005876:	4b46      	ldr	r3, [pc, #280]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ed      	beq.n	8005860 <HAL_RCC_OscConfig+0x388>
 8005884:	e015      	b.n	80058b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fe fe29 	bl	80044dc <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fe fe25 	bl	80044dc <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e121      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ed      	bne.n	800588e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4b35      	ldr	r3, [pc, #212]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a34      	ldr	r2, [pc, #208]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80058be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d03c      	beq.n	800594a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01c      	beq.n	8005912 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058de:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fe fdf8 	bl	80044dc <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058f0:	f7fe fdf4 	bl	80044dc <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0f2      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005902:	4b23      	ldr	r3, [pc, #140]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ef      	beq.n	80058f0 <HAL_RCC_OscConfig+0x418>
 8005910:	e01b      	b.n	800594a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005912:	4b1f      	ldr	r3, [pc, #124]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005914:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005918:	4a1d      	ldr	r2, [pc, #116]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fe fddb 	bl	80044dc <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592a:	f7fe fdd7 	bl	80044dc <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e0d5      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 800593e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ef      	bne.n	800592a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80c9 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005954:	4b0e      	ldr	r3, [pc, #56]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b0c      	cmp	r3, #12
 800595e:	f000 8083 	beq.w	8005a68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d15e      	bne.n	8005a28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596a:	4b09      	ldr	r3, [pc, #36]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a08      	ldr	r2, [pc, #32]	@ (8005990 <HAL_RCC_OscConfig+0x4b8>)
 8005970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fe fdb1 	bl	80044dc <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597c:	e00c      	b.n	8005998 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800597e:	f7fe fdad 	bl	80044dc <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d905      	bls.n	8005998 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e0ab      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
 8005990:	40021000 	.word	0x40021000
 8005994:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005998:	4b55      	ldr	r3, [pc, #340]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ec      	bne.n	800597e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a4:	4b52      	ldr	r3, [pc, #328]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	4b52      	ldr	r3, [pc, #328]	@ (8005af4 <HAL_RCC_OscConfig+0x61c>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6a11      	ldr	r1, [r2, #32]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0112      	lsls	r2, r2, #4
 80059b8:	4311      	orrs	r1, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80059be:	0212      	lsls	r2, r2, #8
 80059c0:	4311      	orrs	r1, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059c6:	0852      	lsrs	r2, r2, #1
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0552      	lsls	r2, r2, #21
 80059cc:	4311      	orrs	r1, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059d2:	0852      	lsrs	r2, r2, #1
 80059d4:	3a01      	subs	r2, #1
 80059d6:	0652      	lsls	r2, r2, #25
 80059d8:	4311      	orrs	r1, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059de:	06d2      	lsls	r2, r2, #27
 80059e0:	430a      	orrs	r2, r1
 80059e2:	4943      	ldr	r1, [pc, #268]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e8:	4b41      	ldr	r3, [pc, #260]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a40      	ldr	r2, [pc, #256]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f4:	4b3e      	ldr	r3, [pc, #248]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a3d      	ldr	r2, [pc, #244]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 80059fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe fd6c 	bl	80044dc <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fe fd68 	bl	80044dc <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e066      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1a:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x530>
 8005a26:	e05e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a28:	4b31      	ldr	r3, [pc, #196]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a30      	ldr	r2, [pc, #192]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fe fd52 	bl	80044dc <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fe fd4e 	bl	80044dc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e04c      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4e:	4b28      	ldr	r3, [pc, #160]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a5a:	4b25      	ldr	r3, [pc, #148]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	4924      	ldr	r1, [pc, #144]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a60:	4b25      	ldr	r3, [pc, #148]	@ (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	60cb      	str	r3, [r1, #12]
 8005a66:	e03e      	b.n	8005ae6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e039      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a74:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <HAL_RCC_OscConfig+0x618>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 0203 	and.w	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d12c      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	3b01      	subs	r3, #1
 8005a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d123      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d11b      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d113      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d109      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	3b01      	subs	r3, #1
 8005adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	019f800c 	.word	0x019f800c
 8005af8:	feeefffc 	.word	0xfeeefffc

08005afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e11e      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b14:	4b91      	ldr	r3, [pc, #580]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d910      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b8e      	ldr	r3, [pc, #568]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 020f 	bic.w	r2, r3, #15
 8005b2a:	498c      	ldr	r1, [pc, #560]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	4b8a      	ldr	r3, [pc, #552]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e106      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d073      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d129      	bne.n	8005bac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b58:	4b81      	ldr	r3, [pc, #516]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0f4      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b68:	f000 f99e 	bl	8005ea8 <RCC_GetSysClockFreqFromPLLSource>
 8005b6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4a7c      	ldr	r2, [pc, #496]	@ (8005d64 <HAL_RCC_ClockConfig+0x268>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d93f      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b76:	4b7a      	ldr	r3, [pc, #488]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d033      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d12f      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b96:	4b72      	ldr	r3, [pc, #456]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b9e:	4a70      	ldr	r2, [pc, #448]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e024      	b.n	8005bf6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0c6      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc4:	4b66      	ldr	r3, [pc, #408]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0be      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bd4:	f000 f8ce 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4a61      	ldr	r2, [pc, #388]	@ (8005d64 <HAL_RCC_ClockConfig+0x268>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d909      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005be2:	4b5f      	ldr	r3, [pc, #380]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bea:	4a5d      	ldr	r2, [pc, #372]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bf2:	2380      	movs	r3, #128	@ 0x80
 8005bf4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f023 0203 	bic.w	r2, r3, #3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4957      	ldr	r1, [pc, #348]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c08:	f7fe fc68 	bl	80044dc <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c10:	f7fe fc64 	bl	80044dc <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e095      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	4b4e      	ldr	r3, [pc, #312]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 020c 	and.w	r2, r3, #12
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1eb      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d023      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c50:	4b43      	ldr	r3, [pc, #268]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a42      	ldr	r2, [pc, #264]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c68:	4b3d      	ldr	r3, [pc, #244]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c70:	4a3b      	ldr	r2, [pc, #236]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4936      	ldr	r1, [pc, #216]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b80      	cmp	r3, #128	@ 0x80
 8005c90:	d105      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c92:	4b33      	ldr	r3, [pc, #204]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	4a32      	ldr	r2, [pc, #200]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005c98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d21d      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cac:	4b2b      	ldr	r3, [pc, #172]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 020f 	bic.w	r2, r3, #15
 8005cb4:	4929      	ldr	r1, [pc, #164]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cbc:	f7fe fc0e 	bl	80044dc <HAL_GetTick>
 8005cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	e00a      	b.n	8005cda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc4:	f7fe fc0a 	bl	80044dc <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e03b      	b.n	8005d52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b20      	ldr	r3, [pc, #128]	@ (8005d5c <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1ed      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4917      	ldr	r1, [pc, #92]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d12:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	490f      	ldr	r1, [pc, #60]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d26:	f000 f825 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <HAL_RCC_ClockConfig+0x264>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490c      	ldr	r1, [pc, #48]	@ (8005d68 <HAL_RCC_ClockConfig+0x26c>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d42:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <HAL_RCC_ClockConfig+0x270>)
 8005d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d46:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <HAL_RCC_ClockConfig+0x274>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fb7a 	bl	8004444 <HAL_InitTick>
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40022000 	.word	0x40022000
 8005d60:	40021000 	.word	0x40021000
 8005d64:	04c4b400 	.word	0x04c4b400
 8005d68:	08009be0 	.word	0x08009be0
 8005d6c:	20000004 	.word	0x20000004
 8005d70:	20000008 	.word	0x20000008

08005d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d102      	bne.n	8005d8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d86:	4b2a      	ldr	r3, [pc, #168]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e047      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d8c:	4b27      	ldr	r3, [pc, #156]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d102      	bne.n	8005d9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d98:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e03e      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d9e:	4b23      	ldr	r3, [pc, #140]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d136      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005daa:	4b20      	ldr	r3, [pc, #128]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005db4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d10c      	bne.n	8005de2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd2:	68d2      	ldr	r2, [r2, #12]
 8005dd4:	0a12      	lsrs	r2, r2, #8
 8005dd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	617b      	str	r3, [r7, #20]
      break;
 8005de0:	e00c      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de2:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	4a10      	ldr	r2, [pc, #64]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dec:	68d2      	ldr	r2, [r2, #12]
 8005dee:	0a12      	lsrs	r2, r2, #8
 8005df0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	617b      	str	r3, [r7, #20]
      break;
 8005dfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	0e5b      	lsrs	r3, r3, #25
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	3301      	adds	r3, #1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e001      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e1c:	693b      	ldr	r3, [r7, #16]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	007a1200 	.word	0x007a1200

08005e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000004 	.word	0x20000004

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4904      	ldr	r1, [pc, #16]	@ (8005e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	08009bf0 	.word	0x08009bf0

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e80:	f7ff ffda 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0adb      	lsrs	r3, r3, #11
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	@ (8005ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	08009bf0 	.word	0x08009bf0

08005ea8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d10c      	bne.n	8005ee6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ecc:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	4a14      	ldr	r2, [pc, #80]	@ (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ed6:	68d2      	ldr	r2, [r2, #12]
 8005ed8:	0a12      	lsrs	r2, r2, #8
 8005eda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	617b      	str	r3, [r7, #20]
    break;
 8005ee4:	e00c      	b.n	8005f00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ee6:	4a12      	ldr	r2, [pc, #72]	@ (8005f30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	4a0e      	ldr	r2, [pc, #56]	@ (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ef0:	68d2      	ldr	r2, [r2, #12]
 8005ef2:	0a12      	lsrs	r2, r2, #8
 8005ef4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ef8:	fb02 f303 	mul.w	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]
    break;
 8005efe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f00:	4b09      	ldr	r3, [pc, #36]	@ (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	0e5b      	lsrs	r3, r3, #25
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f1a:	687b      	ldr	r3, [r7, #4]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	007a1200 	.word	0x007a1200
 8005f30:	00f42400 	.word	0x00f42400

08005f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f40:	2300      	movs	r3, #0
 8005f42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8098 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f52:	2300      	movs	r3, #0
 8005f54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f56:	4b43      	ldr	r3, [pc, #268]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10d      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f62:	4b40      	ldr	r3, [pc, #256]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f66:	4a3f      	ldr	r2, [pc, #252]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a39      	ldr	r2, [pc, #228]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f8a:	f7fe faa7 	bl	80044dc <HAL_GetTick>
 8005f8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f90:	e009      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f92:	f7fe faa3 	bl	80044dc <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d902      	bls.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	74fb      	strb	r3, [r7, #19]
        break;
 8005fa4:	e005      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa6:	4b30      	ldr	r3, [pc, #192]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0ef      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005fb2:	7cfb      	ldrb	r3, [r7, #19]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d159      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01e      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d019      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fd4:	4b23      	ldr	r3, [pc, #140]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe0:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006000:	4a18      	ldr	r2, [pc, #96]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d016      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fe fa63 	bl	80044dc <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006018:	e00b      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fe fa5f 	bl	80044dc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d902      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	74fb      	strb	r3, [r7, #19]
            break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ec      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006046:	4b07      	ldr	r3, [pc, #28]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800604c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006054:	4903      	ldr	r1, [pc, #12]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800605e:	7cfb      	ldrb	r3, [r7, #19]
 8006060:	74bb      	strb	r3, [r7, #18]
 8006062:	e005      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006070:	7c7b      	ldrb	r3, [r7, #17]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d105      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006076:	4ba6      	ldr	r3, [pc, #664]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607a:	4aa5      	ldr	r2, [pc, #660]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006080:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800608e:	4ba0      	ldr	r3, [pc, #640]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f023 0203 	bic.w	r2, r3, #3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	499c      	ldr	r1, [pc, #624]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060b0:	4b97      	ldr	r3, [pc, #604]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	f023 020c 	bic.w	r2, r3, #12
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	4994      	ldr	r1, [pc, #592]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060d2:	4b8f      	ldr	r3, [pc, #572]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	498b      	ldr	r1, [pc, #556]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060f4:	4b86      	ldr	r3, [pc, #536]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	4983      	ldr	r1, [pc, #524]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006116:	4b7e      	ldr	r3, [pc, #504]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	497a      	ldr	r1, [pc, #488]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006138:	4b75      	ldr	r3, [pc, #468]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	4972      	ldr	r1, [pc, #456]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800615a:	4b6d      	ldr	r3, [pc, #436]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006160:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4969      	ldr	r1, [pc, #420]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800617c:	4b64      	ldr	r3, [pc, #400]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	4961      	ldr	r1, [pc, #388]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800619e:	4b5c      	ldr	r3, [pc, #368]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	4958      	ldr	r1, [pc, #352]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061c0:	4b53      	ldr	r3, [pc, #332]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	4950      	ldr	r1, [pc, #320]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061de:	d105      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061f8:	4b45      	ldr	r3, [pc, #276]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	4942      	ldr	r1, [pc, #264]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006218:	4b3d      	ldr	r3, [pc, #244]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a3c      	ldr	r2, [pc, #240]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006222:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006230:	4b37      	ldr	r3, [pc, #220]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006236:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	4934      	ldr	r1, [pc, #208]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006250:	4b2f      	ldr	r3, [pc, #188]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a2e      	ldr	r2, [pc, #184]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d015      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006268:	4b29      	ldr	r3, [pc, #164]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006276:	4926      	ldr	r1, [pc, #152]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006286:	d105      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006288:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a20      	ldr	r2, [pc, #128]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006292:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	4918      	ldr	r1, [pc, #96]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c0:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e6:	490a      	ldr	r1, [pc, #40]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062f6:	d105      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062f8:	4b05      	ldr	r3, [pc, #20]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4a04      	ldr	r2, [pc, #16]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006302:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006304:	7cbb      	ldrb	r3, [r7, #18]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000

08006314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e049      	b.n	80063ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fd fda6 	bl	8003e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f001 f82c 	bl	80073b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d001      	beq.n	80063dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e04a      	b.n	8006472 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a21      	ldr	r2, [pc, #132]	@ (8006480 <HAL_TIM_Base_Start_IT+0xbc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d018      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x6c>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d013      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x6c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <HAL_TIM_Base_Start_IT+0xc0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00e      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x6c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <HAL_TIM_Base_Start_IT+0xc4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d009      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x6c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1a      	ldr	r2, [pc, #104]	@ (800648c <HAL_TIM_Base_Start_IT+0xc8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0x6c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a19      	ldr	r2, [pc, #100]	@ (8006490 <HAL_TIM_Base_Start_IT+0xcc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d115      	bne.n	800645c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	4b17      	ldr	r3, [pc, #92]	@ (8006494 <HAL_TIM_Base_Start_IT+0xd0>)
 8006438:	4013      	ands	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b06      	cmp	r3, #6
 8006440:	d015      	beq.n	800646e <HAL_TIM_Base_Start_IT+0xaa>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006448:	d011      	beq.n	800646e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	e008      	b.n	800646e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e000      	b.n	8006470 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40013400 	.word	0x40013400
 8006490:	40014000 	.word	0x40014000
 8006494:	00010007 	.word	0x00010007

08006498 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6a1a      	ldr	r2, [r3, #32]
 80064b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <HAL_TIM_Base_Stop_IT+0x48>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_Base_Stop_IT+0x48>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e049      	b.n	800659c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fd fc6d 	bl	8003dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f000 ff3b 	bl	80073b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x24>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e03c      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d109      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x3e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e02f      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start+0x58>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e022      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d109      	bne.n	8006616 <HAL_TIM_PWM_Start+0x72>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e015      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b10      	cmp	r3, #16
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start+0x8c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e008      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e097      	b.n	800677a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0xb6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006658:	e023      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0xc6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006668:	e01b      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xd6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006678:	e013      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xe6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006688:	e00b      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b10      	cmp	r3, #16
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0xf6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006698:	e003      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 faae 	bl	8007c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a33      	ldr	r2, [pc, #204]	@ (8006784 <HAL_TIM_PWM_Start+0x1e0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x13e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a32      	ldr	r2, [pc, #200]	@ (8006788 <HAL_TIM_PWM_Start+0x1e4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x13e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a30      	ldr	r2, [pc, #192]	@ (800678c <HAL_TIM_PWM_Start+0x1e8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x13e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006790 <HAL_TIM_PWM_Start+0x1ec>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x13e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <HAL_TIM_PWM_Start+0x1f0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_PWM_Start+0x142>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_TIM_PWM_Start+0x144>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a20      	ldr	r2, [pc, #128]	@ (8006784 <HAL_TIM_PWM_Start+0x1e0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d018      	beq.n	8006738 <HAL_TIM_PWM_Start+0x194>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d013      	beq.n	8006738 <HAL_TIM_PWM_Start+0x194>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a20      	ldr	r2, [pc, #128]	@ (8006798 <HAL_TIM_PWM_Start+0x1f4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <HAL_TIM_PWM_Start+0x194>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1f      	ldr	r2, [pc, #124]	@ (800679c <HAL_TIM_PWM_Start+0x1f8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_TIM_PWM_Start+0x194>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a17      	ldr	r2, [pc, #92]	@ (8006788 <HAL_TIM_PWM_Start+0x1e4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIM_PWM_Start+0x194>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a16      	ldr	r2, [pc, #88]	@ (800678c <HAL_TIM_PWM_Start+0x1e8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d115      	bne.n	8006764 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	4b18      	ldr	r3, [pc, #96]	@ (80067a0 <HAL_TIM_PWM_Start+0x1fc>)
 8006740:	4013      	ands	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b06      	cmp	r3, #6
 8006748:	d015      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1d2>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006750:	d011      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006762:	e008      	b.n	8006776 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e000      	b.n	8006778 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	00010007 	.word	0x00010007

080067a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_TIM_PWM_Start_IT+0x28>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e03c      	b.n	8006846 <HAL_TIM_PWM_Start_IT+0xa2>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d109      	bne.n	80067e6 <HAL_TIM_PWM_Start_IT+0x42>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	bf14      	ite	ne
 80067de:	2301      	movne	r3, #1
 80067e0:	2300      	moveq	r3, #0
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	e02f      	b.n	8006846 <HAL_TIM_PWM_Start_IT+0xa2>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d109      	bne.n	8006800 <HAL_TIM_PWM_Start_IT+0x5c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e022      	b.n	8006846 <HAL_TIM_PWM_Start_IT+0xa2>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b0c      	cmp	r3, #12
 8006804:	d109      	bne.n	800681a <HAL_TIM_PWM_Start_IT+0x76>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e015      	b.n	8006846 <HAL_TIM_PWM_Start_IT+0xa2>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b10      	cmp	r3, #16
 800681e:	d109      	bne.n	8006834 <HAL_TIM_PWM_Start_IT+0x90>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e008      	b.n	8006846 <HAL_TIM_PWM_Start_IT+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	bf14      	ite	ne
 8006840:	2301      	movne	r3, #1
 8006842:	2300      	moveq	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0e2      	b.n	8006a14 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start_IT+0xba>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800685c:	e023      	b.n	80068a6 <HAL_TIM_PWM_Start_IT+0x102>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b04      	cmp	r3, #4
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Start_IT+0xca>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800686c:	e01b      	b.n	80068a6 <HAL_TIM_PWM_Start_IT+0x102>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d104      	bne.n	800687e <HAL_TIM_PWM_Start_IT+0xda>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800687c:	e013      	b.n	80068a6 <HAL_TIM_PWM_Start_IT+0x102>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b0c      	cmp	r3, #12
 8006882:	d104      	bne.n	800688e <HAL_TIM_PWM_Start_IT+0xea>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800688c:	e00b      	b.n	80068a6 <HAL_TIM_PWM_Start_IT+0x102>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b10      	cmp	r3, #16
 8006892:	d104      	bne.n	800689e <HAL_TIM_PWM_Start_IT+0xfa>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800689c:	e003      	b.n	80068a6 <HAL_TIM_PWM_Start_IT+0x102>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d841      	bhi.n	8006930 <HAL_TIM_PWM_Start_IT+0x18c>
 80068ac:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <HAL_TIM_PWM_Start_IT+0x110>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	080068fb 	.word	0x080068fb
 80068c8:	08006931 	.word	0x08006931
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	0800691f 	.word	0x0800691f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0202 	orr.w	r2, r2, #2
 80068f6:	60da      	str	r2, [r3, #12]
      break;
 80068f8:	e01d      	b.n	8006936 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0204 	orr.w	r2, r2, #4
 8006908:	60da      	str	r2, [r3, #12]
      break;
 800690a:	e014      	b.n	8006936 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0208 	orr.w	r2, r2, #8
 800691a:	60da      	str	r2, [r3, #12]
      break;
 800691c:	e00b      	b.n	8006936 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0210 	orr.w	r2, r2, #16
 800692c:	60da      	str	r2, [r3, #12]
      break;
 800692e:	e002      	b.n	8006936 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	bf00      	nop
  }

  if (status == HAL_OK)
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d16a      	bne.n	8006a12 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2201      	movs	r2, #1
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f961 	bl	8007c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a33      	ldr	r2, [pc, #204]	@ (8006a1c <HAL_TIM_PWM_Start_IT+0x278>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a31      	ldr	r2, [pc, #196]	@ (8006a20 <HAL_TIM_PWM_Start_IT+0x27c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIM_PWM_Start_IT+0x1d8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a30      	ldr	r2, [pc, #192]	@ (8006a24 <HAL_TIM_PWM_Start_IT+0x280>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a28 <HAL_TIM_PWM_Start_IT+0x284>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_PWM_Start_IT+0x1d8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2d      	ldr	r2, [pc, #180]	@ (8006a2c <HAL_TIM_PWM_Start_IT+0x288>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <HAL_TIM_PWM_Start_IT+0x1dc>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <HAL_TIM_PWM_Start_IT+0x1de>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a20      	ldr	r2, [pc, #128]	@ (8006a1c <HAL_TIM_PWM_Start_IT+0x278>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_TIM_PWM_Start_IT+0x22e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a8:	d013      	beq.n	80069d2 <HAL_TIM_PWM_Start_IT+0x22e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a20      	ldr	r2, [pc, #128]	@ (8006a30 <HAL_TIM_PWM_Start_IT+0x28c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIM_PWM_Start_IT+0x22e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a34 <HAL_TIM_PWM_Start_IT+0x290>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_PWM_Start_IT+0x22e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a17      	ldr	r2, [pc, #92]	@ (8006a20 <HAL_TIM_PWM_Start_IT+0x27c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_PWM_Start_IT+0x22e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <HAL_TIM_PWM_Start_IT+0x280>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d115      	bne.n	80069fe <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <HAL_TIM_PWM_Start_IT+0x294>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	d015      	beq.n	8006a10 <HAL_TIM_PWM_Start_IT+0x26c>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ea:	d011      	beq.n	8006a10 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	e008      	b.n	8006a10 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	00010007 	.word	0x00010007

08006a3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e097      	b.n	8006b80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fd fa51 	bl	8003f0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f000 fc8d 	bl	80073b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006adc:	f023 030c 	bic.w	r3, r3, #12
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	4313      	orrs	r3, r2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	011a      	lsls	r2, r3, #4
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	031b      	lsls	r3, r3, #12
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ba0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ba8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d110      	bne.n	8006bda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d102      	bne.n	8006bc4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bbe:	7b7b      	ldrb	r3, [r7, #13]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e069      	b.n	8006c9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bd8:	e031      	b.n	8006c3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d110      	bne.n	8006c02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d102      	bne.n	8006bec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e055      	b.n	8006c9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c00:	e01d      	b.n	8006c3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d108      	bne.n	8006c1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c0e:	7b7b      	ldrb	r3, [r7, #13]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c14:	7b3b      	ldrb	r3, [r7, #12]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e03e      	b.n	8006c9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_TIM_Encoder_Start+0xc4>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d008      	beq.n	8006c5c <HAL_TIM_Encoder_Start+0xd4>
 8006c4a:	e00f      	b.n	8006c6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2201      	movs	r2, #1
 8006c52:	2100      	movs	r1, #0
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 ffd9 	bl	8007c0c <TIM_CCxChannelCmd>
      break;
 8006c5a:	e016      	b.n	8006c8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2201      	movs	r2, #1
 8006c62:	2104      	movs	r1, #4
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ffd1 	bl	8007c0c <TIM_CCxChannelCmd>
      break;
 8006c6a:	e00e      	b.n	8006c8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2201      	movs	r2, #1
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 ffc9 	bl	8007c0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	2104      	movs	r1, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 ffc2 	bl	8007c0c <TIM_CCxChannelCmd>
      break;
 8006c88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d020      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01b      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0202 	mvn.w	r2, #2
 8006cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fb40 	bl	8007374 <HAL_TIM_IC_CaptureCallback>
 8006cf4:	e005      	b.n	8006d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb32 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fb43 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d020      	beq.n	8006d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0204 	mvn.w	r2, #4
 8006d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb1a 	bl	8007374 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb0c 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb1d 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d020      	beq.n	8006da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01b      	beq.n	8006da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0208 	mvn.w	r2, #8
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2204      	movs	r2, #4
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 faf4 	bl	8007374 <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fae6 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 faf7 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d020      	beq.n	8006dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0210 	mvn.w	r2, #16
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 face 	bl	8007374 <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fac0 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fad1 	bl	8007388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0201 	mvn.w	r2, #1
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa fda2 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f825 	bl	8007e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00c      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f81d 	bl	8007e9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fa8b 	bl	800739c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f06f 0220 	mvn.w	r2, #32
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 ffe5 	bl	8007e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fff1 	bl	8007eb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ffe9 	bl	8007ec4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00c      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 ffe1 	bl	8007ed8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00c      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 ffd9 	bl	8007eec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e0ff      	b.n	8007162 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b14      	cmp	r3, #20
 8006f6e:	f200 80f0 	bhi.w	8007152 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08007153 	.word	0x08007153
 8006f80:	08007153 	.word	0x08007153
 8006f84:	08007153 	.word	0x08007153
 8006f88:	0800700d 	.word	0x0800700d
 8006f8c:	08007153 	.word	0x08007153
 8006f90:	08007153 	.word	0x08007153
 8006f94:	08007153 	.word	0x08007153
 8006f98:	0800704f 	.word	0x0800704f
 8006f9c:	08007153 	.word	0x08007153
 8006fa0:	08007153 	.word	0x08007153
 8006fa4:	08007153 	.word	0x08007153
 8006fa8:	0800708f 	.word	0x0800708f
 8006fac:	08007153 	.word	0x08007153
 8006fb0:	08007153 	.word	0x08007153
 8006fb4:	08007153 	.word	0x08007153
 8006fb8:	080070d1 	.word	0x080070d1
 8006fbc:	08007153 	.word	0x08007153
 8006fc0:	08007153 	.word	0x08007153
 8006fc4:	08007153 	.word	0x08007153
 8006fc8:	08007111 	.word	0x08007111
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fa88 	bl	80074e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0208 	orr.w	r2, r2, #8
 8006fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0204 	bic.w	r2, r2, #4
 8006ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6999      	ldr	r1, [r3, #24]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	619a      	str	r2, [r3, #24]
      break;
 800700a:	e0a5      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 faf8 	bl	8007608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6999      	ldr	r1, [r3, #24]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	021a      	lsls	r2, r3, #8
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	619a      	str	r2, [r3, #24]
      break;
 800704c:	e084      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fb61 	bl	800771c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0208 	orr.w	r2, r2, #8
 8007068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0204 	bic.w	r2, r2, #4
 8007078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69d9      	ldr	r1, [r3, #28]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	61da      	str	r2, [r3, #28]
      break;
 800708c:	e064      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fbc9 	bl	800782c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69d9      	ldr	r1, [r3, #28]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	021a      	lsls	r2, r3, #8
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	61da      	str	r2, [r3, #28]
      break;
 80070ce:	e043      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fc32 	bl	8007940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0208 	orr.w	r2, r2, #8
 80070ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0204 	bic.w	r2, r2, #4
 80070fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800710e:	e023      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fc76 	bl	8007a08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800712a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800713a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	021a      	lsls	r2, r3, #8
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007150:	e002      	b.n	8007158 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
      break;
 8007156:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIM_ConfigClockSource+0x1c>
 8007184:	2302      	movs	r3, #2
 8007186:	e0de      	b.n	8007346 <HAL_TIM_ConfigClockSource+0x1da>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80071a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a63      	ldr	r2, [pc, #396]	@ (8007350 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	f000 80a9 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 80071c8:	4a61      	ldr	r2, [pc, #388]	@ (8007350 <HAL_TIM_ConfigClockSource+0x1e4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f200 80ae 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 80071d0:	4a60      	ldr	r2, [pc, #384]	@ (8007354 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	f000 80a1 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 80071d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007354 <HAL_TIM_ConfigClockSource+0x1e8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f200 80a6 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 80071e0:	4a5d      	ldr	r2, [pc, #372]	@ (8007358 <HAL_TIM_ConfigClockSource+0x1ec>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	f000 8099 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 80071e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007358 <HAL_TIM_ConfigClockSource+0x1ec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f200 809e 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 80071f0:	4a5a      	ldr	r2, [pc, #360]	@ (800735c <HAL_TIM_ConfigClockSource+0x1f0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f000 8091 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 80071f8:	4a58      	ldr	r2, [pc, #352]	@ (800735c <HAL_TIM_ConfigClockSource+0x1f0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f200 8096 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 8007200:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007204:	f000 8089 	beq.w	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 8007208:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800720c:	f200 808e 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007214:	d03e      	beq.n	8007294 <HAL_TIM_ConfigClockSource+0x128>
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721a:	f200 8087 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007222:	f000 8086 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1c6>
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722a:	d87f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 800722c:	2b70      	cmp	r3, #112	@ 0x70
 800722e:	d01a      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0xfa>
 8007230:	2b70      	cmp	r3, #112	@ 0x70
 8007232:	d87b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 8007234:	2b60      	cmp	r3, #96	@ 0x60
 8007236:	d050      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x16e>
 8007238:	2b60      	cmp	r3, #96	@ 0x60
 800723a:	d877      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 800723c:	2b50      	cmp	r3, #80	@ 0x50
 800723e:	d03c      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x14e>
 8007240:	2b50      	cmp	r3, #80	@ 0x50
 8007242:	d873      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d058      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x18e>
 8007248:	2b40      	cmp	r3, #64	@ 0x40
 800724a:	d86f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 800724c:	2b30      	cmp	r3, #48	@ 0x30
 800724e:	d064      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 8007250:	2b30      	cmp	r3, #48	@ 0x30
 8007252:	d86b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d060      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 8007258:	2b20      	cmp	r3, #32
 800725a:	d867      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d05c      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 8007260:	2b10      	cmp	r3, #16
 8007262:	d05a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x1ae>
 8007264:	e062      	b.n	800732c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007276:	f000 fca9 	bl	8007bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	609a      	str	r2, [r3, #8]
      break;
 8007292:	e04f      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072a4:	f000 fc92 	bl	8007bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072b6:	609a      	str	r2, [r3, #8]
      break;
 80072b8:	e03c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 fc04 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2150      	movs	r1, #80	@ 0x50
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fc5d 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 80072d8:	e02c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 fc23 	bl	8007b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2160      	movs	r1, #96	@ 0x60
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fc4d 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 80072f8:	e01c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007306:	461a      	mov	r2, r3
 8007308:	f000 fbe4 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2140      	movs	r1, #64	@ 0x40
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fc3d 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 8007318:	e00c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 fc34 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 800732a:	e003      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e000      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	00100070 	.word	0x00100070
 8007354:	00100040 	.word	0x00100040
 8007358:	00100030 	.word	0x00100030
 800735c:	00100020 	.word	0x00100020

08007360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a42      	ldr	r2, [pc, #264]	@ (80074cc <TIM_Base_SetConfig+0x11c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3f      	ldr	r2, [pc, #252]	@ (80074d0 <TIM_Base_SetConfig+0x120>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3e      	ldr	r2, [pc, #248]	@ (80074d4 <TIM_Base_SetConfig+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x38>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3d      	ldr	r2, [pc, #244]	@ (80074d8 <TIM_Base_SetConfig+0x128>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a33      	ldr	r2, [pc, #204]	@ (80074cc <TIM_Base_SetConfig+0x11c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01b      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007408:	d017      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a30      	ldr	r2, [pc, #192]	@ (80074d0 <TIM_Base_SetConfig+0x120>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2f      	ldr	r2, [pc, #188]	@ (80074d4 <TIM_Base_SetConfig+0x124>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2e      	ldr	r2, [pc, #184]	@ (80074d8 <TIM_Base_SetConfig+0x128>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2d      	ldr	r2, [pc, #180]	@ (80074dc <TIM_Base_SetConfig+0x12c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2c      	ldr	r2, [pc, #176]	@ (80074e0 <TIM_Base_SetConfig+0x130>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_Base_SetConfig+0x8a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2b      	ldr	r2, [pc, #172]	@ (80074e4 <TIM_Base_SetConfig+0x134>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d108      	bne.n	800744c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a16      	ldr	r2, [pc, #88]	@ (80074cc <TIM_Base_SetConfig+0x11c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00f      	beq.n	8007498 <TIM_Base_SetConfig+0xe8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <TIM_Base_SetConfig+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_Base_SetConfig+0xe8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <TIM_Base_SetConfig+0x12c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_Base_SetConfig+0xe8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <TIM_Base_SetConfig+0x130>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0xe8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <TIM_Base_SetConfig+0x134>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d103      	bne.n	80074a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d105      	bne.n	80074be <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f023 0201 	bic.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]
  }
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40012c00 	.word	0x40012c00
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40013400 	.word	0x40013400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800

080074e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f023 0201 	bic.w	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0303 	bic.w	r3, r3, #3
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f023 0302 	bic.w	r3, r3, #2
 8007534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a2c      	ldr	r2, [pc, #176]	@ (80075f4 <TIM_OC1_SetConfig+0x10c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00f      	beq.n	8007568 <TIM_OC1_SetConfig+0x80>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a2b      	ldr	r2, [pc, #172]	@ (80075f8 <TIM_OC1_SetConfig+0x110>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <TIM_OC1_SetConfig+0x80>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a2a      	ldr	r2, [pc, #168]	@ (80075fc <TIM_OC1_SetConfig+0x114>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <TIM_OC1_SetConfig+0x80>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a29      	ldr	r2, [pc, #164]	@ (8007600 <TIM_OC1_SetConfig+0x118>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC1_SetConfig+0x80>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a28      	ldr	r2, [pc, #160]	@ (8007604 <TIM_OC1_SetConfig+0x11c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d10c      	bne.n	8007582 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0308 	bic.w	r3, r3, #8
 800756e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1b      	ldr	r2, [pc, #108]	@ (80075f4 <TIM_OC1_SetConfig+0x10c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00f      	beq.n	80075aa <TIM_OC1_SetConfig+0xc2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a1a      	ldr	r2, [pc, #104]	@ (80075f8 <TIM_OC1_SetConfig+0x110>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00b      	beq.n	80075aa <TIM_OC1_SetConfig+0xc2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a19      	ldr	r2, [pc, #100]	@ (80075fc <TIM_OC1_SetConfig+0x114>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <TIM_OC1_SetConfig+0xc2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a18      	ldr	r2, [pc, #96]	@ (8007600 <TIM_OC1_SetConfig+0x118>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_OC1_SetConfig+0xc2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <TIM_OC1_SetConfig+0x11c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d111      	bne.n	80075ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	621a      	str	r2, [r3, #32]
}
 80075e8:	bf00      	nop
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40013400 	.word	0x40013400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800

08007608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f023 0210 	bic.w	r2, r3, #16
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0320 	bic.w	r3, r3, #32
 8007656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a28      	ldr	r2, [pc, #160]	@ (8007708 <TIM_OC2_SetConfig+0x100>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC2_SetConfig+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a27      	ldr	r2, [pc, #156]	@ (800770c <TIM_OC2_SetConfig+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10d      	bne.n	8007690 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800767a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800768e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1d      	ldr	r2, [pc, #116]	@ (8007708 <TIM_OC2_SetConfig+0x100>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00f      	beq.n	80076b8 <TIM_OC2_SetConfig+0xb0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <TIM_OC2_SetConfig+0x104>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00b      	beq.n	80076b8 <TIM_OC2_SetConfig+0xb0>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007710 <TIM_OC2_SetConfig+0x108>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_OC2_SetConfig+0xb0>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007714 <TIM_OC2_SetConfig+0x10c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC2_SetConfig+0xb0>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a19      	ldr	r2, [pc, #100]	@ (8007718 <TIM_OC2_SetConfig+0x110>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d113      	bne.n	80076e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800

0800771c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800774a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a27      	ldr	r2, [pc, #156]	@ (8007818 <TIM_OC3_SetConfig+0xfc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_OC3_SetConfig+0x6a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a26      	ldr	r2, [pc, #152]	@ (800781c <TIM_OC3_SetConfig+0x100>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d10d      	bne.n	80077a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800778c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007818 <TIM_OC3_SetConfig+0xfc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00f      	beq.n	80077ca <TIM_OC3_SetConfig+0xae>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a1b      	ldr	r2, [pc, #108]	@ (800781c <TIM_OC3_SetConfig+0x100>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00b      	beq.n	80077ca <TIM_OC3_SetConfig+0xae>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007820 <TIM_OC3_SetConfig+0x104>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <TIM_OC3_SetConfig+0xae>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a19      	ldr	r2, [pc, #100]	@ (8007824 <TIM_OC3_SetConfig+0x108>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_OC3_SetConfig+0xae>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a18      	ldr	r2, [pc, #96]	@ (8007828 <TIM_OC3_SetConfig+0x10c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d113      	bne.n	80077f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	621a      	str	r2, [r3, #32]
}
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40013400 	.word	0x40013400
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800

0800782c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800787a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	031b      	lsls	r3, r3, #12
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a28      	ldr	r2, [pc, #160]	@ (800792c <TIM_OC4_SetConfig+0x100>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC4_SetConfig+0x6c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a27      	ldr	r2, [pc, #156]	@ (8007930 <TIM_OC4_SetConfig+0x104>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10d      	bne.n	80078b4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	031b      	lsls	r3, r3, #12
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <TIM_OC4_SetConfig+0x100>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <TIM_OC4_SetConfig+0xb0>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1c      	ldr	r2, [pc, #112]	@ (8007930 <TIM_OC4_SetConfig+0x104>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_OC4_SetConfig+0xb0>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007934 <TIM_OC4_SetConfig+0x108>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_OC4_SetConfig+0xb0>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007938 <TIM_OC4_SetConfig+0x10c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC4_SetConfig+0xb0>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a19      	ldr	r2, [pc, #100]	@ (800793c <TIM_OC4_SetConfig+0x110>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d113      	bne.n	8007904 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800796e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007984:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a17      	ldr	r2, [pc, #92]	@ (80079f4 <TIM_OC5_SetConfig+0xb4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00f      	beq.n	80079ba <TIM_OC5_SetConfig+0x7a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a16      	ldr	r2, [pc, #88]	@ (80079f8 <TIM_OC5_SetConfig+0xb8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_OC5_SetConfig+0x7a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a15      	ldr	r2, [pc, #84]	@ (80079fc <TIM_OC5_SetConfig+0xbc>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_OC5_SetConfig+0x7a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a14      	ldr	r2, [pc, #80]	@ (8007a00 <TIM_OC5_SetConfig+0xc0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC5_SetConfig+0x7a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <TIM_OC5_SetConfig+0xc4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d109      	bne.n	80079ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	621a      	str	r2, [r3, #32]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40013400 	.word	0x40013400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400
 8007a04:	40014800 	.word	0x40014800

08007a08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	051b      	lsls	r3, r3, #20
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ac0 <TIM_OC6_SetConfig+0xb8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00f      	beq.n	8007a84 <TIM_OC6_SetConfig+0x7c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a17      	ldr	r2, [pc, #92]	@ (8007ac4 <TIM_OC6_SetConfig+0xbc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00b      	beq.n	8007a84 <TIM_OC6_SetConfig+0x7c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ac8 <TIM_OC6_SetConfig+0xc0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d007      	beq.n	8007a84 <TIM_OC6_SetConfig+0x7c>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a15      	ldr	r2, [pc, #84]	@ (8007acc <TIM_OC6_SetConfig+0xc4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC6_SetConfig+0x7c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a14      	ldr	r2, [pc, #80]	@ (8007ad0 <TIM_OC6_SetConfig+0xc8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d109      	bne.n	8007a98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	029b      	lsls	r3, r3, #10
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40013400 	.word	0x40013400
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400
 8007ad0:	40014800 	.word	0x40014800

08007ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0201 	bic.w	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f023 030a 	bic.w	r3, r3, #10
 8007b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b087      	sub	sp, #28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	f023 0210 	bic.w	r2, r3, #16
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	031b      	lsls	r3, r3, #12
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f043 0307 	orr.w	r3, r3, #7
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	609a      	str	r2, [r3, #8]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	021a      	lsls	r2, r3, #8
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 031f 	and.w	r3, r3, #31
 8007c1e:	2201      	movs	r2, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	401a      	ands	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	fa01 f303 	lsl.w	r3, r1, r3
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
}
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e065      	b.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a2c      	ldr	r2, [pc, #176]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007caa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d018      	beq.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce6:	d013      	beq.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a18      	ldr	r2, [pc, #96]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00e      	beq.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d009      	beq.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a12      	ldr	r2, [pc, #72]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a13      	ldr	r2, [pc, #76]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10c      	bne.n	8007d2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400
 8007d50:	40000400 	.word	0x40000400
 8007d54:	40000800 	.word	0x40000800
 8007d58:	40014000 	.word	0x40014000

08007d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e073      	b.n	8007e60 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a19      	ldr	r2, [pc, #100]	@ (8007e6c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d11c      	bne.n	8007e4e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1e:	051b      	lsls	r3, r3, #20
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40012c00 	.word	0x40012c00
 8007e70:	40013400 	.word	0x40013400

08007e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d101      	bne.n	8007f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e042      	b.n	8007f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d106      	bne.n	8007f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7fc f8b5 	bl	8004094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	@ 0x24
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fee0 	bl	8008d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fc11 	bl	8008778 <UART_SetConfig>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e01b      	b.n	8007f98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0201 	orr.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 ff5f 	bl	8008e54 <UART_CheckIdleState>
 8007f96:	4603      	mov	r3, r0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	@ 0x28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d167      	bne.n	8008088 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_UART_Transmit_DMA+0x24>
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e060      	b.n	800808a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2221      	movs	r2, #33	@ 0x21
 8007fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d028      	beq.n	8008048 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ffa:	4a26      	ldr	r2, [pc, #152]	@ (8008094 <HAL_UART_Transmit_DMA+0xf4>)
 8007ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008002:	4a25      	ldr	r2, [pc, #148]	@ (8008098 <HAL_UART_Transmit_DMA+0xf8>)
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800800a:	4a24      	ldr	r2, [pc, #144]	@ (800809c <HAL_UART_Transmit_DMA+0xfc>)
 800800c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008012:	2200      	movs	r2, #0
 8008014:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801e:	4619      	mov	r1, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3328      	adds	r3, #40	@ 0x28
 8008026:	461a      	mov	r2, r3
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	f7fc fc1b 	bl	8004864 <HAL_DMA_Start_IT>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2210      	movs	r2, #16
 8008038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e020      	b.n	800808a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2240      	movs	r2, #64	@ 0x40
 800804e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008070:	623a      	str	r2, [r7, #32]
 8008072:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	61bb      	str	r3, [r7, #24]
   return(result);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e000      	b.n	800808a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3728      	adds	r7, #40	@ 0x28
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	080091d1 	.word	0x080091d1
 8008098:	0800926b 	.word	0x0800926b
 800809c:	08009287 	.word	0x08009287

080080a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b0ba      	sub	sp, #232	@ 0xe8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80080ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080ce:	4013      	ands	r3, r2
 80080d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80080d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d11b      	bne.n	8008114 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d015      	beq.n	8008114 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8300 	beq.w	800870a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      }
      return;
 8008112:	e2fa      	b.n	800870a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8123 	beq.w	8008364 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800811e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008122:	4b8d      	ldr	r3, [pc, #564]	@ (8008358 <HAL_UART_IRQHandler+0x2b8>)
 8008124:	4013      	ands	r3, r2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800812a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800812e:	4b8b      	ldr	r3, [pc, #556]	@ (800835c <HAL_UART_IRQHandler+0x2bc>)
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8116 	beq.w	8008364 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d011      	beq.n	8008168 <HAL_UART_IRQHandler+0xc8>
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2201      	movs	r2, #1
 8008156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815e:	f043 0201 	orr.w	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d011      	beq.n	8008198 <HAL_UART_IRQHandler+0xf8>
 8008174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2202      	movs	r2, #2
 8008186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818e:	f043 0204 	orr.w	r2, r3, #4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <HAL_UART_IRQHandler+0x128>
 80081a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2204      	movs	r2, #4
 80081b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d105      	bne.n	80081ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80081e4:	4b5c      	ldr	r3, [pc, #368]	@ (8008358 <HAL_UART_IRQHandler+0x2b8>)
 80081e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2208      	movs	r2, #8
 80081f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fa:	f043 0208 	orr.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800820c:	2b00      	cmp	r3, #0
 800820e:	d012      	beq.n	8008236 <HAL_UART_IRQHandler+0x196>
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00c      	beq.n	8008236 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8266 	beq.w	800870e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800824e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800825a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800825e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800827c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828a:	2b40      	cmp	r3, #64	@ 0x40
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800828e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008292:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008296:	2b00      	cmp	r3, #0
 8008298:	d054      	beq.n	8008344 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 ff32 	bl	8009104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b40      	cmp	r3, #64	@ 0x40
 80082ac:	d146      	bne.n	800833c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80082f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1d9      	bne.n	80082ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800830a:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <HAL_UART_IRQHandler+0x2c0>)
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008314:	4618      	mov	r0, r3
 8008316:	f7fc fb79 	bl	8004a0c <HAL_DMA_Abort_IT>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d019      	beq.n	8008354 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800832e:	4610      	mov	r0, r2
 8008330:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008332:	e00f      	b.n	8008354 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa09 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833a:	e00b      	b.n	8008354 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fa05 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008342:	e007      	b.n	8008354 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa01 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008352:	e1dc      	b.n	800870e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	bf00      	nop
    return;
 8008356:	e1da      	b.n	800870e <HAL_UART_IRQHandler+0x66e>
 8008358:	10000001 	.word	0x10000001
 800835c:	04000120 	.word	0x04000120
 8008360:	08009307 	.word	0x08009307

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008368:	2b01      	cmp	r3, #1
 800836a:	f040 8170 	bne.w	800864e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800836e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8169 	beq.w	800864e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8162 	beq.w	800864e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2210      	movs	r2, #16
 8008390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	f040 80d8 	bne.w	8008552 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80af 	beq.w	8008518 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083c4:	429a      	cmp	r2, r3
 80083c6:	f080 80a7 	bcs.w	8008518 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 8087 	bne.w	80084f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008412:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008416:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800841e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800842a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1da      	bne.n	80083e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008456:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800845a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800845e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e1      	bne.n	8008432 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800847e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008492:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008494:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008498:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e3      	bne.n	800846e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084c4:	f023 0310 	bic.w	r3, r3, #16
 80084c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e4      	bne.n	80084b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fc fa32 	bl	800495a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008508:	b29b      	uxth	r3, r3
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f925 	bl	8008760 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008516:	e0fc      	b.n	8008712 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800851e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008522:	429a      	cmp	r2, r3
 8008524:	f040 80f5 	bne.w	8008712 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b20      	cmp	r3, #32
 8008538:	f040 80eb 	bne.w	8008712 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f908 	bl	8008760 <HAL_UARTEx_RxEventCallback>
      return;
 8008550:	e0df      	b.n	8008712 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800855e:	b29b      	uxth	r3, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 80d1 	beq.w	8008716 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80cc 	beq.w	8008716 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800858c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e4      	bne.n	800857e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	623b      	str	r3, [r7, #32]
   return(result);
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80085de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e1      	bne.n	80085b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60fb      	str	r3, [r7, #12]
   return(result);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f023 0310 	bic.w	r3, r3, #16
 8008618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	69b9      	ldr	r1, [r7, #24]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	617b      	str	r3, [r7, #20]
   return(result);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e4      	bne.n	8008604 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f88a 	bl	8008760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800864c:	e063      	b.n	8008716 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <HAL_UART_IRQHandler+0x5d8>
 800865a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800865e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800866e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fe85 	bl	8009380 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008676:	e051      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008680:	2b00      	cmp	r3, #0
 8008682:	d014      	beq.n	80086ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868c:	2b00      	cmp	r3, #0
 800868e:	d105      	bne.n	800869c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d008      	beq.n	80086ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d03a      	beq.n	800871a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
    }
    return;
 80086ac:	e035      	b.n	800871a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <HAL_UART_IRQHandler+0x62e>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fe2f 	bl	800932a <UART_EndTransmit_IT>
    return;
 80086cc:	e026      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_UART_IRQHandler+0x64e>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fe5e 	bl	80093a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ec:	e016      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d010      	beq.n	800871c <HAL_UART_IRQHandler+0x67c>
 80086fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da0c      	bge.n	800871c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fe46 	bl	8009394 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008708:	e008      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
      return;
 800870a:	bf00      	nop
 800870c:	e006      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
    return;
 800870e:	bf00      	nop
 8008710:	e004      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
      return;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
      return;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_UART_IRQHandler+0x67c>
    return;
 800871a:	bf00      	nop
  }
}
 800871c:	37e8      	adds	r7, #232	@ 0xe8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop

08008724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800877c:	b08c      	sub	sp, #48	@ 0x30
 800877e:	af00      	add	r7, sp, #0
 8008780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	431a      	orrs	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	431a      	orrs	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	4313      	orrs	r3, r2
 800879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4bab      	ldr	r3, [pc, #684]	@ (8008a54 <UART_SetConfig+0x2dc>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4aa0      	ldr	r2, [pc, #640]	@ (8008a58 <UART_SetConfig+0x2e0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d004      	beq.n	80087e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e0:	4313      	orrs	r3, r2
 80087e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	f023 010f 	bic.w	r1, r3, #15
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a91      	ldr	r2, [pc, #580]	@ (8008a5c <UART_SetConfig+0x2e4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d125      	bne.n	8008868 <UART_SetConfig+0xf0>
 800881c:	4b90      	ldr	r3, [pc, #576]	@ (8008a60 <UART_SetConfig+0x2e8>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d81a      	bhi.n	8008860 <UART_SetConfig+0xe8>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <UART_SetConfig+0xb8>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008841 	.word	0x08008841
 8008834:	08008851 	.word	0x08008851
 8008838:	08008849 	.word	0x08008849
 800883c:	08008859 	.word	0x08008859
 8008840:	2301      	movs	r3, #1
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e0d6      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884e:	e0d2      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008856:	e0ce      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885e:	e0ca      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008866:	e0c6      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a7d      	ldr	r2, [pc, #500]	@ (8008a64 <UART_SetConfig+0x2ec>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d138      	bne.n	80088e4 <UART_SetConfig+0x16c>
 8008872:	4b7b      	ldr	r3, [pc, #492]	@ (8008a60 <UART_SetConfig+0x2e8>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008878:	f003 030c 	and.w	r3, r3, #12
 800887c:	2b0c      	cmp	r3, #12
 800887e:	d82d      	bhi.n	80088dc <UART_SetConfig+0x164>
 8008880:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <UART_SetConfig+0x110>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088bd 	.word	0x080088bd
 800888c:	080088dd 	.word	0x080088dd
 8008890:	080088dd 	.word	0x080088dd
 8008894:	080088dd 	.word	0x080088dd
 8008898:	080088cd 	.word	0x080088cd
 800889c:	080088dd 	.word	0x080088dd
 80088a0:	080088dd 	.word	0x080088dd
 80088a4:	080088dd 	.word	0x080088dd
 80088a8:	080088c5 	.word	0x080088c5
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	080088dd 	.word	0x080088dd
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e098      	b.n	80089f6 <UART_SetConfig+0x27e>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e094      	b.n	80089f6 <UART_SetConfig+0x27e>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	e090      	b.n	80089f6 <UART_SetConfig+0x27e>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088da:	e08c      	b.n	80089f6 <UART_SetConfig+0x27e>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e2:	e088      	b.n	80089f6 <UART_SetConfig+0x27e>
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a5f      	ldr	r2, [pc, #380]	@ (8008a68 <UART_SetConfig+0x2f0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d125      	bne.n	800893a <UART_SetConfig+0x1c2>
 80088ee:	4b5c      	ldr	r3, [pc, #368]	@ (8008a60 <UART_SetConfig+0x2e8>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088f8:	2b30      	cmp	r3, #48	@ 0x30
 80088fa:	d016      	beq.n	800892a <UART_SetConfig+0x1b2>
 80088fc:	2b30      	cmp	r3, #48	@ 0x30
 80088fe:	d818      	bhi.n	8008932 <UART_SetConfig+0x1ba>
 8008900:	2b20      	cmp	r3, #32
 8008902:	d00a      	beq.n	800891a <UART_SetConfig+0x1a2>
 8008904:	2b20      	cmp	r3, #32
 8008906:	d814      	bhi.n	8008932 <UART_SetConfig+0x1ba>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <UART_SetConfig+0x19a>
 800890c:	2b10      	cmp	r3, #16
 800890e:	d008      	beq.n	8008922 <UART_SetConfig+0x1aa>
 8008910:	e00f      	b.n	8008932 <UART_SetConfig+0x1ba>
 8008912:	2300      	movs	r3, #0
 8008914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008918:	e06d      	b.n	80089f6 <UART_SetConfig+0x27e>
 800891a:	2302      	movs	r3, #2
 800891c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008920:	e069      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008922:	2304      	movs	r3, #4
 8008924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008928:	e065      	b.n	80089f6 <UART_SetConfig+0x27e>
 800892a:	2308      	movs	r3, #8
 800892c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008930:	e061      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008932:	2310      	movs	r3, #16
 8008934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008938:	e05d      	b.n	80089f6 <UART_SetConfig+0x27e>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a4b      	ldr	r2, [pc, #300]	@ (8008a6c <UART_SetConfig+0x2f4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d125      	bne.n	8008990 <UART_SetConfig+0x218>
 8008944:	4b46      	ldr	r3, [pc, #280]	@ (8008a60 <UART_SetConfig+0x2e8>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800894e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008950:	d016      	beq.n	8008980 <UART_SetConfig+0x208>
 8008952:	2bc0      	cmp	r3, #192	@ 0xc0
 8008954:	d818      	bhi.n	8008988 <UART_SetConfig+0x210>
 8008956:	2b80      	cmp	r3, #128	@ 0x80
 8008958:	d00a      	beq.n	8008970 <UART_SetConfig+0x1f8>
 800895a:	2b80      	cmp	r3, #128	@ 0x80
 800895c:	d814      	bhi.n	8008988 <UART_SetConfig+0x210>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <UART_SetConfig+0x1f0>
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d008      	beq.n	8008978 <UART_SetConfig+0x200>
 8008966:	e00f      	b.n	8008988 <UART_SetConfig+0x210>
 8008968:	2300      	movs	r3, #0
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800896e:	e042      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008970:	2302      	movs	r3, #2
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008976:	e03e      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897e:	e03a      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008986:	e036      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898e:	e032      	b.n	80089f6 <UART_SetConfig+0x27e>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a30      	ldr	r2, [pc, #192]	@ (8008a58 <UART_SetConfig+0x2e0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d12a      	bne.n	80089f0 <UART_SetConfig+0x278>
 800899a:	4b31      	ldr	r3, [pc, #196]	@ (8008a60 <UART_SetConfig+0x2e8>)
 800899c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80089a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089a8:	d01a      	beq.n	80089e0 <UART_SetConfig+0x268>
 80089aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089ae:	d81b      	bhi.n	80089e8 <UART_SetConfig+0x270>
 80089b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b4:	d00c      	beq.n	80089d0 <UART_SetConfig+0x258>
 80089b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089ba:	d815      	bhi.n	80089e8 <UART_SetConfig+0x270>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <UART_SetConfig+0x250>
 80089c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c4:	d008      	beq.n	80089d8 <UART_SetConfig+0x260>
 80089c6:	e00f      	b.n	80089e8 <UART_SetConfig+0x270>
 80089c8:	2300      	movs	r3, #0
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ce:	e012      	b.n	80089f6 <UART_SetConfig+0x27e>
 80089d0:	2302      	movs	r3, #2
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d6:	e00e      	b.n	80089f6 <UART_SetConfig+0x27e>
 80089d8:	2304      	movs	r3, #4
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089de:	e00a      	b.n	80089f6 <UART_SetConfig+0x27e>
 80089e0:	2308      	movs	r3, #8
 80089e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e6:	e006      	b.n	80089f6 <UART_SetConfig+0x27e>
 80089e8:	2310      	movs	r3, #16
 80089ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ee:	e002      	b.n	80089f6 <UART_SetConfig+0x27e>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a17      	ldr	r2, [pc, #92]	@ (8008a58 <UART_SetConfig+0x2e0>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	f040 80a8 	bne.w	8008b52 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d834      	bhi.n	8008a74 <UART_SetConfig+0x2fc>
 8008a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <UART_SetConfig+0x298>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a35 	.word	0x08008a35
 8008a14:	08008a75 	.word	0x08008a75
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a43 	.word	0x08008a43
 8008a24:	08008a75 	.word	0x08008a75
 8008a28:	08008a75 	.word	0x08008a75
 8008a2c:	08008a75 	.word	0x08008a75
 8008a30:	08008a4b 	.word	0x08008a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a34:	f7fd fa0c 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008a38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a3a:	e021      	b.n	8008a80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a70 <UART_SetConfig+0x2f8>)
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a40:	e01e      	b.n	8008a80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a42:	f7fd f997 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8008a46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a48:	e01a      	b.n	8008a80 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a50:	e016      	b.n	8008a80 <UART_SetConfig+0x308>
 8008a52:	bf00      	nop
 8008a54:	cfff69f3 	.word	0xcfff69f3
 8008a58:	40008000 	.word	0x40008000
 8008a5c:	40013800 	.word	0x40013800
 8008a60:	40021000 	.word	0x40021000
 8008a64:	40004400 	.word	0x40004400
 8008a68:	40004800 	.word	0x40004800
 8008a6c:	40004c00 	.word	0x40004c00
 8008a70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 812a 	beq.w	8008cdc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	4a9e      	ldr	r2, [pc, #632]	@ (8008d08 <UART_SetConfig+0x590>)
 8008a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d305      	bcc.n	8008ab8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d903      	bls.n	8008ac0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008abe:	e10d      	b.n	8008cdc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	60fa      	str	r2, [r7, #12]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	4a8e      	ldr	r2, [pc, #568]	@ (8008d08 <UART_SetConfig+0x590>)
 8008ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ae2:	f7f7 feaf 	bl	8000844 <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	f04f 0200 	mov.w	r2, #0
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	020b      	lsls	r3, r1, #8
 8008af8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008afc:	0202      	lsls	r2, r0, #8
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	6849      	ldr	r1, [r1, #4]
 8008b02:	0849      	lsrs	r1, r1, #1
 8008b04:	2000      	movs	r0, #0
 8008b06:	460c      	mov	r4, r1
 8008b08:	4605      	mov	r5, r0
 8008b0a:	eb12 0804 	adds.w	r8, r2, r4
 8008b0e:	eb43 0905 	adc.w	r9, r3, r5
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	469a      	mov	sl, r3
 8008b1a:	4693      	mov	fp, r2
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	465b      	mov	r3, fp
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f7 fe8e 	bl	8000844 <__aeabi_uldivmod>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b36:	d308      	bcc.n	8008b4a <UART_SetConfig+0x3d2>
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b3e:	d204      	bcs.n	8008b4a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	60da      	str	r2, [r3, #12]
 8008b48:	e0c8      	b.n	8008cdc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b50:	e0c4      	b.n	8008cdc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b5a:	d167      	bne.n	8008c2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d828      	bhi.n	8008bb6 <UART_SetConfig+0x43e>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <UART_SetConfig+0x3f4>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008b99 	.word	0x08008b99
 8008b74:	08008ba1 	.word	0x08008ba1
 8008b78:	08008bb7 	.word	0x08008bb7
 8008b7c:	08008ba7 	.word	0x08008ba7
 8008b80:	08008bb7 	.word	0x08008bb7
 8008b84:	08008bb7 	.word	0x08008bb7
 8008b88:	08008bb7 	.word	0x08008bb7
 8008b8c:	08008baf 	.word	0x08008baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b90:	f7fd f95e 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008b94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b96:	e014      	b.n	8008bc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b98:	f7fd f970 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b9e:	e010      	b.n	8008bc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d0c <UART_SetConfig+0x594>)
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ba4:	e00d      	b.n	8008bc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ba6:	f7fd f8e5 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8008baa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bac:	e009      	b.n	8008bc2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bb4:	e005      	b.n	8008bc2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 8089 	beq.w	8008cdc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	4a4e      	ldr	r2, [pc, #312]	@ (8008d08 <UART_SetConfig+0x590>)
 8008bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bdc:	005a      	lsls	r2, r3, #1
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	085b      	lsrs	r3, r3, #1
 8008be4:	441a      	add	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b0f      	cmp	r3, #15
 8008bf4:	d916      	bls.n	8008c24 <UART_SetConfig+0x4ac>
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bfc:	d212      	bcs.n	8008c24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f023 030f 	bic.w	r3, r3, #15
 8008c06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	8bfb      	ldrh	r3, [r7, #30]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	8bfa      	ldrh	r2, [r7, #30]
 8008c20:	60da      	str	r2, [r3, #12]
 8008c22:	e05b      	b.n	8008cdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c2a:	e057      	b.n	8008cdc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d828      	bhi.n	8008c86 <UART_SetConfig+0x50e>
 8008c34:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <UART_SetConfig+0x4c4>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	08008c87 	.word	0x08008c87
 8008c4c:	08008c77 	.word	0x08008c77
 8008c50:	08008c87 	.word	0x08008c87
 8008c54:	08008c87 	.word	0x08008c87
 8008c58:	08008c87 	.word	0x08008c87
 8008c5c:	08008c7f 	.word	0x08008c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c60:	f7fd f8f6 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c66:	e014      	b.n	8008c92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c68:	f7fd f908 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008c6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c6e:	e010      	b.n	8008c92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c70:	4b26      	ldr	r3, [pc, #152]	@ (8008d0c <UART_SetConfig+0x594>)
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c74:	e00d      	b.n	8008c92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c76:	f7fd f87d 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8008c7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c7c:	e009      	b.n	8008c92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c84:	e005      	b.n	8008c92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c90:	bf00      	nop
    }

    if (pclk != 0U)
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d021      	beq.n	8008cdc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008d08 <UART_SetConfig+0x590>)
 8008c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	441a      	add	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d909      	bls.n	8008cd6 <UART_SetConfig+0x55e>
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc8:	d205      	bcs.n	8008cd6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	e002      	b.n	8008cdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cf8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3730      	adds	r7, #48	@ 0x30
 8008d00:	46bd      	mov	sp, r7
 8008d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d06:	bf00      	nop
 8008d08:	08009bf8 	.word	0x08009bf8
 8008d0c:	00f42400 	.word	0x00f42400

08008d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01a      	beq.n	8008e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e0e:	d10a      	bne.n	8008e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
  }
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b098      	sub	sp, #96	@ 0x60
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e64:	f7fb fb3a 	bl	80044dc <HAL_GetTick>
 8008e68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0308 	and.w	r3, r3, #8
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d12f      	bne.n	8008ed8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e80:	2200      	movs	r2, #0
 8008e82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f88e 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d022      	beq.n	8008ed8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ea6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e063      	b.n	8008fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d149      	bne.n	8008f7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f857 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d03c      	beq.n	8008f7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e6      	bne.n	8008f00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f52:	61fa      	str	r2, [r7, #28]
 8008f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	69b9      	ldr	r1, [r7, #24]
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e5      	bne.n	8008f32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e012      	b.n	8008fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3758      	adds	r7, #88	@ 0x58
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb8:	e04f      	b.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d04b      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc2:	f7fb fa8b 	bl	80044dc <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d302      	bcc.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e04e      	b.n	800907a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d037      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b80      	cmp	r3, #128	@ 0x80
 8008fee:	d034      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b40      	cmp	r3, #64	@ 0x40
 8008ff4:	d031      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f003 0308 	and.w	r3, r3, #8
 8009000:	2b08      	cmp	r3, #8
 8009002:	d110      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2208      	movs	r2, #8
 800900a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f879 	bl	8009104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2208      	movs	r2, #8
 8009016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e029      	b.n	800907a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009034:	d111      	bne.n	800905a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800903e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f85f 	bl	8009104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e00f      	b.n	800907a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4013      	ands	r3, r2
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	429a      	cmp	r2, r3
 8009068:	bf0c      	ite	eq
 800906a:	2301      	moveq	r3, #1
 800906c:	2300      	movne	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	429a      	cmp	r2, r3
 8009076:	d0a0      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009082:	b480      	push	{r7}
 8009084:	b08f      	sub	sp, #60	@ 0x3c
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	61fb      	str	r3, [r7, #28]
   return(result);
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800909e:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e6      	bne.n	800908a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80090d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3308      	adds	r3, #8
 80090da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090dc:	61ba      	str	r2, [r7, #24]
 80090de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6979      	ldr	r1, [r7, #20]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e5      	bne.n	80090bc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80090f8:	bf00      	nop
 80090fa:	373c      	adds	r7, #60	@ 0x3c
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b095      	sub	sp, #84	@ 0x54
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912a:	643b      	str	r3, [r7, #64]	@ 0x40
 800912c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e6      	bne.n	800910c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	61fb      	str	r3, [r7, #28]
   return(result);
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009154:	f023 0301 	bic.w	r3, r3, #1
 8009158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e3      	bne.n	800913e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d118      	bne.n	80091b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	60bb      	str	r3, [r7, #8]
   return(result);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 0310 	bic.w	r3, r3, #16
 8009192:	647b      	str	r3, [r7, #68]	@ 0x44
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6979      	ldr	r1, [r7, #20]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	613b      	str	r3, [r7, #16]
   return(result);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091c4:	bf00      	nop
 80091c6:	3754      	adds	r7, #84	@ 0x54
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b090      	sub	sp, #64	@ 0x40
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d137      	bne.n	800925c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80091ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	623b      	str	r3, [r7, #32]
   return(result);
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800920a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009214:	633a      	str	r2, [r7, #48]	@ 0x30
 8009216:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e5      	bne.n	80091f4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	60fb      	str	r3, [r7, #12]
   return(result);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
 800923e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	69b9      	ldr	r1, [r7, #24]
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	617b      	str	r3, [r7, #20]
   return(result);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e6      	bne.n	8009228 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800925a:	e002      	b.n	8009262 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800925c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800925e:	f7ff fa61 	bl	8008724 <HAL_UART_TxCpltCallback>
}
 8009262:	bf00      	nop
 8009264:	3740      	adds	r7, #64	@ 0x40
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fa5d 	bl	8008738 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009292:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800929a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092ae:	2b80      	cmp	r3, #128	@ 0x80
 80092b0:	d109      	bne.n	80092c6 <UART_DMAError+0x40>
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b21      	cmp	r3, #33	@ 0x21
 80092b6:	d106      	bne.n	80092c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f7ff fede 	bl	8009082 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	d109      	bne.n	80092e8 <UART_DMAError+0x62>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b22      	cmp	r3, #34	@ 0x22
 80092d8:	d106      	bne.n	80092e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff ff0e 	bl	8009104 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	f043 0210 	orr.w	r2, r3, #16
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f8:	6978      	ldr	r0, [r7, #20]
 80092fa:	f7ff fa27 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fe:	bf00      	nop
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff fa15 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b088      	sub	sp, #32
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6979      	ldr	r1, [r7, #20]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	613b      	str	r3, [r7, #16]
   return(result);
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff f9d6 	bl	8008724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009378:	bf00      	nop
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e027      	b.n	8009422 <HAL_UARTEx_DisableFifoMode+0x66>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2224      	movs	r2, #36	@ 0x24
 80093de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009400:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2220      	movs	r2, #32
 8009414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009442:	2302      	movs	r3, #2
 8009444:	e02d      	b.n	80094a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2224      	movs	r2, #36	@ 0x24
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0201 	bic.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f850 	bl	8009528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d101      	bne.n	80094c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094be:	2302      	movs	r3, #2
 80094c0:	e02d      	b.n	800951e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2224      	movs	r2, #36	@ 0x24
 80094ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f812 	bl	8009528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009534:	2b00      	cmp	r3, #0
 8009536:	d108      	bne.n	800954a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009548:	e031      	b.n	80095ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800954a:	2308      	movs	r3, #8
 800954c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800954e:	2308      	movs	r3, #8
 8009550:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	0e5b      	lsrs	r3, r3, #25
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	0f5b      	lsrs	r3, r3, #29
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0307 	and.w	r3, r3, #7
 8009570:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	7b3a      	ldrb	r2, [r7, #12]
 8009576:	4911      	ldr	r1, [pc, #68]	@ (80095bc <UARTEx_SetNbDataToProcess+0x94>)
 8009578:	5c8a      	ldrb	r2, [r1, r2]
 800957a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800957e:	7b3a      	ldrb	r2, [r7, #12]
 8009580:	490f      	ldr	r1, [pc, #60]	@ (80095c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009582:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009584:	fb93 f3f2 	sdiv	r3, r3, r2
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	7b7a      	ldrb	r2, [r7, #13]
 8009594:	4909      	ldr	r1, [pc, #36]	@ (80095bc <UARTEx_SetNbDataToProcess+0x94>)
 8009596:	5c8a      	ldrb	r2, [r1, r2]
 8009598:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800959c:	7b7a      	ldrb	r2, [r7, #13]
 800959e:	4908      	ldr	r1, [pc, #32]	@ (80095c0 <UARTEx_SetNbDataToProcess+0x98>)
 80095a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095ae:	bf00      	nop
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	08009c10 	.word	0x08009c10
 80095c0:	08009c18 	.word	0x08009c18

080095c4 <realloc>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	@ (80095d0 <realloc+0xc>)
 80095c6:	460a      	mov	r2, r1
 80095c8:	4601      	mov	r1, r0
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	f000 b802 	b.w	80095d4 <_realloc_r>
 80095d0:	20000010 	.word	0x20000010

080095d4 <_realloc_r>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	4680      	mov	r8, r0
 80095da:	4615      	mov	r5, r2
 80095dc:	460c      	mov	r4, r1
 80095de:	b921      	cbnz	r1, 80095ea <_realloc_r+0x16>
 80095e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e4:	4611      	mov	r1, r2
 80095e6:	f000 b8d1 	b.w	800978c <_malloc_r>
 80095ea:	b92a      	cbnz	r2, 80095f8 <_realloc_r+0x24>
 80095ec:	f000 f862 	bl	80096b4 <_free_r>
 80095f0:	2400      	movs	r4, #0
 80095f2:	4620      	mov	r0, r4
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	f000 f954 	bl	80098a4 <_malloc_usable_size_r>
 80095fc:	4285      	cmp	r5, r0
 80095fe:	4606      	mov	r6, r0
 8009600:	d802      	bhi.n	8009608 <_realloc_r+0x34>
 8009602:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009606:	d8f4      	bhi.n	80095f2 <_realloc_r+0x1e>
 8009608:	4629      	mov	r1, r5
 800960a:	4640      	mov	r0, r8
 800960c:	f000 f8be 	bl	800978c <_malloc_r>
 8009610:	4607      	mov	r7, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d0ec      	beq.n	80095f0 <_realloc_r+0x1c>
 8009616:	42b5      	cmp	r5, r6
 8009618:	462a      	mov	r2, r5
 800961a:	4621      	mov	r1, r4
 800961c:	bf28      	it	cs
 800961e:	4632      	movcs	r2, r6
 8009620:	f000 f83a 	bl	8009698 <memcpy>
 8009624:	4621      	mov	r1, r4
 8009626:	4640      	mov	r0, r8
 8009628:	f000 f844 	bl	80096b4 <_free_r>
 800962c:	463c      	mov	r4, r7
 800962e:	e7e0      	b.n	80095f2 <_realloc_r+0x1e>

08009630 <memset>:
 8009630:	4402      	add	r2, r0
 8009632:	4603      	mov	r3, r0
 8009634:	4293      	cmp	r3, r2
 8009636:	d100      	bne.n	800963a <memset+0xa>
 8009638:	4770      	bx	lr
 800963a:	f803 1b01 	strb.w	r1, [r3], #1
 800963e:	e7f9      	b.n	8009634 <memset+0x4>

08009640 <__errno>:
 8009640:	4b01      	ldr	r3, [pc, #4]	@ (8009648 <__errno+0x8>)
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000010 	.word	0x20000010

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4d0d      	ldr	r5, [pc, #52]	@ (8009684 <__libc_init_array+0x38>)
 8009650:	4c0d      	ldr	r4, [pc, #52]	@ (8009688 <__libc_init_array+0x3c>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	2600      	movs	r6, #0
 8009658:	42a6      	cmp	r6, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	4d0b      	ldr	r5, [pc, #44]	@ (800968c <__libc_init_array+0x40>)
 800965e:	4c0c      	ldr	r4, [pc, #48]	@ (8009690 <__libc_init_array+0x44>)
 8009660:	f000 f938 	bl	80098d4 <_init>
 8009664:	1b64      	subs	r4, r4, r5
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	2600      	movs	r6, #0
 800966a:	42a6      	cmp	r6, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f855 3b04 	ldr.w	r3, [r5], #4
 8009674:	4798      	blx	r3
 8009676:	3601      	adds	r6, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f855 3b04 	ldr.w	r3, [r5], #4
 800967e:	4798      	blx	r3
 8009680:	3601      	adds	r6, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	08009c28 	.word	0x08009c28
 8009688:	08009c28 	.word	0x08009c28
 800968c:	08009c28 	.word	0x08009c28
 8009690:	08009c34 	.word	0x08009c34

08009694 <__retarget_lock_acquire_recursive>:
 8009694:	4770      	bx	lr

08009696 <__retarget_lock_release_recursive>:
 8009696:	4770      	bx	lr

08009698 <memcpy>:
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a0:	d100      	bne.n	80096a4 <memcpy+0xc>
 80096a2:	4770      	bx	lr
 80096a4:	b510      	push	{r4, lr}
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d1f9      	bne.n	80096a6 <memcpy+0xe>
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <_free_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4605      	mov	r5, r0
 80096b8:	2900      	cmp	r1, #0
 80096ba:	d041      	beq.n	8009740 <_free_r+0x8c>
 80096bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c0:	1f0c      	subs	r4, r1, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfb8      	it	lt
 80096c6:	18e4      	addlt	r4, r4, r3
 80096c8:	f000 f8e0 	bl	800988c <__malloc_lock>
 80096cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009744 <_free_r+0x90>)
 80096ce:	6813      	ldr	r3, [r2, #0]
 80096d0:	b933      	cbnz	r3, 80096e0 <_free_r+0x2c>
 80096d2:	6063      	str	r3, [r4, #4]
 80096d4:	6014      	str	r4, [r2, #0]
 80096d6:	4628      	mov	r0, r5
 80096d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096dc:	f000 b8dc 	b.w	8009898 <__malloc_unlock>
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d908      	bls.n	80096f6 <_free_r+0x42>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	1821      	adds	r1, r4, r0
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf01      	itttt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	1809      	addeq	r1, r1, r0
 80096f2:	6021      	streq	r1, [r4, #0]
 80096f4:	e7ed      	b.n	80096d2 <_free_r+0x1e>
 80096f6:	461a      	mov	r2, r3
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	b10b      	cbz	r3, 8009700 <_free_r+0x4c>
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d9fa      	bls.n	80096f6 <_free_r+0x42>
 8009700:	6811      	ldr	r1, [r2, #0]
 8009702:	1850      	adds	r0, r2, r1
 8009704:	42a0      	cmp	r0, r4
 8009706:	d10b      	bne.n	8009720 <_free_r+0x6c>
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	4401      	add	r1, r0
 800970c:	1850      	adds	r0, r2, r1
 800970e:	4283      	cmp	r3, r0
 8009710:	6011      	str	r1, [r2, #0]
 8009712:	d1e0      	bne.n	80096d6 <_free_r+0x22>
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	6053      	str	r3, [r2, #4]
 800971a:	4408      	add	r0, r1
 800971c:	6010      	str	r0, [r2, #0]
 800971e:	e7da      	b.n	80096d6 <_free_r+0x22>
 8009720:	d902      	bls.n	8009728 <_free_r+0x74>
 8009722:	230c      	movs	r3, #12
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	e7d6      	b.n	80096d6 <_free_r+0x22>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	1821      	adds	r1, r4, r0
 800972c:	428b      	cmp	r3, r1
 800972e:	bf04      	itt	eq
 8009730:	6819      	ldreq	r1, [r3, #0]
 8009732:	685b      	ldreq	r3, [r3, #4]
 8009734:	6063      	str	r3, [r4, #4]
 8009736:	bf04      	itt	eq
 8009738:	1809      	addeq	r1, r1, r0
 800973a:	6021      	streq	r1, [r4, #0]
 800973c:	6054      	str	r4, [r2, #4]
 800973e:	e7ca      	b.n	80096d6 <_free_r+0x22>
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	bf00      	nop
 8009744:	20001bfc 	.word	0x20001bfc

08009748 <sbrk_aligned>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	4e0f      	ldr	r6, [pc, #60]	@ (8009788 <sbrk_aligned+0x40>)
 800974c:	460c      	mov	r4, r1
 800974e:	6831      	ldr	r1, [r6, #0]
 8009750:	4605      	mov	r5, r0
 8009752:	b911      	cbnz	r1, 800975a <sbrk_aligned+0x12>
 8009754:	f000 f8ae 	bl	80098b4 <_sbrk_r>
 8009758:	6030      	str	r0, [r6, #0]
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f000 f8a9 	bl	80098b4 <_sbrk_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d103      	bne.n	800976e <sbrk_aligned+0x26>
 8009766:	f04f 34ff 	mov.w	r4, #4294967295
 800976a:	4620      	mov	r0, r4
 800976c:	bd70      	pop	{r4, r5, r6, pc}
 800976e:	1cc4      	adds	r4, r0, #3
 8009770:	f024 0403 	bic.w	r4, r4, #3
 8009774:	42a0      	cmp	r0, r4
 8009776:	d0f8      	beq.n	800976a <sbrk_aligned+0x22>
 8009778:	1a21      	subs	r1, r4, r0
 800977a:	4628      	mov	r0, r5
 800977c:	f000 f89a 	bl	80098b4 <_sbrk_r>
 8009780:	3001      	adds	r0, #1
 8009782:	d1f2      	bne.n	800976a <sbrk_aligned+0x22>
 8009784:	e7ef      	b.n	8009766 <sbrk_aligned+0x1e>
 8009786:	bf00      	nop
 8009788:	20001bf8 	.word	0x20001bf8

0800978c <_malloc_r>:
 800978c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009790:	1ccd      	adds	r5, r1, #3
 8009792:	f025 0503 	bic.w	r5, r5, #3
 8009796:	3508      	adds	r5, #8
 8009798:	2d0c      	cmp	r5, #12
 800979a:	bf38      	it	cc
 800979c:	250c      	movcc	r5, #12
 800979e:	2d00      	cmp	r5, #0
 80097a0:	4606      	mov	r6, r0
 80097a2:	db01      	blt.n	80097a8 <_malloc_r+0x1c>
 80097a4:	42a9      	cmp	r1, r5
 80097a6:	d904      	bls.n	80097b2 <_malloc_r+0x26>
 80097a8:	230c      	movs	r3, #12
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009888 <_malloc_r+0xfc>
 80097b6:	f000 f869 	bl	800988c <__malloc_lock>
 80097ba:	f8d8 3000 	ldr.w	r3, [r8]
 80097be:	461c      	mov	r4, r3
 80097c0:	bb44      	cbnz	r4, 8009814 <_malloc_r+0x88>
 80097c2:	4629      	mov	r1, r5
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff ffbf 	bl	8009748 <sbrk_aligned>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	4604      	mov	r4, r0
 80097ce:	d158      	bne.n	8009882 <_malloc_r+0xf6>
 80097d0:	f8d8 4000 	ldr.w	r4, [r8]
 80097d4:	4627      	mov	r7, r4
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d143      	bne.n	8009862 <_malloc_r+0xd6>
 80097da:	2c00      	cmp	r4, #0
 80097dc:	d04b      	beq.n	8009876 <_malloc_r+0xea>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	4639      	mov	r1, r7
 80097e2:	4630      	mov	r0, r6
 80097e4:	eb04 0903 	add.w	r9, r4, r3
 80097e8:	f000 f864 	bl	80098b4 <_sbrk_r>
 80097ec:	4581      	cmp	r9, r0
 80097ee:	d142      	bne.n	8009876 <_malloc_r+0xea>
 80097f0:	6821      	ldr	r1, [r4, #0]
 80097f2:	1a6d      	subs	r5, r5, r1
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ffa6 	bl	8009748 <sbrk_aligned>
 80097fc:	3001      	adds	r0, #1
 80097fe:	d03a      	beq.n	8009876 <_malloc_r+0xea>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	442b      	add	r3, r5
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	f8d8 3000 	ldr.w	r3, [r8]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	bb62      	cbnz	r2, 8009868 <_malloc_r+0xdc>
 800980e:	f8c8 7000 	str.w	r7, [r8]
 8009812:	e00f      	b.n	8009834 <_malloc_r+0xa8>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	1b52      	subs	r2, r2, r5
 8009818:	d420      	bmi.n	800985c <_malloc_r+0xd0>
 800981a:	2a0b      	cmp	r2, #11
 800981c:	d917      	bls.n	800984e <_malloc_r+0xc2>
 800981e:	1961      	adds	r1, r4, r5
 8009820:	42a3      	cmp	r3, r4
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	6059      	strne	r1, [r3, #4]
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	bf08      	it	eq
 800982c:	f8c8 1000 	streq.w	r1, [r8]
 8009830:	5162      	str	r2, [r4, r5]
 8009832:	604b      	str	r3, [r1, #4]
 8009834:	4630      	mov	r0, r6
 8009836:	f000 f82f 	bl	8009898 <__malloc_unlock>
 800983a:	f104 000b 	add.w	r0, r4, #11
 800983e:	1d23      	adds	r3, r4, #4
 8009840:	f020 0007 	bic.w	r0, r0, #7
 8009844:	1ac2      	subs	r2, r0, r3
 8009846:	bf1c      	itt	ne
 8009848:	1a1b      	subne	r3, r3, r0
 800984a:	50a3      	strne	r3, [r4, r2]
 800984c:	e7af      	b.n	80097ae <_malloc_r+0x22>
 800984e:	6862      	ldr	r2, [r4, #4]
 8009850:	42a3      	cmp	r3, r4
 8009852:	bf0c      	ite	eq
 8009854:	f8c8 2000 	streq.w	r2, [r8]
 8009858:	605a      	strne	r2, [r3, #4]
 800985a:	e7eb      	b.n	8009834 <_malloc_r+0xa8>
 800985c:	4623      	mov	r3, r4
 800985e:	6864      	ldr	r4, [r4, #4]
 8009860:	e7ae      	b.n	80097c0 <_malloc_r+0x34>
 8009862:	463c      	mov	r4, r7
 8009864:	687f      	ldr	r7, [r7, #4]
 8009866:	e7b6      	b.n	80097d6 <_malloc_r+0x4a>
 8009868:	461a      	mov	r2, r3
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	42a3      	cmp	r3, r4
 800986e:	d1fb      	bne.n	8009868 <_malloc_r+0xdc>
 8009870:	2300      	movs	r3, #0
 8009872:	6053      	str	r3, [r2, #4]
 8009874:	e7de      	b.n	8009834 <_malloc_r+0xa8>
 8009876:	230c      	movs	r3, #12
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	4630      	mov	r0, r6
 800987c:	f000 f80c 	bl	8009898 <__malloc_unlock>
 8009880:	e794      	b.n	80097ac <_malloc_r+0x20>
 8009882:	6005      	str	r5, [r0, #0]
 8009884:	e7d6      	b.n	8009834 <_malloc_r+0xa8>
 8009886:	bf00      	nop
 8009888:	20001bfc 	.word	0x20001bfc

0800988c <__malloc_lock>:
 800988c:	4801      	ldr	r0, [pc, #4]	@ (8009894 <__malloc_lock+0x8>)
 800988e:	f7ff bf01 	b.w	8009694 <__retarget_lock_acquire_recursive>
 8009892:	bf00      	nop
 8009894:	20001bf4 	.word	0x20001bf4

08009898 <__malloc_unlock>:
 8009898:	4801      	ldr	r0, [pc, #4]	@ (80098a0 <__malloc_unlock+0x8>)
 800989a:	f7ff befc 	b.w	8009696 <__retarget_lock_release_recursive>
 800989e:	bf00      	nop
 80098a0:	20001bf4 	.word	0x20001bf4

080098a4 <_malloc_usable_size_r>:
 80098a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a8:	1f18      	subs	r0, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfbc      	itt	lt
 80098ae:	580b      	ldrlt	r3, [r1, r0]
 80098b0:	18c0      	addlt	r0, r0, r3
 80098b2:	4770      	bx	lr

080098b4 <_sbrk_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d06      	ldr	r5, [pc, #24]	@ (80098d0 <_sbrk_r+0x1c>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	602b      	str	r3, [r5, #0]
 80098c0:	f7fa fd36 	bl	8004330 <_sbrk>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_sbrk_r+0x1a>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_sbrk_r+0x1a>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	20001bf0 	.word	0x20001bf0

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
