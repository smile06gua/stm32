
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af94  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b16c  0800b16c  0000c16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b580  0800b580  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b580  0800b580  0000c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b588  0800b588  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b588  0800b588  0000c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b594  0800b594  0000c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b598  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  20000070  0800b608  0000d070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d64  0800b608  0000dd64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d7a  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000445c  00000000  00000000  00030e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00035278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001363  00000000  00000000  00036b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  00037e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6b6  00000000  00000000  00058d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d009a  00000000  00000000  000783c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  001484a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b154 	.word	0x0800b154

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b154 	.word	0x0800b154

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b96a 	b.w	8000eb0 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14e      	bne.n	8000c9e <__udivmoddi4+0xaa>
 8000c00:	4694      	mov	ip, r2
 8000c02:	458c      	cmp	ip, r1
 8000c04:	4686      	mov	lr, r0
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	d962      	bls.n	8000cd2 <__udivmoddi4+0xde>
 8000c0c:	b14a      	cbz	r2, 8000c22 <__udivmoddi4+0x2e>
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	4091      	lsls	r1, r2
 8000c14:	fa20 f303 	lsr.w	r3, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f f68c 	uxth.w	r6, ip
 8000c2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	fb07 1114 	mls	r1, r7, r4, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb04 f106 	mul.w	r1, r4, r6
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x64>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4a:	f080 8112 	bcs.w	8000e72 <__udivmoddi4+0x27e>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 810f 	bls.w	8000e72 <__udivmoddi4+0x27e>
 8000c54:	3c02      	subs	r4, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c62:	fb07 1110 	mls	r1, r7, r0, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f606 	mul.w	r6, r0, r6
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7a:	f080 80fc 	bcs.w	8000e76 <__udivmoddi4+0x282>
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	f240 80f9 	bls.w	8000e76 <__udivmoddi4+0x282>
 8000c84:	4463      	add	r3, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa6>
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xba>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb4>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x150>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xcc>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f0c0 80f0 	bcc.w	8000ea0 <__udivmoddi4+0x2ac>
 8000cc0:	1a86      	subs	r6, r0, r2
 8000cc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d0e6      	beq.n	8000c9a <__udivmoddi4+0xa6>
 8000ccc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd0:	e7e3      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x204>
 8000cd8:	eba1 040c 	sub.w	r4, r1, ip
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cee:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb07 f006 	mul.w	r0, r7, r6
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x11c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x11a>
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d0e:	4626      	mov	r6, r4
 8000d10:	1a1c      	subs	r4, r3, r0
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	429f      	cmp	r7, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x148>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x146>
 8000d34:	429f      	cmp	r7, r3
 8000d36:	f200 80b0 	bhi.w	8000e9a <__udivmoddi4+0x2a6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	1bdb      	subs	r3, r3, r7
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x9c>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d54:	fa04 f301 	lsl.w	r3, r4, r1
 8000d58:	ea43 030c 	orr.w	r3, r3, ip
 8000d5c:	40f4      	lsrs	r4, r6
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	0c38      	lsrs	r0, r7, #16
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb4 fef0 	udiv	lr, r4, r0
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	fb00 441e 	mls	r4, r0, lr, r4
 8000d74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d78:	fb0e f90c 	mul.w	r9, lr, ip
 8000d7c:	45a1      	cmp	r9, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x1a6>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8a:	f080 8084 	bcs.w	8000e96 <__udivmoddi4+0x2a2>
 8000d8e:	45a1      	cmp	r9, r4
 8000d90:	f240 8081 	bls.w	8000e96 <__udivmoddi4+0x2a2>
 8000d94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da6:	fb00 4413 	mls	r4, r0, r3, r4
 8000daa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1d2>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dbc:	d267      	bcs.n	8000e8e <__udivmoddi4+0x29a>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d965      	bls.n	8000e8e <__udivmoddi4+0x29a>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dca:	fba0 9302 	umull	r9, r3, r0, r2
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	46ce      	mov	lr, r9
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	d351      	bcc.n	8000e7e <__udivmoddi4+0x28a>
 8000dda:	d04e      	beq.n	8000e7a <__udivmoddi4+0x286>
 8000ddc:	b155      	cbz	r5, 8000df4 <__udivmoddi4+0x200>
 8000dde:	ebb8 030e 	subs.w	r3, r8, lr
 8000de2:	eb64 040c 	sbc.w	r4, r4, ip
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	40cb      	lsrs	r3, r1
 8000dec:	431e      	orrs	r6, r3
 8000dee:	40cc      	lsrs	r4, r1
 8000df0:	e9c5 6400 	strd	r6, r4, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	e750      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa24 f303 	lsr.w	r3, r4, r3
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb00 f107 	mul.w	r1, r0, r7
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x24c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e36:	d22c      	bcs.n	8000e92 <__udivmoddi4+0x29e>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d92a      	bls.n	8000e92 <__udivmoddi4+0x29e>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e48:	fb08 3311 	mls	r3, r8, r1, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb01 f307 	mul.w	r3, r1, r7
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x276>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e60:	d213      	bcs.n	8000e8a <__udivmoddi4+0x296>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d911      	bls.n	8000e8a <__udivmoddi4+0x296>
 8000e66:	3902      	subs	r1, #2
 8000e68:	4464      	add	r4, ip
 8000e6a:	1ae4      	subs	r4, r4, r3
 8000e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e70:	e739      	b.n	8000ce6 <__udivmoddi4+0xf2>
 8000e72:	4604      	mov	r4, r0
 8000e74:	e6f0      	b.n	8000c58 <__udivmoddi4+0x64>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e7a:	45c8      	cmp	r8, r9
 8000e7c:	d2ae      	bcs.n	8000ddc <__udivmoddi4+0x1e8>
 8000e7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7a8      	b.n	8000ddc <__udivmoddi4+0x1e8>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	e7ed      	b.n	8000e6a <__udivmoddi4+0x276>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e799      	b.n	8000dc6 <__udivmoddi4+0x1d2>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e7d4      	b.n	8000e40 <__udivmoddi4+0x24c>
 8000e96:	46d6      	mov	lr, sl
 8000e98:	e77f      	b.n	8000d9a <__udivmoddi4+0x1a6>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74d      	b.n	8000d3c <__udivmoddi4+0x148>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70f      	b.n	8000cc8 <__udivmoddi4+0xd4>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	e730      	b.n	8000d10 <__udivmoddi4+0x11c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a5a      	lsrs	r2, r3, #9
 8000ec4:	490f      	ldr	r1, [pc, #60]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ec6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eca:	09d2      	lsrs	r2, r2, #7
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09db      	lsrs	r3, r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	00044b83 	.word	0x00044b83
 8000f08:	3b9aca00 	.word	0x3b9aca00

08000f0c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <_ZN8DC_motor6PI_runEv+0x8c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	e012      	b.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eef1 7a67 	vneg.f32	s15, s15
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d506      	bpl.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eef1 7a67 	vneg.f32	s15, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd03      	ble.n	800101c <_ZN8DC_motor6PI_runEv+0x110>
 8001014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d501      	bpl.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <_ZN8DC_motor6PI_runEv+0x27c>)
 8001030:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa57 	bl	80004f0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa3e 	bl	80004cc <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001072:	2b01      	cmp	r3, #1
 8001074:	d124      	bne.n	80010c0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd09      	ble.n	8001098 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f005 fa8f 	bl	80065b4 <HAL_GPIO_WritePin>
 8001096:	e03c      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d509      	bpl.n	80010ba <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f005 fa7e 	bl	80065b4 <HAL_GPIO_WritePin>
 80010b8:	e02b      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e028      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd09      	ble.n	80010ec <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f005 fa65 	bl	80065b4 <HAL_GPIO_WritePin>
 80010ea:	e012      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fa54 	bl	80065b4 <HAL_GPIO_WritePin>
 800110c:	e001      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <_ZN8DC_motor6PI_runEv+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001124:	e02c      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <_ZN8DC_motor6PI_runEv+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	e022      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <_ZN8DC_motor6PI_runEv+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800114c:	e018      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d105      	bne.n	8001162 <_ZN8DC_motor6PI_runEv+0x256>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e00e      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001166:	2b10      	cmp	r3, #16
 8001168:	d105      	bne.n	8001176 <_ZN8DC_motor6PI_runEv+0x26a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001174:	e004      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	bf800000 	.word	0xbf800000

0800118c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a07 	vldr	s14, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SetCounter(enc_htim,0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000054c 	.word	0x2000054c

08001240 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f006 fd2a 	bl	8007cac <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f006 ff16 	bl	8008090 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f006 ff10 	bl	8008090 <HAL_TIM_Encoder_Start>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN8DC_motor8heightToEf>:
    this->resolution = resolution;
}

// 控cascade lift

void DC_motor::heightTo(float high){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	ed87 0a00 	vstr	s0, [r7]
	//height = 25 + turn * mm_per_turn;
	//target_turns = 0.0f;
	if(high != 0){
 8001284:	edd7 7a00 	vldr	s15, [r7]
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	f000 80a7 	beq.w	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		if(high >= height){
 8001294:	4b58      	ldr	r3, [pc, #352]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed97 7a00 	vldr	s14, [r7]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	db14      	blt.n	80012d2 <_ZN8DC_motor8heightToEf+0x5a>
			target_turns = turn + ( (high - height )/ mm_per_turn );
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ed97 7a00 	vldr	s14, [r7]
 80012b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
 80012d0:	e039      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
		}
		else{
			target_turns = turn - ( (height - high ) / mm_per_turn );
 80012d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012e8:	edd3 6a00 	vldr	s13, [r3]
 80012ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
		}

		while(turn < target_turns && high1 != 0){
 80012fa:	e024      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
			if(fabs(target_turns - turn) < 0.001){
 80012fc:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	eef0 7ae7 	vabs.f32	s15, s15
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f8ec 	bl	80004f0 <__aeabi_f2d>
 8001318:	a335      	add	r3, pc, #212	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff fbb1 	bl	8000a84 <__aeabi_dcmplt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <_ZN8DC_motor8heightToEf+0xc4>
				//target_turns = 0;
				high1 = 0;
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				setspeed(0);
 8001330:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 800133a:	e017      	b.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
			}
			else{
				setspeed(0.1);
 800133c:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001410 <_ZN8DC_motor8heightToEf+0x198>
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff23 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn < target_turns && high1 != 0){
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d507      	bpl.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
 800135c:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d1c7      	bne.n	80012fc <_ZN8DC_motor8heightToEf+0x84>
			}
		}
		while(turn > target_turns && high1 != 0){
 800136c:	e025      	b.n	80013ba <_ZN8DC_motor8heightToEf+0x142>
			if(fabs(target_turns - turn) < 0.001){
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137e:	eef0 7ae7 	vabs.f32	s15, s15
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff f8b3 	bl	80004f0 <__aeabi_f2d>
 800138a:	a319      	add	r3, pc, #100	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fb78 	bl	8000a84 <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <_ZN8DC_motor8heightToEf+0x138>
				//target_turns = 0;
				high1 = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
				setspeed(0);
 80013a2:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fef0 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 80013ac:	bf00      	nop

		}
	}

	//setspeed(0);
}
 80013ae:	e018      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
				setspeed(-0.1);
 80013b0:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001414 <_ZN8DC_motor8heightToEf+0x19c>
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fee9 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn > target_turns && high1 != 0){
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dc00      	bgt.n	80013d2 <_ZN8DC_motor8heightToEf+0x15a>
}
 80013d0:	e007      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		while(turn > target_turns && high1 != 0){
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d1c5      	bne.n	800136e <_ZN8DC_motor8heightToEf+0xf6>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	2000056c 	.word	0x2000056c
 80013fc:	20000568 	.word	0x20000568
 8001400:	2000054c 	.word	0x2000054c
 8001404:	20000570 	.word	0x20000570
 8001408:	20000558 	.word	0x20000558
 800140c:	00000000 	.word	0x00000000
 8001410:	3dcccccd 	.word	0x3dcccccd
 8001414:	bdcccccd 	.word	0xbdcccccd

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141c:	f004 fa7d 	bl	800591a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f81a 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f000 fbd8 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001428:	f000 fba4 	bl	8001b74 <MX_DMA_Init>
  MX_TIM1_Init();
 800142c:	f000 f894 	bl	8001558 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001430:	f000 f94a 	bl	80016c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001434:	f000 f996 	bl	8001764 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001438:	f000 f9fa 	bl	8001830 <MX_TIM4_Init>
  MX_TIM8_Init();
 800143c:	f000 faba 	bl	80019b4 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001440:	f000 f84a 	bl	80014d8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001444:	f000 fa4a 	bl	80018dc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001448:	f000 fa7e 	bl	8001948 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800144c:	f000 fb46 	bl	8001adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001450:	f000 fdb8 	bl	8001fc4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <main+0x3c>

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2238      	movs	r2, #56	@ 0x38
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f009 fd22 	bl	800aeb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147e:	f005 f9fb 	bl	8006878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2340      	movs	r3, #64	@ 0x40
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f005 faa1 	bl	80069e0 <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a4:	f000 fc3e 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fd9f 	bl	8007004 <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014cc:	f000 fc2a 	bl	8001d24 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	@ 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_I2C1_Init+0x74>)
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <MX_I2C1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_I2C1_Init+0x74>)
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <MX_I2C1_Init+0x7c>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_I2C1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001512:	480e      	ldr	r0, [pc, #56]	@ (800154c <MX_I2C1_Init+0x74>)
 8001514:	f005 f87e 	bl	8006614 <HAL_I2C_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151e:	f000 fc01 	bl	8001d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	4809      	ldr	r0, [pc, #36]	@ (800154c <MX_I2C1_Init+0x74>)
 8001526:	f005 f910 	bl	800674a <HAL_I2CEx_ConfigAnalogFilter>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 fbf8 	bl	8001d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_I2C1_Init+0x74>)
 8001538:	f005 f952 	bl	80067e0 <HAL_I2CEx_ConfigDigitalFilter>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fbef 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000008c 	.word	0x2000008c
 8001550:	40005400 	.word	0x40005400
 8001554:	00503d58 	.word	0x00503d58

08001558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b098      	sub	sp, #96	@ 0x60
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2234      	movs	r2, #52	@ 0x34
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fc93 	bl	800aeb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158a:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800158c:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <MX_TIM1_Init+0x16c>)
 800158e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001590:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001592:	220f      	movs	r2, #15
 8001594:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800159c:	4b48      	ldr	r3, [pc, #288]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800159e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b6:	4842      	ldr	r0, [pc, #264]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015b8:	f006 fa21 	bl	80079fe <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f000 fbaf 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d6:	4619      	mov	r1, r3
 80015d8:	4839      	ldr	r0, [pc, #228]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80015da:	f007 fdc1 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 fb9e 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	482c      	ldr	r0, [pc, #176]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800160e:	f006 ff1d 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001618:	f000 fb84 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001620:	2204      	movs	r2, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4826      	ldr	r0, [pc, #152]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001626:	f006 ff11 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001630:	f000 fb78 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001634:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <MX_TIM1_Init+0x168>)
 800163e:	f006 ff05 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001648:	f000 fb6c 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800164c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001650:	220c      	movs	r2, #12
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <MX_TIM1_Init+0x168>)
 8001656:	f006 fef9 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001660:	f000 fb60 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800168a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016a2:	f007 fddf 	bl	8009264 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80016ac:	f000 fb3a 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM1_Init+0x168>)
 80016b2:	f003 febf 	bl	8005434 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3760      	adds	r7, #96	@ 0x60
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000e0 	.word	0x200000e0
 80016c4:	40012c00 	.word	0x40012c00

080016c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016f0:	220f      	movs	r2, #15
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM2_Init+0x98>)
 80016fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170e:	4814      	ldr	r0, [pc, #80]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001710:	f006 f884 	bl	800781c <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800171a:	f000 fb03 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_TIM2_Init+0x98>)
 800172c:	f006 ffa2 	bl	8008674 <HAL_TIM_ConfigClockSource>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001736:	f000 faf5 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <MX_TIM2_Init+0x98>)
 8001748:	f007 fd0a 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001752:	f000 fae7 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000012c 	.word	0x2000012c

08001764 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800178a:	4a28      	ldr	r2, [pc, #160]	@ (800182c <MX_TIM3_Init+0xc8>)
 800178c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_TIM3_Init+0xc4>)
 8001790:	220f      	movs	r2, #15
 8001792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <MX_TIM3_Init+0xc4>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800179c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80017a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017ae:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017b0:	f006 f925 	bl	80079fe <HAL_TIM_PWM_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017ba:	f000 fab3 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4816      	ldr	r0, [pc, #88]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017ce:	f007 fcc7 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017d8:	f000 faa4 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017dc:	2360      	movs	r3, #96	@ 0x60
 80017de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_TIM3_Init+0xc4>)
 80017f4:	f006 fe2a 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80017fe:	f000 fa91 	bl	8001d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	2204      	movs	r2, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800180a:	f006 fe1f 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001814:	f000 fa86 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <MX_TIM3_Init+0xc4>)
 800181a:	f003 fe0b 	bl	8005434 <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	@ 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000178 	.word	0x20000178
 800182c:	40000400 	.word	0x40000400

08001830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2224      	movs	r2, #36	@ 0x24
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f009 fb36 	bl	800aeb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001850:	4a21      	ldr	r2, [pc, #132]	@ (80018d8 <MX_TIM4_Init+0xa8>)
 8001852:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001860:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001874:	2303      	movs	r3, #3
 8001876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 80018a0:	f006 fb50 	bl	8007f44 <HAL_TIM_Encoder_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018aa:	f000 fa3b 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_TIM4_Init+0xa4>)
 80018bc:	f007 fc50 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018c6:	f000 fa2d 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001c4 	.word	0x200001c4
 80018d8:	40000800 	.word	0x40000800

080018dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018ee:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <MX_TIM6_Init+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018f4:	220f      	movs	r2, #15
 80018f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_TIM6_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <MX_TIM6_Init+0x64>)
 8001900:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001904:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_TIM6_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <MX_TIM6_Init+0x64>)
 800190e:	f005 ff85 	bl	800781c <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001918:	f000 fa04 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_TIM6_Init+0x64>)
 800192a:	f007 fc19 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001934:	f000 f9f6 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000210 	.word	0x20000210
 8001944:	40001000 	.word	0x40001000

08001948 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_TIM7_Init+0x64>)
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <MX_TIM7_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001960:	220f      	movs	r2, #15
 8001962:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <MX_TIM7_Init+0x64>)
 800196c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001970:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM7_Init+0x64>)
 800197a:	f005 ff4f 	bl	800781c <HAL_TIM_Base_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001984:	f000 f9ce 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM7_Init+0x64>)
 8001996:	f007 fbe3 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019a0:	f000 f9c0 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000025c 	.word	0x2000025c
 80019b0:	40001400 	.word	0x40001400

080019b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b098      	sub	sp, #96	@ 0x60
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2234      	movs	r2, #52	@ 0x34
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f009 fa65 	bl	800aeb0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019e8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad8 <MX_TIM8_Init+0x124>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019ee:	220f      	movs	r2, #15
 80019f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 80019fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a12:	4830      	ldr	r0, [pc, #192]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a14:	f005 fff3 	bl	80079fe <HAL_TIM_PWM_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 f981 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a32:	4619      	mov	r1, r3
 8001a34:	4827      	ldr	r0, [pc, #156]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a36:	f007 fb93 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a40:	f000 f970 	bl	8001d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	2360      	movs	r3, #96	@ 0x60
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a64:	2204      	movs	r2, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	481a      	ldr	r0, [pc, #104]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001a6a:	f006 fcef 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a74:	f000 f956 	bl	8001d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001ab6:	f007 fbd5 	bl	8009264 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ac0:	f000 f930 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_TIM8_Init+0x120>)
 8001ac6:	f003 fcb5 	bl	8005434 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3760      	adds	r7, #96	@ 0x60
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002a8 	.word	0x200002a8
 8001ad8:	40013400 	.word	0x40013400

08001adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <MX_USART2_UART_Init+0x94>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b24:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b26:	f007 fc6f 	bl	8009408 <HAL_UART_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b30:	f000 f8f8 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b38:	f009 f8b9 	bl	800acae <HAL_UARTEx_SetTxFifoThreshold>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b42:	f000 f8ef 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b4a:	f009 f8ee 	bl	800ad2a <HAL_UARTEx_SetRxFifoThreshold>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b54:	f000 f8e6 	bl	8001d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b58:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <MX_USART2_UART_Init+0x90>)
 8001b5a:	f009 f86f 	bl	800ac3c <HAL_UARTEx_DisableFifoMode>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f000 f8de 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200002f4 	.word	0x200002f4
 8001b70:	40004400 	.word	0x40004400

08001b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7e:	4a15      	ldr	r2, [pc, #84]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_DMA_Init+0x60>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	200d      	movs	r0, #13
 8001bb0:	f003 ffff 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bb4:	200d      	movs	r0, #13
 8001bb6:	f004 f816 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	200e      	movs	r0, #14
 8001bc0:	f003 fff7 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bc4:	200e      	movs	r0, #14
 8001bc6:	f004 f80e 	bl	8005be6 <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfa:	4b48      	ldr	r3, [pc, #288]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b45      	ldr	r3, [pc, #276]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a3e      	ldr	r2, [pc, #248]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b39      	ldr	r3, [pc, #228]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a38      	ldr	r2, [pc, #224]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <MX_GPIO_Init+0x144>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f240 4103 	movw	r1, #1027	@ 0x403
 8001c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c58:	f004 fcac 	bl	80065b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001c5c:	f240 4303 	movw	r3, #1027	@ 0x403
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f004 fb02 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8001c7c:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 8001c80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c82:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c96:	f004 faf3 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8001c9a:	f243 0308 	movw	r3, #12296	@ 0x3008
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481b      	ldr	r0, [pc, #108]	@ (8001d20 <MX_GPIO_Init+0x148>)
 8001cb2:	f004 fae5 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cb6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4814      	ldr	r0, [pc, #80]	@ (8001d20 <MX_GPIO_Init+0x148>)
 8001cce:	f004 fad7 	bl	8006280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2009      	movs	r0, #9
 8001cd8:	f003 ff6b 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001cdc:	2009      	movs	r0, #9
 8001cde:	f003 ff82 	bl	8005be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f003 ff63 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f003 ff7a 	bl	8005be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2017      	movs	r0, #23
 8001cf8:	f003 ff5b 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cfc:	2017      	movs	r0, #23
 8001cfe:	f003 ff72 	bl	8005be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2028      	movs	r0, #40	@ 0x28
 8001d08:	f003 ff53 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0c:	2028      	movs	r0, #40	@ 0x28
 8001d0e:	f003 ff6a 	bl	8005be6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	@ 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48000400 	.word	0x48000400

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d82a      	bhi.n	8001d98 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001d42:	a201      	add	r2, pc, #4	@ (adr r2, 8001d48 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d69 	.word	0x08001d69
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	08001d89 	.word	0x08001d89
			case GBD300T:
				return {300,500,2500,0.25};
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d66:	e01d      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	@ (8001db0 <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001d6c:	461c      	mov	r4, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d76:	e015      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001d7c:	461c      	mov	r4, r3
 8001d7e:	4613      	mov	r3, r2
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d86:	e00d      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001db8 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d96:	e005      	b.n	8001da4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffc7 	bl	8001d30 <_ZN5Servo12getServoInfoENS_4typeE>
 8001da2:	bf00      	nop
			}
		}
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	0800b16c 	.word	0x0800b16c
 8001db0:	0800b17c 	.word	0x0800b17c
 8001db4:	0800b18c 	.word	0x0800b18c
 8001db8:	0800b19c 	.word	0x0800b19c

08001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	61f8      	str	r0, [r7, #28]
 8001dc4:	61b9      	str	r1, [r7, #24]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	74fb      	strb	r3, [r7, #19]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001dce:	f103 040c 	add.w	r4, r3, #12
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2200      	movs	r2, #0
 8001de4:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001df2:	69fc      	ldr	r4, [r7, #28]
 8001df4:	463b      	mov	r3, r7
 8001df6:	7cfa      	ldrb	r2, [r7, #19]
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff98 	bl	8001d30 <_ZN5Servo12getServoInfoENS_4typeE>
 8001e00:	340c      	adds	r4, #12
 8001e02:	463b      	mov	r3, r7
 8001e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3724      	adds	r7, #36	@ 0x24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	0800b16c 	.word	0x0800b16c

08001e18 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void stepTo(int32_t steps);
	void heightTo(float high);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6178      	str	r0, [r7, #20]
 8001e20:	6139      	str	r1, [r7, #16]
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e28:	edc7 0a00 	vstr	s1, [r7]
 8001e2c:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2264      	movs	r2, #100	@ 0x64
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	897a      	ldrh	r2, [r7, #10]
 8001ebe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
	};
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	3a83126f 	.word	0x3a83126f

08001ef8 <_Z9setup_allv>:

//turn
float _current_y = 0.0f;
float _current_theta = 0.0f;

void setup_all(){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8001efc:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <_Z9setup_allv+0x9c>)
 8001efe:	f005 fce5 	bl	80078cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001f02:	4825      	ldr	r0, [pc, #148]	@ (8001f98 <_Z9setup_allv+0xa0>)
 8001f04:	f005 fce2 	bl	80078cc <HAL_TIM_Base_Start_IT>
	ms++;
 8001f08:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <_Z9setup_allv+0xa4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <_Z9setup_allv+0xa4>)
 8001f10:	6013      	str	r3, [r2, #0]
	servo_forward.setup(920);
 8001f12:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8001f16:	4822      	ldr	r0, [pc, #136]	@ (8001fa0 <_Z9setup_allv+0xa8>)
 8001f18:	f002 ff65 	bl	8004de6 <_ZN5Servo5setupEi>
	servo_turn.setup(261);
 8001f1c:	f240 1105 	movw	r1, #261	@ 0x105
 8001f20:	4820      	ldr	r0, [pc, #128]	@ (8001fa4 <_Z9setup_allv+0xac>)
 8001f22:	f002 ff60 	bl	8004de6 <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8001f26:	4820      	ldr	r0, [pc, #128]	@ (8001fa8 <_Z9setup_allv+0xb0>)
 8001f28:	f7ff f98a 	bl	8001240 <_ZN8DC_motor5setupEv>
	initialized = true;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <_Z9setup_allv+0xb4>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
	speeds = -0.5;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <_Z9setup_allv+0xb8>)
 8001f34:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001f38:	601a      	str	r2, [r3, #0]
	wait(3000, &htim2);
 8001f3a:	491e      	ldr	r1, [pc, #120]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f3c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f40:	f000 f864 	bl	800200c <_Z4waitiP17TIM_HandleTypeDef>
	initialized = false;
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <_Z9setup_allv+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	speeds = 0.5;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <_Z9setup_allv+0xb8>)
 8001f4c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001f50:	601a      	str	r2, [r3, #0]
	wait(1500, &htim2);
 8001f52:	4918      	ldr	r1, [pc, #96]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f54:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001f58:	f000 f858 	bl	800200c <_Z4waitiP17TIM_HandleTypeDef>


	wait(5000, &htim2);
 8001f5c:	4915      	ldr	r1, [pc, #84]	@ (8001fb4 <_Z9setup_allv+0xbc>)
 8001f5e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f62:	f000 f853 	bl	800200c <_Z4waitiP17TIM_HandleTypeDef>
	servo_gripper.setup(0);
 8001f66:	2100      	movs	r1, #0
 8001f68:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <_Z9setup_allv+0xc0>)
 8001f6a:	f002 ff3c 	bl	8004de6 <_ZN5Servo5setupEi>
	servo_right.setup(150);
 8001f6e:	2196      	movs	r1, #150	@ 0x96
 8001f70:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <_Z9setup_allv+0xc4>)
 8001f72:	f002 ff38 	bl	8004de6 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8001f76:	2100      	movs	r1, #0
 8001f78:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <_Z9setup_allv+0xc8>)
 8001f7a:	f002 ff34 	bl	8004de6 <_ZN5Servo5setupEi>
	servo_forward.turnTo(300); //920---40 底
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <_Z9setup_allv+0xa8>)
 8001f86:	f002 fff7 	bl	8004f78 <_ZN5Servo6turnToEii>

	ROS1::init();
 8001f8a:	f001 fdf1 	bl	8003b70 <_ZN4ROS14initEv>
	//HAL_TIM_Base_Start_IT(&htim2);


}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000210 	.word	0x20000210
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	20000564 	.word	0x20000564
 8001fa0:	20000520 	.word	0x20000520
 8001fa4:	200004a0 	.word	0x200004a0
 8001fa8:	20000448 	.word	0x20000448
 8001fac:	20000546 	.word	0x20000546
 8001fb0:	20000548 	.word	0x20000548
 8001fb4:	2000012c 	.word	0x2000012c
 8001fb8:	200004c0 	.word	0x200004c0
 8001fbc:	20000500 	.word	0x20000500
 8001fc0:	200004e0 	.word	0x200004e0

08001fc4 <main_function>:
void main_function(){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	setup_all();
 8001fc8:	f7ff ff96 	bl	8001ef8 <_Z9setup_allv>
		//ROS1::_pub_gripper();
		//ROS1::spinCycle();
		// ROS1::_pub_gripper();
		//mission_3();
		//middleTurn(angle);
		servo_left.turnTo(angle);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <main_function+0x38>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	ee17 1a90 	vmov	r1, s15
 8001fdc:	4808      	ldr	r0, [pc, #32]	@ (8002000 <main_function+0x3c>)
 8001fde:	f002 ffcb 	bl	8004f78 <_ZN5Servo6turnToEii>
		servo_right.turnTo(angle_2);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <main_function+0x40>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fec:	2200      	movs	r2, #0
 8001fee:	ee17 1a90 	vmov	r1, s15
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <main_function+0x44>)
 8001ff4:	f002 ffc0 	bl	8004f78 <_ZN5Servo6turnToEii>
		servo_left.turnTo(angle);
 8001ff8:	bf00      	nop
 8001ffa:	e7e7      	b.n	8001fcc <main_function+0x8>
 8001ffc:	20000550 	.word	0x20000550
 8002000:	200004e0 	.word	0x200004e0
 8002004:	20000554 	.word	0x20000554
 8002008:	20000500 	.word	0x20000500

0800200c <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8002016:	6838      	ldr	r0, [r7, #0]
 8002018:	f005 fc58 	bl	80078cc <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 800201c:	bf00      	nop
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dcfa      	bgt.n	800201e <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	f005 fcb9 	bl	80079a0 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 800202e:	4b03      	ldr	r3, [pc, #12]	@ (800203c <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000055c 	.word	0x2000055c

08002040 <HAL_TIM_PeriodElapsedCallback>:
float s;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002050:	d104      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800205a:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d123      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x6e>
		height = 445 + turn * mm_per_turn;
 8002066:	4b1c      	ldr	r3, [pc, #112]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002068:	ed93 7a00 	vldr	s14, [r3]
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002076:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80020e0 <HAL_TIM_PeriodElapsedCallback+0xa0>
 800207a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
		Motor_updown.PI_run();
 8002084:	4818      	ldr	r0, [pc, #96]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002086:	f7fe ff41 	bl	8000f0c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(-1);
 800208a:	f04f 31ff 	mov.w	r1, #4294967295
 800208e:	4816      	ldr	r0, [pc, #88]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002090:	f7ff f88c 	bl	80011ac <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	4812      	ldr	r0, [pc, #72]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020a0:	f7ff f874 	bl	800118c <_ZN8DC_motor8setspeedEf>
		ms++;
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020ac:	6013      	str	r3, [r2, #0]

		//ROS1::_pub_elevator();
	}
	if(htim->Instance == TIM7){
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a10      	ldr	r2, [pc, #64]	@ (80020f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_PeriodElapsedCallback+0x88>
		ROS1::_pub_gripper();
 80020b8:	f001 fdb8 	bl	8003c2c <_ZN4ROS112_pub_gripperEv>
		ROS1::_pub_touch();
 80020bc:	f001 fda4 	bl	8003c08 <_ZN4ROS110_pub_touchEv>
		ROS1::_pub_theta();
 80020c0:	f001 fdde 	bl	8003c80 <_ZN4ROS110_pub_thetaEv>
		ROS1::_pub_y();
 80020c4:	f001 fdc4 	bl	8003c50 <_ZN4ROS16_pub_yEv>
		//s++;
		}
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000055c 	.word	0x2000055c
 80020d4:	40001000 	.word	0x40001000
 80020d8:	2000054c 	.word	0x2000054c
 80020dc:	20000568 	.word	0x20000568
 80020e0:	43de8000 	.word	0x43de8000
 80020e4:	2000056c 	.word	0x2000056c
 80020e8:	20000448 	.word	0x20000448
 80020ec:	20000548 	.word	0x20000548
 80020f0:	20000564 	.word	0x20000564
 80020f4:	40001400 	.word	0x40001400

080020f8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002108:	f000 8102 	beq.w	8002310 <HAL_GPIO_EXTI_Callback+0x218>
 800210c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002110:	f300 8133 	bgt.w	800237a <HAL_GPIO_EXTI_Callback+0x282>
 8002114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002118:	d069      	beq.n	80021ee <HAL_GPIO_EXTI_Callback+0xf6>
 800211a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800211e:	f300 812c 	bgt.w	800237a <HAL_GPIO_EXTI_Callback+0x282>
 8002122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002126:	d03a      	beq.n	800219e <HAL_GPIO_EXTI_Callback+0xa6>
 8002128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800212c:	f300 8125 	bgt.w	800237a <HAL_GPIO_EXTI_Callback+0x282>
 8002130:	2b80      	cmp	r3, #128	@ 0x80
 8002132:	d009      	beq.n	8002148 <HAL_GPIO_EXTI_Callback+0x50>
 8002134:	2b80      	cmp	r3, #128	@ 0x80
 8002136:	f300 8120 	bgt.w	800237a <HAL_GPIO_EXTI_Callback+0x282>
 800213a:	2b10      	cmp	r3, #16
 800213c:	f000 8083 	beq.w	8002246 <HAL_GPIO_EXTI_Callback+0x14e>
 8002140:	2b20      	cmp	r3, #32
 8002142:	f000 80b0 	beq.w	80022a6 <HAL_GPIO_EXTI_Callback+0x1ae>
				isTop = 0;

			}

	}
}
 8002146:	e118      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f004 fa18 	bl	8006584 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_GPIO_EXTI_Callback+0x80>
				tt = 7;
 8002164:	4b87      	ldr	r3, [pc, #540]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002166:	2207      	movs	r2, #7
 8002168:	601a      	str	r2, [r3, #0]
				elevator_type = 1;
 800216a:	4b87      	ldr	r3, [pc, #540]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
				casecadeLift = false;  // 重置初始化狀態
 8002170:	4b86      	ldr	r3, [pc, #536]	@ (800238c <HAL_GPIO_EXTI_Callback+0x294>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
			break;
 8002176:	e0f7      	b.n	8002368 <HAL_GPIO_EXTI_Callback+0x270>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f004 fa00 	bl	8006584 <HAL_GPIO_ReadPin>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80e9 	beq.w	8002368 <HAL_GPIO_EXTI_Callback+0x270>
				casecadeLift = true;
 8002196:	4b7d      	ldr	r3, [pc, #500]	@ (800238c <HAL_GPIO_EXTI_Callback+0x294>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
			break;
 800219c:	e0e4      	b.n	8002368 <HAL_GPIO_EXTI_Callback+0x270>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a6:	f004 f9ed 	bl	8006584 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_GPIO_EXTI_Callback+0xd0>
				elevator_type = 2;
 80021ba:	4b73      	ldr	r3, [pc, #460]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
				tt = 8;
 80021c0:	4b70      	ldr	r3, [pc, #448]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 80021c2:	2208      	movs	r2, #8
 80021c4:	601a      	str	r2, [r3, #0]
			break;
 80021c6:	e0d1      	b.n	800236c <HAL_GPIO_EXTI_Callback+0x274>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021d0:	f004 f9d8 	bl	8006584 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80c3 	beq.w	800236c <HAL_GPIO_EXTI_Callback+0x274>
				elevator_type = 1;
 80021e6:	4b68      	ldr	r3, [pc, #416]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
			break;
 80021ec:	e0be      	b.n	800236c <HAL_GPIO_EXTI_Callback+0x274>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f6:	f004 f9c5 	bl	8006584 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_GPIO_EXTI_Callback+0x128>
				tt = 9;
 800220a:	4b5e      	ldr	r3, [pc, #376]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 800220c:	2209      	movs	r2, #9
 800220e:	601a      	str	r2, [r3, #0]
				speeds = 0;
 8002210:	4b5f      	ldr	r3, [pc, #380]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x298>)
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
				table_isTouch = 1;
 8002218:	4b5e      	ldr	r3, [pc, #376]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x29c>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
			break;
 800221e:	e0a7      	b.n	8002370 <HAL_GPIO_EXTI_Callback+0x278>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002228:	f004 f9ac 	bl	8006584 <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8099 	beq.w	8002370 <HAL_GPIO_EXTI_Callback+0x278>
				table_isTouch = 0;
 800223e:	4b55      	ldr	r3, [pc, #340]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
			break;
 8002244:	e094      	b.n	8002370 <HAL_GPIO_EXTI_Callback+0x278>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800224e:	f004 f999 	bl	8006584 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00f      	beq.n	8002282 <HAL_GPIO_EXTI_Callback+0x18a>
				tt = 4;
 8002262:	4b48      	ldr	r3, [pc, #288]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002264:	2204      	movs	r2, #4
 8002266:	601a      	str	r2, [r3, #0]
				speeds = 0;
 8002268:	4b49      	ldr	r3, [pc, #292]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x298>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
				elevator_type = -1;
 8002270:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	601a      	str	r2, [r3, #0]
				turn = 0;
 8002278:	4b47      	ldr	r3, [pc, #284]	@ (8002398 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
			break;
 8002280:	e078      	b.n	8002374 <HAL_GPIO_EXTI_Callback+0x27c>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800228a:	f004 f97b 	bl	8006584 <HAL_GPIO_ReadPin>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06a      	beq.n	8002374 <HAL_GPIO_EXTI_Callback+0x27c>
				elevator_type = 0;
 800229e:	4b3a      	ldr	r3, [pc, #232]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
			break;
 80022a4:	e066      	b.n	8002374 <HAL_GPIO_EXTI_Callback+0x27c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ae:	f004 f969 	bl	8006584 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d014      	beq.n	80022ec <HAL_GPIO_EXTI_Callback+0x1f4>
				tt = 5;
 80022c2:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 80022c4:	2205      	movs	r2, #5
 80022c6:	601a      	str	r2, [r3, #0]
				if(initialized == false){
 80022c8:	4b34      	ldr	r3, [pc, #208]	@ (800239c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_GPIO_EXTI_Callback+0x1e6>
					initialized = true;  // 重置初始化狀態
 80022d0:	4b32      	ldr	r3, [pc, #200]	@ (800239c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
					speeds = 0;
 80022d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x298>)
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
				isTop = 1;
 80022de:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
				elevator_type = 1;
 80022e4:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
			break;
 80022ea:	e045      	b.n	8002378 <HAL_GPIO_EXTI_Callback+0x280>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f4:	f004 f946 	bl	8006584 <HAL_GPIO_ReadPin>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d037      	beq.n	8002378 <HAL_GPIO_EXTI_Callback+0x280>
				isTop = 0;
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
			break;
 800230e:	e033      	b.n	8002378 <HAL_GPIO_EXTI_Callback+0x280>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	4619      	mov	r1, r3
 8002314:	4823      	ldr	r0, [pc, #140]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002316:	f004 f935 	bl	8006584 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_EXTI_Callback+0x24e>
				tt = 14;
 800232a:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x28c>)
 800232c:	220e      	movs	r2, #14
 800232e:	601a      	str	r2, [r3, #0]
				isTop = 3;
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 8002336:	4b16      	ldr	r3, [pc, #88]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x298>)
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
				elevator_type = 3;
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x290>)
 8002340:	2203      	movs	r2, #3
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	e019      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4619      	mov	r1, r3
 800234a:	4816      	ldr	r0, [pc, #88]	@ (80023a4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800234c:	f004 f91a 	bl	8006584 <HAL_GPIO_ReadPin>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
				isTop = 0;
 8002360:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	e008      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002368:	bf00      	nop
 800236a:	e006      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			break;
 800236c:	bf00      	nop
 800236e:	e004      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002370:	bf00      	nop
 8002372:	e002      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002374:	bf00      	nop
 8002376:	e000      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x282>
			break;
 8002378:	bf00      	nop
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000540 	.word	0x20000540
 8002388:	20000560 	.word	0x20000560
 800238c:	20000000 	.word	0x20000000
 8002390:	20000548 	.word	0x20000548
 8002394:	20000545 	.word	0x20000545
 8002398:	2000054c 	.word	0x2000054c
 800239c:	20000546 	.word	0x20000546
 80023a0:	20000544 	.word	0x20000544
 80023a4:	48000400 	.word	0x48000400

080023a8 <_Z41__static_initialization_and_destruction_0ii>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af04      	add	r7, sp, #16
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d13f      	bne.n	8002438 <_Z41__static_initialization_and_destruction_0ii+0x90>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023be:	4293      	cmp	r3, r2
 80023c0:	d13a      	bne.n	8002438 <_Z41__static_initialization_and_destruction_0ii+0x90>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,0,4,12};
 80023c2:	2300      	movs	r3, #0
 80023c4:	9302      	str	r3, [sp, #8]
 80023c6:	2304      	movs	r3, #4
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80023d2:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80023d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80023de:	4919      	ldr	r1, [pc, #100]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80023e0:	4819      	ldr	r0, [pc, #100]	@ (8002448 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80023e2:	f7ff fd19 	bl	8001e18 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_1, Servo::GBD300T};
 80023e6:	2300      	movs	r3, #0
 80023e8:	2200      	movs	r2, #0
 80023ea:	4918      	ldr	r1, [pc, #96]	@ (800244c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80023ec:	4818      	ldr	r0, [pc, #96]	@ (8002450 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80023ee:	f7ff fce5 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD300T};
 80023f2:	2300      	movs	r3, #0
 80023f4:	2204      	movs	r2, #4
 80023f6:	4917      	ldr	r1, [pc, #92]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023f8:	4817      	ldr	r0, [pc, #92]	@ (8002458 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80023fa:	f7ff fcdf 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 80023fe:	2300      	movs	r3, #0
 8002400:	220c      	movs	r2, #12
 8002402:	4914      	ldr	r1, [pc, #80]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002404:	4815      	ldr	r0, [pc, #84]	@ (800245c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002406:	f7ff fcd9 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_3, Servo::GBD300T};
 800240a:	2300      	movs	r3, #0
 800240c:	2208      	movs	r2, #8
 800240e:	4911      	ldr	r1, [pc, #68]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002410:	4813      	ldr	r0, [pc, #76]	@ (8002460 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002412:	f7ff fcd3 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 8002416:	2302      	movs	r3, #2
 8002418:	2200      	movs	r2, #0
 800241a:	490e      	ldr	r1, [pc, #56]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800241c:	4811      	ldr	r0, [pc, #68]	@ (8002464 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800241e:	f7ff fccd 	bl	8001dbc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
float mm_per_turn = total_high / total_turns; // 每步對應的公分數
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002424:	edd3 6a00 	vldr	s13, [r3]
 8002428:	4b10      	ldr	r3, [pc, #64]	@ (800246c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002432:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002434:	edc3 7a00 	vstr	s15, [r3]
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200002a8 	.word	0x200002a8
 8002444:	200001c4 	.word	0x200001c4
 8002448:	20000448 	.word	0x20000448
 800244c:	20000178 	.word	0x20000178
 8002450:	200004a0 	.word	0x200004a0
 8002454:	200000e0 	.word	0x200000e0
 8002458:	200004c0 	.word	0x200004c0
 800245c:	200004e0 	.word	0x200004e0
 8002460:	20000500 	.word	0x20000500
 8002464:	20000520 	.word	0x20000520
 8002468:	20000008 	.word	0x20000008
 800246c:	20000004 	.word	0x20000004
 8002470:	20000568 	.word	0x20000568

08002474 <_GLOBAL__sub_I_Motor_updown>:
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
 8002478:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff ff93 	bl	80023a8 <_Z41__static_initialization_and_destruction_0ii>
 8002482:	bd80      	pop	{r7, pc}

08002484 <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	if(open == 0){
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <_Z14gripperControlb+0x22>
		servo_gripper.turnTo(240);  //close
 8002494:	2200      	movs	r2, #0
 8002496:	21f0      	movs	r1, #240	@ 0xf0
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <_Z14gripperControlb+0x3c>)
 800249a:	f002 fd6d 	bl	8004f78 <_ZN5Servo6turnToEii>
		_gripperFinish = 0; //
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <_Z14gripperControlb+0x40>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //open
		_gripperFinish = 1;
	}
}
 80024a4:	e007      	b.n	80024b6 <_Z14gripperControlb+0x32>
		servo_gripper.turnTo(0); //open
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <_Z14gripperControlb+0x3c>)
 80024ac:	f002 fd64 	bl	8004f78 <_ZN5Servo6turnToEii>
		_gripperFinish = 1;
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <_Z14gripperControlb+0x40>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200004c0 	.word	0x200004c0
 80024c4:	2000057c 	.word	0x2000057c

080024c8 <_Z10middleTurni>:

void middleTurn(int angle){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float degree = angle;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024da:	edc7 7a03 	vstr	s15, [r7, #12]
	_current_theta = angle;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e8:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <_Z10middleTurni+0xa8>)
 80024ea:	edc3 7a00 	vstr	s15, [r3]
	if(angle < 0 && angle > -260){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da18      	bge.n	8002526 <_Z10middleTurni+0x5e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f513 7f82 	cmn.w	r3, #260	@ 0x104
 80024fa:	dd14      	ble.n	8002526 <_Z10middleTurni+0x5e>
		servo_turn.turnTo(261.0 + degree, 5000);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7fd fff7 	bl	80004f0 <__aeabi_f2d>
 8002502:	a319      	add	r3, pc, #100	@ (adr r3, 8002568 <_Z10middleTurni+0xa0>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fd fe94 	bl	8000234 <__adddf3>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe fade 	bl	8000ad4 <__aeabi_d2iz>
 8002518:	4603      	mov	r3, r0
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4619      	mov	r1, r3
 8002520:	4814      	ldr	r0, [pc, #80]	@ (8002574 <_Z10middleTurni+0xac>)
 8002522:	f002 fd29 	bl	8004f78 <_ZN5Servo6turnToEii>
	}
	if(angle >= 0 && angle < 30){
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db17      	blt.n	800255c <_Z10middleTurni+0x94>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b1d      	cmp	r3, #29
 8002530:	dc14      	bgt.n	800255c <_Z10middleTurni+0x94>
		servo_turn.turnTo(261.0 + degree, 5000);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7fd ffdc 	bl	80004f0 <__aeabi_f2d>
 8002538:	a30b      	add	r3, pc, #44	@ (adr r3, 8002568 <_Z10middleTurni+0xa0>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd fe79 	bl	8000234 <__adddf3>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fac3 	bl	8000ad4 <__aeabi_d2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002554:	4619      	mov	r1, r3
 8002556:	4807      	ldr	r0, [pc, #28]	@ (8002574 <_Z10middleTurni+0xac>)
 8002558:	f002 fd0e 	bl	8004f78 <_ZN5Servo6turnToEii>
	}
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	f3af 8000 	nop.w
 8002568:	00000000 	.word	0x00000000
 800256c:	40705000 	.word	0x40705000
 8002570:	20000578 	.word	0x20000578
 8002574:	200004a0 	.word	0x200004a0

08002578 <_Z14forwardToPointf>:
void for_last_mission(){
	servo_turn.turnTo(81);
	servo_forward.turnTo(30);
}

void forwardToPoint(float forward_mm){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(forward_mm < 0 && forward_mm > -90){
 8002582:	edd7 7a01 	vldr	s15, [r7, #4]
 8002586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	d523      	bpl.n	80025d8 <_Z14forwardToPointf+0x60>
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800265c <_Z14forwardToPointf+0xe4>
 8002598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	dd1a      	ble.n	80025d8 <_Z14forwardToPointf+0x60>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 80025a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <_Z14forwardToPointf+0xe8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <_Z14forwardToPointf+0xec>)
 80025b0:	edd3 6a00 	vldr	s13, [r3]
 80025b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c4:	2200      	movs	r2, #0
 80025c6:	ee17 1a90 	vmov	r1, s15
 80025ca:	4827      	ldr	r0, [pc, #156]	@ (8002668 <_Z14forwardToPointf+0xf0>)
 80025cc:	f002 fcd4 	bl	8004f78 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 80025d0:	4a26      	ldr	r2, [pc, #152]	@ (800266c <_Z14forwardToPointf+0xf4>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e03d      	b.n	8002654 <_Z14forwardToPointf+0xdc>
		
	}
	else if(forward_mm > 0 && forward_mm < 220){
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	dd23      	ble.n	800262e <_Z14forwardToPointf+0xb6>
 80025e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ea:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002670 <_Z14forwardToPointf+0xf8>
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d51a      	bpl.n	800262e <_Z14forwardToPointf+0xb6>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <_Z14forwardToPointf+0xe8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <_Z14forwardToPointf+0xec>)
 8002606:	edd3 6a00 	vldr	s13, [r3]
 800260a:	edd7 7a01 	vldr	s15, [r7, #4]
 800260e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261a:	2200      	movs	r2, #0
 800261c:	ee17 1a90 	vmov	r1, s15
 8002620:	4811      	ldr	r0, [pc, #68]	@ (8002668 <_Z14forwardToPointf+0xf0>)
 8002622:	f002 fca9 	bl	8004f78 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 8002626:	4a11      	ldr	r2, [pc, #68]	@ (800266c <_Z14forwardToPointf+0xf4>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e012      	b.n	8002654 <_Z14forwardToPointf+0xdc>
	}
	else if(forward_mm == 0){
 800262e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002632:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	d10b      	bne.n	8002654 <_Z14forwardToPointf+0xdc>
		servo_forward.turnTo(zeroPointAngle);
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <_Z14forwardToPointf+0xe8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	4619      	mov	r1, r3
 8002644:	4808      	ldr	r0, [pc, #32]	@ (8002668 <_Z14forwardToPointf+0xf0>)
 8002646:	f002 fc97 	bl	8004f78 <_ZN5Servo6turnToEii>
		_current_y = 0;
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <_Z14forwardToPointf+0xf4>)
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
	}
}
 8002652:	e7ff      	b.n	8002654 <_Z14forwardToPointf+0xdc>
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	c2b40000 	.word	0xc2b40000
 8002660:	20000010 	.word	0x20000010
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000520 	.word	0x20000520
 800266c:	20000574 	.word	0x20000574
 8002670:	435c0000 	.word	0x435c0000

08002674 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <_ZN3ros3MsgC1Ev+0x1c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	0800b530 	.word	0x0800b530

080026b8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
      data()
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ffe8 	bl	8002698 <_ZN3ros3MsgC1Ev>
 80026c8:	4a06      	ldr	r2, [pc, #24]	@ (80026e4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffce 	bl	8002674 <_ZN3ros4TimeC1Ev>
    {
    }
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800b518 	.word	0x0800b518

080026e8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	b2ca      	uxtb	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0a19      	lsrs	r1, r3, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3301      	adds	r3, #1
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0c19      	lsrs	r1, r3, #16
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3302      	adds	r3, #2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0e19      	lsrs	r1, r3, #24
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3303      	adds	r3, #3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4413      	add	r3, r2
 8002736:	b2ca      	uxtb	r2, r1
 8002738:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3304      	adds	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	b2ca      	uxtb	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a19      	lsrs	r1, r3, #8
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	b2ca      	uxtb	r2, r1
 800275e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	0c19      	lsrs	r1, r3, #16
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3302      	adds	r3, #2
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	b2ca      	uxtb	r2, r1
 8002770:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0e19      	lsrs	r1, r3, #24
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3303      	adds	r3, #3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3304      	adds	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
      return offset;
 800278a:	68fb      	ldr	r3, [r7, #12]
    }
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	440b      	add	r3, r1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3302      	adds	r3, #2
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	440b      	add	r3, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3303      	adds	r3, #3
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3301      	adds	r3, #1
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	440b      	add	r3, r1
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3302      	adds	r3, #2
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	440b      	add	r3, r1
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3303      	adds	r3, #3
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	440b      	add	r3, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
     return offset;
 8002852:	68fb      	ldr	r3, [r7, #12]
    }
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0800b1ac 	.word	0x0800b1ac

0800287c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	0800b1bc 	.word	0x0800b1bc

08002898 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fef8 	bl	8002698 <_ZN3ros3MsgC1Ev>
 80028a8:	4a0b      	ldr	r2, [pc, #44]	@ (80028d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a09      	ldr	r2, [pc, #36]	@ (80028dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028b8:	609a      	str	r2, [r3, #8]
      message_type(""),
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028be:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028c4:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	615a      	str	r2, [r3, #20]
    {
    }
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	0800b500 	.word	0x0800b500
 80028dc:	0800b1e0 	.word	0x0800b1e0

080028e0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8899      	ldrh	r1, [r3, #4]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	b2ca      	uxtb	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	889b      	ldrh	r3, [r3, #4]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	b299      	uxth	r1, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	3301      	adds	r3, #1
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3302      	adds	r3, #2
 8002914:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fc7c 	bl	8000218 <strlen>
 8002920:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4413      	add	r3, r2
 8002928:	69b9      	ldr	r1, [r7, #24]
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fa46 	bl	8003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3304      	adds	r3, #4
 8002934:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	18d0      	adds	r0, r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4619      	mov	r1, r3
 8002944:	f008 fae8 	bl	800af18 <memcpy>
      offset += length_topic_name;
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fc5f 	bl	8000218 <strlen>
 800295a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	6979      	ldr	r1, [r7, #20]
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fa29 	bl	8003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	18d0      	adds	r0, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4619      	mov	r1, r3
 800297e:	f008 facb 	bl	800af18 <memcpy>
      offset += length_message_type;
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	4413      	add	r3, r2
 8002988:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fc42 	bl	8000218 <strlen>
 8002994:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	6939      	ldr	r1, [r7, #16]
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fa0c 	bl	8003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3304      	adds	r3, #4
 80029a8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	18d0      	adds	r0, r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4619      	mov	r1, r3
 80029b8:	f008 faae 	bl	800af18 <memcpy>
      offset += length_md5sum;
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80029ca:	68f9      	ldr	r1, [r7, #12]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0a19      	lsrs	r1, r3, #8
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0c19      	lsrs	r1, r3, #16
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3302      	adds	r3, #2
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0e19      	lsrs	r1, r3, #24
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3303      	adds	r3, #3
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	b2ca      	uxtb	r2, r1
 8002a04:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
    }
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	@ 0x28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	889b      	ldrh	r3, [r3, #4]
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	440b      	add	r3, r1
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3302      	adds	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f9c9 	bl	8003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a72:	e00b      	b.n	8002a8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	441a      	add	r2, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	440b      	add	r3, r1
 8002a82:	7812      	ldrb	r2, [r2, #0]
 8002a84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	3301      	adds	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4413      	add	r3, r2
 8002a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3ed      	bcc.n	8002a74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	f107 0310 	add.w	r3, r7, #16
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 f996 	bl	8003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	e00b      	b.n	8002af2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	441a      	add	r2, r3
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	440b      	add	r3, r1
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	3301      	adds	r3, #1
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3ed      	bcc.n	8002ada <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	3b01      	subs	r3, #1
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	441a      	add	r2, r3
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f963 	bl	8003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	3304      	adds	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e00b      	b.n	8002b58 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	441a      	add	r2, r3
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3ed      	bcc.n	8002b40 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	440a      	add	r2, r1
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	440b      	add	r3, r1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	440b      	add	r3, r1
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	61bb      	str	r3, [r7, #24]
     return offset;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
    }
 8002bde:	4618      	mov	r0, r3
 8002be0:	3728      	adds	r7, #40	@ 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	0800b1e4 	.word	0x0800b1e4

08002c04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	0800b200 	.word	0x0800b200

08002c20 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd34 	bl	8002698 <_ZN3ros3MsgC1Ev>
 8002c30:	4a06      	ldr	r2, [pc, #24]	@ (8002c4c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	601a      	str	r2, [r3, #0]
      level(0),
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	711a      	strb	r2, [r3, #4]
      msg("")
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002c40:	609a      	str	r2, [r3, #8]
    {
    }
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0800b4e8 	.word	0x0800b4e8
 8002c50:	0800b1e0 	.word	0x0800b1e0

08002c54 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	7912      	ldrb	r2, [r2, #4]
 8002c6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd facd 	bl	8000218 <strlen>
 8002c7e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 f897 	bl	8003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3304      	adds	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	18d0      	adds	r0, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f008 f939 	bl	800af18 <memcpy>
      offset += length_msg;
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cae:	68fb      	ldr	r3, [r7, #12]
    }
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	441a      	add	r2, r3
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f888 	bl	8003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3304      	adds	r3, #4
 8002cee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e00b      	b.n	8002d0e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	441a      	add	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	440b      	add	r3, r1
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3ed      	bcc.n	8002cf6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b01      	subs	r3, #1
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
     return offset;
 8002d3e:	693b      	ldr	r3, [r7, #16]
    }
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	0800b224 	.word	0x0800b224

08002d64 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	0800b238 	.word	0x0800b238

08002d80 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc84 	bl	8002698 <_ZN3ros3MsgC1Ev>
 8002d90:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	61da      	str	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	0800b4d0 	.word	0x0800b4d0

08002dc8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	b2ca      	uxtb	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0a19      	lsrs	r1, r3, #8
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	3301      	adds	r3, #1
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	b2ca      	uxtb	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0c19      	lsrs	r1, r3, #16
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	3302      	adds	r3, #2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	b2ca      	uxtb	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0e19      	lsrs	r1, r3, #24
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	3303      	adds	r3, #3
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	b2ca      	uxtb	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e20:	2300      	movs	r3, #0
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	e02a      	b.n	8002e7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002e34:	6939      	ldr	r1, [r7, #16]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b2ca      	uxtb	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	0a19      	lsrs	r1, r3, #8
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	3301      	adds	r3, #1
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b2ca      	uxtb	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	0c19      	lsrs	r1, r3, #16
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	3302      	adds	r3, #2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b2ca      	uxtb	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	0e19      	lsrs	r1, r3, #24
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	3303      	adds	r3, #3
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b2ca      	uxtb	r2, r1
 8002e6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	3304      	adds	r3, #4
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3cf      	bcc.n	8002e26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2ca      	uxtb	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	0a19      	lsrs	r1, r3, #8
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b2ca      	uxtb	r2, r1
 8002ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	0c19      	lsrs	r1, r3, #16
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	3302      	adds	r3, #2
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b2ca      	uxtb	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	0e19      	lsrs	r1, r3, #24
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	3303      	adds	r3, #3
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	3304      	adds	r3, #4
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e02a      	b.n	8002f2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	0a19      	lsrs	r1, r3, #8
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	b2ca      	uxtb	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0c19      	lsrs	r1, r3, #16
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	3302      	adds	r3, #2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b2ca      	uxtb	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	0e19      	lsrs	r1, r3, #24
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	3303      	adds	r3, #3
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b2ca      	uxtb	r2, r1
 8002f1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	3304      	adds	r3, #4
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d3cf      	bcc.n	8002ed6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69d9      	ldr	r1, [r3, #28]
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	b2ca      	uxtb	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	0a19      	lsrs	r1, r3, #8
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	b2ca      	uxtb	r2, r1
 8002f54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	0c19      	lsrs	r1, r3, #16
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	3302      	adds	r3, #2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	b2ca      	uxtb	r2, r1
 8002f66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	0e19      	lsrs	r1, r3, #24
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	3303      	adds	r3, #3
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	b2ca      	uxtb	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e027      	b.n	8002fd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd f940 	bl	8000218 <strlen>
 8002f98:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	6979      	ldr	r1, [r7, #20]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ff0a 	bl	8003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	3304      	adds	r3, #4
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	18d0      	adds	r0, r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f007 ffa8 	bl	800af18 <memcpy>
      offset += length_stringsi;
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	4413      	add	r3, r2
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3d2      	bcc.n	8002f86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3728      	adds	r7, #40	@ 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08e      	sub	sp, #56	@ 0x38
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	3301      	adds	r3, #1
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	4313      	orrs	r3, r2
 8003012:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	3302      	adds	r3, #2
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	4313      	orrs	r3, r2
 8003024:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003028:	3303      	adds	r3, #3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	4313      	orrs	r3, r2
 8003036:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	3304      	adds	r3, #4
 800303c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	429a      	cmp	r2, r3
 8003046:	d90a      	bls.n	800305e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f007 fef6 	bl	800ae44 <realloc>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003064:	2300      	movs	r3, #0
 8003066:	633b      	str	r3, [r7, #48]	@ 0x30
 8003068:	e035      	b.n	80030d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	440a      	add	r2, r1
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	3301      	adds	r3, #1
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	440b      	add	r3, r1
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003092:	3302      	adds	r3, #2
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	440b      	add	r3, r1
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a4:	3303      	adds	r3, #3
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	440b      	add	r3, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80030b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ba:	3304      	adds	r3, #4
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	3301      	adds	r3, #1
 80030d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3c4      	bcc.n	800306a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ec:	3301      	adds	r3, #1
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	3302      	adds	r3, #2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4313      	orrs	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800310e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003110:	3303      	adds	r3, #3
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4413      	add	r3, r2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4313      	orrs	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	3304      	adds	r3, #4
 8003124:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	d90a      	bls.n	8003146 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f007 fe82 	bl	800ae44 <realloc>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003150:	e035      	b.n	80031be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	440a      	add	r2, r1
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	3301      	adds	r3, #1
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	440b      	add	r3, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	3302      	adds	r3, #2
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	440b      	add	r3, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	3303      	adds	r3, #3
 800318e:	6839      	ldr	r1, [r7, #0]
 8003190:	440b      	add	r3, r1
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	3304      	adds	r3, #4
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	3214      	adds	r2, #20
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	3301      	adds	r3, #1
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d3c4      	bcc.n	8003152 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	3301      	adds	r3, #1
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e6:	3302      	adds	r3, #2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f8:	3303      	adds	r3, #3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320a:	3304      	adds	r3, #4
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d90a      	bls.n	800322e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f007 fe0e 	bl	800ae44 <realloc>
 8003228:	4602      	mov	r2, r0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003238:	e03e      	b.n	80032b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	441a      	add	r2, r3
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fdd7 	bl	8003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800324c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324e:	3304      	adds	r3, #4
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	e00b      	b.n	8003270 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	441a      	add	r2, r3
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	3b01      	subs	r3, #1
 8003262:	6839      	ldr	r1, [r7, #0]
 8003264:	440b      	add	r3, r1
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	3301      	adds	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	429a      	cmp	r2, r3
 800327a:	d3ed      	bcc.n	8003258 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800327c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	3b01      	subs	r3, #1
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4413      	add	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800328c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328e:	3b01      	subs	r3, #1
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	441a      	add	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	3220      	adds	r2, #32
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80032b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b4:	3301      	adds	r3, #1
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3bb      	bcc.n	800323a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80032c4:	4618      	mov	r0, r3
 80032c6:	3738      	adds	r7, #56	@ 0x38
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	0800b3f4 	.word	0x0800b3f4

080032e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	0800b25c 	.word	0x0800b25c

08003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	611a      	str	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68d8      	ldr	r0, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6891      	ldr	r1, [r2, #8]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	4798      	blx	r3
 8003350:	4603      	mov	r3, r0
  };
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
  }
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800338a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	@ (80033d8 <_ZN13STM32HardwareC1Ev+0x3c>)
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b8:	461a      	mov	r2, r3
 80033ba:	2300      	movs	r3, #0
 80033bc:	6093      	str	r3, [r2, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033c4:	461a      	mov	r2, r3
 80033c6:	2300      	movs	r3, #0
 80033c8:	60d3      	str	r3, [r2, #12]
    }
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	200002f4 	.word	0x200002f4

080033dc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f804 	bl	80033f2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003406:	4619      	mov	r1, r3
 8003408:	f006 f8ce 	bl	80095a8 <HAL_UART_Receive_DMA>
    }
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
 8003420:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ffa2 	bl	8003372 <_ZN13STM32Hardware10getRdmaIndEv>
 800342e:	4603      	mov	r3, r0
 8003430:	429c      	cmp	r4, r3
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003444:	1c59      	adds	r1, r3, #1
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800345a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 8003464:	68fb      	ldr	r3, [r7, #12]
    }
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
	...

08003470 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	2b20      	cmp	r3, #32
 8003482:	d108      	bne.n	8003496 <_ZN13STM32Hardware5flushEv+0x26>
 8003484:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <_ZN13STM32Hardware5flushEv+0x26>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <_ZN13STM32Hardware5flushEv+0x28>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d049      	beq.n	8003530 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 800349c:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <_ZN13STM32Hardware5flushEv+0xc8>)
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d039      	beq.n	800352a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <_ZN13STM32Hardware5flushEv+0x74>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	e007      	b.n	80034f4 <_ZN13STM32Hardware5flushEv+0x84>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	89fa      	ldrh	r2, [r7, #14]
 800350c:	4619      	mov	r1, r3
 800350e:	f005 ffcb 	bl	80094a8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	89fb      	ldrh	r3, [r7, #14]
 800351c:	4413      	add	r3, r2
 800351e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003528:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 800352a:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <_ZN13STM32Hardware5flushEv+0xc8>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
      }
    }
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	2000057d 	.word	0x2000057d

0800353c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
      int n = length;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	bfa8      	it	ge
 8003554:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8003558:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4293      	cmp	r3, r2
 800356a:	bf28      	it	cs
 800356c:	4613      	movcs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f007 fcc7 	bl	800af18 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	4413      	add	r3, r2
 8003596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035a0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d00b      	beq.n	80035c2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	18d1      	adds	r1, r2, r3
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	f007 fcab 	bl	800af18 <memcpy>
      }

      flush();
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff ff54 	bl	8003470 <_ZN13STM32Hardware5flushEv>
    }
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	f002 fa04 	bl	80059e4 <HAL_GetTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
      data(0)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff f850 	bl	8002698 <_ZN3ros3MsgC1Ev>
 80035f8:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <_ZN8std_msgs5Int32C1Ev+0x28>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
    {
    }
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	0800b48c 	.word	0x0800b48c

08003614 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	4413      	add	r3, r2
 8003630:	b2ca      	uxtb	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	0a19      	lsrs	r1, r3, #8
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3301      	adds	r3, #1
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4413      	add	r3, r2
 8003640:	b2ca      	uxtb	r2, r1
 8003642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c19      	lsrs	r1, r3, #16
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3302      	adds	r3, #2
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	4413      	add	r3, r2
 8003650:	b2ca      	uxtb	r2, r1
 8003652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0e19      	lsrs	r1, r3, #24
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3303      	adds	r3, #3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4413      	add	r3, r2
 8003660:	b2ca      	uxtb	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3304      	adds	r3, #4
 8003668:	60fb      	str	r3, [r7, #12]
      return offset;
 800366a:	68fb      	ldr	r3, [r7, #12]
    }
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	440a      	add	r2, r1
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3301      	adds	r3, #1
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	440b      	add	r3, r1
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3302      	adds	r3, #2
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	440b      	add	r3, r1
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3303      	adds	r3, #3
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	440b      	add	r3, r1
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3304      	adds	r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
     return offset;
 80036da:	68fb      	ldr	r3, [r7, #12]
    }
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	0800b280 	.word	0x0800b280

08003704 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	0800b290 	.word	0x0800b290

08003720 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
      data(0)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe ffb4 	bl	8002698 <_ZN3ros3MsgC1Ev>
 8003730:	4a05      	ldr	r2, [pc, #20]	@ (8003748 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	711a      	strb	r2, [r3, #4]
    {
    }
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	0800b474 	.word	0x0800b474

0800374c <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	791b      	ldrb	r3, [r3, #4]
 800375e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	7a3a      	ldrb	r2, [r7, #8]
 8003768:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3301      	adds	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003770:	68fb      	ldr	r3, [r7, #12]
    }
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003790:	7a3a      	ldrb	r2, [r7, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	440b      	add	r3, r1
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	b2db      	uxtb	r3, r3
 800379e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 80037a0:	7a3a      	ldrb	r2, [r7, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
     return offset;
 80037ac:	68fb      	ldr	r3, [r7, #12]
    }
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	0800b2b4 	.word	0x0800b2b4

080037d8 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	0800b2c4 	.word	0x0800b2c4

080037f4 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
      data(0)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe ff4a 	bl	8002698 <_ZN3ros3MsgC1Ev>
 8003804:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <_ZN8std_msgs7Float64C1Ev+0x30>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	0800b45c 	.word	0x0800b45c

08003828 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800383c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003844:	6979      	ldr	r1, [r7, #20]
 8003846:	6838      	ldr	r0, [r7, #0]
 8003848:	4401      	add	r1, r0
 800384a:	b2d3      	uxtb	r3, r2
 800384c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800384e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	0a02      	lsrs	r2, r0, #8
 800385c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003860:	0a0b      	lsrs	r3, r1, #8
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	3101      	adds	r1, #1
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	4401      	add	r1, r0
 800386a:	b2d3      	uxtb	r3, r2
 800386c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800386e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	0c02      	lsrs	r2, r0, #16
 800387c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003880:	0c0b      	lsrs	r3, r1, #16
 8003882:	6979      	ldr	r1, [r7, #20]
 8003884:	3102      	adds	r1, #2
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	4401      	add	r1, r0
 800388a:	b2d3      	uxtb	r3, r2
 800388c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800388e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	0e02      	lsrs	r2, r0, #24
 800389c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038a0:	0e0b      	lsrs	r3, r1, #24
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	3103      	adds	r1, #3
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	4401      	add	r1, r0
 80038aa:	b2d3      	uxtb	r3, r2
 80038ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80038ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	000a      	movs	r2, r1
 80038bc:	2300      	movs	r3, #0
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	3104      	adds	r1, #4
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	4401      	add	r1, r0
 80038c6:	b2d3      	uxtb	r3, r2
 80038c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80038ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	0a0a      	lsrs	r2, r1, #8
 80038d8:	2300      	movs	r3, #0
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	3105      	adds	r1, #5
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	4401      	add	r1, r0
 80038e2:	b2d3      	uxtb	r3, r2
 80038e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80038e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	0c0a      	lsrs	r2, r1, #16
 80038f4:	2300      	movs	r3, #0
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	3106      	adds	r1, #6
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	4401      	add	r1, r0
 80038fe:	b2d3      	uxtb	r3, r2
 8003900:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	0e0a      	lsrs	r2, r1, #24
 8003910:	2300      	movs	r3, #0
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	3107      	adds	r1, #7
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	4401      	add	r1, r0
 800391a:	b2d3      	uxtb	r3, r2
 800391c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3308      	adds	r3, #8
 8003922:	617b      	str	r3, [r7, #20]
      return offset;
 8003924:	697b      	ldr	r3, [r7, #20]
    }
 8003926:	4618      	mov	r0, r3
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003932:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003936:	b0a3      	sub	sp, #140	@ 0x8c
 8003938:	af00      	add	r7, sp, #0
 800393a:	6778      	str	r0, [r7, #116]	@ 0x74
 800393c:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003950:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003954:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003958:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2200      	movs	r2, #0
 8003962:	461c      	mov	r4, r3
 8003964:	4615      	mov	r5, r2
 8003966:	ea40 0804 	orr.w	r8, r0, r4
 800396a:	ea41 0905 	orr.w	r9, r1, r5
 800396e:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003972:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003976:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2200      	movs	r2, #0
 8003986:	469a      	mov	sl, r3
 8003988:	4693      	mov	fp, r2
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003996:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800399a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800399e:	ea40 0402 	orr.w	r4, r0, r2
 80039a2:	66bc      	str	r4, [r7, #104]	@ 0x68
 80039a4:	430b      	orrs	r3, r1
 80039a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80039ac:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039bc:	4413      	add	r3, r2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039d4:	464c      	mov	r4, r9
 80039d6:	0423      	lsls	r3, r4, #16
 80039d8:	4644      	mov	r4, r8
 80039da:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039de:	4644      	mov	r4, r8
 80039e0:	0422      	lsls	r2, r4, #16
 80039e2:	ea40 0402 	orr.w	r4, r0, r2
 80039e6:	65bc      	str	r4, [r7, #88]	@ 0x58
 80039e8:	430b      	orrs	r3, r1
 80039ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80039f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039fc:	1cda      	adds	r2, r3, #3
 80039fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a00:	4413      	add	r3, r2
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a0c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003a10:	4623      	mov	r3, r4
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a16:	4623      	mov	r3, r4
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a20:	4623      	mov	r3, r4
 8003a22:	4303      	orrs	r3, r0
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a26:	462b      	mov	r3, r5
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003a30:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003a56:	0023      	movs	r3, r4
 8003a58:	2200      	movs	r2, #0
 8003a5a:	ea40 0402 	orr.w	r4, r0, r2
 8003a5e:	633c      	str	r4, [r7, #48]	@ 0x30
 8003a60:	430b      	orrs	r3, r1
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a64:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003a68:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a74:	1d5a      	adds	r2, r3, #5
 8003a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003a8e:	0223      	lsls	r3, r4, #8
 8003a90:	2200      	movs	r2, #0
 8003a92:	ea40 0402 	orr.w	r4, r0, r2
 8003a96:	623c      	str	r4, [r7, #32]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003aa0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003aa4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003aac:	3306      	adds	r3, #6
 8003aae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	61fa      	str	r2, [r7, #28]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	69bc      	ldr	r4, [r7, #24]
 8003ac6:	0423      	lsls	r3, r4, #16
 8003ac8:	2200      	movs	r2, #0
 8003aca:	ea40 0402 	orr.w	r4, r0, r2
 8003ace:	613c      	str	r4, [r7, #16]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ad8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003adc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003ae8:	4413      	add	r3, r2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	60fa      	str	r2, [r7, #12]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	68bc      	ldr	r4, [r7, #8]
 8003afe:	0623      	lsls	r3, r4, #24
 8003b00:	2200      	movs	r2, #0
 8003b02:	ea40 0402 	orr.w	r4, r0, r2
 8003b06:	603c      	str	r4, [r7, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b10:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8003b14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003b18:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003b1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b22:	3308      	adds	r3, #8
 8003b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8003b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	378c      	adds	r7, #140	@ 0x8c
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b36:	4770      	bx	lr

08003b38 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	0800b2e8 	.word	0x0800b2e8

08003b54 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	0800b2fc 	.word	0x0800b2fc

08003b70 <_ZN4ROS14initEv>:
namespace ROS1 {
  /**
   * @brief ROS1 節點宣告。
   * @param void
   */
  void init(void){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
    nh.initNode();
 8003b74:	4818      	ldr	r0, [pc, #96]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b76:	f000 fa69 	bl	800404c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.advertise(pub_gripper);
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <_ZN4ROS14initEv+0x6c>)
 8003b7c:	4816      	ldr	r0, [pc, #88]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b7e:	f000 fa8e 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_basket);
 8003b82:	4917      	ldr	r1, [pc, #92]	@ (8003be0 <_ZN4ROS14initEv+0x70>)
 8003b84:	4814      	ldr	r0, [pc, #80]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b86:	f000 fa8a 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_elevator);
 8003b8a:	4916      	ldr	r1, [pc, #88]	@ (8003be4 <_ZN4ROS14initEv+0x74>)
 8003b8c:	4812      	ldr	r0, [pc, #72]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b8e:	f000 fa86 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_touch);
 8003b92:	4915      	ldr	r1, [pc, #84]	@ (8003be8 <_ZN4ROS14initEv+0x78>)
 8003b94:	4810      	ldr	r0, [pc, #64]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b96:	f000 fa82 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_y);
 8003b9a:	4914      	ldr	r1, [pc, #80]	@ (8003bec <_ZN4ROS14initEv+0x7c>)
 8003b9c:	480e      	ldr	r0, [pc, #56]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003b9e:	f000 fa7e 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_theta);
 8003ba2:	4913      	ldr	r1, [pc, #76]	@ (8003bf0 <_ZN4ROS14initEv+0x80>)
 8003ba4:	480c      	ldr	r0, [pc, #48]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003ba6:	f000 fa7a 	bl	800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    nh.subscribe(sub_gripper);
 8003baa:	4912      	ldr	r1, [pc, #72]	@ (8003bf4 <_ZN4ROS14initEv+0x84>)
 8003bac:	480a      	ldr	r0, [pc, #40]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003bae:	f000 faa6 	bl	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_elevatorHeight);
 8003bb2:	4911      	ldr	r1, [pc, #68]	@ (8003bf8 <_ZN4ROS14initEv+0x88>)
 8003bb4:	4808      	ldr	r0, [pc, #32]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003bb6:	f000 facd 	bl	8004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_basketDoor);
 8003bba:	4910      	ldr	r1, [pc, #64]	@ (8003bfc <_ZN4ROS14initEv+0x8c>)
 8003bbc:	4806      	ldr	r0, [pc, #24]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003bbe:	f000 fa9e 	bl	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_turn);
 8003bc2:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <_ZN4ROS14initEv+0x90>)
 8003bc4:	4804      	ldr	r0, [pc, #16]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003bc6:	f000 fac5 	bl	8004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_forward);
 8003bca:	490e      	ldr	r1, [pc, #56]	@ (8003c04 <_ZN4ROS14initEv+0x94>)
 8003bcc:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <_ZN4ROS14initEv+0x68>)
 8003bce:	f000 fac1 	bl	8004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>

    return;
 8003bd2:	bf00      	nop
  }
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000580 	.word	0x20000580
 8003bdc:	20001ac4 	.word	0x20001ac4
 8003be0:	20001afc 	.word	0x20001afc
 8003be4:	20001b20 	.word	0x20001b20
 8003be8:	20001ae0 	.word	0x20001ae0
 8003bec:	20001b58 	.word	0x20001b58
 8003bf0:	20001b6c 	.word	0x20001b6c
 8003bf4:	20001b80 	.word	0x20001b80
 8003bf8:	20001bd4 	.word	0x20001bd4
 8003bfc:	20001bf0 	.word	0x20001bf0
 8003c00:	20001b9c 	.word	0x20001b9c
 8003c04:	20001bb8 	.word	0x20001bb8

08003c08 <_ZN4ROS110_pub_touchEv>:
  void spinCycle(void){
    nh.spinOnce();
    return;
  }

  void _pub_touch(void){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	touchFinish.data = table_isTouch;
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <_ZN4ROS110_pub_touchEv+0x18>)
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003c12:	711a      	strb	r2, [r3, #4]
	pub_touch.publish(&touchFinish);
 8003c14:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003c16:	4804      	ldr	r0, [pc, #16]	@ (8003c28 <_ZN4ROS110_pub_touchEv+0x20>)
 8003c18:	f7ff fb8b 	bl	8003332 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	return;
 8003c1c:	bf00      	nop
  }
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000545 	.word	0x20000545
 8003c24:	20001ad8 	.word	0x20001ad8
 8003c28:	20001ae0 	.word	0x20001ae0

08003c2c <_ZN4ROS112_pub_gripperEv>:
  void _pub_gripper(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    gripperFinish.data = _gripperFinish;
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <_ZN4ROS112_pub_gripperEv+0x18>)
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c36:	711a      	strb	r2, [r3, #4]
    //	gripperIsGet = 0;
    pub_gripper.publish(&gripperFinish);
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c3a:	4804      	ldr	r0, [pc, #16]	@ (8003c4c <_ZN4ROS112_pub_gripperEv+0x20>)
 8003c3c:	f7ff fb79 	bl	8003332 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c40:	bf00      	nop
  }
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	2000057c 	.word	0x2000057c
 8003c48:	20001abc 	.word	0x20001abc
 8003c4c:	20001ac4 	.word	0x20001ac4

08003c50 <_ZN4ROS16_pub_yEv>:
  void _pub_elevator(void){
    elevatorHeight.data = high;
    pub_basket.publish(&basketFinish);
    return;
  }
  void _pub_y(void){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
    current_y.data = _current_y;
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <_ZN4ROS16_pub_yEv+0x24>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc49 	bl	80004f0 <__aeabi_f2d>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4905      	ldr	r1, [pc, #20]	@ (8003c78 <_ZN4ROS16_pub_yEv+0x28>)
 8003c64:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_y.publish(&current_y);
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <_ZN4ROS16_pub_yEv+0x28>)
 8003c6a:	4804      	ldr	r0, [pc, #16]	@ (8003c7c <_ZN4ROS16_pub_yEv+0x2c>)
 8003c6c:	f7ff fb61 	bl	8003332 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c70:	bf00      	nop
  }
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000574 	.word	0x20000574
 8003c78:	20001b38 	.word	0x20001b38
 8003c7c:	20001b58 	.word	0x20001b58

08003c80 <_ZN4ROS110_pub_thetaEv>:
  void _pub_theta(void){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
    current_theta.data = _current_theta;
 8003c84:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <_ZN4ROS110_pub_thetaEv+0x24>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc31 	bl	80004f0 <__aeabi_f2d>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4905      	ldr	r1, [pc, #20]	@ (8003ca8 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c94:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_theta.publish(&current_theta);
 8003c98:	4903      	ldr	r1, [pc, #12]	@ (8003ca8 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c9a:	4804      	ldr	r0, [pc, #16]	@ (8003cac <_ZN4ROS110_pub_thetaEv+0x2c>)
 8003c9c:	f7ff fb49 	bl	8003332 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003ca0:	bf00      	nop
  }
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000578 	.word	0x20000578
 8003ca8:	20001b48 	.word	0x20001b48
 8003cac:	20001b6c 	.word	0x20001b6c

08003cb0 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E>:

  void callback_turn(const std_msgs::Int32 &msg){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	  if(isTop == 1){
 8003cb8:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x2c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x1c>
		  middleTurn(msg.data);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fbff 	bl	80024c8 <_Z10middleTurni>
	  }
	  else{
		  speeds = 0.5;
	  }
  }
 8003cca:	e003      	b.n	8003cd4 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x24>
		  speeds = 0.5;
 8003ccc:	4b04      	ldr	r3, [pc, #16]	@ (8003ce0 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x30>)
 8003cce:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003cd2:	601a      	str	r2, [r3, #0]
  }
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000544 	.word	0x20000544
 8003ce0:	20000548 	.word	0x20000548

08003ce4 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:
  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	791b      	ldrb	r3, [r3, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fbc7 	bl	8002484 <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8003cf6:	bf00      	nop
  }
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_ZN4ROS116callback_forwardERKN8std_msgs5Int32E>:
  void callback_basketDoor(const std_msgs::Bool &msg){
	basketControl(msg.data);
	return;
   }

  void callback_forward(const std_msgs::Int32 &msg){   //-90~220
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	  forwardToPoint(msg.data);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	eeb0 0a67 	vmov.f32	s0, s15
 8003d16:	f7fe fc2f 	bl	8002578 <_Z14forwardToPointf>
	  return;
 8003d1a:	bf00      	nop
  }
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	  if(table_isTouch == 0){
 8003d2c:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x70>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11f      	bne.n	8003d74 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
		if(elevator_type  != -1 && msg.data == -1){
 8003d34:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d009      	beq.n	8003d52 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d104      	bne.n	8003d52 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
			speeds = -0.5;
 8003d48:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d4a:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e01b      	b.n	8003d8a <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		else if(elevator_type  != 3 && msg.data == 1 && isTop == 0){
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d018      	beq.n	8003d8c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d114      	bne.n	8003d8c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
 8003d62:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x7c>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d110      	bne.n	8003d8c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
			speeds = 0.5;
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d6c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003d70:	601a      	str	r2, [r3, #0]
	  }
	  else{
		  Motor_updown.heightTo(msg.data);
	  }

    return;
 8003d72:	e00b      	b.n	8003d8c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
		  Motor_updown.heightTo(msg.data);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d80:	eeb0 0a67 	vmov.f32	s0, s15
 8003d84:	4807      	ldr	r0, [pc, #28]	@ (8003da4 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x80>)
 8003d86:	f7fd fa77 	bl	8001278 <_ZN8DC_motor8heightToEf>
    return;
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
  }
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000545 	.word	0x20000545
 8003d98:	20000560 	.word	0x20000560
 8003d9c:	20000548 	.word	0x20000548
 8003da0:	20000544 	.word	0x20000544
 8003da4:	20000448 	.word	0x20000448

08003da8 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 8003db0:	bf00      	nop
  }
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e00c      	b.n	8003de6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	fa22 f103 	lsr.w	r1, r2, r3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	b2ca      	uxtb	r2, r1
 8003dde:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d9ef      	bls.n	8003dcc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e010      	b.n	8003e32 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	00d2      	lsls	r2, r2, #3
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d9eb      	bls.n	8003e10 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	4a04      	ldr	r2, [pc, #16]	@ (8003e64 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	0800b4bc 	.word	0x0800b4bc

08003e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffe8 	bl	8003e48 <_ZN3ros15NodeHandleBase_C1Ev>
 8003e78:	4a47      	ldr	r2, [pc, #284]	@ (8003f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fa8a 	bl	800339c <_ZN13STM32HardwareC1Ev>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe ff6f 	bl	8002d80 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e00a      	b.n	8003ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b18      	cmp	r3, #24
 8003ec2:	d9f1      	bls.n	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e009      	b.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3301      	adds	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b18      	cmp	r3, #24
 8003ee2:	d9f2      	bls.n	8003eca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e00a      	b.n	8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f06:	d3f0      	bcc.n	8003eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	e00a      	b.n	8003f24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f2a:	d3f0      	bcc.n	8003f0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f86:	461a      	mov	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	6213      	str	r3, [r2, #32]
  }
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0800b448 	.word	0x0800b448

08003f9c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	0800b4a4 	.word	0x0800b4a4

08003fbc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ffe5 	bl	8003f9c <_ZN3ros11Subscriber_C1Ev>
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8004000 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fb9f 	bl	8003720 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  };
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	0800b430 	.word	0x0800b430

08004004 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ffc1 	bl	8003f9c <_ZN3ros11Subscriber_C1Ev>
 800401a:	4a0b      	ldr	r2, [pc, #44]	@ (8004048 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	330c      	adds	r3, #12
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fadf 	bl	80035e8 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  };
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	0800b418 	.word	0x0800b418

0800404c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f9bf 	bl	80033dc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
    bytes_ = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
    index_ = 0;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004080:	461a      	mov	r2, r3
 8004082:	2300      	movs	r3, #0
 8004084:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
    topic_ = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	461a      	mov	r2, r3
 8004090:	2300      	movs	r3, #0
 8004092:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
  };
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e01d      	b.n	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d111      	bne.n	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	60da      	str	r2, [r3, #12]
        return true;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e006      	b.n	80040f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b18      	cmp	r3, #24
 80040ee:	ddde      	ble.n	80040ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80040f0:	2300      	movs	r3, #0
  }
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e018      	b.n	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	605a      	str	r2, [r3, #4]
        return true;
 8004136:	2301      	movs	r3, #1
 8004138:	e006      	b.n	8004148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3301      	adds	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b18      	cmp	r3, #24
 8004144:	dde3      	ble.n	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x10>
      }
    }
    return false;
 8004146:	2300      	movs	r3, #0
  }
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e018      	b.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800417e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	605a      	str	r2, [r3, #4]
        return true;
 800418c:	2301      	movs	r3, #1
 800418e:	e006      	b.n	800419e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b18      	cmp	r3, #24
 800419a:	dde3      	ble.n	8004164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x10>
    return false;
 800419c:	2300      	movs	r3, #0
  }
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fa0a 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 80041bc:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d905      	bls.n	80041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    if (mode_ != MODE_FIRST_FF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d906      	bls.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
      if (spin_timeout_ > 0)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d015      	beq.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff f9d7 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad2      	subs	r2, r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	bf8c      	ite	hi
 8004234:	2301      	movhi	r3, #1
 8004236:	2300      	movls	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800423e:	f06f 0301 	mvn.w	r3, #1
 8004242:	e226      	b.n	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff f8e3 	bl	8003414 <_ZN13STM32Hardware4readEv>
 800424e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f2c0 81ff 	blt.w	8004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4413      	add	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800426c:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004276:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800427a:	2b07      	cmp	r3, #7
 800427c:	d12d      	bne.n	80042da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004284:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004290:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	b2d1      	uxtb	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80042a0:	3304      	adds	r3, #4
 80042a2:	460a      	mov	r2, r1
 80042a4:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ac:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80042b0:	3b01      	subs	r3, #1
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042b8:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1a0      	bne.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d0:	461a      	mov	r2, r3
 80042d2:	2308      	movs	r3, #8
 80042d4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80042d8:	e798      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d130      	bne.n	800434a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2bff      	cmp	r3, #255	@ 0xff
 80042ec:	d112      	bne.n	8004314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042f8:	3301      	adds	r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004300:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3314      	adds	r3, #20
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800430e:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 8004312:	e77b      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff f959 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	bf8c      	ite	hi
 800432c:	2301      	movhi	r3, #1
 800432e:	2300      	movls	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	f43f af6a 	beq.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 8004344:	f06f 0301 	mvn.w	r3, #1
 8004348:	e1a3      	b.n	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004350:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004354:	2b01      	cmp	r3, #1
 8004356:	d121      	bne.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2bfe      	cmp	r3, #254	@ 0xfe
 800435c:	d10b      	bne.n	8004376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004364:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004368:	3301      	adds	r3, #1
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004370:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004374:	e74a      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800438e:	2b00      	cmp	r3, #0
 8004390:	f47f af3c 	bne.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f980 	bl	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800439a:	e737      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d120      	bne.n	80043ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043d0:	3301      	adds	r3, #1
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80043ea:	e70f      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d118      	bne.n	800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004400:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	4413      	add	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004410:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800441e:	3301      	adds	r3, #1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004426:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800442a:	e6ef      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004432:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004436:	2b04      	cmp	r3, #4
 8004438:	d11f      	bne.n	800447a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004440:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004444:	425a      	negs	r2, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	bf58      	it	pl
 800444c:	4253      	negpl	r3, r2
 800444e:	2bff      	cmp	r3, #255	@ 0xff
 8004450:	d10b      	bne.n	800446a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004458:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800445c:	3301      	adds	r3, #1
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004464:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004468:	e6d0      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004470:	461a      	mov	r2, r3
 8004472:	2300      	movs	r3, #0
 8004474:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004478:	e6c8      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004480:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004484:	2b05      	cmp	r3, #5
 8004486:	d119      	bne.n	80044bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044a0:	3301      	adds	r3, #1
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a8:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80044ba:	e6a7      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d123      	bne.n	8004512 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d0:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	4413      	add	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044e0:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ea:	461a      	mov	r2, r3
 80044ec:	2307      	movs	r3, #7
 80044ee:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f ae85 	bne.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004508:	461a      	mov	r2, r3
 800450a:	2308      	movs	r3, #8
 800450c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004510:	e67c      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004518:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800451c:	2b08      	cmp	r3, #8
 800451e:	f47f ae75 	bne.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004528:	461a      	mov	r2, r3
 800452a:	2300      	movs	r3, #0
 800452c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004536:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800453a:	425a      	negs	r2, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	bf58      	it	pl
 8004542:	4253      	negpl	r3, r2
 8004544:	2bff      	cmp	r3, #255	@ 0xff
 8004546:	f47f ae61 	bne.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004550:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d116      	bne.n	8004586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f89e 	bl	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8ba 	bl	80046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004578:	461a      	mov	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
 8004584:	e085      	b.n	8004692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004590:	2b0a      	cmp	r3, #10
 8004592:	d108      	bne.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f97c 	bl	800489c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80045a4:	e632      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d112      	bne.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80045ba:	3314      	adds	r3, #20
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 80045c2:	3204      	adds	r2, #4
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fd0f 	bl	8002fea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 80045d8:	e618      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045e4:	2b0b      	cmp	r3, #11
 80045e6:	d106      	bne.n	80045f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80045f4:	e60a      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004600:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800460a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f43f adfc 	beq.w	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800461e:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004628:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004632:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004636:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4790      	blx	r2
    while (true)
 8004654:	e5da      	b.n	800420c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004656:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465e:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004662:	2b00      	cmp	r3, #0
 8004664:	d014      	beq.n	8004690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004678:	4293      	cmp	r3, r2
 800467a:	d909      	bls.n	8004690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f80c 	bl	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004688:	461a      	mov	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    return SPIN_OK;
 8004690:	2300      	movs	r3, #0
  }
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe f806 	bl	80026b8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f107 020c 	add.w	r2, r7, #12
 80046b6:	210a      	movs	r1, #10
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
    rt_time = hardware_.time();
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe ff85 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ce:	615a      	str	r2, [r3, #20]
  }
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b08b      	sub	sp, #44	@ 0x2c
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe f8d7 	bl	8002898 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ee:	e062      	b.n	80047b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d056      	beq.n	80047b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	b29b      	uxth	r3, r3
 8004714:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4608      	mov	r0, r1
 8004750:	4798      	blx	r3
 8004752:	4603      	mov	r3, r0
 8004754:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4608      	mov	r0, r1
 800477e:	4798      	blx	r3
 8004780:	4603      	mov	r3, r0
 8004782:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004788:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681c      	ldr	r4, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fddb 	bl	800335a <_ZN3ros9Publisher15getEndpointTypeEv>
 80047a4:	4601      	mov	r1, r0
 80047a6:	f107 030c 	add.w	r3, r7, #12
 80047aa:	461a      	mov	r2, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	3301      	adds	r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	2b18      	cmp	r3, #24
 80047ba:	dd99      	ble.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c0:	e05e      	b.n	8004880 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c6:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d053      	beq.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004804:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4608      	mov	r0, r1
 8004814:	4798      	blx	r3
 8004816:	4603      	mov	r3, r0
 8004818:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481e:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800482e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4608      	mov	r0, r1
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004844:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681c      	ldr	r4, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004850:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3304      	adds	r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4608      	mov	r0, r1
 800486c:	4798      	blx	r3
 800486e:	4601      	mov	r1, r0
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	461a      	mov	r2, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	3301      	adds	r3, #1
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	2b18      	cmp	r3, #24
 8004884:	dd9d      	ble.n	80047c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 8004892:	bf00      	nop
 8004894:	372c      	adds	r7, #44	@ 0x2c
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}
	...

0800489c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd ff04 	bl	80026b8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fe8b 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd ff62 	bl	8002798 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4915      	ldr	r1, [pc, #84]	@ (8004930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048da:	fba1 1303 	umull	r1, r3, r1, r3
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	4413      	add	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80048e4:	6939      	ldr	r1, [r7, #16]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048ea:	fba3 0302 	umull	r0, r3, r3, r2
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048f4:	fb00 f303 	mul.w	r3, r0, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	440b      	add	r3, r1
 8004902:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8bf 	bl	8004a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fe5a 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 800491c:	4602      	mov	r2, r0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004924:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	10624dd3 	.word	0x10624dd3
 8004934:	000f4240 	.word	0x000f4240

08004938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b63      	cmp	r3, #99	@ 0x63
 8004948:	dd0b      	ble.n	8004962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004950:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004954:	f083 0301 	eor.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800495e:	2300      	movs	r3, #0
 8004960:	e090      	b.n	8004a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800496e:	3304      	adds	r3, #4
 8004970:	3307      	adds	r3, #7
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4790      	blx	r2
 8004978:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004980:	22ff      	movs	r2, #255	@ 0xff
 8004982:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498c:	22fe      	movs	r2, #254	@ 0xfe
 800498e:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800499c:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b0:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ba:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c4:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 80049c8:	4413      	add	r3, r2
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d6:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e4:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	121b      	asrs	r3, r3, #8
 80049ee:	b21b      	sxth	r3, r3
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f8:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a00:	2305      	movs	r3, #5
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e00d      	b.n	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a10:	3304      	adds	r3, #4
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3306      	adds	r3, #6
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	ddec      	ble.n	8004a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3307      	adds	r3, #7
 8004a30:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	425a      	negs	r2, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	bf58      	it	pl
 8004a3c:	4253      	negpl	r3, r2
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	6179      	str	r1, [r7, #20]
 8004a46:	43d2      	mvns	r2, r2
 8004a48:	b2d1      	uxtb	r1, r2
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a52:	3304      	adds	r3, #4
 8004a54:	460a      	mov	r2, r1
 8004a56:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5e:	dc0b      	bgt.n	8004a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1d18      	adds	r0, r3, #4
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f7fe fd64 	bl	800353c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	e005      	b.n	8004a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004a78:	4904      	ldr	r1, [pc, #16]	@ (8004a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f84c 	bl	8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	0800b320 	.word	0x0800b320

08004a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fd96 	bl	80035d0 <_ZN13STM32Hardware4timeEv>
 8004aa4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4917      	ldr	r1, [pc, #92]	@ (8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004aae:	fba1 1303 	umull	r1, r3, r1, r3
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004abe:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ad2:	fb00 f303 	mul.w	r3, r0, r3
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1aca      	subs	r2, r1, r3
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aea:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af2:	3318      	adds	r3, #24
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004afa:	321c      	adds	r2, #28
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc f9d8 	bl	8000eb4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	10624dd3 	.word	0x10624dd3
 8004b10:	000f4240 	.word	0x000f4240
 8004b14:	3b9aca00 	.word	0x3b9aca00

08004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	2103      	movs	r1, #3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f804 	bl	8004b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b42:	f107 0314 	add.w	r3, r7, #20
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe f86a 	bl	8002c20 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b4c:	7afb      	ldrb	r3, [r7, #11]
 8004b4e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f107 0214 	add.w	r2, r7, #20
 8004b5e:	2107      	movs	r1, #7
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	4798      	blx	r3
  }
 8004b64:	bf00      	nop
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_Z41__static_initialization_and_destruction_0ii>:
}
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d15b      	bne.n	8004c34 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d156      	bne.n	8004c34 <_Z41__static_initialization_and_destruction_0ii+0xc8>
ros::NodeHandle nh;
 8004b86:	482d      	ldr	r0, [pc, #180]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004b88:	f7ff f96e 	bl	8003e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8004b8c:	482c      	ldr	r0, [pc, #176]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b8e:	f7fe fdc7 	bl	8003720 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 8004b92:	2300      	movs	r3, #0
 8004b94:	4a2a      	ldr	r2, [pc, #168]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b96:	492b      	ldr	r1, [pc, #172]	@ (8004c44 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004b98:	482b      	ldr	r0, [pc, #172]	@ (8004c48 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004b9a:	f7fe fbb3 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool touchFinish;
 8004b9e:	482b      	ldr	r0, [pc, #172]	@ (8004c4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004ba0:	f7fe fdbe 	bl	8003720 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_touch("/touch", &touchFinish);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4a29      	ldr	r2, [pc, #164]	@ (8004c4c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004ba8:	4929      	ldr	r1, [pc, #164]	@ (8004c50 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004baa:	482a      	ldr	r0, [pc, #168]	@ (8004c54 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004bac:	f7fe fbaa 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 8004bb0:	4829      	ldr	r0, [pc, #164]	@ (8004c58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004bb2:	f7fe fdb5 	bl	8003720 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4a27      	ldr	r2, [pc, #156]	@ (8004c58 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004bba:	4928      	ldr	r1, [pc, #160]	@ (8004c5c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8004bbc:	4828      	ldr	r0, [pc, #160]	@ (8004c60 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8004bbe:	f7fe fba1 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 elevatorHeight;
 8004bc2:	4828      	ldr	r0, [pc, #160]	@ (8004c64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004bc4:	f7fe fe16 	bl	80037f4 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_elevator("/elevator", &elevatorHeight);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004bcc:	4926      	ldr	r1, [pc, #152]	@ (8004c68 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8004bce:	4827      	ldr	r0, [pc, #156]	@ (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8004bd0:	f7fe fb98 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 current_y;
 8004bd4:	4826      	ldr	r0, [pc, #152]	@ (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004bd6:	f7fe fe0d 	bl	80037f4 <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 current_theta;
 8004bda:	4826      	ldr	r0, [pc, #152]	@ (8004c74 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bdc:	f7fe fe0a 	bl	80037f4 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_y("/current_y", &current_y);
 8004be0:	2300      	movs	r3, #0
 8004be2:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004be4:	4924      	ldr	r1, [pc, #144]	@ (8004c78 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8004be6:	4825      	ldr	r0, [pc, #148]	@ (8004c7c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8004be8:	f7fe fb8c 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_theta("/current_theta", &current_theta);
 8004bec:	2300      	movs	r3, #0
 8004bee:	4a21      	ldr	r2, [pc, #132]	@ (8004c74 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bf0:	4923      	ldr	r1, [pc, #140]	@ (8004c80 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8004bf2:	4824      	ldr	r0, [pc, #144]	@ (8004c84 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8004bf4:	f7fe fb86 	bl	8003304 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4a23      	ldr	r2, [pc, #140]	@ (8004c88 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004bfc:	4923      	ldr	r1, [pc, #140]	@ (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004bfe:	4824      	ldr	r0, [pc, #144]	@ (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004c00:	f7ff f9dc 	bl	8003fbc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_turn("/cmd_servoturn", ROS1::callback_turn);
 8004c04:	2301      	movs	r3, #1
 8004c06:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c08:	4923      	ldr	r1, [pc, #140]	@ (8004c98 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004c0a:	4824      	ldr	r0, [pc, #144]	@ (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004c0c:	f7ff f9fa 	bl	8004004 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_forward("/cmd_forward", ROS1::callback_forward);
 8004c10:	2301      	movs	r3, #1
 8004c12:	4a23      	ldr	r2, [pc, #140]	@ (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004c14:	4923      	ldr	r1, [pc, #140]	@ (8004ca4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004c16:	4824      	ldr	r0, [pc, #144]	@ (8004ca8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004c18:	f7ff f9f4 	bl	8004004 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevatorHeight("/cmd_elevator", ROS1::callback_Elevator);
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4a23      	ldr	r2, [pc, #140]	@ (8004cac <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004c20:	4923      	ldr	r1, [pc, #140]	@ (8004cb0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004c22:	4824      	ldr	r0, [pc, #144]	@ (8004cb4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004c24:	f7ff f9ee 	bl	8004004 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4a23      	ldr	r2, [pc, #140]	@ (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004c2c:	4923      	ldr	r1, [pc, #140]	@ (8004cbc <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004c2e:	4824      	ldr	r0, [pc, #144]	@ (8004cc0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004c30:	f7ff f9c4 	bl	8003fbc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000580 	.word	0x20000580
 8004c40:	20001abc 	.word	0x20001abc
 8004c44:	0800b35c 	.word	0x0800b35c
 8004c48:	20001ac4 	.word	0x20001ac4
 8004c4c:	20001ad8 	.word	0x20001ad8
 8004c50:	0800b368 	.word	0x0800b368
 8004c54:	20001ae0 	.word	0x20001ae0
 8004c58:	20001af4 	.word	0x20001af4
 8004c5c:	0800b370 	.word	0x0800b370
 8004c60:	20001afc 	.word	0x20001afc
 8004c64:	20001b10 	.word	0x20001b10
 8004c68:	0800b378 	.word	0x0800b378
 8004c6c:	20001b20 	.word	0x20001b20
 8004c70:	20001b38 	.word	0x20001b38
 8004c74:	20001b48 	.word	0x20001b48
 8004c78:	0800b384 	.word	0x0800b384
 8004c7c:	20001b58 	.word	0x20001b58
 8004c80:	0800b390 	.word	0x0800b390
 8004c84:	20001b6c 	.word	0x20001b6c
 8004c88:	08003ce5 	.word	0x08003ce5
 8004c8c:	0800b3a0 	.word	0x0800b3a0
 8004c90:	20001b80 	.word	0x20001b80
 8004c94:	08003cb1 	.word	0x08003cb1
 8004c98:	0800b3b4 	.word	0x0800b3b4
 8004c9c:	20001b9c 	.word	0x20001b9c
 8004ca0:	08003cff 	.word	0x08003cff
 8004ca4:	0800b3c4 	.word	0x0800b3c4
 8004ca8:	20001bb8 	.word	0x20001bb8
 8004cac:	08003d25 	.word	0x08003d25
 8004cb0:	0800b3d4 	.word	0x0800b3d4
 8004cb4:	20001bd4 	.word	0x20001bd4
 8004cb8:	08003da9 	.word	0x08003da9
 8004cbc:	0800b3e4 	.word	0x0800b3e4
 8004cc0:	20001bf0 	.word	0x20001bf0

08004cc4 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe fccf 	bl	8003678 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	320c      	adds	r2, #12
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4798      	blx	r3
  }
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
  }
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	330c      	adds	r3, #12
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fce8 	bl	80036e8 <_ZN8std_msgs5Int327getTypeEv>
 8004d18:	4603      	mov	r3, r0
  }
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fce8 	bl	8003704 <_ZN8std_msgs5Int326getMD5Ev>
 8004d34:	4603      	mov	r3, r0
  }
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fd15 	bl	800377e <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	320c      	adds	r2, #12
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
  }
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
  }
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fd15 	bl	80037bc <_ZN8std_msgs4Bool7getTypeEv>
 8004d92:	4603      	mov	r3, r0
  }
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	330c      	adds	r3, #12
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fd15 	bl	80037d8 <_ZN8std_msgs4Bool6getMD5Ev>
 8004dae:	4603      	mov	r3, r0
  }
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
    return configured_;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dc6:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_GLOBAL__sub_I_nh>:
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004dde:	2001      	movs	r0, #1
 8004de0:	f7ff fec4 	bl	8004b6c <_Z41__static_initialization_and_destruction_0ii>
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f002 fe56 	bl	8007aac <HAL_TIM_PWM_Start>
	write(startAngle);
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f804 	bl	8004e10 <_ZN5Servo5writeEi>
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	angle = ang;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e64:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e80:	dd08      	ble.n	8004e94 <_ZN5Servo5writeEi+0x84>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8004e92:	e014      	b.n	8004ebe <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eac:	d507      	bpl.n	8004ebe <_ZN5Servo5writeEi+0xae>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eba:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <_ZN5Servo5writeEi+0xcc>
 8004ec6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	ee17 2a90 	vmov	r2, s15
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004eda:	e045      	b.n	8004f68 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d10a      	bne.n	8004efa <_ZN5Servo5writeEi+0xea>
 8004ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	ee17 2a90 	vmov	r2, s15
 8004ef6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004ef8:	e036      	b.n	8004f68 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d10a      	bne.n	8004f18 <_ZN5Servo5writeEi+0x108>
 8004f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	ee17 2a90 	vmov	r2, s15
 8004f14:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004f16:	e027      	b.n	8004f68 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d10a      	bne.n	8004f36 <_ZN5Servo5writeEi+0x126>
 8004f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	ee17 2a90 	vmov	r2, s15
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004f34:	e018      	b.n	8004f68 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d10a      	bne.n	8004f54 <_ZN5Servo5writeEi+0x144>
 8004f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	ee17 2a90 	vmov	r2, s15
 8004f50:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004f52:	e009      	b.n	8004f68 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	ee17 2a90 	vmov	r2, s15
 8004f66:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	0000      	movs	r0, r0
	...

08004f78 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	f300 80b0 	bgt.w	80050f0 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f2c0 80ae 	blt.w	80050f4 <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 8004fac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb4:	ee17 3a90 	vmov	r3, s15
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bfb8      	it	lt
 8004fbc:	425b      	neglt	r3, r3
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd0:	ee17 0a90 	vmov	r0, s15
 8004fd4:	f7fb fa8c 	bl	80004f0 <__aeabi_f2d>
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <_ZN5Servo6turnToEii+0x190>)
 8004fde:	f7fb fc09 	bl	80007f4 <__aeabi_ddiv>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <_ZN5Servo6turnToEii+0x194>)
 8004ff0:	f7fb fad6 	bl	80005a0 <__aeabi_dmul>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7fb fd92 	bl	8000b24 <__aeabi_d2f>
 8005000:	4603      	mov	r3, r0
 8005002:	4a43      	ldr	r2, [pc, #268]	@ (8005110 <_ZN5Servo6turnToEii+0x198>)
 8005004:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 8005006:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <_ZN5Servo6turnToEii+0x198>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fa70 	bl	80004f0 <__aeabi_f2d>
 8005010:	a33b      	add	r3, pc, #236	@ (adr r3, 8005100 <_ZN5Servo6turnToEii+0x188>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb fac3 	bl	80005a0 <__aeabi_dmul>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	f7fb fd7f 	bl	8000b24 <__aeabi_d2f>
 8005026:	4603      	mov	r3, r0
 8005028:	4a39      	ldr	r2, [pc, #228]	@ (8005110 <_ZN5Servo6turnToEii+0x198>)
 800502a:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005036:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <_ZN5Servo6turnToEii+0x198>)
 8005038:	edd3 7a00 	vldr	s15, [r3]
 800503c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	d510      	bpl.n	8005068 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 8005046:	4b32      	ldr	r3, [pc, #200]	@ (8005110 <_ZN5Servo6turnToEii+0x198>)
 8005048:	edd3 7a00 	vldr	s15, [r3]
 800504c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005050:	ee17 3a90 	vmov	r3, s15
 8005054:	607b      	str	r3, [r7, #4]
		write(ang);
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fed9 	bl	8004e10 <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 800505e:	492d      	ldr	r1, [pc, #180]	@ (8005114 <_ZN5Servo6turnToEii+0x19c>)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc ffd3 	bl	800200c <_Z4waitiP17TIM_HandleTypeDef>
		return;
 8005066:	e046      	b.n	80050f6 <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 8005068:	230a      	movs	r3, #10
 800506a:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	61fb      	str	r3, [r7, #28]
	t = 0;
 8005072:	4b29      	ldr	r3, [pc, #164]	@ (8005118 <_ZN5Servo6turnToEii+0x1a0>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1a3 0209 	sub.w	r2, r3, #9
 800507e:	4b26      	ldr	r3, [pc, #152]	@ (8005118 <_ZN5Servo6turnToEii+0x1a0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	dd2e      	ble.n	80050e4 <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <_ZN5Servo6turnToEii+0x1a0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800509c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a0:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80050b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c2:	ee17 3a90 	vmov	r3, s15
 80050c6:	617b      	str	r3, [r7, #20]
		write(a);
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fea0 	bl	8004e10 <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 80050d0:	4910      	ldr	r1, [pc, #64]	@ (8005114 <_ZN5Servo6turnToEii+0x19c>)
 80050d2:	200a      	movs	r0, #10
 80050d4:	f7fc ff9a 	bl	800200c <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <_ZN5Servo6turnToEii+0x1a0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330a      	adds	r3, #10
 80050de:	4a0e      	ldr	r2, [pc, #56]	@ (8005118 <_ZN5Servo6turnToEii+0x1a0>)
 80050e0:	6013      	str	r3, [r2, #0]
	}
 80050e2:	e7c9      	b.n	8005078 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 80050e4:	bf00      	nop
	write(ang);
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fe91 	bl	8004e10 <_ZN5Servo5writeEi>
 80050ee:	e002      	b.n	80050f6 <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 80050f4:	bf00      	nop
}
 80050f6:	3728      	adds	r7, #40	@ 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	f3af 8000 	nop.w
 8005100:	9999999a 	.word	0x9999999a
 8005104:	3ff19999 	.word	0x3ff19999
 8005108:	404e0000 	.word	0x404e0000
 800510c:	408f4000 	.word	0x408f4000
 8005110:	20001c0c 	.word	0x20001c0c
 8005114:	2000012c 	.word	0x2000012c
 8005118:	20001c10 	.word	0x20001c10

0800511c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005122:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <HAL_MspInit+0x54>)
 8005124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005126:	4a12      	ldr	r2, [pc, #72]	@ (8005170 <HAL_MspInit+0x54>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6613      	str	r3, [r2, #96]	@ 0x60
 800512e:	4b10      	ldr	r3, [pc, #64]	@ (8005170 <HAL_MspInit+0x54>)
 8005130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <HAL_MspInit+0x54>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	4a0c      	ldr	r2, [pc, #48]	@ (8005170 <HAL_MspInit+0x54>)
 8005140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005144:	6593      	str	r3, [r2, #88]	@ 0x58
 8005146:	4b0a      	ldr	r3, [pc, #40]	@ (8005170 <HAL_MspInit+0x54>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	2005      	movs	r0, #5
 8005158:	f000 fd2b 	bl	8005bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800515c:	2005      	movs	r0, #5
 800515e:	f000 fd42 	bl	8005be6 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005162:	f001 fc2d 	bl	80069c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b09c      	sub	sp, #112	@ 0x70
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800517c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800518c:	f107 0318 	add.w	r3, r7, #24
 8005190:	2244      	movs	r2, #68	@ 0x44
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f005 fe8b 	bl	800aeb0 <memset>
  if(hi2c->Instance==I2C1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2e      	ldr	r2, [pc, #184]	@ (8005258 <HAL_I2C_MspInit+0xe4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d154      	bne.n	800524e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80051a4:	2340      	movs	r3, #64	@ 0x40
 80051a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80051a8:	2300      	movs	r3, #0
 80051aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051ac:	f107 0318 	add.w	r3, r7, #24
 80051b0:	4618      	mov	r0, r3
 80051b2:	f002 f943 	bl	800743c <HAL_RCCEx_PeriphCLKConfig>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80051bc:	f7fc fdb2 	bl	8001d24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c0:	4b26      	ldr	r3, [pc, #152]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c4:	4a25      	ldr	r2, [pc, #148]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051cc:	4b23      	ldr	r3, [pc, #140]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d8:	4b20      	ldr	r3, [pc, #128]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051e4:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 80051e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051f6:	2312      	movs	r3, #18
 80051f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fe:	2300      	movs	r3, #0
 8005200:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005202:	2304      	movs	r3, #4
 8005204:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005206:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800520a:	4619      	mov	r1, r3
 800520c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005210:	f001 f836 	bl	8006280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005218:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800521a:	2312      	movs	r3, #18
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005222:	2300      	movs	r3, #0
 8005224:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005226:	2304      	movs	r3, #4
 8005228:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800522e:	4619      	mov	r1, r3
 8005230:	480b      	ldr	r0, [pc, #44]	@ (8005260 <HAL_I2C_MspInit+0xec>)
 8005232:	f001 f825 	bl	8006280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005236:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	4a08      	ldr	r2, [pc, #32]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 800523c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005240:	6593      	str	r3, [r2, #88]	@ 0x58
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <HAL_I2C_MspInit+0xe8>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800524e:	bf00      	nop
 8005250:	3770      	adds	r7, #112	@ 0x70
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40005400 	.word	0x40005400
 800525c:	40021000 	.word	0x40021000
 8005260:	48000400 	.word	0x48000400

08005264 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_TIM_PWM_MspInit+0x80>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10c      	bne.n	8005290 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005276:	4b1c      	ldr	r3, [pc, #112]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 8005278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527a:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 800527c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005280:	6613      	str	r3, [r2, #96]	@ 0x60
 8005282:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 8005284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800528e:	e022      	b.n	80052d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a15      	ldr	r2, [pc, #84]	@ (80052ec <HAL_TIM_PWM_MspInit+0x88>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d10c      	bne.n	80052b4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800529a:	4b13      	ldr	r3, [pc, #76]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529e:	4a12      	ldr	r2, [pc, #72]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a6:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
}
 80052b2:	e010      	b.n	80052d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d10b      	bne.n	80052d6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052be:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	4a09      	ldr	r2, [pc, #36]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 80052c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80052ca:	4b07      	ldr	r3, [pc, #28]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x84>)
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40013400 	.word	0x40013400

080052f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d114      	bne.n	8005330 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530a:	4a25      	ldr	r2, [pc, #148]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6593      	str	r3, [r2, #88]	@ 0x58
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800531e:	2200      	movs	r2, #0
 8005320:	2100      	movs	r1, #0
 8005322:	201c      	movs	r0, #28
 8005324:	f000 fc45 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005328:	201c      	movs	r0, #28
 800532a:	f000 fc5c 	bl	8005be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800532e:	e032      	b.n	8005396 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <HAL_TIM_Base_MspInit+0xb0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d114      	bne.n	8005364 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800533a:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005340:	f043 0310 	orr.w	r3, r3, #16
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
 8005346:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	2100      	movs	r1, #0
 8005356:	2036      	movs	r0, #54	@ 0x36
 8005358:	f000 fc2b 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800535c:	2036      	movs	r0, #54	@ 0x36
 800535e:	f000 fc42 	bl	8005be6 <HAL_NVIC_EnableIRQ>
}
 8005362:	e018      	b.n	8005396 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0f      	ldr	r2, [pc, #60]	@ (80053a8 <HAL_TIM_Base_MspInit+0xb4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d113      	bne.n	8005396 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800536e:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	4a0b      	ldr	r2, [pc, #44]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 8005374:	f043 0320 	orr.w	r3, r3, #32
 8005378:	6593      	str	r3, [r2, #88]	@ 0x58
 800537a:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <HAL_TIM_Base_MspInit+0xac>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	2037      	movs	r0, #55	@ 0x37
 800538c:	f000 fc11 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005390:	2037      	movs	r0, #55	@ 0x37
 8005392:	f000 fc28 	bl	8005be6 <HAL_NVIC_EnableIRQ>
}
 8005396:	bf00      	nop
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40001000 	.word	0x40001000
 80053a8:	40001400 	.word	0x40001400

080053ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	@ 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_TIM_Encoder_MspInit+0x80>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d129      	bne.n	8005422 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053ce:	4b18      	ldr	r3, [pc, #96]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053da:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e6:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ea:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <HAL_TIM_Encoder_MspInit+0x84>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005404:	2302      	movs	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540c:	2300      	movs	r3, #0
 800540e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005410:	230a      	movs	r3, #10
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4619      	mov	r1, r3
 800541a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800541e:	f000 ff2f 	bl	8006280 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	@ 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40000800 	.word	0x40000800
 8005430:	40021000 	.word	0x40021000

08005434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	@ 0x30
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 031c 	add.w	r3, r7, #28
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a41      	ldr	r2, [pc, #260]	@ (8005558 <HAL_TIM_MspPostInit+0x124>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d11c      	bne.n	8005490 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005456:	4b41      	ldr	r3, [pc, #260]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	4a40      	ldr	r2, [pc, #256]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005462:	4b3e      	ldr	r3, [pc, #248]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 8005464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800546e:	230f      	movs	r3, #15
 8005470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005472:	2302      	movs	r3, #2
 8005474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547a:	2300      	movs	r3, #0
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800547e:	2302      	movs	r3, #2
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005482:	f107 031c 	add.w	r3, r7, #28
 8005486:	4619      	mov	r1, r3
 8005488:	4835      	ldr	r0, [pc, #212]	@ (8005560 <HAL_TIM_MspPostInit+0x12c>)
 800548a:	f000 fef9 	bl	8006280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800548e:	e05f      	b.n	8005550 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a33      	ldr	r2, [pc, #204]	@ (8005564 <HAL_TIM_MspPostInit+0x130>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d139      	bne.n	800550e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 800549c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549e:	4a2f      	ldr	r2, [pc, #188]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054a6:	4b2d      	ldr	r3, [pc, #180]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b2:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 80054b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b6:	4a29      	ldr	r2, [pc, #164]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054be:	4b27      	ldr	r3, [pc, #156]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ce:	2302      	movs	r3, #2
 80054d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d6:	2300      	movs	r3, #0
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054da:	2302      	movs	r3, #2
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054de:	f107 031c 	add.w	r3, r7, #28
 80054e2:	4619      	mov	r1, r3
 80054e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054e8:	f000 feca 	bl	8006280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054ec:	2320      	movs	r3, #32
 80054ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f0:	2302      	movs	r3, #2
 80054f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054fc:	2302      	movs	r3, #2
 80054fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 031c 	add.w	r3, r7, #28
 8005504:	4619      	mov	r1, r3
 8005506:	4818      	ldr	r0, [pc, #96]	@ (8005568 <HAL_TIM_MspPostInit+0x134>)
 8005508:	f000 feba 	bl	8006280 <HAL_GPIO_Init>
}
 800550c:	e020      	b.n	8005550 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a16      	ldr	r2, [pc, #88]	@ (800556c <HAL_TIM_MspPostInit+0x138>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005518:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 800551a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551c:	4a0f      	ldr	r2, [pc, #60]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005524:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <HAL_TIM_MspPostInit+0x128>)
 8005526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005540:	2304      	movs	r3, #4
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	4619      	mov	r1, r3
 800554a:	4805      	ldr	r0, [pc, #20]	@ (8005560 <HAL_TIM_MspPostInit+0x12c>)
 800554c:	f000 fe98 	bl	8006280 <HAL_GPIO_Init>
}
 8005550:	bf00      	nop
 8005552:	3730      	adds	r7, #48	@ 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40021000 	.word	0x40021000
 8005560:	48000800 	.word	0x48000800
 8005564:	40000400 	.word	0x40000400
 8005568:	48000400 	.word	0x48000400
 800556c:	40013400 	.word	0x40013400

08005570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b09a      	sub	sp, #104	@ 0x68
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005578:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005588:	f107 0310 	add.w	r3, r7, #16
 800558c:	2244      	movs	r2, #68	@ 0x44
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f005 fc8d 	bl	800aeb0 <memset>
  if(huart->Instance==USART2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a4e      	ldr	r2, [pc, #312]	@ (80056d4 <HAL_UART_MspInit+0x164>)
 800559c:	4293      	cmp	r3, r2
 800559e:	f040 8094 	bne.w	80056ca <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80055a2:	2302      	movs	r3, #2
 80055a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055aa:	f107 0310 	add.w	r3, r7, #16
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 ff44 	bl	800743c <HAL_RCCEx_PeriphCLKConfig>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80055ba:	f7fc fbb3 	bl	8001d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055be:	4b46      	ldr	r3, [pc, #280]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	4a45      	ldr	r2, [pc, #276]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ca:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d6:	4b40      	ldr	r3, [pc, #256]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055da:	4a3f      	ldr	r2, [pc, #252]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055e2:	4b3d      	ldr	r3, [pc, #244]	@ (80056d8 <HAL_UART_MspInit+0x168>)
 80055e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055ee:	230c      	movs	r3, #12
 80055f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f2:	2302      	movs	r3, #2
 80055f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fa:	2300      	movs	r3, #0
 80055fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055fe:	2307      	movs	r3, #7
 8005600:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005602:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005606:	4619      	mov	r1, r3
 8005608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800560c:	f000 fe38 	bl	8006280 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8005610:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005612:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <HAL_UART_MspInit+0x170>)
 8005614:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005616:	4b31      	ldr	r3, [pc, #196]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005618:	221a      	movs	r2, #26
 800561a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800561c:	4b2f      	ldr	r3, [pc, #188]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 800561e:	2200      	movs	r2, #0
 8005620:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005622:	4b2e      	ldr	r3, [pc, #184]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005624:	2200      	movs	r2, #0
 8005626:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005628:	4b2c      	ldr	r3, [pc, #176]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 800562a:	2280      	movs	r2, #128	@ 0x80
 800562c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562e:	4b2b      	ldr	r3, [pc, #172]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005630:	2200      	movs	r2, #0
 8005632:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005634:	4b29      	ldr	r3, [pc, #164]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005636:	2200      	movs	r2, #0
 8005638:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800563a:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 800563c:	2220      	movs	r2, #32
 800563e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005640:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005642:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8005646:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005648:	4824      	ldr	r0, [pc, #144]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 800564a:	f000 fae7 	bl	8005c1c <HAL_DMA_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8005654:	f7fc fb66 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005660:	4a1e      	ldr	r2, [pc, #120]	@ (80056dc <HAL_UART_MspInit+0x16c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8005666:	4b1f      	ldr	r3, [pc, #124]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005668:	4a1f      	ldr	r2, [pc, #124]	@ (80056e8 <HAL_UART_MspInit+0x178>)
 800566a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800566c:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 800566e:	221b      	movs	r2, #27
 8005670:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005672:	4b1c      	ldr	r3, [pc, #112]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005674:	2210      	movs	r2, #16
 8005676:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800567e:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005680:	2280      	movs	r2, #128	@ 0x80
 8005682:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005684:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005686:	2200      	movs	r2, #0
 8005688:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800568a:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005690:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005692:	2200      	movs	r2, #0
 8005694:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005696:	4b13      	ldr	r3, [pc, #76]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 8005698:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800569c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800569e:	4811      	ldr	r0, [pc, #68]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 80056a0:	f000 fabc 	bl	8005c1c <HAL_DMA_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80056aa:	f7fc fb3b 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a0c      	ldr	r2, [pc, #48]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 80056b2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80056b4:	4a0b      	ldr	r2, [pc, #44]	@ (80056e4 <HAL_UART_MspInit+0x174>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	2026      	movs	r0, #38	@ 0x26
 80056c0:	f000 fa77 	bl	8005bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80056c4:	2026      	movs	r0, #38	@ 0x26
 80056c6:	f000 fa8e 	bl	8005be6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80056ca:	bf00      	nop
 80056cc:	3768      	adds	r7, #104	@ 0x68
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40004400 	.word	0x40004400
 80056d8:	40021000 	.word	0x40021000
 80056dc:	20000388 	.word	0x20000388
 80056e0:	40020030 	.word	0x40020030
 80056e4:	200003e8 	.word	0x200003e8
 80056e8:	40020044 	.word	0x40020044

080056ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <NMI_Handler+0x4>

080056f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <HardFault_Handler+0x4>

080056fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <MemManage_Handler+0x4>

08005704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <BusFault_Handler+0x4>

0800570c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <UsageFault_Handler+0x4>

08005714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005742:	f000 f93d 	bl	80059c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}

0800574a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800575c:	2008      	movs	r0, #8
 800575e:	f000 ff41 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}

08005766 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800576a:	2010      	movs	r0, #16
 800576c:	f000 ff3a 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}

08005774 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005778:	4802      	ldr	r0, [pc, #8]	@ (8005784 <DMA1_Channel3_IRQHandler+0x10>)
 800577a:	f000 fc32 	bl	8005fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000388 	.word	0x20000388

08005788 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800578c:	4802      	ldr	r0, [pc, #8]	@ (8005798 <DMA1_Channel4_IRQHandler+0x10>)
 800578e:	f000 fc28 	bl	8005fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	200003e8 	.word	0x200003e8

0800579c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80057a0:	2020      	movs	r0, #32
 80057a2:	f000 ff1f 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80057a6:	2080      	movs	r0, #128	@ 0x80
 80057a8:	f000 ff1c 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80057b0:	f000 ff18 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80057b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80057b8:	f000 ff14 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}

080057c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057c4:	4802      	ldr	r0, [pc, #8]	@ (80057d0 <TIM2_IRQHandler+0x10>)
 80057c6:	f002 fcf1 	bl	80081ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	2000012c 	.word	0x2000012c

080057d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80057d8:	4802      	ldr	r0, [pc, #8]	@ (80057e4 <USART2_IRQHandler+0x10>)
 80057da:	f003 ff31 	bl	8009640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200002f4 	.word	0x200002f4

080057e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80057ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80057f0:	f000 fef8 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80057f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80057f8:	f000 fef4 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80057fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005800:	f000 fef0 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005804:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005808:	f000 feec 	bl	80065e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}

08005810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005814:	4802      	ldr	r0, [pc, #8]	@ (8005820 <TIM6_DAC_IRQHandler+0x10>)
 8005816:	f002 fcc9 	bl	80081ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000210 	.word	0x20000210

08005824 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005828:	4802      	ldr	r0, [pc, #8]	@ (8005834 <TIM7_IRQHandler+0x10>)
 800582a:	f002 fcbf 	bl	80081ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2000025c 	.word	0x2000025c

08005838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005840:	4a14      	ldr	r2, [pc, #80]	@ (8005894 <_sbrk+0x5c>)
 8005842:	4b15      	ldr	r3, [pc, #84]	@ (8005898 <_sbrk+0x60>)
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800584c:	4b13      	ldr	r3, [pc, #76]	@ (800589c <_sbrk+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005854:	4b11      	ldr	r3, [pc, #68]	@ (800589c <_sbrk+0x64>)
 8005856:	4a12      	ldr	r2, [pc, #72]	@ (80058a0 <_sbrk+0x68>)
 8005858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800585a:	4b10      	ldr	r3, [pc, #64]	@ (800589c <_sbrk+0x64>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d207      	bcs.n	8005878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005868:	f005 fb2a 	bl	800aec0 <__errno>
 800586c:	4603      	mov	r3, r0
 800586e:	220c      	movs	r2, #12
 8005870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295
 8005876:	e009      	b.n	800588c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005878:	4b08      	ldr	r3, [pc, #32]	@ (800589c <_sbrk+0x64>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800587e:	4b07      	ldr	r3, [pc, #28]	@ (800589c <_sbrk+0x64>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	4a05      	ldr	r2, [pc, #20]	@ (800589c <_sbrk+0x64>)
 8005888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800588a:	68fb      	ldr	r3, [r7, #12]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20008000 	.word	0x20008000
 8005898:	00000400 	.word	0x00000400
 800589c:	20001c14 	.word	0x20001c14
 80058a0:	20001d68 	.word	0x20001d68

080058a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80058a8:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <SystemInit+0x20>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	4a05      	ldr	r2, [pc, #20]	@ (80058c4 <SystemInit+0x20>)
 80058b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	e000ed00 	.word	0xe000ed00

080058c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058c8:	480d      	ldr	r0, [pc, #52]	@ (8005900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80058cc:	f7ff ffea 	bl	80058a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058d0:	480c      	ldr	r0, [pc, #48]	@ (8005904 <LoopForever+0x6>)
  ldr r1, =_edata
 80058d2:	490d      	ldr	r1, [pc, #52]	@ (8005908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058d4:	4a0d      	ldr	r2, [pc, #52]	@ (800590c <LoopForever+0xe>)
  movs r3, #0
 80058d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80058d8:	e002      	b.n	80058e0 <LoopCopyDataInit>

080058da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058de:	3304      	adds	r3, #4

080058e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058e4:	d3f9      	bcc.n	80058da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005914 <LoopForever+0x16>)
  movs r3, #0
 80058ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058ec:	e001      	b.n	80058f2 <LoopFillZerobss>

080058ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058f0:	3204      	adds	r2, #4

080058f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058f4:	d3fb      	bcc.n	80058ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80058f6:	f005 fae9 	bl	800aecc <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80058fa:	f7fb fd8d 	bl	8001418 <main>

080058fe <LoopForever>:

LoopForever:
    b LoopForever
 80058fe:	e7fe      	b.n	80058fe <LoopForever>
  ldr   r0, =_estack
 8005900:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005908:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800590c:	0800b598 	.word	0x0800b598
  ldr r2, =_sbss
 8005910:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005914:	20001d64 	.word	0x20001d64

08005918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005918:	e7fe      	b.n	8005918 <ADC1_2_IRQHandler>

0800591a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005924:	2003      	movs	r0, #3
 8005926:	f000 f939 	bl	8005b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800592a:	200f      	movs	r0, #15
 800592c:	f000 f80e 	bl	800594c <HAL_InitTick>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	71fb      	strb	r3, [r7, #7]
 800593a:	e001      	b.n	8005940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800593c:	f7ff fbee 	bl	800511c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005940:	79fb      	ldrb	r3, [r7, #7]

}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005958:	4b16      	ldr	r3, [pc, #88]	@ (80059b4 <HAL_InitTick+0x68>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d022      	beq.n	80059a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005960:	4b15      	ldr	r3, [pc, #84]	@ (80059b8 <HAL_InitTick+0x6c>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <HAL_InitTick+0x68>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800596c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f944 	bl	8005c02 <HAL_SYSTICK_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10f      	bne.n	80059a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d809      	bhi.n	800599a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005986:	2200      	movs	r2, #0
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	f04f 30ff 	mov.w	r0, #4294967295
 800598e:	f000 f910 	bl	8005bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005992:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <HAL_InitTick+0x70>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e007      	b.n	80059aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
 800599e:	e004      	b.n	80059aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e001      	b.n	80059aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000001c 	.word	0x2000001c
 80059b8:	20000014 	.word	0x20000014
 80059bc:	20000018 	.word	0x20000018

080059c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <HAL_IncTick+0x1c>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <HAL_IncTick+0x20>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4413      	add	r3, r2
 80059ce:	4a03      	ldr	r2, [pc, #12]	@ (80059dc <HAL_IncTick+0x1c>)
 80059d0:	6013      	str	r3, [r2, #0]
}
 80059d2:	bf00      	nop
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20001c18 	.word	0x20001c18
 80059e0:	2000001c 	.word	0x2000001c

080059e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return uwTick;
 80059e8:	4b03      	ldr	r3, [pc, #12]	@ (80059f8 <HAL_GetTick+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20001c18 	.word	0x20001c18

080059fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <__NVIC_SetPriorityGrouping+0x44>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <__NVIC_SetPriorityGrouping+0x44>)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	60d3      	str	r3, [r2, #12]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	e000ed00 	.word	0xe000ed00

08005a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a48:	4b04      	ldr	r3, [pc, #16]	@ (8005a5c <__NVIC_GetPriorityGrouping+0x18>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	f003 0307 	and.w	r3, r3, #7
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	db0b      	blt.n	8005a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	f003 021f 	and.w	r2, r3, #31
 8005a78:	4907      	ldr	r1, [pc, #28]	@ (8005a98 <__NVIC_EnableIRQ+0x38>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2001      	movs	r0, #1
 8005a82:	fa00 f202 	lsl.w	r2, r0, r2
 8005a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000e100 	.word	0xe000e100

08005a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	db0a      	blt.n	8005ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	490c      	ldr	r1, [pc, #48]	@ (8005ae8 <__NVIC_SetPriority+0x4c>)
 8005ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aba:	0112      	lsls	r2, r2, #4
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	440b      	add	r3, r1
 8005ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ac4:	e00a      	b.n	8005adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4908      	ldr	r1, [pc, #32]	@ (8005aec <__NVIC_SetPriority+0x50>)
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	0112      	lsls	r2, r2, #4
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	440b      	add	r3, r1
 8005ada:	761a      	strb	r2, [r3, #24]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	e000e100 	.word	0xe000e100
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	@ 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f1c3 0307 	rsb	r3, r3, #7
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	bf28      	it	cs
 8005b0e:	2304      	movcs	r3, #4
 8005b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d902      	bls.n	8005b20 <NVIC_EncodePriority+0x30>
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3b03      	subs	r3, #3
 8005b1e:	e000      	b.n	8005b22 <NVIC_EncodePriority+0x32>
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	401a      	ands	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b38:	f04f 31ff 	mov.w	r1, #4294967295
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	43d9      	mvns	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	4313      	orrs	r3, r2
         );
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	@ 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b68:	d301      	bcc.n	8005b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e00f      	b.n	8005b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b98 <SysTick_Config+0x40>)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b76:	210f      	movs	r1, #15
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	f7ff ff8e 	bl	8005a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <SysTick_Config+0x40>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b86:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <SysTick_Config+0x40>)
 8005b88:	2207      	movs	r2, #7
 8005b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000e010 	.word	0xe000e010

08005b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff29 	bl	80059fc <__NVIC_SetPriorityGrouping>
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc0:	f7ff ff40 	bl	8005a44 <__NVIC_GetPriorityGrouping>
 8005bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	6978      	ldr	r0, [r7, #20]
 8005bcc:	f7ff ff90 	bl	8005af0 <NVIC_EncodePriority>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff ff5f 	bl	8005a9c <__NVIC_SetPriority>
}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	4603      	mov	r3, r0
 8005bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ff33 	bl	8005a60 <__NVIC_EnableIRQ>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff ffa4 	bl	8005b58 <SysTick_Config>
 8005c10:	4603      	mov	r3, r0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e08d      	b.n	8005d4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	4b47      	ldr	r3, [pc, #284]	@ (8005d54 <HAL_DMA_Init+0x138>)
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d80f      	bhi.n	8005c5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b45      	ldr	r3, [pc, #276]	@ (8005d58 <HAL_DMA_Init+0x13c>)
 8005c42:	4413      	add	r3, r2
 8005c44:	4a45      	ldr	r2, [pc, #276]	@ (8005d5c <HAL_DMA_Init+0x140>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	009a      	lsls	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a42      	ldr	r2, [pc, #264]	@ (8005d60 <HAL_DMA_Init+0x144>)
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c58:	e00e      	b.n	8005c78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4b40      	ldr	r3, [pc, #256]	@ (8005d64 <HAL_DMA_Init+0x148>)
 8005c62:	4413      	add	r3, r2
 8005c64:	4a3d      	ldr	r2, [pc, #244]	@ (8005d5c <HAL_DMA_Init+0x140>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	009a      	lsls	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a3c      	ldr	r2, [pc, #240]	@ (8005d68 <HAL_DMA_Init+0x14c>)
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa76 	bl	80061bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd8:	d102      	bne.n	8005ce0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cf4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_DMA_Init+0x104>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d80c      	bhi.n	8005d20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa96 	bl	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e008      	b.n	8005d32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40020407 	.word	0x40020407
 8005d58:	bffdfff8 	.word	0xbffdfff8
 8005d5c:	cccccccd 	.word	0xcccccccd
 8005d60:	40020000 	.word	0x40020000
 8005d64:	bffdfbf8 	.word	0xbffdfbf8
 8005d68:	40020400 	.word	0x40020400

08005d6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_Start_IT+0x20>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e066      	b.n	8005e5a <HAL_DMA_Start_IT+0xee>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d155      	bne.n	8005e4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f9bb 	bl	8006140 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 020e 	orr.w	r2, r2, #14
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	e00f      	b.n	8005e04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 020a 	orr.w	r2, r2, #10
 8005e02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e005      	b.n	8005e58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
 8005e56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d005      	beq.n	8005e86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e037      	b.n	8005ef6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 020e 	bic.w	r2, r2, #14
 8005e94:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ea4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	f003 021f 	and.w	r2, r3, #31
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ed2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00c      	beq.n	8005ef6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ef4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d00d      	beq.n	8005f48 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
 8005f46:	e047      	b.n	8005fd8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 020e 	bic.w	r2, r2, #14
 8005f56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
    }
  }
  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2204      	movs	r2, #4
 8006004:	409a      	lsls	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d026      	beq.n	800605c <HAL_DMA_IRQHandler+0x7a>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d021      	beq.n	800605c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d107      	bne.n	8006036 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0204 	bic.w	r2, r2, #4
 8006034:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f003 021f 	and.w	r2, r3, #31
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	2104      	movs	r1, #4
 8006044:	fa01 f202 	lsl.w	r2, r1, r2
 8006048:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	2b00      	cmp	r3, #0
 8006050:	d071      	beq.n	8006136 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800605a:	e06c      	b.n	8006136 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2202      	movs	r2, #2
 8006066:	409a      	lsls	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02e      	beq.n	80060ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d029      	beq.n	80060ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 020a 	bic.w	r2, r2, #10
 8006096:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a4:	f003 021f 	and.w	r2, r3, #31
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	2102      	movs	r1, #2
 80060ae:	fa01 f202 	lsl.w	r2, r1, r2
 80060b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d038      	beq.n	8006136 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060cc:	e033      	b.n	8006136 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2208      	movs	r2, #8
 80060d8:	409a      	lsls	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d02a      	beq.n	8006138 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d025      	beq.n	8006138 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 020e 	bic.w	r2, r2, #14
 80060fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006100:	f003 021f 	and.w	r2, r3, #31
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f202 	lsl.w	r2, r1, r2
 800610e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006136:	bf00      	nop
 8006138:	bf00      	nop
}
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006156:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	f003 021f 	and.w	r2, r3, #31
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f202 	lsl.w	r2, r1, r2
 800617c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b10      	cmp	r3, #16
 800618c:	d108      	bne.n	80061a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800619e:	e007      	b.n	80061b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b16      	ldr	r3, [pc, #88]	@ (8006224 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d802      	bhi.n	80061d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80061d0:	4b15      	ldr	r3, [pc, #84]	@ (8006228 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e001      	b.n	80061da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80061d6:	4b15      	ldr	r3, [pc, #84]	@ (800622c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	3b08      	subs	r3, #8
 80061e6:	4a12      	ldr	r2, [pc, #72]	@ (8006230 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	009a      	lsls	r2, r3, #2
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a0b      	ldr	r2, [pc, #44]	@ (8006234 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006206:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2201      	movs	r2, #1
 8006210:	409a      	lsls	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40020407 	.word	0x40020407
 8006228:	40020800 	.word	0x40020800
 800622c:	40020820 	.word	0x40020820
 8006230:	cccccccd 	.word	0xcccccccd
 8006234:	40020880 	.word	0x40020880

08006238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4b0b      	ldr	r3, [pc, #44]	@ (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800625a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3b01      	subs	r3, #1
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2201      	movs	r2, #1
 8006266:	409a      	lsls	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	1000823f 	.word	0x1000823f
 800627c:	40020940 	.word	0x40020940

08006280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800628e:	e15a      	b.n	8006546 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	2101      	movs	r1, #1
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 814c 	beq.w	8006540 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d005      	beq.n	80062c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d130      	bne.n	8006322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	2203      	movs	r2, #3
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062f6:	2201      	movs	r2, #1
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	f003 0201 	and.w	r2, r3, #1
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b03      	cmp	r3, #3
 800632c:	d017      	beq.n	800635e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	2203      	movs	r2, #3
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4013      	ands	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d123      	bne.n	80063b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	08da      	lsrs	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3208      	adds	r2, #8
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	220f      	movs	r2, #15
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	08da      	lsrs	r2, r3, #3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3208      	adds	r2, #8
 80063ac:	6939      	ldr	r1, [r7, #16]
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	2203      	movs	r2, #3
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4013      	ands	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0203 	and.w	r2, r3, #3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80a6 	beq.w	8006540 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006564 <HAL_GPIO_Init+0x2e4>)
 80063f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006564 <HAL_GPIO_Init+0x2e4>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006400:	4b58      	ldr	r3, [pc, #352]	@ (8006564 <HAL_GPIO_Init+0x2e4>)
 8006402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	60bb      	str	r3, [r7, #8]
 800640a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800640c:	4a56      	ldr	r2, [pc, #344]	@ (8006568 <HAL_GPIO_Init+0x2e8>)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	089b      	lsrs	r3, r3, #2
 8006412:	3302      	adds	r3, #2
 8006414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	220f      	movs	r2, #15
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4013      	ands	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006436:	d01f      	beq.n	8006478 <HAL_GPIO_Init+0x1f8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a4c      	ldr	r2, [pc, #304]	@ (800656c <HAL_GPIO_Init+0x2ec>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d019      	beq.n	8006474 <HAL_GPIO_Init+0x1f4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a4b      	ldr	r2, [pc, #300]	@ (8006570 <HAL_GPIO_Init+0x2f0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_GPIO_Init+0x1f0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a4a      	ldr	r2, [pc, #296]	@ (8006574 <HAL_GPIO_Init+0x2f4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00d      	beq.n	800646c <HAL_GPIO_Init+0x1ec>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a49      	ldr	r2, [pc, #292]	@ (8006578 <HAL_GPIO_Init+0x2f8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <HAL_GPIO_Init+0x1e8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a48      	ldr	r2, [pc, #288]	@ (800657c <HAL_GPIO_Init+0x2fc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_GPIO_Init+0x1e4>
 8006460:	2305      	movs	r3, #5
 8006462:	e00a      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 8006464:	2306      	movs	r3, #6
 8006466:	e008      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 8006468:	2304      	movs	r3, #4
 800646a:	e006      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 800646c:	2303      	movs	r3, #3
 800646e:	e004      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 8006470:	2302      	movs	r3, #2
 8006472:	e002      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_GPIO_Init+0x1fa>
 8006478:	2300      	movs	r3, #0
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	f002 0203 	and.w	r2, r2, #3
 8006480:	0092      	lsls	r2, r2, #2
 8006482:	4093      	lsls	r3, r2
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800648a:	4937      	ldr	r1, [pc, #220]	@ (8006568 <HAL_GPIO_Init+0x2e8>)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	3302      	adds	r3, #2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006498:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <HAL_GPIO_Init+0x300>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	43db      	mvns	r3, r3
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4013      	ands	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064bc:	4a30      	ldr	r2, [pc, #192]	@ (8006580 <HAL_GPIO_Init+0x300>)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80064c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006580 <HAL_GPIO_Init+0x300>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4013      	ands	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064e6:	4a26      	ldr	r2, [pc, #152]	@ (8006580 <HAL_GPIO_Init+0x300>)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80064ec:	4b24      	ldr	r3, [pc, #144]	@ (8006580 <HAL_GPIO_Init+0x300>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4013      	ands	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006510:	4a1b      	ldr	r2, [pc, #108]	@ (8006580 <HAL_GPIO_Init+0x300>)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006516:	4b1a      	ldr	r3, [pc, #104]	@ (8006580 <HAL_GPIO_Init+0x300>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	43db      	mvns	r3, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4013      	ands	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800653a:	4a11      	ldr	r2, [pc, #68]	@ (8006580 <HAL_GPIO_Init+0x300>)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	3301      	adds	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	f47f ae9d 	bne.w	8006290 <HAL_GPIO_Init+0x10>
  }
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40021000 	.word	0x40021000
 8006568:	40010000 	.word	0x40010000
 800656c:	48000400 	.word	0x48000400
 8006570:	48000800 	.word	0x48000800
 8006574:	48000c00 	.word	0x48000c00
 8006578:	48001000 	.word	0x48001000
 800657c:	48001400 	.word	0x48001400
 8006580:	40010400 	.word	0x40010400

08006584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	e001      	b.n	80065a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
 80065c0:	4613      	mov	r3, r2
 80065c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065c4:	787b      	ldrb	r3, [r7, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065ca:	887a      	ldrh	r2, [r7, #2]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065d0:	e002      	b.n	80065d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065ee:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065fa:	4a05      	ldr	r2, [pc, #20]	@ (8006610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fd78 	bl	80020f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40010400 	.word	0x40010400

08006614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e08d      	b.n	8006742 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fe fd9a 	bl	8005174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2224      	movs	r2, #36	@ 0x24
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d107      	bne.n	800668e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	e006      	b.n	800669c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800669a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d108      	bne.n	80066b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	e007      	b.n	80066c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69d9      	ldr	r1, [r3, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b20      	cmp	r3, #32
 800675e:	d138      	bne.n	80067d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800676a:	2302      	movs	r3, #2
 800676c:	e032      	b.n	80067d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	@ 0x24
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800679c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d139      	bne.n	800686a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006800:	2302      	movs	r3, #2
 8006802:	e033      	b.n	800686c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2224      	movs	r2, #36	@ 0x24
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006832:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d141      	bne.n	800690a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006886:	4b4b      	ldr	r3, [pc, #300]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006892:	d131      	bne.n	80068f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006894:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800689a:	4a46      	ldr	r2, [pc, #280]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068a4:	4b43      	ldr	r3, [pc, #268]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068ac:	4a41      	ldr	r2, [pc, #260]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068b4:	4b40      	ldr	r3, [pc, #256]	@ (80069b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2232      	movs	r2, #50	@ 0x32
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	4a3f      	ldr	r2, [pc, #252]	@ (80069bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	0c9b      	lsrs	r3, r3, #18
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ca:	e002      	b.n	80068d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068d2:	4b38      	ldr	r3, [pc, #224]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068de:	d102      	bne.n	80068e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f2      	bne.n	80068cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068e6:	4b33      	ldr	r3, [pc, #204]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f2:	d158      	bne.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e057      	b.n	80069a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f8:	4b2e      	ldr	r3, [pc, #184]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fe:	4a2d      	ldr	r2, [pc, #180]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006908:	e04d      	b.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006910:	d141      	bne.n	8006996 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006912:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691e:	d131      	bne.n	8006984 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006920:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006926:	4a23      	ldr	r2, [pc, #140]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800692c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006930:	4b20      	ldr	r3, [pc, #128]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006938:	4a1e      	ldr	r2, [pc, #120]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800693a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800693e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2232      	movs	r2, #50	@ 0x32
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	0c9b      	lsrs	r3, r3, #18
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006956:	e002      	b.n	800695e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3b01      	subs	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800695e:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800696a:	d102      	bne.n	8006972 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f2      	bne.n	8006958 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d112      	bne.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e011      	b.n	80069a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006984:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800698a:	4a0a      	ldr	r2, [pc, #40]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006994:	e007      	b.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006996:	4b07      	ldr	r3, [pc, #28]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800699e:	4a05      	ldr	r2, [pc, #20]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40007000 	.word	0x40007000
 80069b8:	20000014 	.word	0x20000014
 80069bc:	431bde83 	.word	0x431bde83

080069c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a04      	ldr	r2, [pc, #16]	@ (80069dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069ce:	6093      	str	r3, [r2, #8]
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40007000 	.word	0x40007000

080069e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e2fe      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d075      	beq.n	8006aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fe:	4b97      	ldr	r3, [pc, #604]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
 8006a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a08:	4b94      	ldr	r3, [pc, #592]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	d102      	bne.n	8006a1e <HAL_RCC_OscConfig+0x3e>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_OscConfig+0x44>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d10b      	bne.n	8006a3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a24:	4b8d      	ldr	r3, [pc, #564]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05b      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x108>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d157      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e2d9      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a44:	d106      	bne.n	8006a54 <HAL_RCC_OscConfig+0x74>
 8006a46:	4b85      	ldr	r3, [pc, #532]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a84      	ldr	r2, [pc, #528]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e01d      	b.n	8006a90 <HAL_RCC_OscConfig+0xb0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0x98>
 8006a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7e      	ldr	r2, [pc, #504]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e00b      	b.n	8006a90 <HAL_RCC_OscConfig+0xb0>
 8006a78:	4b78      	ldr	r3, [pc, #480]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a77      	ldr	r2, [pc, #476]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4b75      	ldr	r3, [pc, #468]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a74      	ldr	r2, [pc, #464]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d013      	beq.n	8006ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a98:	f7fe ffa4 	bl	80059e4 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fe ffa0 	bl	80059e4 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b64      	cmp	r3, #100	@ 0x64
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e29e      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0f0      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xc0>
 8006abe:	e014      	b.n	8006aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fe ff90 	bl	80059e4 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fe ff8c 	bl	80059e4 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	@ 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e28a      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ada:	4b60      	ldr	r3, [pc, #384]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xe8>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d075      	beq.n	8006be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006af6:	4b59      	ldr	r3, [pc, #356]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 030c 	and.w	r3, r3, #12
 8006afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b00:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d102      	bne.n	8006b16 <HAL_RCC_OscConfig+0x136>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d002      	beq.n	8006b1c <HAL_RCC_OscConfig+0x13c>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d11f      	bne.n	8006b5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_RCC_OscConfig+0x154>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e25d      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b34:	4b49      	ldr	r3, [pc, #292]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	4946      	ldr	r1, [pc, #280]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b48:	4b45      	ldr	r3, [pc, #276]	@ (8006c60 <HAL_RCC_OscConfig+0x280>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fefd 	bl	800594c <HAL_InitTick>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d043      	beq.n	8006be0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e249      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d023      	beq.n	8006bac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b64:	4b3d      	ldr	r3, [pc, #244]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a3c      	ldr	r2, [pc, #240]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fe ff38 	bl	80059e4 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b78:	f7fe ff34 	bl	80059e4 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e232      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b8a:	4b34      	ldr	r3, [pc, #208]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b96:	4b31      	ldr	r3, [pc, #196]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	492d      	ldr	r1, [pc, #180]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	604b      	str	r3, [r1, #4]
 8006baa:	e01a      	b.n	8006be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bac:	4b2b      	ldr	r3, [pc, #172]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006bb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fe ff14 	bl	80059e4 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc0:	f7fe ff10 	bl	80059e4 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e20e      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bd2:	4b22      	ldr	r3, [pc, #136]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x1e0>
 8006bde:	e000      	b.n	8006be2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006be0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d041      	beq.n	8006c72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01c      	beq.n	8006c30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bf6:	4b19      	ldr	r3, [pc, #100]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c06:	f7fe feed 	bl	80059e4 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c0e:	f7fe fee9 	bl	80059e4 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e1e7      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c20:	4b0e      	ldr	r3, [pc, #56]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ef      	beq.n	8006c0e <HAL_RCC_OscConfig+0x22e>
 8006c2e:	e020      	b.n	8006c72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c36:	4a09      	ldr	r2, [pc, #36]	@ (8006c5c <HAL_RCC_OscConfig+0x27c>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fe fed0 	bl	80059e4 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c46:	e00d      	b.n	8006c64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c48:	f7fe fecc 	bl	80059e4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d906      	bls.n	8006c64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e1ca      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
 8006c5a:	bf00      	nop
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c64:	4b8c      	ldr	r3, [pc, #560]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ea      	bne.n	8006c48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80a6 	beq.w	8006dcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c84:	4b84      	ldr	r3, [pc, #528]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCC_OscConfig+0x2b4>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x2b6>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb6:	4b79      	ldr	r3, [pc, #484]	@ (8006e9c <HAL_RCC_OscConfig+0x4bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d118      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc2:	4b76      	ldr	r3, [pc, #472]	@ (8006e9c <HAL_RCC_OscConfig+0x4bc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a75      	ldr	r2, [pc, #468]	@ (8006e9c <HAL_RCC_OscConfig+0x4bc>)
 8006cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cce:	f7fe fe89 	bl	80059e4 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cd6:	f7fe fe85 	bl	80059e4 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e183      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCC_OscConfig+0x4bc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0f0      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d108      	bne.n	8006d0e <HAL_RCC_OscConfig+0x32e>
 8006cfc:	4b66      	ldr	r3, [pc, #408]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d02:	4a65      	ldr	r2, [pc, #404]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d04:	f043 0301 	orr.w	r3, r3, #1
 8006d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d0c:	e024      	b.n	8006d58 <HAL_RCC_OscConfig+0x378>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	d110      	bne.n	8006d38 <HAL_RCC_OscConfig+0x358>
 8006d16:	4b60      	ldr	r3, [pc, #384]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d1e:	f043 0304 	orr.w	r3, r3, #4
 8006d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d26:	4b5c      	ldr	r3, [pc, #368]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d36:	e00f      	b.n	8006d58 <HAL_RCC_OscConfig+0x378>
 8006d38:	4b57      	ldr	r3, [pc, #348]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	4a56      	ldr	r2, [pc, #344]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d48:	4b53      	ldr	r3, [pc, #332]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4e:	4a52      	ldr	r2, [pc, #328]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	f023 0304 	bic.w	r3, r3, #4
 8006d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fe fe40 	bl	80059e4 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fe fe3c 	bl	80059e4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e138      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7e:	4b46      	ldr	r3, [pc, #280]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0ed      	beq.n	8006d68 <HAL_RCC_OscConfig+0x388>
 8006d8c:	e015      	b.n	8006dba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8e:	f7fe fe29 	bl	80059e4 <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d94:	e00a      	b.n	8006dac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fe fe25 	bl	80059e4 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e121      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dac:	4b3a      	ldr	r3, [pc, #232]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ed      	bne.n	8006d96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc0:	4b35      	ldr	r3, [pc, #212]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	4a34      	ldr	r2, [pc, #208]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d03c      	beq.n	8006e52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01c      	beq.n	8006e1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006de0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fe fdf8 	bl	80059e4 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df8:	f7fe fdf4 	bl	80059e4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e0f2      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e0a:	4b23      	ldr	r3, [pc, #140]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ef      	beq.n	8006df8 <HAL_RCC_OscConfig+0x418>
 8006e18:	e01b      	b.n	8006e52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e20:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2a:	f7fe fddb 	bl	80059e4 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e32:	f7fe fdd7 	bl	80059e4 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0d5      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e44:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ef      	bne.n	8006e32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80c9 	beq.w	8006fee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b0c      	cmp	r3, #12
 8006e66:	f000 8083 	beq.w	8006f70 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d15e      	bne.n	8006f30 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e72:	4b09      	ldr	r3, [pc, #36]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a08      	ldr	r2, [pc, #32]	@ (8006e98 <HAL_RCC_OscConfig+0x4b8>)
 8006e78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7e:	f7fe fdb1 	bl	80059e4 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e84:	e00c      	b.n	8006ea0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e86:	f7fe fdad 	bl	80059e4 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d905      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e0ab      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ea0:	4b55      	ldr	r3, [pc, #340]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ec      	bne.n	8006e86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eac:	4b52      	ldr	r3, [pc, #328]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	4b52      	ldr	r3, [pc, #328]	@ (8006ffc <HAL_RCC_OscConfig+0x61c>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6a11      	ldr	r1, [r2, #32]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0112      	lsls	r2, r2, #4
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ec6:	0212      	lsls	r2, r2, #8
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ece:	0852      	lsrs	r2, r2, #1
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	0552      	lsls	r2, r2, #21
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006eda:	0852      	lsrs	r2, r2, #1
 8006edc:	3a01      	subs	r2, #1
 8006ede:	0652      	lsls	r2, r2, #25
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ee6:	06d2      	lsls	r2, r2, #27
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	4943      	ldr	r1, [pc, #268]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef0:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a40      	ldr	r2, [pc, #256]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006efa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006efc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f08:	f7fe fd6c 	bl	80059e4 <HAL_GetTick>
 8006f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f10:	f7fe fd68 	bl	80059e4 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e066      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f22:	4b35      	ldr	r3, [pc, #212]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0f0      	beq.n	8006f10 <HAL_RCC_OscConfig+0x530>
 8006f2e:	e05e      	b.n	8006fee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f30:	4b31      	ldr	r3, [pc, #196]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a30      	ldr	r2, [pc, #192]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fe fd52 	bl	80059e4 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f44:	f7fe fd4e 	bl	80059e4 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e04c      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f56:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f62:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	4924      	ldr	r1, [pc, #144]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f68:	4b25      	ldr	r3, [pc, #148]	@ (8007000 <HAL_RCC_OscConfig+0x620>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	60cb      	str	r3, [r1, #12]
 8006f6e:	e03e      	b.n	8006fee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e039      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ff8 <HAL_RCC_OscConfig+0x618>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 0203 	and.w	r2, r3, #3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d12c      	bne.n	8006fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d123      	bne.n	8006fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d11b      	bne.n	8006fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d113      	bne.n	8006fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d109      	bne.n	8006fea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	019f800c 	.word	0x019f800c
 8007000:	feeefffc 	.word	0xfeeefffc

08007004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e11e      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800701c:	4b91      	ldr	r3, [pc, #580]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d910      	bls.n	800704c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b8e      	ldr	r3, [pc, #568]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f023 020f 	bic.w	r2, r3, #15
 8007032:	498c      	ldr	r1, [pc, #560]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703a:	4b8a      	ldr	r3, [pc, #552]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e106      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d073      	beq.n	8007140 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d129      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007060:	4b81      	ldr	r3, [pc, #516]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0f4      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007070:	f000 f99e 	bl	80073b0 <RCC_GetSysClockFreqFromPLLSource>
 8007074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4a7c      	ldr	r2, [pc, #496]	@ (800726c <HAL_RCC_ClockConfig+0x268>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d93f      	bls.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800707e:	4b7a      	ldr	r3, [pc, #488]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007092:	2b00      	cmp	r3, #0
 8007094:	d033      	beq.n	80070fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12f      	bne.n	80070fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800709e:	4b72      	ldr	r3, [pc, #456]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070a6:	4a70      	ldr	r2, [pc, #448]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070ae:	2380      	movs	r3, #128	@ 0x80
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e024      	b.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d107      	bne.n	80070cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0c6      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070cc:	4b66      	ldr	r3, [pc, #408]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0be      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070dc:	f000 f8ce 	bl	800727c <HAL_RCC_GetSysClockFreq>
 80070e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4a61      	ldr	r2, [pc, #388]	@ (800726c <HAL_RCC_ClockConfig+0x268>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d909      	bls.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070f2:	4a5d      	ldr	r2, [pc, #372]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070fa:	2380      	movs	r3, #128	@ 0x80
 80070fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 0203 	bic.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4957      	ldr	r1, [pc, #348]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007110:	f7fe fc68 	bl	80059e4 <HAL_GetTick>
 8007114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	e00a      	b.n	800712e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007118:	f7fe fc64 	bl	80059e4 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e095      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	4b4e      	ldr	r3, [pc, #312]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 020c 	and.w	r2, r3, #12
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d1eb      	bne.n	8007118 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d023      	beq.n	8007194 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007158:	4b43      	ldr	r3, [pc, #268]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a42      	ldr	r2, [pc, #264]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800715e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007162:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007170:	4b3d      	ldr	r3, [pc, #244]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007178:	4a3b      	ldr	r2, [pc, #236]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800717a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800717e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007180:	4b39      	ldr	r3, [pc, #228]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4936      	ldr	r1, [pc, #216]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
 8007192:	e008      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d105      	bne.n	80071a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800719a:	4b33      	ldr	r3, [pc, #204]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4a32      	ldr	r2, [pc, #200]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80071a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d21d      	bcs.n	80071f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f023 020f 	bic.w	r2, r3, #15
 80071bc:	4929      	ldr	r1, [pc, #164]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071c4:	f7fe fc0e 	bl	80059e4 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	e00a      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071cc:	f7fe fc0a 	bl	80059e4 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e03b      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e2:	4b20      	ldr	r3, [pc, #128]	@ (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d1ed      	bne.n	80071cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4917      	ldr	r1, [pc, #92]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800720a:	4313      	orrs	r3, r2
 800720c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800721a:	4b13      	ldr	r3, [pc, #76]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	490f      	ldr	r1, [pc, #60]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800722e:	f000 f825 	bl	800727c <HAL_RCC_GetSysClockFreq>
 8007232:	4602      	mov	r2, r0
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	490c      	ldr	r1, [pc, #48]	@ (8007270 <HAL_RCC_ClockConfig+0x26c>)
 8007240:	5ccb      	ldrb	r3, [r1, r3]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	fa22 f303 	lsr.w	r3, r2, r3
 800724a:	4a0a      	ldr	r2, [pc, #40]	@ (8007274 <HAL_RCC_ClockConfig+0x270>)
 800724c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800724e:	4b0a      	ldr	r3, [pc, #40]	@ (8007278 <HAL_RCC_ClockConfig+0x274>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fb7a 	bl	800594c <HAL_InitTick>
 8007258:	4603      	mov	r3, r0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40022000 	.word	0x40022000
 8007268:	40021000 	.word	0x40021000
 800726c:	04c4b400 	.word	0x04c4b400
 8007270:	0800b540 	.word	0x0800b540
 8007274:	20000014 	.word	0x20000014
 8007278:	20000018 	.word	0x20000018

0800727c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007282:	4b2c      	ldr	r3, [pc, #176]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b04      	cmp	r3, #4
 800728c:	d102      	bne.n	8007294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800728e:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e047      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007294:	4b27      	ldr	r3, [pc, #156]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d102      	bne.n	80072a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072a0:	4b26      	ldr	r3, [pc, #152]	@ (800733c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	e03e      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072a6:	4b23      	ldr	r3, [pc, #140]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b0c      	cmp	r3, #12
 80072b0:	d136      	bne.n	8007320 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072b2:	4b20      	ldr	r3, [pc, #128]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	3301      	adds	r3, #1
 80072c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d10c      	bne.n	80072ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072d0:	4a1a      	ldr	r2, [pc, #104]	@ (800733c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	4a16      	ldr	r2, [pc, #88]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072da:	68d2      	ldr	r2, [r2, #12]
 80072dc:	0a12      	lsrs	r2, r2, #8
 80072de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	617b      	str	r3, [r7, #20]
      break;
 80072e8:	e00c      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ea:	4a13      	ldr	r2, [pc, #76]	@ (8007338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	4a10      	ldr	r2, [pc, #64]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f4:	68d2      	ldr	r2, [r2, #12]
 80072f6:	0a12      	lsrs	r2, r2, #8
 80072f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072fc:	fb02 f303 	mul.w	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]
      break;
 8007302:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007304:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	0e5b      	lsrs	r3, r3, #25
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	3301      	adds	r3, #1
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e001      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007324:	693b      	ldr	r3, [r7, #16]
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	00f42400 	.word	0x00f42400
 800733c:	007a1200 	.word	0x007a1200

08007340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007344:	4b03      	ldr	r3, [pc, #12]	@ (8007354 <HAL_RCC_GetHCLKFreq+0x14>)
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000014 	.word	0x20000014

08007358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800735c:	f7ff fff0 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b06      	ldr	r3, [pc, #24]	@ (800737c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4904      	ldr	r1, [pc, #16]	@ (8007380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40021000 	.word	0x40021000
 8007380:	0800b550 	.word	0x0800b550

08007384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007388:	f7ff ffda 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	0adb      	lsrs	r3, r3, #11
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4904      	ldr	r1, [pc, #16]	@ (80073ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0800b550 	.word	0x0800b550

080073b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d10c      	bne.n	80073ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073d4:	4a17      	ldr	r2, [pc, #92]	@ (8007434 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	4a14      	ldr	r2, [pc, #80]	@ (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073de:	68d2      	ldr	r2, [r2, #12]
 80073e0:	0a12      	lsrs	r2, r2, #8
 80073e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	617b      	str	r3, [r7, #20]
    break;
 80073ec:	e00c      	b.n	8007408 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073ee:	4a12      	ldr	r2, [pc, #72]	@ (8007438 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073f8:	68d2      	ldr	r2, [r2, #12]
 80073fa:	0a12      	lsrs	r2, r2, #8
 80073fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
    break;
 8007406:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007408:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	0e5b      	lsrs	r3, r3, #25
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	3301      	adds	r3, #1
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007422:	687b      	ldr	r3, [r7, #4]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40021000 	.word	0x40021000
 8007434:	007a1200 	.word	0x007a1200
 8007438:	00f42400 	.word	0x00f42400

0800743c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007444:	2300      	movs	r3, #0
 8007446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007448:	2300      	movs	r3, #0
 800744a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8098 	beq.w	800758a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745a:	2300      	movs	r3, #0
 800745c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745e:	4b43      	ldr	r3, [pc, #268]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10d      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800746a:	4b40      	ldr	r3, [pc, #256]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746e:	4a3f      	ldr	r2, [pc, #252]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007474:	6593      	str	r3, [r2, #88]	@ 0x58
 8007476:	4b3d      	ldr	r3, [pc, #244]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007482:	2301      	movs	r3, #1
 8007484:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007486:	4b3a      	ldr	r3, [pc, #232]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a39      	ldr	r2, [pc, #228]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007492:	f7fe faa7 	bl	80059e4 <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007498:	e009      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749a:	f7fe faa3 	bl	80059e4 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d902      	bls.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	74fb      	strb	r3, [r7, #19]
        break;
 80074ac:	e005      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ae:	4b30      	ldr	r3, [pc, #192]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ef      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074ba:	7cfb      	ldrb	r3, [r7, #19]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d159      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074c0:	4b2a      	ldr	r3, [pc, #168]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d019      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074dc:	4b23      	ldr	r3, [pc, #140]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074e8:	4b20      	ldr	r3, [pc, #128]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ee:	4a1f      	ldr	r2, [pc, #124]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074f8:	4b1c      	ldr	r3, [pc, #112]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fe:	4a1b      	ldr	r2, [pc, #108]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007508:	4a18      	ldr	r2, [pc, #96]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d016      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751a:	f7fe fa63 	bl	80059e4 <HAL_GetTick>
 800751e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007520:	e00b      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007522:	f7fe fa5f 	bl	80059e4 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007530:	4293      	cmp	r3, r2
 8007532:	d902      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	74fb      	strb	r3, [r7, #19]
            break;
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800753a:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800753c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0ec      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007548:	7cfb      	ldrb	r3, [r7, #19]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800754e:	4b07      	ldr	r3, [pc, #28]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	4903      	ldr	r1, [pc, #12]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007564:	e008      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007566:	7cfb      	ldrb	r3, [r7, #19]
 8007568:	74bb      	strb	r3, [r7, #18]
 800756a:	e005      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800756c:	40021000 	.word	0x40021000
 8007570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007578:	7c7b      	ldrb	r3, [r7, #17]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757e:	4ba6      	ldr	r3, [pc, #664]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	4aa5      	ldr	r2, [pc, #660]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007588:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007596:	4ba0      	ldr	r3, [pc, #640]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f023 0203 	bic.w	r2, r3, #3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	499c      	ldr	r1, [pc, #624]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075b8:	4b97      	ldr	r3, [pc, #604]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075be:	f023 020c 	bic.w	r2, r3, #12
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	4994      	ldr	r1, [pc, #592]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075da:	4b8f      	ldr	r3, [pc, #572]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	498b      	ldr	r1, [pc, #556]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075fc:	4b86      	ldr	r3, [pc, #536]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007602:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	4983      	ldr	r1, [pc, #524]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800761e:	4b7e      	ldr	r3, [pc, #504]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	497a      	ldr	r1, [pc, #488]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007640:	4b75      	ldr	r3, [pc, #468]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007646:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	4972      	ldr	r1, [pc, #456]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007662:	4b6d      	ldr	r3, [pc, #436]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007668:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4969      	ldr	r1, [pc, #420]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007684:	4b64      	ldr	r3, [pc, #400]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	4961      	ldr	r1, [pc, #388]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a6:	4b5c      	ldr	r3, [pc, #368]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	4958      	ldr	r1, [pc, #352]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d015      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076c8:	4b53      	ldr	r3, [pc, #332]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	4950      	ldr	r1, [pc, #320]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e6:	d105      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e8:	4b4b      	ldr	r3, [pc, #300]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d015      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007700:	4b45      	ldr	r3, [pc, #276]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007706:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	4942      	ldr	r1, [pc, #264]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007720:	4b3d      	ldr	r3, [pc, #244]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a3c      	ldr	r2, [pc, #240]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007738:	4b37      	ldr	r3, [pc, #220]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	4934      	ldr	r1, [pc, #208]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007756:	d105      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b2f      	ldr	r3, [pc, #188]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a2e      	ldr	r2, [pc, #184]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007770:	4b29      	ldr	r3, [pc, #164]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007776:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777e:	4926      	ldr	r1, [pc, #152]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800778e:	d105      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007790:	4b21      	ldr	r3, [pc, #132]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a20      	ldr	r2, [pc, #128]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800779a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d015      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b6:	4918      	ldr	r1, [pc, #96]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077c6:	d105      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c8:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4a12      	ldr	r2, [pc, #72]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d015      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ee:	490a      	ldr	r1, [pc, #40]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077fe:	d105      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a04      	ldr	r2, [pc, #16]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800780a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800780c:	7cbb      	ldrb	r3, [r7, #18]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40021000 	.word	0x40021000

0800781c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e049      	b.n	80078c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fd fd56 	bl	80052f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f001 f82c 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d001      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e04a      	b.n	800797a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a21      	ldr	r2, [pc, #132]	@ (8007988 <HAL_TIM_Base_Start_IT+0xbc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d018      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x6c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	d013      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x6c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1d      	ldr	r2, [pc, #116]	@ (800798c <HAL_TIM_Base_Start_IT+0xc0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x6c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1c      	ldr	r2, [pc, #112]	@ (8007990 <HAL_TIM_Base_Start_IT+0xc4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x6c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1a      	ldr	r2, [pc, #104]	@ (8007994 <HAL_TIM_Base_Start_IT+0xc8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x6c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a19      	ldr	r2, [pc, #100]	@ (8007998 <HAL_TIM_Base_Start_IT+0xcc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d115      	bne.n	8007964 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	4b17      	ldr	r3, [pc, #92]	@ (800799c <HAL_TIM_Base_Start_IT+0xd0>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b06      	cmp	r3, #6
 8007948:	d015      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xaa>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007950:	d011      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0201 	orr.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	e008      	b.n	8007976 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e000      	b.n	8007978 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40013400 	.word	0x40013400
 8007998:	40014000 	.word	0x40014000
 800799c:	00010007 	.word	0x00010007

080079a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10f      	bne.n	80079e8 <HAL_TIM_Base_Stop_IT+0x48>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	f244 4344 	movw	r3, #17476	@ 0x4444
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_Base_Stop_IT+0x48>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e049      	b.n	8007aa4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fd fc1d 	bl	8005264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f000 ff3b 	bl	80088b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_TIM_PWM_Start+0x24>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	bf14      	ite	ne
 8007ac8:	2301      	movne	r3, #1
 8007aca:	2300      	moveq	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	e03c      	b.n	8007b4a <HAL_TIM_PWM_Start+0x9e>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d109      	bne.n	8007aea <HAL_TIM_PWM_Start+0x3e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	bf14      	ite	ne
 8007ae2:	2301      	movne	r3, #1
 8007ae4:	2300      	moveq	r3, #0
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	e02f      	b.n	8007b4a <HAL_TIM_PWM_Start+0x9e>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d109      	bne.n	8007b04 <HAL_TIM_PWM_Start+0x58>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	bf14      	ite	ne
 8007afc:	2301      	movne	r3, #1
 8007afe:	2300      	moveq	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	e022      	b.n	8007b4a <HAL_TIM_PWM_Start+0x9e>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	d109      	bne.n	8007b1e <HAL_TIM_PWM_Start+0x72>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	e015      	b.n	8007b4a <HAL_TIM_PWM_Start+0x9e>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b10      	cmp	r3, #16
 8007b22:	d109      	bne.n	8007b38 <HAL_TIM_PWM_Start+0x8c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	bf14      	ite	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	2300      	moveq	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	e008      	b.n	8007b4a <HAL_TIM_PWM_Start+0x9e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e097      	b.n	8007c82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <HAL_TIM_PWM_Start+0xb6>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b60:	e023      	b.n	8007baa <HAL_TIM_PWM_Start+0xfe>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d104      	bne.n	8007b72 <HAL_TIM_PWM_Start+0xc6>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b70:	e01b      	b.n	8007baa <HAL_TIM_PWM_Start+0xfe>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d104      	bne.n	8007b82 <HAL_TIM_PWM_Start+0xd6>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b80:	e013      	b.n	8007baa <HAL_TIM_PWM_Start+0xfe>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b0c      	cmp	r3, #12
 8007b86:	d104      	bne.n	8007b92 <HAL_TIM_PWM_Start+0xe6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b90:	e00b      	b.n	8007baa <HAL_TIM_PWM_Start+0xfe>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b10      	cmp	r3, #16
 8007b96:	d104      	bne.n	8007ba2 <HAL_TIM_PWM_Start+0xf6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ba0:	e003      	b.n	8007baa <HAL_TIM_PWM_Start+0xfe>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 faae 	bl	8009114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a33      	ldr	r2, [pc, #204]	@ (8007c8c <HAL_TIM_PWM_Start+0x1e0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d013      	beq.n	8007bea <HAL_TIM_PWM_Start+0x13e>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a32      	ldr	r2, [pc, #200]	@ (8007c90 <HAL_TIM_PWM_Start+0x1e4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00e      	beq.n	8007bea <HAL_TIM_PWM_Start+0x13e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a30      	ldr	r2, [pc, #192]	@ (8007c94 <HAL_TIM_PWM_Start+0x1e8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d009      	beq.n	8007bea <HAL_TIM_PWM_Start+0x13e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a2f      	ldr	r2, [pc, #188]	@ (8007c98 <HAL_TIM_PWM_Start+0x1ec>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d004      	beq.n	8007bea <HAL_TIM_PWM_Start+0x13e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c9c <HAL_TIM_PWM_Start+0x1f0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d101      	bne.n	8007bee <HAL_TIM_PWM_Start+0x142>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <HAL_TIM_PWM_Start+0x144>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a20      	ldr	r2, [pc, #128]	@ (8007c8c <HAL_TIM_PWM_Start+0x1e0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d018      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x194>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c16:	d013      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x194>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a20      	ldr	r2, [pc, #128]	@ (8007ca0 <HAL_TIM_PWM_Start+0x1f4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00e      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x194>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca4 <HAL_TIM_PWM_Start+0x1f8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x194>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a17      	ldr	r2, [pc, #92]	@ (8007c90 <HAL_TIM_PWM_Start+0x1e4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x194>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a16      	ldr	r2, [pc, #88]	@ (8007c94 <HAL_TIM_PWM_Start+0x1e8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d115      	bne.n	8007c6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	4b18      	ldr	r3, [pc, #96]	@ (8007ca8 <HAL_TIM_PWM_Start+0x1fc>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b06      	cmp	r3, #6
 8007c50:	d015      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x1d2>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c58:	d011      	beq.n	8007c7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6a:	e008      	b.n	8007c7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e000      	b.n	8007c80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800
 8007ca0:	40000400 	.word	0x40000400
 8007ca4:	40000800 	.word	0x40000800
 8007ca8:	00010007 	.word	0x00010007

08007cac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <HAL_TIM_PWM_Start_IT+0x28>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e03c      	b.n	8007d4e <HAL_TIM_PWM_Start_IT+0xa2>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d109      	bne.n	8007cee <HAL_TIM_PWM_Start_IT+0x42>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	bf14      	ite	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	2300      	moveq	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e02f      	b.n	8007d4e <HAL_TIM_PWM_Start_IT+0xa2>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d109      	bne.n	8007d08 <HAL_TIM_PWM_Start_IT+0x5c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	bf14      	ite	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	2300      	moveq	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	e022      	b.n	8007d4e <HAL_TIM_PWM_Start_IT+0xa2>
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b0c      	cmp	r3, #12
 8007d0c:	d109      	bne.n	8007d22 <HAL_TIM_PWM_Start_IT+0x76>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	bf14      	ite	ne
 8007d1a:	2301      	movne	r3, #1
 8007d1c:	2300      	moveq	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	e015      	b.n	8007d4e <HAL_TIM_PWM_Start_IT+0xa2>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	d109      	bne.n	8007d3c <HAL_TIM_PWM_Start_IT+0x90>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	bf14      	ite	ne
 8007d34:	2301      	movne	r3, #1
 8007d36:	2300      	moveq	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	e008      	b.n	8007d4e <HAL_TIM_PWM_Start_IT+0xa2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e0e2      	b.n	8007f1c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start_IT+0xba>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d64:	e023      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0x102>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Start_IT+0xca>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d74:	e01b      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0x102>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Start_IT+0xda>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d84:	e013      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0x102>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b0c      	cmp	r3, #12
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start_IT+0xea>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d94:	e00b      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0x102>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b10      	cmp	r3, #16
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Start_IT+0xfa>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007da4:	e003      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0x102>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d841      	bhi.n	8007e38 <HAL_TIM_PWM_Start_IT+0x18c>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_TIM_PWM_Start_IT+0x110>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007e39 	.word	0x08007e39
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007e39 	.word	0x08007e39
 8007dcc:	08007e03 	.word	0x08007e03
 8007dd0:	08007e39 	.word	0x08007e39
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e39 	.word	0x08007e39
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e39 	.word	0x08007e39
 8007de4:	08007e39 	.word	0x08007e39
 8007de8:	08007e39 	.word	0x08007e39
 8007dec:	08007e27 	.word	0x08007e27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0202 	orr.w	r2, r2, #2
 8007dfe:	60da      	str	r2, [r3, #12]
      break;
 8007e00:	e01d      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0204 	orr.w	r2, r2, #4
 8007e10:	60da      	str	r2, [r3, #12]
      break;
 8007e12:	e014      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0208 	orr.w	r2, r2, #8
 8007e22:	60da      	str	r2, [r3, #12]
      break;
 8007e24:	e00b      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0210 	orr.w	r2, r2, #16
 8007e34:	60da      	str	r2, [r3, #12]
      break;
 8007e36:	e002      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d16a      	bne.n	8007f1a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 f961 	bl	8009114 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a33      	ldr	r2, [pc, #204]	@ (8007f24 <HAL_TIM_PWM_Start_IT+0x278>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a31      	ldr	r2, [pc, #196]	@ (8007f28 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a30      	ldr	r2, [pc, #192]	@ (8007f2c <HAL_TIM_PWM_Start_IT+0x280>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a2e      	ldr	r2, [pc, #184]	@ (8007f30 <HAL_TIM_PWM_Start_IT+0x284>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8007f34 <HAL_TIM_PWM_Start_IT+0x288>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d101      	bne.n	8007e88 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <HAL_TIM_PWM_Start_IT+0x1de>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d007      	beq.n	8007e9e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a20      	ldr	r2, [pc, #128]	@ (8007f24 <HAL_TIM_PWM_Start_IT+0x278>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d018      	beq.n	8007eda <HAL_TIM_PWM_Start_IT+0x22e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb0:	d013      	beq.n	8007eda <HAL_TIM_PWM_Start_IT+0x22e>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a20      	ldr	r2, [pc, #128]	@ (8007f38 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00e      	beq.n	8007eda <HAL_TIM_PWM_Start_IT+0x22e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8007f3c <HAL_TIM_PWM_Start_IT+0x290>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <HAL_TIM_PWM_Start_IT+0x22e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <HAL_TIM_PWM_Start_IT+0x22e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	@ (8007f2c <HAL_TIM_PWM_Start_IT+0x280>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d115      	bne.n	8007f06 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	4b17      	ldr	r3, [pc, #92]	@ (8007f40 <HAL_TIM_PWM_Start_IT+0x294>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	d015      	beq.n	8007f18 <HAL_TIM_PWM_Start_IT+0x26c>
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef2:	d011      	beq.n	8007f18 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	e008      	b.n	8007f18 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e000      	b.n	8007f1a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40014400 	.word	0x40014400
 8007f34:	40014800 	.word	0x40014800
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	00010007 	.word	0x00010007

08007f44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e097      	b.n	8008088 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d106      	bne.n	8007f72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7fd fa1d 	bl	80053ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007f88:	f023 0307 	bic.w	r3, r3, #7
 8007f8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f000 fc8d 	bl	80088b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007fe4:	f023 030c 	bic.w	r3, r3, #12
 8007fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	4313      	orrs	r3, r2
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	011a      	lsls	r2, r3, #4
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	031b      	lsls	r3, r3, #12
 8008014:	4313      	orrs	r3, r2
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008022:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	4313      	orrs	r3, r2
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d110      	bne.n	80080e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d102      	bne.n	80080cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c6:	7b7b      	ldrb	r3, [r7, #13]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e069      	b.n	80081a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e0:	e031      	b.n	8008146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d110      	bne.n	800810a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d102      	bne.n	80080f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080ee:	7b3b      	ldrb	r3, [r7, #12]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d001      	beq.n	80080f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e055      	b.n	80081a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008108:	e01d      	b.n	8008146 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d108      	bne.n	8008122 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d105      	bne.n	8008122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008116:	7b7b      	ldrb	r3, [r7, #13]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d102      	bne.n	8008122 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800811c:	7b3b      	ldrb	r3, [r7, #12]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d001      	beq.n	8008126 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e03e      	b.n	80081a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2202      	movs	r2, #2
 8008132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_TIM_Encoder_Start+0xc4>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b04      	cmp	r3, #4
 8008150:	d008      	beq.n	8008164 <HAL_TIM_Encoder_Start+0xd4>
 8008152:	e00f      	b.n	8008174 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2201      	movs	r2, #1
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f000 ffd9 	bl	8009114 <TIM_CCxChannelCmd>
      break;
 8008162:	e016      	b.n	8008192 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	2104      	movs	r1, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f000 ffd1 	bl	8009114 <TIM_CCxChannelCmd>
      break;
 8008172:	e00e      	b.n	8008192 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f000 ffc9 	bl	8009114 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2201      	movs	r2, #1
 8008188:	2104      	movs	r1, #4
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ffc2 	bl	8009114 <TIM_CCxChannelCmd>
      break;
 8008190:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0201 	orr.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d020      	beq.n	8008210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0202 	mvn.w	r2, #2
 80081e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f003 0303 	and.w	r3, r3, #3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb40 	bl	800887c <HAL_TIM_IC_CaptureCallback>
 80081fc:	e005      	b.n	800820a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fb32 	bl	8008868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fb43 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d020      	beq.n	800825c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0204 	mvn.w	r2, #4
 800822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fb1a 	bl	800887c <HAL_TIM_IC_CaptureCallback>
 8008248:	e005      	b.n	8008256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fb0c 	bl	8008868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb1d 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0208 	mvn.w	r2, #8
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2204      	movs	r2, #4
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0303 	and.w	r3, r3, #3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 faf4 	bl	800887c <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fae6 	bl	8008868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 faf7 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d020      	beq.n	80082f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01b      	beq.n	80082f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0210 	mvn.w	r2, #16
 80082c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2208      	movs	r2, #8
 80082ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 face 	bl	800887c <HAL_TIM_IC_CaptureCallback>
 80082e0:	e005      	b.n	80082ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fac0 	bl	8008868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fad1 	bl	8008890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0201 	mvn.w	r2, #1
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7f9 fe94 	bl	8002040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00c      	beq.n	8008346 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800833e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 f825 	bl	8009390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00c      	beq.n	800836a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f81d 	bl	80093a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa8b 	bl	80088a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f06f 0220 	mvn.w	r2, #32
 80083aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 ffe5 	bl	800937c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00c      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80083ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fff1 	bl	80093b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80083f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 ffe9 	bl	80093cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00c      	beq.n	800841e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 ffe1 	bl	80093e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00c      	beq.n	8008442 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800843a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 ffd9 	bl	80093f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008466:	2302      	movs	r3, #2
 8008468:	e0ff      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b14      	cmp	r3, #20
 8008476:	f200 80f0 	bhi.w	800865a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800847a:	a201      	add	r2, pc, #4	@ (adr r2, 8008480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084d5 	.word	0x080084d5
 8008484:	0800865b 	.word	0x0800865b
 8008488:	0800865b 	.word	0x0800865b
 800848c:	0800865b 	.word	0x0800865b
 8008490:	08008515 	.word	0x08008515
 8008494:	0800865b 	.word	0x0800865b
 8008498:	0800865b 	.word	0x0800865b
 800849c:	0800865b 	.word	0x0800865b
 80084a0:	08008557 	.word	0x08008557
 80084a4:	0800865b 	.word	0x0800865b
 80084a8:	0800865b 	.word	0x0800865b
 80084ac:	0800865b 	.word	0x0800865b
 80084b0:	08008597 	.word	0x08008597
 80084b4:	0800865b 	.word	0x0800865b
 80084b8:	0800865b 	.word	0x0800865b
 80084bc:	0800865b 	.word	0x0800865b
 80084c0:	080085d9 	.word	0x080085d9
 80084c4:	0800865b 	.word	0x0800865b
 80084c8:	0800865b 	.word	0x0800865b
 80084cc:	0800865b 	.word	0x0800865b
 80084d0:	08008619 	.word	0x08008619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fa88 	bl	80089f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0208 	orr.w	r2, r2, #8
 80084ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0204 	bic.w	r2, r2, #4
 80084fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6999      	ldr	r1, [r3, #24]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	619a      	str	r2, [r3, #24]
      break;
 8008512:	e0a5      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 faf8 	bl	8008b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800852e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800853e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	021a      	lsls	r2, r3, #8
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	619a      	str	r2, [r3, #24]
      break;
 8008554:	e084      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fb61 	bl	8008c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0208 	orr.w	r2, r2, #8
 8008570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0204 	bic.w	r2, r2, #4
 8008580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69d9      	ldr	r1, [r3, #28]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	61da      	str	r2, [r3, #28]
      break;
 8008594:	e064      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fbc9 	bl	8008d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69d9      	ldr	r1, [r3, #28]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	021a      	lsls	r2, r3, #8
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	61da      	str	r2, [r3, #28]
      break;
 80085d6:	e043      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fc32 	bl	8008e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0208 	orr.w	r2, r2, #8
 80085f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0204 	bic.w	r2, r2, #4
 8008602:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008616:	e023      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fc76 	bl	8008f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008632:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008642:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	021a      	lsls	r2, r3, #8
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008658:	e002      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
      break;
 800865e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop

08008674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_TIM_ConfigClockSource+0x1c>
 800868c:	2302      	movs	r3, #2
 800868e:	e0de      	b.n	800884e <HAL_TIM_ConfigClockSource+0x1da>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80086ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a63      	ldr	r2, [pc, #396]	@ (8008858 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	f000 80a9 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 80086d0:	4a61      	ldr	r2, [pc, #388]	@ (8008858 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	f200 80ae 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 80086d8:	4a60      	ldr	r2, [pc, #384]	@ (800885c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	f000 80a1 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 80086e0:	4a5e      	ldr	r2, [pc, #376]	@ (800885c <HAL_TIM_ConfigClockSource+0x1e8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	f200 80a6 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 80086e8:	4a5d      	ldr	r2, [pc, #372]	@ (8008860 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	f000 8099 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 80086f0:	4a5b      	ldr	r2, [pc, #364]	@ (8008860 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	f200 809e 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 80086f8:	4a5a      	ldr	r2, [pc, #360]	@ (8008864 <HAL_TIM_ConfigClockSource+0x1f0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	f000 8091 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 8008700:	4a58      	ldr	r2, [pc, #352]	@ (8008864 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	f200 8096 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008708:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800870c:	f000 8089 	beq.w	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 8008710:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008714:	f200 808e 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871c:	d03e      	beq.n	800879c <HAL_TIM_ConfigClockSource+0x128>
 800871e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008722:	f200 8087 	bhi.w	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800872a:	f000 8086 	beq.w	800883a <HAL_TIM_ConfigClockSource+0x1c6>
 800872e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008732:	d87f      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008734:	2b70      	cmp	r3, #112	@ 0x70
 8008736:	d01a      	beq.n	800876e <HAL_TIM_ConfigClockSource+0xfa>
 8008738:	2b70      	cmp	r3, #112	@ 0x70
 800873a:	d87b      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 800873c:	2b60      	cmp	r3, #96	@ 0x60
 800873e:	d050      	beq.n	80087e2 <HAL_TIM_ConfigClockSource+0x16e>
 8008740:	2b60      	cmp	r3, #96	@ 0x60
 8008742:	d877      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008744:	2b50      	cmp	r3, #80	@ 0x50
 8008746:	d03c      	beq.n	80087c2 <HAL_TIM_ConfigClockSource+0x14e>
 8008748:	2b50      	cmp	r3, #80	@ 0x50
 800874a:	d873      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 800874c:	2b40      	cmp	r3, #64	@ 0x40
 800874e:	d058      	beq.n	8008802 <HAL_TIM_ConfigClockSource+0x18e>
 8008750:	2b40      	cmp	r3, #64	@ 0x40
 8008752:	d86f      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008754:	2b30      	cmp	r3, #48	@ 0x30
 8008756:	d064      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 8008758:	2b30      	cmp	r3, #48	@ 0x30
 800875a:	d86b      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 800875c:	2b20      	cmp	r3, #32
 800875e:	d060      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 8008760:	2b20      	cmp	r3, #32
 8008762:	d867      	bhi.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d05c      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 8008768:	2b10      	cmp	r3, #16
 800876a:	d05a      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x1ae>
 800876c:	e062      	b.n	8008834 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800877e:	f000 fca9 	bl	80090d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	609a      	str	r2, [r3, #8]
      break;
 800879a:	e04f      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087ac:	f000 fc92 	bl	80090d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087be:	609a      	str	r2, [r3, #8]
      break;
 80087c0:	e03c      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ce:	461a      	mov	r2, r3
 80087d0:	f000 fc04 	bl	8008fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2150      	movs	r1, #80	@ 0x50
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fc5d 	bl	800909a <TIM_ITRx_SetConfig>
      break;
 80087e0:	e02c      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ee:	461a      	mov	r2, r3
 80087f0:	f000 fc23 	bl	800903a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2160      	movs	r1, #96	@ 0x60
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fc4d 	bl	800909a <TIM_ITRx_SetConfig>
      break;
 8008800:	e01c      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800880e:	461a      	mov	r2, r3
 8008810:	f000 fbe4 	bl	8008fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2140      	movs	r1, #64	@ 0x40
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fc3d 	bl	800909a <TIM_ITRx_SetConfig>
      break;
 8008820:	e00c      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4619      	mov	r1, r3
 800882c:	4610      	mov	r0, r2
 800882e:	f000 fc34 	bl	800909a <TIM_ITRx_SetConfig>
      break;
 8008832:	e003      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	73fb      	strb	r3, [r7, #15]
      break;
 8008838:	e000      	b.n	800883c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800883a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	00100070 	.word	0x00100070
 800885c:	00100040 	.word	0x00100040
 8008860:	00100030 	.word	0x00100030
 8008864:	00100020 	.word	0x00100020

08008868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a42      	ldr	r2, [pc, #264]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00f      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088d6:	d00b      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3f      	ldr	r2, [pc, #252]	@ (80089d8 <TIM_Base_SetConfig+0x120>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a3e      	ldr	r2, [pc, #248]	@ (80089dc <TIM_Base_SetConfig+0x124>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_Base_SetConfig+0x38>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a3d      	ldr	r2, [pc, #244]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d108      	bne.n	8008902 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a33      	ldr	r2, [pc, #204]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d01b      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008910:	d017      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a30      	ldr	r2, [pc, #192]	@ (80089d8 <TIM_Base_SetConfig+0x120>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d013      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2f      	ldr	r2, [pc, #188]	@ (80089dc <TIM_Base_SetConfig+0x124>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d00f      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2e      	ldr	r2, [pc, #184]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00b      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a2d      	ldr	r2, [pc, #180]	@ (80089e4 <TIM_Base_SetConfig+0x12c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d007      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <TIM_Base_SetConfig+0x130>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d003      	beq.n	8008942 <TIM_Base_SetConfig+0x8a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2b      	ldr	r2, [pc, #172]	@ (80089ec <TIM_Base_SetConfig+0x134>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d108      	bne.n	8008954 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a16      	ldr	r2, [pc, #88]	@ (80089d4 <TIM_Base_SetConfig+0x11c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00f      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a17      	ldr	r2, [pc, #92]	@ (80089e0 <TIM_Base_SetConfig+0x128>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00b      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a16      	ldr	r2, [pc, #88]	@ (80089e4 <TIM_Base_SetConfig+0x12c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a15      	ldr	r2, [pc, #84]	@ (80089e8 <TIM_Base_SetConfig+0x130>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_Base_SetConfig+0xe8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a14      	ldr	r2, [pc, #80]	@ (80089ec <TIM_Base_SetConfig+0x134>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d103      	bne.n	80089a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d105      	bne.n	80089c6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f023 0201 	bic.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	611a      	str	r2, [r3, #16]
  }
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40012c00 	.word	0x40012c00
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40013400 	.word	0x40013400
 80089e4:	40014000 	.word	0x40014000
 80089e8:	40014400 	.word	0x40014400
 80089ec:	40014800 	.word	0x40014800

080089f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f023 0201 	bic.w	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 0302 	bic.w	r3, r3, #2
 8008a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008afc <TIM_OC1_SetConfig+0x10c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00f      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a2b      	ldr	r2, [pc, #172]	@ (8008b00 <TIM_OC1_SetConfig+0x110>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b04 <TIM_OC1_SetConfig+0x114>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a29      	ldr	r2, [pc, #164]	@ (8008b08 <TIM_OC1_SetConfig+0x118>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC1_SetConfig+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a28      	ldr	r2, [pc, #160]	@ (8008b0c <TIM_OC1_SetConfig+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10c      	bne.n	8008a8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0308 	bic.w	r3, r3, #8
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 0304 	bic.w	r3, r3, #4
 8008a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008afc <TIM_OC1_SetConfig+0x10c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00f      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1a      	ldr	r2, [pc, #104]	@ (8008b00 <TIM_OC1_SetConfig+0x110>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a19      	ldr	r2, [pc, #100]	@ (8008b04 <TIM_OC1_SetConfig+0x114>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a18      	ldr	r2, [pc, #96]	@ (8008b08 <TIM_OC1_SetConfig+0x118>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0xc2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a17      	ldr	r2, [pc, #92]	@ (8008b0c <TIM_OC1_SetConfig+0x11c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	621a      	str	r2, [r3, #32]
}
 8008af0:	bf00      	nop
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40014400 	.word	0x40014400
 8008b0c:	40014800 	.word	0x40014800

08008b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	f023 0210 	bic.w	r2, r3, #16
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a28      	ldr	r2, [pc, #160]	@ (8008c10 <TIM_OC2_SetConfig+0x100>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x6c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a27      	ldr	r2, [pc, #156]	@ (8008c14 <TIM_OC2_SetConfig+0x104>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10d      	bne.n	8008b98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008c10 <TIM_OC2_SetConfig+0x100>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00f      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c14 <TIM_OC2_SetConfig+0x104>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <TIM_OC2_SetConfig+0x108>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d007      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c1c <TIM_OC2_SetConfig+0x10c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC2_SetConfig+0xb0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a19      	ldr	r2, [pc, #100]	@ (8008c20 <TIM_OC2_SetConfig+0x110>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d113      	bne.n	8008be8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40012c00 	.word	0x40012c00
 8008c14:	40013400 	.word	0x40013400
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	40014400 	.word	0x40014400
 8008c20:	40014800 	.word	0x40014800

08008c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a27      	ldr	r2, [pc, #156]	@ (8008d20 <TIM_OC3_SetConfig+0xfc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_OC3_SetConfig+0x6a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a26      	ldr	r2, [pc, #152]	@ (8008d24 <TIM_OC3_SetConfig+0x100>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d10d      	bne.n	8008caa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a1c      	ldr	r2, [pc, #112]	@ (8008d20 <TIM_OC3_SetConfig+0xfc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d24 <TIM_OC3_SetConfig+0x100>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d28 <TIM_OC3_SetConfig+0x104>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a19      	ldr	r2, [pc, #100]	@ (8008d2c <TIM_OC3_SetConfig+0x108>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_OC3_SetConfig+0xae>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a18      	ldr	r2, [pc, #96]	@ (8008d30 <TIM_OC3_SetConfig+0x10c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d113      	bne.n	8008cfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400
 8008d28:	40014000 	.word	0x40014000
 8008d2c:	40014400 	.word	0x40014400
 8008d30:	40014800 	.word	0x40014800

08008d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	031b      	lsls	r3, r3, #12
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a28      	ldr	r2, [pc, #160]	@ (8008e34 <TIM_OC4_SetConfig+0x100>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC4_SetConfig+0x6c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a27      	ldr	r2, [pc, #156]	@ (8008e38 <TIM_OC4_SetConfig+0x104>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d10d      	bne.n	8008dbc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	031b      	lsls	r3, r3, #12
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8008e34 <TIM_OC4_SetConfig+0x100>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00f      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e38 <TIM_OC4_SetConfig+0x104>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a1b      	ldr	r2, [pc, #108]	@ (8008e3c <TIM_OC4_SetConfig+0x108>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d007      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e40 <TIM_OC4_SetConfig+0x10c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d003      	beq.n	8008de4 <TIM_OC4_SetConfig+0xb0>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a19      	ldr	r2, [pc, #100]	@ (8008e44 <TIM_OC4_SetConfig+0x110>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d113      	bne.n	8008e0c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008df2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	019b      	lsls	r3, r3, #6
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	019b      	lsls	r3, r3, #6
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40014400 	.word	0x40014400
 8008e44:	40014800 	.word	0x40014800

08008e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008e8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a17      	ldr	r2, [pc, #92]	@ (8008efc <TIM_OC5_SetConfig+0xb4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00f      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a16      	ldr	r2, [pc, #88]	@ (8008f00 <TIM_OC5_SetConfig+0xb8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00b      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a15      	ldr	r2, [pc, #84]	@ (8008f04 <TIM_OC5_SetConfig+0xbc>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d007      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a14      	ldr	r2, [pc, #80]	@ (8008f08 <TIM_OC5_SetConfig+0xc0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <TIM_OC5_SetConfig+0x7a>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a13      	ldr	r2, [pc, #76]	@ (8008f0c <TIM_OC5_SetConfig+0xc4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d109      	bne.n	8008ed6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40012c00 	.word	0x40012c00
 8008f00:	40013400 	.word	0x40013400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800

08008f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	051b      	lsls	r3, r3, #20
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a18      	ldr	r2, [pc, #96]	@ (8008fc8 <TIM_OC6_SetConfig+0xb8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00f      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a17      	ldr	r2, [pc, #92]	@ (8008fcc <TIM_OC6_SetConfig+0xbc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00b      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a16      	ldr	r2, [pc, #88]	@ (8008fd0 <TIM_OC6_SetConfig+0xc0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	@ (8008fd4 <TIM_OC6_SetConfig+0xc4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d003      	beq.n	8008f8c <TIM_OC6_SetConfig+0x7c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a14      	ldr	r2, [pc, #80]	@ (8008fd8 <TIM_OC6_SetConfig+0xc8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d109      	bne.n	8008fa0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	029b      	lsls	r3, r3, #10
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	621a      	str	r2, [r3, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40012c00 	.word	0x40012c00
 8008fcc:	40013400 	.word	0x40013400
 8008fd0:	40014000 	.word	0x40014000
 8008fd4:	40014400 	.word	0x40014400
 8008fd8:	40014800 	.word	0x40014800

08008fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f023 0201 	bic.w	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f023 030a 	bic.w	r3, r3, #10
 8009018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	621a      	str	r2, [r3, #32]
}
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903a:	b480      	push	{r7}
 800903c:	b087      	sub	sp, #28
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f023 0210 	bic.w	r2, r3, #16
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	031b      	lsls	r3, r3, #12
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	621a      	str	r2, [r3, #32]
}
 800908e:	bf00      	nop
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80090b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	f043 0307 	orr.w	r3, r3, #7
 80090c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	609a      	str	r2, [r3, #8]
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	021a      	lsls	r2, r3, #8
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	609a      	str	r2, [r3, #8]
}
 8009108:	bf00      	nop
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 031f 	and.w	r3, r3, #31
 8009126:	2201      	movs	r2, #1
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	43db      	mvns	r3, r3
 8009136:	401a      	ands	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1a      	ldr	r2, [r3, #32]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009174:	2302      	movs	r3, #2
 8009176:	e065      	b.n	8009244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2c      	ldr	r2, [pc, #176]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2b      	ldr	r2, [pc, #172]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d108      	bne.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80091c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d018      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ee:	d013      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a18      	ldr	r2, [pc, #96]	@ (8009258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00e      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a17      	ldr	r2, [pc, #92]	@ (800925c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d009      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a12      	ldr	r2, [pc, #72]	@ (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a13      	ldr	r2, [pc, #76]	@ (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d10c      	bne.n	8009232 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800921e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	4313      	orrs	r3, r2
 8009228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	40012c00 	.word	0x40012c00
 8009254:	40013400 	.word	0x40013400
 8009258:	40000400 	.word	0x40000400
 800925c:	40000800 	.word	0x40000800
 8009260:	40014000 	.word	0x40014000

08009264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800927c:	2302      	movs	r3, #2
 800927e:	e073      	b.n	8009368 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	041b      	lsls	r3, r3, #16
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	4313      	orrs	r3, r2
 8009306:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a19      	ldr	r2, [pc, #100]	@ (8009374 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d004      	beq.n	800931c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a18      	ldr	r2, [pc, #96]	@ (8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d11c      	bne.n	8009356 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	051b      	lsls	r3, r3, #20
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009344:	4313      	orrs	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40013400 	.word	0x40013400

0800937c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e042      	b.n	80094a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7fc f89f 	bl	8005570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	@ 0x24
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 ff40 	bl	800a2d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fc71 	bl	8009d40 <UART_SetConfig>
 800945e:	4603      	mov	r3, r0
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e01b      	b.n	80094a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 ffbf 	bl	800a41c <UART_CheckIdleState>
 800949e:	4603      	mov	r3, r0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	@ 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d167      	bne.n	8009590 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_UART_Transmit_DMA+0x24>
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e060      	b.n	8009592 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	88fa      	ldrh	r2, [r7, #6]
 80094da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	88fa      	ldrh	r2, [r7, #6]
 80094e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2221      	movs	r2, #33	@ 0x21
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d028      	beq.n	8009550 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009502:	4a26      	ldr	r2, [pc, #152]	@ (800959c <HAL_UART_Transmit_DMA+0xf4>)
 8009504:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800950a:	4a25      	ldr	r2, [pc, #148]	@ (80095a0 <HAL_UART_Transmit_DMA+0xf8>)
 800950c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009512:	4a24      	ldr	r2, [pc, #144]	@ (80095a4 <HAL_UART_Transmit_DMA+0xfc>)
 8009514:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800951a:	2200      	movs	r2, #0
 800951c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009526:	4619      	mov	r1, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3328      	adds	r3, #40	@ 0x28
 800952e:	461a      	mov	r2, r3
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	f7fc fc1b 	bl	8005d6c <HAL_DMA_Start_IT>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2210      	movs	r2, #16
 8009540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2220      	movs	r2, #32
 8009548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e020      	b.n	8009592 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2240      	movs	r2, #64	@ 0x40
 8009556:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	613b      	str	r3, [r7, #16]
   return(result);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009578:	623a      	str	r2, [r7, #32]
 800957a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	69f9      	ldr	r1, [r7, #28]
 800957e:	6a3a      	ldr	r2, [r7, #32]
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	61bb      	str	r3, [r7, #24]
   return(result);
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e5      	bne.n	8009558 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3728      	adds	r7, #40	@ 0x28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	0800a8e7 	.word	0x0800a8e7
 80095a0:	0800a981 	.word	0x0800a981
 80095a4:	0800ab07 	.word	0x0800ab07

080095a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d137      	bne.n	8009630 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_UART_Receive_DMA+0x24>
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e030      	b.n	8009632 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a18      	ldr	r2, [pc, #96]	@ (800963c <HAL_UART_Receive_DMA+0x94>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d01f      	beq.n	8009620 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d018      	beq.n	8009620 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	613b      	str	r3, [r7, #16]
   return(result);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009602:	627b      	str	r3, [r7, #36]	@ 0x24
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	61bb      	str	r3, [r7, #24]
   return(result);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	461a      	mov	r2, r3
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f001 f810 	bl	800a64c <UART_Start_Receive_DMA>
 800962c:	4603      	mov	r3, r0
 800962e:	e000      	b.n	8009632 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3728      	adds	r7, #40	@ 0x28
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	40008000 	.word	0x40008000

08009640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b0ba      	sub	sp, #232	@ 0xe8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800966a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800966e:	4013      	ands	r3, r2
 8009670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d11b      	bne.n	80096b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800967c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d015      	beq.n	80096b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800968c:	f003 0320 	and.w	r3, r3, #32
 8009690:	2b00      	cmp	r3, #0
 8009692:	d105      	bne.n	80096a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d009      	beq.n	80096b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8300 	beq.w	8009caa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
      }
      return;
 80096b2:	e2fa      	b.n	8009caa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8123 	beq.w	8009904 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096c2:	4b8d      	ldr	r3, [pc, #564]	@ (80098f8 <HAL_UART_IRQHandler+0x2b8>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096ce:	4b8b      	ldr	r3, [pc, #556]	@ (80098fc <HAL_UART_IRQHandler+0x2bc>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f000 8116 	beq.w	8009904 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d011      	beq.n	8009708 <HAL_UART_IRQHandler+0xc8>
 80096e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2201      	movs	r2, #1
 80096f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fe:	f043 0201 	orr.w	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d011      	beq.n	8009738 <HAL_UART_IRQHandler+0xf8>
 8009714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2202      	movs	r2, #2
 8009726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972e:	f043 0204 	orr.w	r2, r3, #4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d011      	beq.n	8009768 <HAL_UART_IRQHandler+0x128>
 8009744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2204      	movs	r2, #4
 8009756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800975e:	f043 0202 	orr.w	r2, r3, #2
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d017      	beq.n	80097a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009784:	4b5c      	ldr	r3, [pc, #368]	@ (80098f8 <HAL_UART_IRQHandler+0x2b8>)
 8009786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2208      	movs	r2, #8
 8009792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	f043 0208 	orr.w	r2, r3, #8
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d012      	beq.n	80097d6 <HAL_UART_IRQHandler+0x196>
 80097b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00c      	beq.n	80097d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097cc:	f043 0220 	orr.w	r2, r3, #32
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 8266 	beq.w	8009cae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d013      	beq.n	8009816 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f2:	f003 0320 	and.w	r3, r3, #32
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d005      	beq.n	800983a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800982e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009832:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009836:	2b00      	cmp	r3, #0
 8009838:	d054      	beq.n	80098e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 ffed 	bl	800a81a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984a:	2b40      	cmp	r3, #64	@ 0x40
 800984c:	d146      	bne.n	80098dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800986c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3308      	adds	r3, #8
 8009876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800987a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800987e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1d9      	bne.n	800984e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d017      	beq.n	80098d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098aa:	4a15      	ldr	r2, [pc, #84]	@ (8009900 <HAL_UART_IRQHandler+0x2c0>)
 80098ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fc fb2d 	bl	8005f14 <HAL_DMA_Abort_IT>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d019      	beq.n	80098f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80098ce:	4610      	mov	r0, r2
 80098d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	e00f      	b.n	80098f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fa1d 	bl	8009d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098da:	e00b      	b.n	80098f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fa19 	bl	8009d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e2:	e007      	b.n	80098f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fa15 	bl	8009d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80098f2:	e1dc      	b.n	8009cae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	bf00      	nop
    return;
 80098f6:	e1da      	b.n	8009cae <HAL_UART_IRQHandler+0x66e>
 80098f8:	10000001 	.word	0x10000001
 80098fc:	04000120 	.word	0x04000120
 8009900:	0800ab87 	.word	0x0800ab87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009908:	2b01      	cmp	r3, #1
 800990a:	f040 8170 	bne.w	8009bee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8169 	beq.w	8009bee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800991c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009920:	f003 0310 	and.w	r3, r3, #16
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 8162 	beq.w	8009bee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2210      	movs	r2, #16
 8009930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993c:	2b40      	cmp	r3, #64	@ 0x40
 800993e:	f040 80d8 	bne.w	8009af2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80af 	beq.w	8009ab8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009964:	429a      	cmp	r2, r3
 8009966:	f080 80a7 	bcs.w	8009ab8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009970:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 8087 	bne.w	8009a96 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800999c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1da      	bne.n	8009988 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e1      	bne.n	80099d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e3      	bne.n	8009a0e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a64:	f023 0310 	bic.w	r3, r3, #16
 8009a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fc f9e6 	bl	8005e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f939 	bl	8009d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ab6:	e0fc      	b.n	8009cb2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	f040 80f5 	bne.w	8009cb2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	f040 80eb 	bne.w	8009cb2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f91c 	bl	8009d28 <HAL_UARTEx_RxEventCallback>
      return;
 8009af0:	e0df      	b.n	8009cb2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80d1 	beq.w	8009cb6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80cc 	beq.w	8009cb6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	623b      	str	r3, [r7, #32]
   return(result);
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3308      	adds	r3, #8
 8009b78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e1      	bne.n	8009b54 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f023 0310 	bic.w	r3, r3, #16
 8009bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bca:	69b9      	ldr	r1, [r7, #24]
 8009bcc:	69fa      	ldr	r2, [r7, #28]
 8009bce:	e841 2300 	strex	r3, r2, [r1]
 8009bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1e4      	bne.n	8009ba4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f89e 	bl	8009d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bec:	e063      	b.n	8009cb6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00e      	beq.n	8009c18 <HAL_UART_IRQHandler+0x5d8>
 8009bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fff5 	bl	800ac00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c16:	e051      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d014      	beq.n	8009c4e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d105      	bne.n	8009c3c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d008      	beq.n	8009c4e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d03a      	beq.n	8009cba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	4798      	blx	r3
    }
    return;
 8009c4c:	e035      	b.n	8009cba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <HAL_UART_IRQHandler+0x62e>
 8009c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 ff9f 	bl	800abaa <UART_EndTransmit_IT>
    return;
 8009c6c:	e026      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <HAL_UART_IRQHandler+0x64e>
 8009c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 ffce 	bl	800ac28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c8c:	e016      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d010      	beq.n	8009cbc <HAL_UART_IRQHandler+0x67c>
 8009c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da0c      	bge.n	8009cbc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 ffb6 	bl	800ac14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ca8:	e008      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8009caa:	bf00      	nop
 8009cac:	e006      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
    return;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
      return;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_UART_IRQHandler+0x67c>
    return;
 8009cba:	bf00      	nop
  }
}
 8009cbc:	37e8      	adds	r7, #232	@ 0xe8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d44:	b08c      	sub	sp, #48	@ 0x30
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4bab      	ldr	r3, [pc, #684]	@ (800a01c <UART_SetConfig+0x2dc>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4aa0      	ldr	r2, [pc, #640]	@ (800a020 <UART_SetConfig+0x2e0>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da8:	4313      	orrs	r3, r2
 8009daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009db6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	6812      	ldr	r2, [r2, #0]
 8009dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	f023 010f 	bic.w	r1, r3, #15
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a91      	ldr	r2, [pc, #580]	@ (800a024 <UART_SetConfig+0x2e4>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d125      	bne.n	8009e30 <UART_SetConfig+0xf0>
 8009de4:	4b90      	ldr	r3, [pc, #576]	@ (800a028 <UART_SetConfig+0x2e8>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d81a      	bhi.n	8009e28 <UART_SetConfig+0xe8>
 8009df2:	a201      	add	r2, pc, #4	@ (adr r2, 8009df8 <UART_SetConfig+0xb8>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e11 	.word	0x08009e11
 8009e04:	08009e21 	.word	0x08009e21
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0e:	e0d6      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e10:	2302      	movs	r3, #2
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e16:	e0d2      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1e:	e0ce      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e26:	e0ca      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e2e:	e0c6      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a7d      	ldr	r2, [pc, #500]	@ (800a02c <UART_SetConfig+0x2ec>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d138      	bne.n	8009eac <UART_SetConfig+0x16c>
 8009e3a:	4b7b      	ldr	r3, [pc, #492]	@ (800a028 <UART_SetConfig+0x2e8>)
 8009e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e40:	f003 030c 	and.w	r3, r3, #12
 8009e44:	2b0c      	cmp	r3, #12
 8009e46:	d82d      	bhi.n	8009ea4 <UART_SetConfig+0x164>
 8009e48:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <UART_SetConfig+0x110>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009ea5 	.word	0x08009ea5
 8009e58:	08009ea5 	.word	0x08009ea5
 8009e5c:	08009ea5 	.word	0x08009ea5
 8009e60:	08009e95 	.word	0x08009e95
 8009e64:	08009ea5 	.word	0x08009ea5
 8009e68:	08009ea5 	.word	0x08009ea5
 8009e6c:	08009ea5 	.word	0x08009ea5
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009ea5 	.word	0x08009ea5
 8009e78:	08009ea5 	.word	0x08009ea5
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009e9d 	.word	0x08009e9d
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e8a:	e098      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e92:	e094      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e9a:	e090      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea2:	e08c      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eaa:	e088      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a5f      	ldr	r2, [pc, #380]	@ (800a030 <UART_SetConfig+0x2f0>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d125      	bne.n	8009f02 <UART_SetConfig+0x1c2>
 8009eb6:	4b5c      	ldr	r3, [pc, #368]	@ (800a028 <UART_SetConfig+0x2e8>)
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ec0:	2b30      	cmp	r3, #48	@ 0x30
 8009ec2:	d016      	beq.n	8009ef2 <UART_SetConfig+0x1b2>
 8009ec4:	2b30      	cmp	r3, #48	@ 0x30
 8009ec6:	d818      	bhi.n	8009efa <UART_SetConfig+0x1ba>
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	d00a      	beq.n	8009ee2 <UART_SetConfig+0x1a2>
 8009ecc:	2b20      	cmp	r3, #32
 8009ece:	d814      	bhi.n	8009efa <UART_SetConfig+0x1ba>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <UART_SetConfig+0x19a>
 8009ed4:	2b10      	cmp	r3, #16
 8009ed6:	d008      	beq.n	8009eea <UART_SetConfig+0x1aa>
 8009ed8:	e00f      	b.n	8009efa <UART_SetConfig+0x1ba>
 8009eda:	2300      	movs	r3, #0
 8009edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee0:	e06d      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee8:	e069      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009eea:	2304      	movs	r3, #4
 8009eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef0:	e065      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009ef2:	2308      	movs	r3, #8
 8009ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ef8:	e061      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009efa:	2310      	movs	r3, #16
 8009efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f00:	e05d      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a4b      	ldr	r2, [pc, #300]	@ (800a034 <UART_SetConfig+0x2f4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d125      	bne.n	8009f58 <UART_SetConfig+0x218>
 8009f0c:	4b46      	ldr	r3, [pc, #280]	@ (800a028 <UART_SetConfig+0x2e8>)
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f18:	d016      	beq.n	8009f48 <UART_SetConfig+0x208>
 8009f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f1c:	d818      	bhi.n	8009f50 <UART_SetConfig+0x210>
 8009f1e:	2b80      	cmp	r3, #128	@ 0x80
 8009f20:	d00a      	beq.n	8009f38 <UART_SetConfig+0x1f8>
 8009f22:	2b80      	cmp	r3, #128	@ 0x80
 8009f24:	d814      	bhi.n	8009f50 <UART_SetConfig+0x210>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <UART_SetConfig+0x1f0>
 8009f2a:	2b40      	cmp	r3, #64	@ 0x40
 8009f2c:	d008      	beq.n	8009f40 <UART_SetConfig+0x200>
 8009f2e:	e00f      	b.n	8009f50 <UART_SetConfig+0x210>
 8009f30:	2300      	movs	r3, #0
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f36:	e042      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f3e:	e03e      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f46:	e03a      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4e:	e036      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f56:	e032      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a30      	ldr	r2, [pc, #192]	@ (800a020 <UART_SetConfig+0x2e0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d12a      	bne.n	8009fb8 <UART_SetConfig+0x278>
 8009f62:	4b31      	ldr	r3, [pc, #196]	@ (800a028 <UART_SetConfig+0x2e8>)
 8009f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f70:	d01a      	beq.n	8009fa8 <UART_SetConfig+0x268>
 8009f72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f76:	d81b      	bhi.n	8009fb0 <UART_SetConfig+0x270>
 8009f78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f7c:	d00c      	beq.n	8009f98 <UART_SetConfig+0x258>
 8009f7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f82:	d815      	bhi.n	8009fb0 <UART_SetConfig+0x270>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <UART_SetConfig+0x250>
 8009f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f8c:	d008      	beq.n	8009fa0 <UART_SetConfig+0x260>
 8009f8e:	e00f      	b.n	8009fb0 <UART_SetConfig+0x270>
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e012      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9e:	e00e      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa6:	e00a      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009fa8:	2308      	movs	r3, #8
 8009faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fae:	e006      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009fb0:	2310      	movs	r3, #16
 8009fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fb6:	e002      	b.n	8009fbe <UART_SetConfig+0x27e>
 8009fb8:	2310      	movs	r3, #16
 8009fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a17      	ldr	r2, [pc, #92]	@ (800a020 <UART_SetConfig+0x2e0>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	f040 80a8 	bne.w	800a11a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	d834      	bhi.n	800a03c <UART_SetConfig+0x2fc>
 8009fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd8 <UART_SetConfig+0x298>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a03d 	.word	0x0800a03d
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a03d 	.word	0x0800a03d
 8009fe8:	0800a00b 	.word	0x0800a00b
 8009fec:	0800a03d 	.word	0x0800a03d
 8009ff0:	0800a03d 	.word	0x0800a03d
 8009ff4:	0800a03d 	.word	0x0800a03d
 8009ff8:	0800a013 	.word	0x0800a013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ffc:	f7fd f9ac 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 800a000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a002:	e021      	b.n	800a048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a004:	4b0c      	ldr	r3, [pc, #48]	@ (800a038 <UART_SetConfig+0x2f8>)
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a008:	e01e      	b.n	800a048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a00a:	f7fd f937 	bl	800727c <HAL_RCC_GetSysClockFreq>
 800a00e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a010:	e01a      	b.n	800a048 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a018:	e016      	b.n	800a048 <UART_SetConfig+0x308>
 800a01a:	bf00      	nop
 800a01c:	cfff69f3 	.word	0xcfff69f3
 800a020:	40008000 	.word	0x40008000
 800a024:	40013800 	.word	0x40013800
 800a028:	40021000 	.word	0x40021000
 800a02c:	40004400 	.word	0x40004400
 800a030:	40004800 	.word	0x40004800
 800a034:	40004c00 	.word	0x40004c00
 800a038:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a046:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 812a 	beq.w	800a2a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	4a9e      	ldr	r2, [pc, #632]	@ (800a2d0 <UART_SetConfig+0x590>)
 800a056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a062:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	4613      	mov	r3, r2
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	4413      	add	r3, r2
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	429a      	cmp	r2, r3
 800a072:	d305      	bcc.n	800a080 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d903      	bls.n	800a088 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a086:	e10d      	b.n	800a2a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	2200      	movs	r2, #0
 800a08c:	60bb      	str	r3, [r7, #8]
 800a08e:	60fa      	str	r2, [r7, #12]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a094:	4a8e      	ldr	r2, [pc, #568]	@ (800a2d0 <UART_SetConfig+0x590>)
 800a096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	2200      	movs	r2, #0
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	607a      	str	r2, [r7, #4]
 800a0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0aa:	f7f6 fd8b 	bl	8000bc4 <__aeabi_uldivmod>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f04f 0200 	mov.w	r2, #0
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	020b      	lsls	r3, r1, #8
 800a0c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0c4:	0202      	lsls	r2, r0, #8
 800a0c6:	6979      	ldr	r1, [r7, #20]
 800a0c8:	6849      	ldr	r1, [r1, #4]
 800a0ca:	0849      	lsrs	r1, r1, #1
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	eb12 0804 	adds.w	r8, r2, r4
 800a0d6:	eb43 0905 	adc.w	r9, r3, r5
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	469a      	mov	sl, r3
 800a0e2:	4693      	mov	fp, r2
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	f7f6 fd6a 	bl	8000bc4 <__aeabi_uldivmod>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0fe:	d308      	bcc.n	800a112 <UART_SetConfig+0x3d2>
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a106:	d204      	bcs.n	800a112 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6a3a      	ldr	r2, [r7, #32]
 800a10e:	60da      	str	r2, [r3, #12]
 800a110:	e0c8      	b.n	800a2a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a118:	e0c4      	b.n	800a2a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a122:	d167      	bne.n	800a1f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a124:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d828      	bhi.n	800a17e <UART_SetConfig+0x43e>
 800a12c:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <UART_SetConfig+0x3f4>)
 800a12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a132:	bf00      	nop
 800a134:	0800a159 	.word	0x0800a159
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	0800a169 	.word	0x0800a169
 800a140:	0800a17f 	.word	0x0800a17f
 800a144:	0800a16f 	.word	0x0800a16f
 800a148:	0800a17f 	.word	0x0800a17f
 800a14c:	0800a17f 	.word	0x0800a17f
 800a150:	0800a17f 	.word	0x0800a17f
 800a154:	0800a177 	.word	0x0800a177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a158:	f7fd f8fe 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 800a15c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a15e:	e014      	b.n	800a18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a160:	f7fd f910 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 800a164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a166:	e010      	b.n	800a18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a168:	4b5a      	ldr	r3, [pc, #360]	@ (800a2d4 <UART_SetConfig+0x594>)
 800a16a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a16c:	e00d      	b.n	800a18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a16e:	f7fd f885 	bl	800727c <HAL_RCC_GetSysClockFreq>
 800a172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a174:	e009      	b.n	800a18a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a17c:	e005      	b.n	800a18a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8089 	beq.w	800a2a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	4a4e      	ldr	r2, [pc, #312]	@ (800a2d0 <UART_SetConfig+0x590>)
 800a198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a4:	005a      	lsls	r2, r3, #1
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	441a      	add	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b0f      	cmp	r3, #15
 800a1bc:	d916      	bls.n	800a1ec <UART_SetConfig+0x4ac>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c4:	d212      	bcs.n	800a1ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f023 030f 	bic.w	r3, r3, #15
 800a1ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	8bfb      	ldrh	r3, [r7, #30]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	8bfa      	ldrh	r2, [r7, #30]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	e05b      	b.n	800a2a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a1f2:	e057      	b.n	800a2a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d828      	bhi.n	800a24e <UART_SetConfig+0x50e>
 800a1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <UART_SetConfig+0x4c4>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a239 	.word	0x0800a239
 800a210:	0800a24f 	.word	0x0800a24f
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a24f 	.word	0x0800a24f
 800a21c:	0800a24f 	.word	0x0800a24f
 800a220:	0800a24f 	.word	0x0800a24f
 800a224:	0800a247 	.word	0x0800a247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a228:	f7fd f896 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 800a22c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a22e:	e014      	b.n	800a25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a230:	f7fd f8a8 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 800a234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a236:	e010      	b.n	800a25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a238:	4b26      	ldr	r3, [pc, #152]	@ (800a2d4 <UART_SetConfig+0x594>)
 800a23a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a23c:	e00d      	b.n	800a25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a23e:	f7fd f81d 	bl	800727c <HAL_RCC_GetSysClockFreq>
 800a242:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a244:	e009      	b.n	800a25a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a24a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a24c:	e005      	b.n	800a25a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a258:	bf00      	nop
    }

    if (pclk != 0U)
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d021      	beq.n	800a2a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a264:	4a1a      	ldr	r2, [pc, #104]	@ (800a2d0 <UART_SetConfig+0x590>)
 800a266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	441a      	add	r2, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d909      	bls.n	800a29e <UART_SetConfig+0x55e>
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a290:	d205      	bcs.n	800a29e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	b29a      	uxth	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	e002      	b.n	800a2a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a2c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3730      	adds	r7, #48	@ 0x30
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800b558 	.word	0x0800b558
 800a2d4:	00f42400 	.word	0x00f42400

0800a2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	f003 0308 	and.w	r3, r3, #8
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00a      	beq.n	800a38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00a      	beq.n	800a3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3d6:	d10a      	bne.n	800a3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b098      	sub	sp, #96	@ 0x60
 800a420:	af02      	add	r7, sp, #8
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a42c:	f7fb fada 	bl	80059e4 <HAL_GetTick>
 800a430:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0308 	and.w	r3, r3, #8
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d12f      	bne.n	800a4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a440:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a448:	2200      	movs	r2, #0
 800a44a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f88e 	bl	800a570 <UART_WaitOnFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d022      	beq.n	800a4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a46e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a478:	647b      	str	r3, [r7, #68]	@ 0x44
 800a47a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a47e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e6      	bne.n	800a45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e063      	b.n	800a568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0304 	and.w	r3, r3, #4
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d149      	bne.n	800a542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f857 	bl	800a570 <UART_WaitOnFlagUntilTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d03c      	beq.n	800a542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e6      	bne.n	800a4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3308      	adds	r3, #8
 800a500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	e853 3f00 	ldrex	r3, [r3]
 800a508:	60fb      	str	r3, [r7, #12]
   return(result);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 0301 	bic.w	r3, r3, #1
 800a510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3308      	adds	r3, #8
 800a518:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a51a:	61fa      	str	r2, [r7, #28]
 800a51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	69b9      	ldr	r1, [r7, #24]
 800a520:	69fa      	ldr	r2, [r7, #28]
 800a522:	e841 2300 	strex	r3, r2, [r1]
 800a526:	617b      	str	r3, [r7, #20]
   return(result);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1e5      	bne.n	800a4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e012      	b.n	800a568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3758      	adds	r7, #88	@ 0x58
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a580:	e04f      	b.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d04b      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a58a:	f7fb fa2b 	bl	80059e4 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	429a      	cmp	r2, r3
 800a598:	d302      	bcc.n	800a5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d101      	bne.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e04e      	b.n	800a642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d037      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b80      	cmp	r3, #128	@ 0x80
 800a5b6:	d034      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b40      	cmp	r3, #64	@ 0x40
 800a5bc:	d031      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	d110      	bne.n	800a5ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f920 	bl	800a81a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2208      	movs	r2, #8
 800a5de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e029      	b.n	800a642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5fc:	d111      	bne.n	800a622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f906 	bl	800a81a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2220      	movs	r2, #32
 800a612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e00f      	b.n	800a642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4013      	ands	r3, r2
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	bf0c      	ite	eq
 800a632:	2301      	moveq	r3, #1
 800a634:	2300      	movne	r3, #0
 800a636:	b2db      	uxtb	r3, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d0a0      	beq.n	800a582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b096      	sub	sp, #88	@ 0x58
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	4613      	mov	r3, r2
 800a658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	88fa      	ldrh	r2, [r7, #6]
 800a664:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2222      	movs	r2, #34	@ 0x22
 800a674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d02d      	beq.n	800a6de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a688:	4a40      	ldr	r2, [pc, #256]	@ (800a78c <UART_Start_Receive_DMA+0x140>)
 800a68a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a692:	4a3f      	ldr	r2, [pc, #252]	@ (800a790 <UART_Start_Receive_DMA+0x144>)
 800a694:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a69c:	4a3d      	ldr	r2, [pc, #244]	@ (800a794 <UART_Start_Receive_DMA+0x148>)
 800a69e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3324      	adds	r3, #36	@ 0x24
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6bc:	461a      	mov	r2, r3
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	f7fb fb54 	bl	8005d6c <HAL_DMA_Start_IT>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2210      	movs	r2, #16
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e051      	b.n	800a782 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ee:	e853 3f00 	ldrex	r3, [r3]
 800a6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a706:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a70a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e6      	bne.n	800a6e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3308      	adds	r3, #8
 800a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72a:	f043 0301 	orr.w	r3, r3, #1
 800a72e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3308      	adds	r3, #8
 800a736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a738:	637a      	str	r2, [r7, #52]	@ 0x34
 800a73a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a73e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e5      	bne.n	800a718 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	613b      	str	r3, [r7, #16]
   return(result);
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a76c:	623a      	str	r2, [r7, #32]
 800a76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	6a3a      	ldr	r2, [r7, #32]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	61bb      	str	r3, [r7, #24]
   return(result);
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3758      	adds	r7, #88	@ 0x58
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	0800a99d 	.word	0x0800a99d
 800a790:	0800aac9 	.word	0x0800aac9
 800a794:	0800ab07 	.word	0x0800ab07

0800a798 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b08f      	sub	sp, #60	@ 0x3c
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a7b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e6      	bne.n	800a7a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a7e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f2:	61ba      	str	r2, [r7, #24]
 800a7f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6979      	ldr	r1, [r7, #20]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a80e:	bf00      	nop
 800a810:	373c      	adds	r7, #60	@ 0x3c
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b095      	sub	sp, #84	@ 0x54
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a840:	643b      	str	r3, [r7, #64]	@ 0x40
 800a842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e6      	bne.n	800a822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3308      	adds	r3, #8
 800a85a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	e853 3f00 	ldrex	r3, [r3]
 800a862:	61fb      	str	r3, [r7, #28]
   return(result);
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a87a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e3      	bne.n	800a854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d118      	bne.n	800a8c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f023 0310 	bic.w	r3, r3, #16
 800a8a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	6979      	ldr	r1, [r7, #20]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	e841 2300 	strex	r3, r2, [r1]
 800a8be:	613b      	str	r3, [r7, #16]
   return(result);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e6      	bne.n	800a894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8da:	bf00      	nop
 800a8dc:	3754      	adds	r7, #84	@ 0x54
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b090      	sub	sp, #64	@ 0x40
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d137      	bne.n	800a972 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a904:	2200      	movs	r2, #0
 800a906:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a90a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	623b      	str	r3, [r7, #32]
   return(result);
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a920:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a92a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a952:	637b      	str	r3, [r7, #52]	@ 0x34
 800a954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95c:	61fb      	str	r3, [r7, #28]
 800a95e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	69b9      	ldr	r1, [r7, #24]
 800a962:	69fa      	ldr	r2, [r7, #28]
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	617b      	str	r3, [r7, #20]
   return(result);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e6      	bne.n	800a93e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a970:	e002      	b.n	800a978 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a972:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a974:	f7ff f9a6 	bl	8009cc4 <HAL_UART_TxCpltCallback>
}
 800a978:	bf00      	nop
 800a97a:	3740      	adds	r7, #64	@ 0x40
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff f9a2 	bl	8009cd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a994:	bf00      	nop
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b09c      	sub	sp, #112	@ 0x70
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d171      	bne.n	800aa9c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a9b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e6      	bne.n	800a9c0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa12:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e5      	bne.n	800a9f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	e853 3f00 	ldrex	r3, [r3]
 800aa34:	623b      	str	r3, [r7, #32]
   return(result);
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3308      	adds	r3, #8
 800aa44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa46:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa4e:	e841 2300 	strex	r3, r2, [r1]
 800aa52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1e5      	bne.n	800aa26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d118      	bne.n	800aa9c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0310 	bic.w	r3, r3, #16
 800aa7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa88:	61fb      	str	r3, [r7, #28]
 800aa8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	69b9      	ldr	r1, [r7, #24]
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	617b      	str	r3, [r7, #20]
   return(result);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e6      	bne.n	800aa6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d107      	bne.n	800aaba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aab0:	4619      	mov	r1, r3
 800aab2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aab4:	f7ff f938 	bl	8009d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aab8:	e002      	b.n	800aac0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aaba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aabc:	f7ff f916 	bl	8009cec <HAL_UART_RxCpltCallback>
}
 800aac0:	bf00      	nop
 800aac2:	3770      	adds	r7, #112	@ 0x70
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d109      	bne.n	800aaf8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	4619      	mov	r1, r3
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff f919 	bl	8009d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaf6:	e002      	b.n	800aafe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff f901 	bl	8009d00 <HAL_UART_RxHalfCpltCallback>
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b086      	sub	sp, #24
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab2e:	2b80      	cmp	r3, #128	@ 0x80
 800ab30:	d109      	bne.n	800ab46 <UART_DMAError+0x40>
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	2b21      	cmp	r3, #33	@ 0x21
 800ab36:	d106      	bne.n	800ab46 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ab40:	6978      	ldr	r0, [r7, #20]
 800ab42:	f7ff fe29 	bl	800a798 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab50:	2b40      	cmp	r3, #64	@ 0x40
 800ab52:	d109      	bne.n	800ab68 <UART_DMAError+0x62>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b22      	cmp	r3, #34	@ 0x22
 800ab58:	d106      	bne.n	800ab68 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ab62:	6978      	ldr	r0, [r7, #20]
 800ab64:	f7ff fe59 	bl	800a81a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab6e:	f043 0210 	orr.w	r2, r3, #16
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab78:	6978      	ldr	r0, [r7, #20]
 800ab7a:	f7ff f8cb 	bl	8009d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7e:	bf00      	nop
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff f8b9 	bl	8009d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b088      	sub	sp, #32
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	e853 3f00 	ldrex	r3, [r3]
 800abbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abc6:	61fb      	str	r3, [r7, #28]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	61bb      	str	r3, [r7, #24]
 800abd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd4:	6979      	ldr	r1, [r7, #20]
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	e841 2300 	strex	r3, r2, [r1]
 800abdc:	613b      	str	r3, [r7, #16]
   return(result);
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1e6      	bne.n	800abb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2220      	movs	r2, #32
 800abe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff f866 	bl	8009cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf8:	bf00      	nop
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e027      	b.n	800aca2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2224      	movs	r2, #36	@ 0x24
 800ac5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f022 0201 	bic.w	r2, r2, #1
 800ac78:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d101      	bne.n	800acc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acc2:	2302      	movs	r3, #2
 800acc4:	e02d      	b.n	800ad22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2224      	movs	r2, #36	@ 0x24
 800acd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0201 	bic.w	r2, r2, #1
 800acec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f850 	bl	800ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2220      	movs	r2, #32
 800ad14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e02d      	b.n	800ad9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2224      	movs	r2, #36	@ 0x24
 800ad4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0201 	bic.w	r2, r2, #1
 800ad68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f812 	bl	800ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adc8:	e031      	b.n	800ae2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adca:	2308      	movs	r3, #8
 800adcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adce:	2308      	movs	r3, #8
 800add0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	0e5b      	lsrs	r3, r3, #25
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f003 0307 	and.w	r3, r3, #7
 800ade0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	0f5b      	lsrs	r3, r3, #29
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 0307 	and.w	r3, r3, #7
 800adf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	7b3a      	ldrb	r2, [r7, #12]
 800adf6:	4911      	ldr	r1, [pc, #68]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x94>)
 800adf8:	5c8a      	ldrb	r2, [r1, r2]
 800adfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adfe:	7b3a      	ldrb	r2, [r7, #12]
 800ae00:	490f      	ldr	r1, [pc, #60]	@ (800ae40 <UARTEx_SetNbDataToProcess+0x98>)
 800ae02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	7b7a      	ldrb	r2, [r7, #13]
 800ae14:	4909      	ldr	r1, [pc, #36]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x94>)
 800ae16:	5c8a      	ldrb	r2, [r1, r2]
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae1c:	7b7a      	ldrb	r2, [r7, #13]
 800ae1e:	4908      	ldr	r1, [pc, #32]	@ (800ae40 <UARTEx_SetNbDataToProcess+0x98>)
 800ae20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae22:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	0800b570 	.word	0x0800b570
 800ae40:	0800b578 	.word	0x0800b578

0800ae44 <realloc>:
 800ae44:	4b02      	ldr	r3, [pc, #8]	@ (800ae50 <realloc+0xc>)
 800ae46:	460a      	mov	r2, r1
 800ae48:	4601      	mov	r1, r0
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	f000 b802 	b.w	800ae54 <_realloc_r>
 800ae50:	20000020 	.word	0x20000020

0800ae54 <_realloc_r>:
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	4680      	mov	r8, r0
 800ae5a:	4615      	mov	r5, r2
 800ae5c:	460c      	mov	r4, r1
 800ae5e:	b921      	cbnz	r1, 800ae6a <_realloc_r+0x16>
 800ae60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae64:	4611      	mov	r1, r2
 800ae66:	f000 b8d1 	b.w	800b00c <_malloc_r>
 800ae6a:	b92a      	cbnz	r2, 800ae78 <_realloc_r+0x24>
 800ae6c:	f000 f862 	bl	800af34 <_free_r>
 800ae70:	2400      	movs	r4, #0
 800ae72:	4620      	mov	r0, r4
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	f000 f954 	bl	800b124 <_malloc_usable_size_r>
 800ae7c:	4285      	cmp	r5, r0
 800ae7e:	4606      	mov	r6, r0
 800ae80:	d802      	bhi.n	800ae88 <_realloc_r+0x34>
 800ae82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae86:	d8f4      	bhi.n	800ae72 <_realloc_r+0x1e>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f000 f8be 	bl	800b00c <_malloc_r>
 800ae90:	4607      	mov	r7, r0
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d0ec      	beq.n	800ae70 <_realloc_r+0x1c>
 800ae96:	42b5      	cmp	r5, r6
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	bf28      	it	cs
 800ae9e:	4632      	movcs	r2, r6
 800aea0:	f000 f83a 	bl	800af18 <memcpy>
 800aea4:	4621      	mov	r1, r4
 800aea6:	4640      	mov	r0, r8
 800aea8:	f000 f844 	bl	800af34 <_free_r>
 800aeac:	463c      	mov	r4, r7
 800aeae:	e7e0      	b.n	800ae72 <_realloc_r+0x1e>

0800aeb0 <memset>:
 800aeb0:	4402      	add	r2, r0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d100      	bne.n	800aeba <memset+0xa>
 800aeb8:	4770      	bx	lr
 800aeba:	f803 1b01 	strb.w	r1, [r3], #1
 800aebe:	e7f9      	b.n	800aeb4 <memset+0x4>

0800aec0 <__errno>:
 800aec0:	4b01      	ldr	r3, [pc, #4]	@ (800aec8 <__errno+0x8>)
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000020 	.word	0x20000020

0800aecc <__libc_init_array>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	4d0d      	ldr	r5, [pc, #52]	@ (800af04 <__libc_init_array+0x38>)
 800aed0:	4c0d      	ldr	r4, [pc, #52]	@ (800af08 <__libc_init_array+0x3c>)
 800aed2:	1b64      	subs	r4, r4, r5
 800aed4:	10a4      	asrs	r4, r4, #2
 800aed6:	2600      	movs	r6, #0
 800aed8:	42a6      	cmp	r6, r4
 800aeda:	d109      	bne.n	800aef0 <__libc_init_array+0x24>
 800aedc:	4d0b      	ldr	r5, [pc, #44]	@ (800af0c <__libc_init_array+0x40>)
 800aede:	4c0c      	ldr	r4, [pc, #48]	@ (800af10 <__libc_init_array+0x44>)
 800aee0:	f000 f938 	bl	800b154 <_init>
 800aee4:	1b64      	subs	r4, r4, r5
 800aee6:	10a4      	asrs	r4, r4, #2
 800aee8:	2600      	movs	r6, #0
 800aeea:	42a6      	cmp	r6, r4
 800aeec:	d105      	bne.n	800aefa <__libc_init_array+0x2e>
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef4:	4798      	blx	r3
 800aef6:	3601      	adds	r6, #1
 800aef8:	e7ee      	b.n	800aed8 <__libc_init_array+0xc>
 800aefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aefe:	4798      	blx	r3
 800af00:	3601      	adds	r6, #1
 800af02:	e7f2      	b.n	800aeea <__libc_init_array+0x1e>
 800af04:	0800b588 	.word	0x0800b588
 800af08:	0800b588 	.word	0x0800b588
 800af0c:	0800b588 	.word	0x0800b588
 800af10:	0800b594 	.word	0x0800b594

0800af14 <__retarget_lock_acquire_recursive>:
 800af14:	4770      	bx	lr

0800af16 <__retarget_lock_release_recursive>:
 800af16:	4770      	bx	lr

0800af18 <memcpy>:
 800af18:	440a      	add	r2, r1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af20:	d100      	bne.n	800af24 <memcpy+0xc>
 800af22:	4770      	bx	lr
 800af24:	b510      	push	{r4, lr}
 800af26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af2e:	4291      	cmp	r1, r2
 800af30:	d1f9      	bne.n	800af26 <memcpy+0xe>
 800af32:	bd10      	pop	{r4, pc}

0800af34 <_free_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4605      	mov	r5, r0
 800af38:	2900      	cmp	r1, #0
 800af3a:	d041      	beq.n	800afc0 <_free_r+0x8c>
 800af3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af40:	1f0c      	subs	r4, r1, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	bfb8      	it	lt
 800af46:	18e4      	addlt	r4, r4, r3
 800af48:	f000 f8e0 	bl	800b10c <__malloc_lock>
 800af4c:	4a1d      	ldr	r2, [pc, #116]	@ (800afc4 <_free_r+0x90>)
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	b933      	cbnz	r3, 800af60 <_free_r+0x2c>
 800af52:	6063      	str	r3, [r4, #4]
 800af54:	6014      	str	r4, [r2, #0]
 800af56:	4628      	mov	r0, r5
 800af58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af5c:	f000 b8dc 	b.w	800b118 <__malloc_unlock>
 800af60:	42a3      	cmp	r3, r4
 800af62:	d908      	bls.n	800af76 <_free_r+0x42>
 800af64:	6820      	ldr	r0, [r4, #0]
 800af66:	1821      	adds	r1, r4, r0
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf01      	itttt	eq
 800af6c:	6819      	ldreq	r1, [r3, #0]
 800af6e:	685b      	ldreq	r3, [r3, #4]
 800af70:	1809      	addeq	r1, r1, r0
 800af72:	6021      	streq	r1, [r4, #0]
 800af74:	e7ed      	b.n	800af52 <_free_r+0x1e>
 800af76:	461a      	mov	r2, r3
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	b10b      	cbz	r3, 800af80 <_free_r+0x4c>
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d9fa      	bls.n	800af76 <_free_r+0x42>
 800af80:	6811      	ldr	r1, [r2, #0]
 800af82:	1850      	adds	r0, r2, r1
 800af84:	42a0      	cmp	r0, r4
 800af86:	d10b      	bne.n	800afa0 <_free_r+0x6c>
 800af88:	6820      	ldr	r0, [r4, #0]
 800af8a:	4401      	add	r1, r0
 800af8c:	1850      	adds	r0, r2, r1
 800af8e:	4283      	cmp	r3, r0
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	d1e0      	bne.n	800af56 <_free_r+0x22>
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	6053      	str	r3, [r2, #4]
 800af9a:	4408      	add	r0, r1
 800af9c:	6010      	str	r0, [r2, #0]
 800af9e:	e7da      	b.n	800af56 <_free_r+0x22>
 800afa0:	d902      	bls.n	800afa8 <_free_r+0x74>
 800afa2:	230c      	movs	r3, #12
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	e7d6      	b.n	800af56 <_free_r+0x22>
 800afa8:	6820      	ldr	r0, [r4, #0]
 800afaa:	1821      	adds	r1, r4, r0
 800afac:	428b      	cmp	r3, r1
 800afae:	bf04      	itt	eq
 800afb0:	6819      	ldreq	r1, [r3, #0]
 800afb2:	685b      	ldreq	r3, [r3, #4]
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	bf04      	itt	eq
 800afb8:	1809      	addeq	r1, r1, r0
 800afba:	6021      	streq	r1, [r4, #0]
 800afbc:	6054      	str	r4, [r2, #4]
 800afbe:	e7ca      	b.n	800af56 <_free_r+0x22>
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	bf00      	nop
 800afc4:	20001d60 	.word	0x20001d60

0800afc8 <sbrk_aligned>:
 800afc8:	b570      	push	{r4, r5, r6, lr}
 800afca:	4e0f      	ldr	r6, [pc, #60]	@ (800b008 <sbrk_aligned+0x40>)
 800afcc:	460c      	mov	r4, r1
 800afce:	6831      	ldr	r1, [r6, #0]
 800afd0:	4605      	mov	r5, r0
 800afd2:	b911      	cbnz	r1, 800afda <sbrk_aligned+0x12>
 800afd4:	f000 f8ae 	bl	800b134 <_sbrk_r>
 800afd8:	6030      	str	r0, [r6, #0]
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 f8a9 	bl	800b134 <_sbrk_r>
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	d103      	bne.n	800afee <sbrk_aligned+0x26>
 800afe6:	f04f 34ff 	mov.w	r4, #4294967295
 800afea:	4620      	mov	r0, r4
 800afec:	bd70      	pop	{r4, r5, r6, pc}
 800afee:	1cc4      	adds	r4, r0, #3
 800aff0:	f024 0403 	bic.w	r4, r4, #3
 800aff4:	42a0      	cmp	r0, r4
 800aff6:	d0f8      	beq.n	800afea <sbrk_aligned+0x22>
 800aff8:	1a21      	subs	r1, r4, r0
 800affa:	4628      	mov	r0, r5
 800affc:	f000 f89a 	bl	800b134 <_sbrk_r>
 800b000:	3001      	adds	r0, #1
 800b002:	d1f2      	bne.n	800afea <sbrk_aligned+0x22>
 800b004:	e7ef      	b.n	800afe6 <sbrk_aligned+0x1e>
 800b006:	bf00      	nop
 800b008:	20001d5c 	.word	0x20001d5c

0800b00c <_malloc_r>:
 800b00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b010:	1ccd      	adds	r5, r1, #3
 800b012:	f025 0503 	bic.w	r5, r5, #3
 800b016:	3508      	adds	r5, #8
 800b018:	2d0c      	cmp	r5, #12
 800b01a:	bf38      	it	cc
 800b01c:	250c      	movcc	r5, #12
 800b01e:	2d00      	cmp	r5, #0
 800b020:	4606      	mov	r6, r0
 800b022:	db01      	blt.n	800b028 <_malloc_r+0x1c>
 800b024:	42a9      	cmp	r1, r5
 800b026:	d904      	bls.n	800b032 <_malloc_r+0x26>
 800b028:	230c      	movs	r3, #12
 800b02a:	6033      	str	r3, [r6, #0]
 800b02c:	2000      	movs	r0, #0
 800b02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b108 <_malloc_r+0xfc>
 800b036:	f000 f869 	bl	800b10c <__malloc_lock>
 800b03a:	f8d8 3000 	ldr.w	r3, [r8]
 800b03e:	461c      	mov	r4, r3
 800b040:	bb44      	cbnz	r4, 800b094 <_malloc_r+0x88>
 800b042:	4629      	mov	r1, r5
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff ffbf 	bl	800afc8 <sbrk_aligned>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	4604      	mov	r4, r0
 800b04e:	d158      	bne.n	800b102 <_malloc_r+0xf6>
 800b050:	f8d8 4000 	ldr.w	r4, [r8]
 800b054:	4627      	mov	r7, r4
 800b056:	2f00      	cmp	r7, #0
 800b058:	d143      	bne.n	800b0e2 <_malloc_r+0xd6>
 800b05a:	2c00      	cmp	r4, #0
 800b05c:	d04b      	beq.n	800b0f6 <_malloc_r+0xea>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	4639      	mov	r1, r7
 800b062:	4630      	mov	r0, r6
 800b064:	eb04 0903 	add.w	r9, r4, r3
 800b068:	f000 f864 	bl	800b134 <_sbrk_r>
 800b06c:	4581      	cmp	r9, r0
 800b06e:	d142      	bne.n	800b0f6 <_malloc_r+0xea>
 800b070:	6821      	ldr	r1, [r4, #0]
 800b072:	1a6d      	subs	r5, r5, r1
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f7ff ffa6 	bl	800afc8 <sbrk_aligned>
 800b07c:	3001      	adds	r0, #1
 800b07e:	d03a      	beq.n	800b0f6 <_malloc_r+0xea>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	442b      	add	r3, r5
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	f8d8 3000 	ldr.w	r3, [r8]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	bb62      	cbnz	r2, 800b0e8 <_malloc_r+0xdc>
 800b08e:	f8c8 7000 	str.w	r7, [r8]
 800b092:	e00f      	b.n	800b0b4 <_malloc_r+0xa8>
 800b094:	6822      	ldr	r2, [r4, #0]
 800b096:	1b52      	subs	r2, r2, r5
 800b098:	d420      	bmi.n	800b0dc <_malloc_r+0xd0>
 800b09a:	2a0b      	cmp	r2, #11
 800b09c:	d917      	bls.n	800b0ce <_malloc_r+0xc2>
 800b09e:	1961      	adds	r1, r4, r5
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	6025      	str	r5, [r4, #0]
 800b0a4:	bf18      	it	ne
 800b0a6:	6059      	strne	r1, [r3, #4]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	bf08      	it	eq
 800b0ac:	f8c8 1000 	streq.w	r1, [r8]
 800b0b0:	5162      	str	r2, [r4, r5]
 800b0b2:	604b      	str	r3, [r1, #4]
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 f82f 	bl	800b118 <__malloc_unlock>
 800b0ba:	f104 000b 	add.w	r0, r4, #11
 800b0be:	1d23      	adds	r3, r4, #4
 800b0c0:	f020 0007 	bic.w	r0, r0, #7
 800b0c4:	1ac2      	subs	r2, r0, r3
 800b0c6:	bf1c      	itt	ne
 800b0c8:	1a1b      	subne	r3, r3, r0
 800b0ca:	50a3      	strne	r3, [r4, r2]
 800b0cc:	e7af      	b.n	800b02e <_malloc_r+0x22>
 800b0ce:	6862      	ldr	r2, [r4, #4]
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	bf0c      	ite	eq
 800b0d4:	f8c8 2000 	streq.w	r2, [r8]
 800b0d8:	605a      	strne	r2, [r3, #4]
 800b0da:	e7eb      	b.n	800b0b4 <_malloc_r+0xa8>
 800b0dc:	4623      	mov	r3, r4
 800b0de:	6864      	ldr	r4, [r4, #4]
 800b0e0:	e7ae      	b.n	800b040 <_malloc_r+0x34>
 800b0e2:	463c      	mov	r4, r7
 800b0e4:	687f      	ldr	r7, [r7, #4]
 800b0e6:	e7b6      	b.n	800b056 <_malloc_r+0x4a>
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	d1fb      	bne.n	800b0e8 <_malloc_r+0xdc>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	6053      	str	r3, [r2, #4]
 800b0f4:	e7de      	b.n	800b0b4 <_malloc_r+0xa8>
 800b0f6:	230c      	movs	r3, #12
 800b0f8:	6033      	str	r3, [r6, #0]
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 f80c 	bl	800b118 <__malloc_unlock>
 800b100:	e794      	b.n	800b02c <_malloc_r+0x20>
 800b102:	6005      	str	r5, [r0, #0]
 800b104:	e7d6      	b.n	800b0b4 <_malloc_r+0xa8>
 800b106:	bf00      	nop
 800b108:	20001d60 	.word	0x20001d60

0800b10c <__malloc_lock>:
 800b10c:	4801      	ldr	r0, [pc, #4]	@ (800b114 <__malloc_lock+0x8>)
 800b10e:	f7ff bf01 	b.w	800af14 <__retarget_lock_acquire_recursive>
 800b112:	bf00      	nop
 800b114:	20001d58 	.word	0x20001d58

0800b118 <__malloc_unlock>:
 800b118:	4801      	ldr	r0, [pc, #4]	@ (800b120 <__malloc_unlock+0x8>)
 800b11a:	f7ff befc 	b.w	800af16 <__retarget_lock_release_recursive>
 800b11e:	bf00      	nop
 800b120:	20001d58 	.word	0x20001d58

0800b124 <_malloc_usable_size_r>:
 800b124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b128:	1f18      	subs	r0, r3, #4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	bfbc      	itt	lt
 800b12e:	580b      	ldrlt	r3, [r1, r0]
 800b130:	18c0      	addlt	r0, r0, r3
 800b132:	4770      	bx	lr

0800b134 <_sbrk_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4d06      	ldr	r5, [pc, #24]	@ (800b150 <_sbrk_r+0x1c>)
 800b138:	2300      	movs	r3, #0
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	f7fa fb7a 	bl	8005838 <_sbrk>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_sbrk_r+0x1a>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_sbrk_r+0x1a>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	20001d54 	.word	0x20001d54

0800b154 <_init>:
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	bf00      	nop
 800b158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15a:	bc08      	pop	{r3}
 800b15c:	469e      	mov	lr, r3
 800b15e:	4770      	bx	lr

0800b160 <_fini>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	bf00      	nop
 800b164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b166:	bc08      	pop	{r3}
 800b168:	469e      	mov	lr, r3
 800b16a:	4770      	bx	lr
