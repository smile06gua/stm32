
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac38  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800ae10  0800ae10  0000be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b224  0800b224  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b22c  0800b22c  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b238  0800b238  0000c238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b23c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000070  0800b2ac  0000d070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  0800b2ac  0000ddac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e0e  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004443  00000000  00000000  00030eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001370  00000000  00000000  00036bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  00037f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6f7  00000000  00000000  00058dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00d4  00000000  00000000  000784a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f24  00000000  00000000  001485bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800adf8 	.word	0x0800adf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800adf8 	.word	0x0800adf8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b96a 	b.w	8000eb0 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14e      	bne.n	8000c9e <__udivmoddi4+0xaa>
 8000c00:	4694      	mov	ip, r2
 8000c02:	458c      	cmp	ip, r1
 8000c04:	4686      	mov	lr, r0
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	d962      	bls.n	8000cd2 <__udivmoddi4+0xde>
 8000c0c:	b14a      	cbz	r2, 8000c22 <__udivmoddi4+0x2e>
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	4091      	lsls	r1, r2
 8000c14:	fa20 f303 	lsr.w	r3, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f f68c 	uxth.w	r6, ip
 8000c2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	fb07 1114 	mls	r1, r7, r4, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb04 f106 	mul.w	r1, r4, r6
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x64>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4a:	f080 8112 	bcs.w	8000e72 <__udivmoddi4+0x27e>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 810f 	bls.w	8000e72 <__udivmoddi4+0x27e>
 8000c54:	3c02      	subs	r4, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c62:	fb07 1110 	mls	r1, r7, r0, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f606 	mul.w	r6, r0, r6
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7a:	f080 80fc 	bcs.w	8000e76 <__udivmoddi4+0x282>
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	f240 80f9 	bls.w	8000e76 <__udivmoddi4+0x282>
 8000c84:	4463      	add	r3, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa6>
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xba>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb4>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x150>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xcc>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f0c0 80f0 	bcc.w	8000ea0 <__udivmoddi4+0x2ac>
 8000cc0:	1a86      	subs	r6, r0, r2
 8000cc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d0e6      	beq.n	8000c9a <__udivmoddi4+0xa6>
 8000ccc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd0:	e7e3      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x204>
 8000cd8:	eba1 040c 	sub.w	r4, r1, ip
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cee:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb07 f006 	mul.w	r0, r7, r6
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x11c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x11a>
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d0e:	4626      	mov	r6, r4
 8000d10:	1a1c      	subs	r4, r3, r0
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	429f      	cmp	r7, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x148>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x146>
 8000d34:	429f      	cmp	r7, r3
 8000d36:	f200 80b0 	bhi.w	8000e9a <__udivmoddi4+0x2a6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	1bdb      	subs	r3, r3, r7
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x9c>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d54:	fa04 f301 	lsl.w	r3, r4, r1
 8000d58:	ea43 030c 	orr.w	r3, r3, ip
 8000d5c:	40f4      	lsrs	r4, r6
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	0c38      	lsrs	r0, r7, #16
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb4 fef0 	udiv	lr, r4, r0
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	fb00 441e 	mls	r4, r0, lr, r4
 8000d74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d78:	fb0e f90c 	mul.w	r9, lr, ip
 8000d7c:	45a1      	cmp	r9, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x1a6>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8a:	f080 8084 	bcs.w	8000e96 <__udivmoddi4+0x2a2>
 8000d8e:	45a1      	cmp	r9, r4
 8000d90:	f240 8081 	bls.w	8000e96 <__udivmoddi4+0x2a2>
 8000d94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da6:	fb00 4413 	mls	r4, r0, r3, r4
 8000daa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1d2>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dbc:	d267      	bcs.n	8000e8e <__udivmoddi4+0x29a>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d965      	bls.n	8000e8e <__udivmoddi4+0x29a>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dca:	fba0 9302 	umull	r9, r3, r0, r2
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	46ce      	mov	lr, r9
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	d351      	bcc.n	8000e7e <__udivmoddi4+0x28a>
 8000dda:	d04e      	beq.n	8000e7a <__udivmoddi4+0x286>
 8000ddc:	b155      	cbz	r5, 8000df4 <__udivmoddi4+0x200>
 8000dde:	ebb8 030e 	subs.w	r3, r8, lr
 8000de2:	eb64 040c 	sbc.w	r4, r4, ip
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	40cb      	lsrs	r3, r1
 8000dec:	431e      	orrs	r6, r3
 8000dee:	40cc      	lsrs	r4, r1
 8000df0:	e9c5 6400 	strd	r6, r4, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	e750      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa24 f303 	lsr.w	r3, r4, r3
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb00 f107 	mul.w	r1, r0, r7
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x24c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e36:	d22c      	bcs.n	8000e92 <__udivmoddi4+0x29e>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d92a      	bls.n	8000e92 <__udivmoddi4+0x29e>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e48:	fb08 3311 	mls	r3, r8, r1, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb01 f307 	mul.w	r3, r1, r7
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x276>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e60:	d213      	bcs.n	8000e8a <__udivmoddi4+0x296>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d911      	bls.n	8000e8a <__udivmoddi4+0x296>
 8000e66:	3902      	subs	r1, #2
 8000e68:	4464      	add	r4, ip
 8000e6a:	1ae4      	subs	r4, r4, r3
 8000e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e70:	e739      	b.n	8000ce6 <__udivmoddi4+0xf2>
 8000e72:	4604      	mov	r4, r0
 8000e74:	e6f0      	b.n	8000c58 <__udivmoddi4+0x64>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e7a:	45c8      	cmp	r8, r9
 8000e7c:	d2ae      	bcs.n	8000ddc <__udivmoddi4+0x1e8>
 8000e7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7a8      	b.n	8000ddc <__udivmoddi4+0x1e8>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	e7ed      	b.n	8000e6a <__udivmoddi4+0x276>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e799      	b.n	8000dc6 <__udivmoddi4+0x1d2>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e7d4      	b.n	8000e40 <__udivmoddi4+0x24c>
 8000e96:	46d6      	mov	lr, sl
 8000e98:	e77f      	b.n	8000d9a <__udivmoddi4+0x1a6>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74d      	b.n	8000d3c <__udivmoddi4+0x148>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70f      	b.n	8000cc8 <__udivmoddi4+0xd4>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	e730      	b.n	8000d10 <__udivmoddi4+0x11c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a5a      	lsrs	r2, r3, #9
 8000ec4:	490f      	ldr	r1, [pc, #60]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ec6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eca:	09d2      	lsrs	r2, r2, #7
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09db      	lsrs	r3, r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	00044b83 	.word	0x00044b83
 8000f08:	3b9aca00 	.word	0x3b9aca00

08000f0c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <_ZN8DC_motor6PI_runEv+0x8c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	e012      	b.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eef1 7a67 	vneg.f32	s15, s15
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d506      	bpl.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eef1 7a67 	vneg.f32	s15, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd03      	ble.n	800101c <_ZN8DC_motor6PI_runEv+0x110>
 8001014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d501      	bpl.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <_ZN8DC_motor6PI_runEv+0x27c>)
 8001030:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa57 	bl	80004f0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa3e 	bl	80004cc <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001072:	2b01      	cmp	r3, #1
 8001074:	d124      	bne.n	80010c0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd09      	ble.n	8001098 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f005 fabb 	bl	800660c <HAL_GPIO_WritePin>
 8001096:	e03c      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d509      	bpl.n	80010ba <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f005 faaa 	bl	800660c <HAL_GPIO_WritePin>
 80010b8:	e02b      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e028      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd09      	ble.n	80010ec <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f005 fa91 	bl	800660c <HAL_GPIO_WritePin>
 80010ea:	e012      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fa80 	bl	800660c <HAL_GPIO_WritePin>
 800110c:	e001      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <_ZN8DC_motor6PI_runEv+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001124:	e02c      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <_ZN8DC_motor6PI_runEv+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	e022      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <_ZN8DC_motor6PI_runEv+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800114c:	e018      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d105      	bne.n	8001162 <_ZN8DC_motor6PI_runEv+0x256>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e00e      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001166:	2b10      	cmp	r3, #16
 8001168:	d105      	bne.n	8001176 <_ZN8DC_motor6PI_runEv+0x26a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001174:	e004      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	bf800000 	.word	0xbf800000

0800118c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a07 	vldr	s14, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SetCounter(enc_htim,0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000598 	.word	0x20000598

08001240 <_ZN8DC_motor8heightToEf>:
    this->resolution = resolution;
}

// 控cascade lift

void DC_motor::heightTo(float high){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	ed87 0a00 	vstr	s0, [r7]

	//height = 25 + turn * mm_per_turn;
	//target_turns = 0.0f;
	if(high != 0){
 800124c:	edd7 7a00 	vldr	s15, [r7]
 8001250:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	f000 8094 	beq.w	8001384 <_ZN8DC_motor8heightToEf+0x144>
		if(high >= height){
 800125c:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <_ZN8DC_motor8heightToEf+0x158>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ed97 7a00 	vldr	s14, [r7]
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	db14      	blt.n	800129a <_ZN8DC_motor8heightToEf+0x5a>
			target_turns = turn + ( (high - height )/ mm_per_turn );
 8001270:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <_ZN8DC_motor8heightToEf+0x158>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ed97 7a00 	vldr	s14, [r7]
 800127a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800127e:	4b47      	ldr	r3, [pc, #284]	@ (800139c <_ZN8DC_motor8heightToEf+0x15c>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001288:	4b45      	ldr	r3, [pc, #276]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	4b44      	ldr	r3, [pc, #272]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 8001294:	edc3 7a00 	vstr	s15, [r3]
 8001298:	e013      	b.n	80012c2 <_ZN8DC_motor8heightToEf+0x82>
		}
		else{
			target_turns = turn - ( (height - high ) / mm_per_turn );
 800129a:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <_ZN8DC_motor8heightToEf+0x158>)
 80012a2:	edd3 6a00 	vldr	s13, [r3]
 80012a6:	edd7 7a00 	vldr	s15, [r7]
 80012aa:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80012ae:	4b3b      	ldr	r3, [pc, #236]	@ (800139c <_ZN8DC_motor8heightToEf+0x15c>)
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 80012be:	edc3 7a00 	vstr	s15, [r3]
		}

		if(turn < target_turns){
 80012c2:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d524      	bpl.n	8001322 <_ZN8DC_motor8heightToEf+0xe2>
			if(fabs(target_turns - turn) < 0.001){
 80012d8:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	eef0 7ae7 	vabs.f32	s15, s15
 80012ec:	ee17 0a90 	vmov	r0, s15
 80012f0:	f7ff f8fe 	bl	80004f0 <__aeabi_f2d>
 80012f4:	a326      	add	r3, pc, #152	@ (adr r3, 8001390 <_ZN8DC_motor8heightToEf+0x150>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff fbc3 	bl	8000a84 <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <_ZN8DC_motor8heightToEf+0xd8>
				//target_turns = 0;
				high1 = 0;
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <_ZN8DC_motor8heightToEf+0x168>)
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
				setspeed(0);
 800130c:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80013ac <_ZN8DC_motor8heightToEf+0x16c>
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff3b 	bl	800118c <_ZN8DC_motor8setspeedEf>
 8001316:	e004      	b.n	8001322 <_ZN8DC_motor8heightToEf+0xe2>

			}
			else{
				setspeed(0.5);
 8001318:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff35 	bl	800118c <_ZN8DC_motor8setspeedEf>
			}
		}
		if(turn > target_turns){
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	dc00      	bgt.n	800133a <_ZN8DC_motor8heightToEf+0xfa>

		}
	}

	//setspeed(0);
}
 8001338:	e024      	b.n	8001384 <_ZN8DC_motor8heightToEf+0x144>
			if(fabs(target_turns - turn) < 0.001){
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <_ZN8DC_motor8heightToEf+0x164>)
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <_ZN8DC_motor8heightToEf+0x160>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	eef0 7ae7 	vabs.f32	s15, s15
 800134e:	ee17 0a90 	vmov	r0, s15
 8001352:	f7ff f8cd 	bl	80004f0 <__aeabi_f2d>
 8001356:	a30e      	add	r3, pc, #56	@ (adr r3, 8001390 <_ZN8DC_motor8heightToEf+0x150>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff fb92 	bl	8000a84 <__aeabi_dcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <_ZN8DC_motor8heightToEf+0x13a>
				high1 = 0;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <_ZN8DC_motor8heightToEf+0x168>)
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
				setspeed(0);
 800136e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80013ac <_ZN8DC_motor8heightToEf+0x16c>
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff0a 	bl	800118c <_ZN8DC_motor8setspeedEf>
}
 8001378:	e004      	b.n	8001384 <_ZN8DC_motor8heightToEf+0x144>
				setspeed(-0.5);
 800137a:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff04 	bl	800118c <_ZN8DC_motor8setspeedEf>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	f3af 8000 	nop.w
 8001390:	d2f1a9fc 	.word	0xd2f1a9fc
 8001394:	3f50624d 	.word	0x3f50624d
 8001398:	200005b4 	.word	0x200005b4
 800139c:	200005b0 	.word	0x200005b0
 80013a0:	20000598 	.word	0x20000598
 80013a4:	200005b8 	.word	0x200005b8
 80013a8:	200005a0 	.word	0x200005a0
 80013ac:	00000000 	.word	0x00000000

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f004 fadd 	bl	8005972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f81c 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 fc2c 	bl	8001c18 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c0:	f000 fbf8 	bl	8001bb4 <MX_DMA_Init>
  MX_TIM1_Init();
 80013c4:	f000 f896 	bl	80014f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013c8:	f000 f94c 	bl	8001664 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013cc:	f000 f998 	bl	8001700 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013d0:	f000 f9fc 	bl	80017cc <MX_TIM4_Init>
  MX_TIM8_Init();
 80013d4:	f000 fabc 	bl	8001950 <MX_TIM8_Init>
  MX_I2C1_Init();
 80013d8:	f000 f84c 	bl	8001474 <MX_I2C1_Init>
  MX_TIM6_Init();
 80013dc:	f000 fa4c 	bl	8001878 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013e0:	f000 fa80 	bl	80018e4 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 fb9a 	bl	8001b1c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 80013e8:	f000 fb46 	bl	8001a78 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80013ec:	f000 fde2 	bl	8001fb4 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <main+0x40>

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2238      	movs	r2, #56	@ 0x38
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f009 fba6 	bl	800ab54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001416:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800141a:	f005 fa59 	bl	80068d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001428:	2340      	movs	r3, #64	@ 0x40
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4618      	mov	r0, r3
 8001436:	f005 faff 	bl	8006a38 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001440:	f000 fc90 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001448:	2301      	movs	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fdfd 	bl	800705c <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001468:	f000 fc7c 	bl	8001d64 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	@ 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_I2C1_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <MX_I2C1_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_I2C1_Init+0x74>)
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <MX_I2C1_Init+0x7c>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_I2C1_Init+0x74>)
 800148c:	2201      	movs	r2, #1
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_I2C1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ae:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <MX_I2C1_Init+0x74>)
 80014b0:	f005 f8dc 	bl	800666c <HAL_I2C_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ba:	f000 fc53 	bl	8001d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <MX_I2C1_Init+0x74>)
 80014c2:	f005 f96e 	bl	80067a2 <HAL_I2CEx_ConfigAnalogFilter>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014cc:	f000 fc4a 	bl	8001d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_I2C1_Init+0x74>)
 80014d4:	f005 f9b0 	bl	8006838 <HAL_I2CEx_ConfigDigitalFilter>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 fc41 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000008c 	.word	0x2000008c
 80014ec:	40005400 	.word	0x40005400
 80014f0:	00503d58 	.word	0x00503d58

080014f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b098      	sub	sp, #96	@ 0x60
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2234      	movs	r2, #52	@ 0x34
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f009 fb17 	bl	800ab54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <MX_TIM1_Init+0x168>)
 8001528:	4a4d      	ldr	r2, [pc, #308]	@ (8001660 <MX_TIM1_Init+0x16c>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800152c:	4b4b      	ldr	r3, [pc, #300]	@ (800165c <MX_TIM1_Init+0x168>)
 800152e:	220f      	movs	r2, #15
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <MX_TIM1_Init+0x168>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001538:	4b48      	ldr	r3, [pc, #288]	@ (800165c <MX_TIM1_Init+0x168>)
 800153a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b46      	ldr	r3, [pc, #280]	@ (800165c <MX_TIM1_Init+0x168>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b45      	ldr	r3, [pc, #276]	@ (800165c <MX_TIM1_Init+0x168>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b43      	ldr	r3, [pc, #268]	@ (800165c <MX_TIM1_Init+0x168>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001552:	4842      	ldr	r0, [pc, #264]	@ (800165c <MX_TIM1_Init+0x168>)
 8001554:	f006 fa7f 	bl	8007a56 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fc01 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001572:	4619      	mov	r1, r3
 8001574:	4839      	ldr	r0, [pc, #228]	@ (800165c <MX_TIM1_Init+0x168>)
 8001576:	f007 fc45 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001580:	f000 fbf0 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	@ 0x60
 8001586:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015a4:	2200      	movs	r2, #0
 80015a6:	4619      	mov	r1, r3
 80015a8:	482c      	ldr	r0, [pc, #176]	@ (800165c <MX_TIM1_Init+0x168>)
 80015aa:	f006 fda1 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015b4:	f000 fbd6 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	@ (800165c <MX_TIM1_Init+0x168>)
 80015c2:	f006 fd95 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80015cc:	f000 fbca 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015d4:	2208      	movs	r2, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	4820      	ldr	r0, [pc, #128]	@ (800165c <MX_TIM1_Init+0x168>)
 80015da:	f006 fd89 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80015e4:	f000 fbbe 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015ec:	220c      	movs	r2, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	481a      	ldr	r0, [pc, #104]	@ (800165c <MX_TIM1_Init+0x168>)
 80015f2:	f006 fd7d 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80015fc:	f000 fbb2 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	@ (800165c <MX_TIM1_Init+0x168>)
 800163e:	f007 fc63 	bl	8008f08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001648:	f000 fb8c 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800164c:	4803      	ldr	r0, [pc, #12]	@ (800165c <MX_TIM1_Init+0x168>)
 800164e:	f003 ff0f 	bl	8005470 <HAL_TIM_MspPostInit>

}
 8001652:	bf00      	nop
 8001654:	3760      	adds	r7, #96	@ 0x60
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000e0 	.word	0x200000e0
 8001660:	40012c00 	.word	0x40012c00

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_TIM2_Init+0x98>)
 8001684:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_TIM2_Init+0x98>)
 800168c:	220f      	movs	r2, #15
 800168e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM2_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_TIM2_Init+0x98>)
 8001698:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800169c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_TIM2_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_TIM2_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016aa:	4814      	ldr	r0, [pc, #80]	@ (80016fc <MX_TIM2_Init+0x98>)
 80016ac:	f006 f8e2 	bl	8007874 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016b6:	f000 fb55 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_TIM2_Init+0x98>)
 80016c8:	f006 fe26 	bl	8008318 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016d2:	f000 fb47 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	@ (80016fc <MX_TIM2_Init+0x98>)
 80016e4:	f007 fb8e 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ee:	f000 fb39 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000012c 	.word	0x2000012c

08001700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	@ 0x28
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	615a      	str	r2, [r3, #20]
 8001722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001726:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <MX_TIM3_Init+0xc8>)
 8001728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 800172c:	220f      	movs	r2, #15
 800172e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001738:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800173c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800174a:	481e      	ldr	r0, [pc, #120]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 800174c:	f006 f983 	bl	8007a56 <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 fb05 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 800176a:	f007 fb4b 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001774:	f000 faf6 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001778:	2360      	movs	r3, #96	@ 0x60
 800177a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 8001790:	f006 fcae 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800179a:	f000 fae3 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2204      	movs	r2, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 80017a6:	f006 fca3 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80017b0:	f000 fad8 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b4:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <MX_TIM3_Init+0xc4>)
 80017b6:	f003 fe5b 	bl	8005470 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000178 	.word	0x20000178
 80017c8:	40000400 	.word	0x40000400

080017cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	@ 0x30
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	2224      	movs	r2, #36	@ 0x24
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f009 f9ba 	bl	800ab54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ea:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_TIM4_Init+0xa4>)
 80017ec:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <MX_TIM4_Init+0xa8>)
 80017ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <MX_TIM4_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_TIM4_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_TIM4_Init+0xa4>)
 80017fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001802:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_TIM4_Init+0xa4>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <MX_TIM4_Init+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001810:	2303      	movs	r3, #3
 8001812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001828:	2301      	movs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	@ (8001870 <MX_TIM4_Init+0xa4>)
 800183c:	f006 fa62 	bl	8007d04 <HAL_TIM_Encoder_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001846:	f000 fa8d 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <MX_TIM4_Init+0xa4>)
 8001858:	f007 fad4 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001862:	f000 fa7f 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	@ 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001c4 	.word	0x200001c4
 8001874:	40000800 	.word	0x40000800

08001878 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_TIM6_Init+0x64>)
 800188a:	4a15      	ldr	r2, [pc, #84]	@ (80018e0 <MX_TIM6_Init+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_TIM6_Init+0x64>)
 8001890:	220f      	movs	r2, #15
 8001892:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <MX_TIM6_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_TIM6_Init+0x64>)
 800189c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <MX_TIM6_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <MX_TIM6_Init+0x64>)
 80018aa:	f005 ffe3 	bl	8007874 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018b4:	f000 fa56 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	@ (80018dc <MX_TIM6_Init+0x64>)
 80018c6:	f007 fa9d 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 fa48 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000210 	.word	0x20000210
 80018e0:	40001000 	.word	0x40001000

080018e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018f4:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <MX_TIM7_Init+0x64>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <MX_TIM7_Init+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_TIM7_Init+0x64>)
 80018fc:	220f      	movs	r2, #15
 80018fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_TIM7_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_TIM7_Init+0x64>)
 8001908:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800190c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <MX_TIM7_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_TIM7_Init+0x64>)
 8001916:	f005 ffad 	bl	8007874 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001920:	f000 fa20 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_TIM7_Init+0x64>)
 8001932:	f007 fa67 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800193c:	f000 fa12 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000025c 	.word	0x2000025c
 800194c:	40001400 	.word	0x40001400

08001950 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b098      	sub	sp, #96	@ 0x60
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2234      	movs	r2, #52	@ 0x34
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f009 f8e9 	bl	800ab54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001984:	4a3b      	ldr	r2, [pc, #236]	@ (8001a74 <MX_TIM8_Init+0x124>)
 8001986:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8001988:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <MX_TIM8_Init+0x120>)
 800198a:	220f      	movs	r2, #15
 800198c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001994:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001996:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800199a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <MX_TIM8_Init+0x120>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019a2:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <MX_TIM8_Init+0x120>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <MX_TIM8_Init+0x120>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019ae:	4830      	ldr	r0, [pc, #192]	@ (8001a70 <MX_TIM8_Init+0x120>)
 80019b0:	f006 f851 	bl	8007a56 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 f9d3 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019ce:	4619      	mov	r1, r3
 80019d0:	4827      	ldr	r0, [pc, #156]	@ (8001a70 <MX_TIM8_Init+0x120>)
 80019d2:	f007 fa17 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80019dc:	f000 f9c2 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e0:	2360      	movs	r3, #96	@ 0x60
 80019e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ec:	2300      	movs	r3, #0
 80019ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a00:	2204      	movs	r2, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	481a      	ldr	r0, [pc, #104]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001a06:	f006 fb73 	bl	80080f0 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a10:	f000 f9a8 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001a52:	f007 fa59 	bl	8008f08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001a5c:	f000 f982 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <MX_TIM8_Init+0x120>)
 8001a62:	f003 fd05 	bl	8005470 <HAL_TIM_MspPostInit>

}
 8001a66:	bf00      	nop
 8001a68:	3760      	adds	r7, #96	@ 0x60
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200002a8 	.word	0x200002a8
 8001a74:	40013400 	.word	0x40013400

08001a78 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001a98:	4a1f      	ldr	r2, [pc, #124]	@ (8001b18 <MX_TIM15_Init+0xa0>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ac2:	4814      	ldr	r0, [pc, #80]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001ac4:	f005 fed6 	bl	8007874 <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001ace:	f000 f949 	bl	8001d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001ae0:	f006 fc1a 	bl	8008318 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001aea:	f000 f93b 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <MX_TIM15_Init+0x9c>)
 8001afc:	f007 f982 	bl	8008e04 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001b06:	f000 f92d 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002f4 	.word	0x200002f4
 8001b18:	40014000 	.word	0x40014000

08001b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b20:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b22:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <MX_USART2_UART_Init+0x94>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b64:	4811      	ldr	r0, [pc, #68]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b66:	f007 faa1 	bl	80090ac <HAL_UART_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b70:	f000 f8f8 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b74:	2100      	movs	r1, #0
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b78:	f008 feeb 	bl	800a952 <HAL_UARTEx_SetTxFifoThreshold>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 f8ef 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4808      	ldr	r0, [pc, #32]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b8a:	f008 ff20 	bl	800a9ce <HAL_UARTEx_SetRxFifoThreshold>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b94:	f000 f8e6 	bl	8001d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_USART2_UART_Init+0x90>)
 8001b9a:	f008 fea1 	bl	800a8e0 <HAL_UARTEx_DisableFifoMode>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba4:	f000 f8de 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000340 	.word	0x20000340
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_DMA_Init+0x60>)
 8001be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	200d      	movs	r0, #13
 8001bf0:	f004 f80b 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bf4:	200d      	movs	r0, #13
 8001bf6:	f004 f822 	bl	8005c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	200e      	movs	r0, #14
 8001c00:	f004 f803 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c04:	200e      	movs	r0, #14
 8001c06:	f004 f81a 	bl	8005c3e <HAL_NVIC_EnableIRQ>

}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b48      	ldr	r3, [pc, #288]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b45      	ldr	r3, [pc, #276]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	4a44      	ldr	r2, [pc, #272]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c52:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	4a3e      	ldr	r2, [pc, #248]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	4a38      	ldr	r2, [pc, #224]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c82:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <MX_GPIO_Init+0x144>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f240 4103 	movw	r1, #1027	@ 0x403
 8001c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c98:	f004 fcb8 	bl	800660c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001c9c:	f240 4303 	movw	r3, #1027	@ 0x403
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb8:	f004 fb0e 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8001cbc:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 8001cc0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cc2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd6:	f004 faff 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8001cda:	f243 0308 	movw	r3, #12296	@ 0x3008
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <MX_GPIO_Init+0x148>)
 8001cf2:	f004 faf1 	bl	80062d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cf6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <MX_GPIO_Init+0x148>)
 8001d0e:	f004 fae3 	bl	80062d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2009      	movs	r0, #9
 8001d18:	f003 ff77 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d1c:	2009      	movs	r0, #9
 8001d1e:	f003 ff8e 	bl	8005c3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	200a      	movs	r0, #10
 8001d28:	f003 ff6f 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f003 ff86 	bl	8005c3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2017      	movs	r0, #23
 8001d38:	f003 ff67 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d3c:	2017      	movs	r0, #23
 8001d3e:	f003 ff7e 	bl	8005c3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2028      	movs	r0, #40	@ 0x28
 8001d48:	f003 ff5f 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d4c:	2028      	movs	r0, #40	@ 0x28
 8001d4e:	f003 ff76 	bl	8005c3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000400 	.word	0x48000400

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <Error_Handler+0x8>

08001d70 <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d82a      	bhi.n	8001dd8 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001d82:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001da9 	.word	0x08001da9
 8001d90:	08001db9 	.word	0x08001db9
 8001d94:	08001dc9 	.word	0x08001dc9
			case GBD300T:
				return {300,500,2500,0.25};
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001d9c:	461c      	mov	r4, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001da6:	e01d      	b.n	8001de4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001dac:	461c      	mov	r4, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001db6:	e015      	b.n	8001de4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001dbc:	461c      	mov	r4, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dc6:	e00d      	b.n	8001de4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001dcc:	461c      	mov	r4, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dd6:	e005      	b.n	8001de4 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ffc7 	bl	8001d70 <_ZN5Servo12getServoInfoENS_4typeE>
 8001de2:	bf00      	nop
			}
		}
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	0800ae10 	.word	0x0800ae10
 8001df0:	0800ae20 	.word	0x0800ae20
 8001df4:	0800ae30 	.word	0x0800ae30
 8001df8:	0800ae40 	.word	0x0800ae40

08001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	61f8      	str	r0, [r7, #28]
 8001e04:	61b9      	str	r1, [r7, #24]
 8001e06:	617a      	str	r2, [r7, #20]
 8001e08:	74fb      	strb	r3, [r7, #19]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001e0e:	f103 040c 	add.w	r4, r3, #12
 8001e12:	4613      	mov	r3, r2
 8001e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2200      	movs	r2, #0
 8001e24:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001e32:	69fc      	ldr	r4, [r7, #28]
 8001e34:	463b      	mov	r3, r7
 8001e36:	7cfa      	ldrb	r2, [r7, #19]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff98 	bl	8001d70 <_ZN5Servo12getServoInfoENS_4typeE>
 8001e40:	340c      	adds	r4, #12
 8001e42:	463b      	mov	r3, r7
 8001e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3724      	adds	r7, #36	@ 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	0800ae10 	.word	0x0800ae10

08001e58 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void stepTo(int32_t steps);
	void heightTo(float high);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6178      	str	r0, [r7, #20]
 8001e60:	6139      	str	r1, [r7, #16]
 8001e62:	60fa      	str	r2, [r7, #12]
 8001e64:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e68:	edc7 0a00 	vstr	s1, [r7]
 8001e6c:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f34 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2264      	movs	r2, #100	@ 0x64
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	897a      	ldrh	r2, [r7, #10]
 8001efe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0c:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	605a      	str	r2, [r3, #4]
	};
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	3a83126f 	.word	0x3a83126f

08001f38 <_Z9setup_allv>:
float _current_y = 0.0f;
float _current_theta = 0.0f;

bool initFinish = 1;

void setup_all(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	ROS1::init();
 8001f3c:	f001 fe0c 	bl	8003b58 <_ZN4ROS14initEv>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f40:	4814      	ldr	r0, [pc, #80]	@ (8001f94 <_Z9setup_allv+0x5c>)
 8001f42:	f005 fcef 	bl	8007924 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001f46:	4814      	ldr	r0, [pc, #80]	@ (8001f98 <_Z9setup_allv+0x60>)
 8001f48:	f005 fcec 	bl	8007924 <HAL_TIM_Base_Start_IT>
	ms++;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <_Z9setup_allv+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <_Z9setup_allv+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]
	servo_forward.setup(920);
 8001f56:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8001f5a:	4811      	ldr	r0, [pc, #68]	@ (8001fa0 <_Z9setup_allv+0x68>)
 8001f5c:	f002 ff41 	bl	8004de2 <_ZN5Servo5setupEi>
	servo_turn.setup(261);
 8001f60:	f240 1105 	movw	r1, #261	@ 0x105
 8001f64:	480f      	ldr	r0, [pc, #60]	@ (8001fa4 <_Z9setup_allv+0x6c>)
 8001f66:	f002 ff3c 	bl	8004de2 <_ZN5Servo5setupEi>
//	speeds = 0.5;
//	wait(1500, &htim2);


	//wait(5000, &htim2);
	servo_gripper.setup(150);
 8001f6a:	2196      	movs	r1, #150	@ 0x96
 8001f6c:	480e      	ldr	r0, [pc, #56]	@ (8001fa8 <_Z9setup_allv+0x70>)
 8001f6e:	f002 ff38 	bl	8004de2 <_ZN5Servo5setupEi>
	servo_right.setup(58);
 8001f72:	213a      	movs	r1, #58	@ 0x3a
 8001f74:	480d      	ldr	r0, [pc, #52]	@ (8001fac <_Z9setup_allv+0x74>)
 8001f76:	f002 ff34 	bl	8004de2 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <_Z9setup_allv+0x78>)
 8001f7e:	f002 ff30 	bl	8004de2 <_ZN5Servo5setupEi>
	servo_forward.turnTo(300); //920---40 底
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <_Z9setup_allv+0x68>)
 8001f8a:	f002 fff1 	bl	8004f70 <_ZN5Servo6turnToEii>





}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000210 	.word	0x20000210
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	200005ac 	.word	0x200005ac
 8001fa0:	2000056c 	.word	0x2000056c
 8001fa4:	200004ec 	.word	0x200004ec
 8001fa8:	2000050c 	.word	0x2000050c
 8001fac:	2000054c 	.word	0x2000054c
 8001fb0:	2000052c 	.word	0x2000052c

08001fb4 <main_function>:
void main_function(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	setup_all();
 8001fb8:	f7ff ffbe 	bl	8001f38 <_Z9setup_allv>
		//
//		wait(1000, &htim2);
		//
		//forwardToPoint(pp);
		//servo_forward.turnTo(angle, 3000);
		servo_gripper.turnTo(angle);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <main_function+0x20>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	ee17 1a90 	vmov	r1, s15
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <main_function+0x24>)
 8001fce:	f002 ffcf 	bl	8004f70 <_ZN5Servo6turnToEii>
 8001fd2:	e7f3      	b.n	8001fbc <main_function+0x8>
 8001fd4:	2000059c 	.word	0x2000059c
 8001fd8:	2000050c 	.word	0x2000050c

08001fdc <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8001fe6:	6838      	ldr	r0, [r7, #0]
 8001fe8:	f005 fc9c 	bl	8007924 <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8001fec:	e001      	b.n	8001ff2 <_Z4waitiP17TIM_HandleTypeDef+0x16>
		ROS1::spinCycle();
 8001fee:	f001 fdff 	bl	8003bf0 <_ZN4ROS19spinCycleEv>
	while(delay_count < time){
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_Z4waitiP17TIM_HandleTypeDef+0x34>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dcf8      	bgt.n	8001fee <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f005 fcfb 	bl	80079f8 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8002002:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <_Z4waitiP17TIM_HandleTypeDef+0x34>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200005a4 	.word	0x200005a4

08002014 <HAL_TIM_PeriodElapsedCallback>:
float s;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002024:	d104      	bne.n	8002030 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800202e:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d127      	bne.n	800208a <HAL_TIM_PeriodElapsedCallback+0x76>
		if(initialized){
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <HAL_TIM_PeriodElapsedCallback+0x4c>
			height = 445 + turn * mm_per_turn;
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80020c0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8002056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800205c:	edc3 7a00 	vstr	s15, [r3]
		}
		Motor_updown.PI_run();
 8002060:	4819      	ldr	r0, [pc, #100]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002062:	f7fe ff53 	bl	8000f0c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(-1);
 8002066:	f04f 31ff 	mov.w	r1, #4294967295
 800206a:	4817      	ldr	r0, [pc, #92]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800206c:	f7ff f89e 	bl	80011ac <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	4813      	ldr	r0, [pc, #76]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800207c:	f7ff f886 	bl	800118c <_ZN8DC_motor8setspeedEf>
		ms++;
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002088:	6013      	str	r3, [r2, #0]

		//ROS1::_pub_elevator();
	}
	if(htim->Instance == TIM7){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x90>


		ROS1::_pub_gripper();
 8002094:	f001 fdc8 	bl	8003c28 <_ZN4ROS112_pub_gripperEv>
		ROS1::_pub_touch();
 8002098:	f001 fdb4 	bl	8003c04 <_ZN4ROS110_pub_touchEv>
		ROS1::_pub_theta();
 800209c:	f001 fdee 	bl	8003c7c <_ZN4ROS110_pub_thetaEv>
		ROS1::_pub_y();
 80020a0:	f001 fdd4 	bl	8003c4c <_ZN4ROS16_pub_yEv>


		//s++;
		}
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200005a4 	.word	0x200005a4
 80020b0:	40001000 	.word	0x40001000
 80020b4:	20000592 	.word	0x20000592
 80020b8:	20000598 	.word	0x20000598
 80020bc:	200005b0 	.word	0x200005b0
 80020c0:	43de8000 	.word	0x43de8000
 80020c4:	200005b4 	.word	0x200005b4
 80020c8:	20000494 	.word	0x20000494
 80020cc:	20000594 	.word	0x20000594
 80020d0:	200005ac 	.word	0x200005ac
 80020d4:	40001400 	.word	0x40001400

080020d8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020e8:	f000 8106 	beq.w	80022f8 <HAL_GPIO_EXTI_Callback+0x220>
 80020ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020f0:	f300 8137 	bgt.w	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f8:	d06d      	beq.n	80021d6 <HAL_GPIO_EXTI_Callback+0xfe>
 80020fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020fe:	f300 8130 	bgt.w	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
 8002102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002106:	d03a      	beq.n	800217e <HAL_GPIO_EXTI_Callback+0xa6>
 8002108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210c:	f300 8129 	bgt.w	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
 8002110:	2b80      	cmp	r3, #128	@ 0x80
 8002112:	d009      	beq.n	8002128 <HAL_GPIO_EXTI_Callback+0x50>
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	f300 8124 	bgt.w	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
 800211a:	2b10      	cmp	r3, #16
 800211c:	f000 8087 	beq.w	800222e <HAL_GPIO_EXTI_Callback+0x156>
 8002120:	2b20      	cmp	r3, #32
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_EXTI_Callback+0x1b6>
				isTop = 0;

			}

	}
}
 8002126:	e11c      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002130:	f004 fa54 	bl	80065dc <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HAL_GPIO_EXTI_Callback+0x80>
				tt = 7;
 8002144:	4b89      	ldr	r3, [pc, #548]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 8002146:	2207      	movs	r2, #7
 8002148:	601a      	str	r2, [r3, #0]
				elevator_type = 1;
 800214a:	4b89      	ldr	r3, [pc, #548]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]
				casecadeLift = false;  // 重置初始化狀態
 8002150:	4b88      	ldr	r3, [pc, #544]	@ (8002374 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
			break;
 8002156:	e0fb      	b.n	8002350 <HAL_GPIO_EXTI_Callback+0x278>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002160:	f004 fa3c 	bl	80065dc <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b01      	cmp	r3, #1
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80ed 	beq.w	8002350 <HAL_GPIO_EXTI_Callback+0x278>
				casecadeLift = true;
 8002176:	4b7f      	ldr	r3, [pc, #508]	@ (8002374 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			break;
 800217c:	e0e8      	b.n	8002350 <HAL_GPIO_EXTI_Callback+0x278>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002186:	f004 fa29 	bl	80065dc <HAL_GPIO_ReadPin>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_GPIO_EXTI_Callback+0xd8>
				elevator_type = 2;
 800219a:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
				tt = 8;
 80021a0:	4b72      	ldr	r3, [pc, #456]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 80021a2:	2208      	movs	r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
				speeds = 0;
 80021a6:	4b74      	ldr	r3, [pc, #464]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
			break;
 80021ae:	e0d1      	b.n	8002354 <HAL_GPIO_EXTI_Callback+0x27c>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b8:	f004 fa10 	bl	80065dc <HAL_GPIO_ReadPin>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80c3 	beq.w	8002354 <HAL_GPIO_EXTI_Callback+0x27c>
				elevator_type = 1;
 80021ce:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
			break;
 80021d4:	e0be      	b.n	8002354 <HAL_GPIO_EXTI_Callback+0x27c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021de:	f004 f9fd 	bl	80065dc <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_GPIO_EXTI_Callback+0x130>
				tt = 9;
 80021f2:	4b5e      	ldr	r3, [pc, #376]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 80021f4:	2209      	movs	r2, #9
 80021f6:	601a      	str	r2, [r3, #0]
				speeds = 0;
 80021f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
				table_isTouch = 1;
 8002200:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
			break;
 8002206:	e0a7      	b.n	8002358 <HAL_GPIO_EXTI_Callback+0x280>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002210:	f004 f9e4 	bl	80065dc <HAL_GPIO_ReadPin>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8099 	beq.w	8002358 <HAL_GPIO_EXTI_Callback+0x280>
				table_isTouch = 0;
 8002226:	4b55      	ldr	r3, [pc, #340]	@ (800237c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
			break;
 800222c:	e094      	b.n	8002358 <HAL_GPIO_EXTI_Callback+0x280>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002236:	f004 f9d1 	bl	80065dc <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00f      	beq.n	800226a <HAL_GPIO_EXTI_Callback+0x192>
				tt = 4;
 800224a:	4b48      	ldr	r3, [pc, #288]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 800224c:	2204      	movs	r2, #4
 800224e:	601a      	str	r2, [r3, #0]
				speeds = 0;
 8002250:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
				elevator_type = -1;
 8002258:	4b45      	ldr	r3, [pc, #276]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 800225a:	f04f 32ff 	mov.w	r2, #4294967295
 800225e:	601a      	str	r2, [r3, #0]
				turn = 0;
 8002260:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
			break;
 8002268:	e078      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x284>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002272:	f004 f9b3 	bl	80065dc <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06a      	beq.n	800235c <HAL_GPIO_EXTI_Callback+0x284>
				elevator_type = 0;
 8002286:	4b3a      	ldr	r3, [pc, #232]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
			break;
 800228c:	e066      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x284>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f004 f9a1 	bl	80065dc <HAL_GPIO_ReadPin>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d014      	beq.n	80022d4 <HAL_GPIO_EXTI_Callback+0x1fc>
				tt = 5;
 80022aa:	4b30      	ldr	r3, [pc, #192]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 80022ac:	2205      	movs	r2, #5
 80022ae:	601a      	str	r2, [r3, #0]
				if(initialized == false){
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <HAL_GPIO_EXTI_Callback+0x1ee>
					initialized = true;  // 重置初始化狀態
 80022b8:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
					speeds = 0;
 80022be:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
				isTop = 1;
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
				elevator_type = 1;
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
			break;
 80022d2:	e045      	b.n	8002360 <HAL_GPIO_EXTI_Callback+0x288>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022dc:	f004 f97e 	bl	80065dc <HAL_GPIO_ReadPin>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d037      	beq.n	8002360 <HAL_GPIO_EXTI_Callback+0x288>
				isTop = 0;
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
			break;
 80022f6:	e033      	b.n	8002360 <HAL_GPIO_EXTI_Callback+0x288>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4823      	ldr	r0, [pc, #140]	@ (800238c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80022fe:	f004 f96d 	bl	80065dc <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_EXTI_Callback+0x256>
				tt = 14;
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <HAL_GPIO_EXTI_Callback+0x294>)
 8002314:	220e      	movs	r2, #14
 8002316:	601a      	str	r2, [r3, #0]
				isTop = 3;
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
				elevator_type = 3;
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x298>)
 8002328:	2203      	movs	r2, #3
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	e019      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	4619      	mov	r1, r3
 8002332:	4816      	ldr	r0, [pc, #88]	@ (800238c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002334:	f004 f952 	bl	80065dc <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
				isTop = 0;
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	e008      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 8002350:	bf00      	nop
 8002352:	e006      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 8002354:	bf00      	nop
 8002356:	e004      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 8002358:	bf00      	nop
 800235a:	e002      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 8002360:	bf00      	nop
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000058c 	.word	0x2000058c
 8002370:	200005a8 	.word	0x200005a8
 8002374:	20000000 	.word	0x20000000
 8002378:	20000594 	.word	0x20000594
 800237c:	20000591 	.word	0x20000591
 8002380:	20000598 	.word	0x20000598
 8002384:	20000592 	.word	0x20000592
 8002388:	20000590 	.word	0x20000590
 800238c:	48000400 	.word	0x48000400

08002390 <_Z41__static_initialization_and_destruction_0ii>:
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af04      	add	r7, sp, #16
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d13f      	bne.n	8002420 <_Z41__static_initialization_and_destruction_0ii+0x90>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d13a      	bne.n	8002420 <_Z41__static_initialization_and_destruction_0ii+0x90>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,0,4,12};
 80023aa:	2300      	movs	r3, #0
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	2304      	movs	r3, #4
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80023ba:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80023be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80023c6:	4919      	ldr	r1, [pc, #100]	@ (800242c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80023c8:	4819      	ldr	r0, [pc, #100]	@ (8002430 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80023ca:	f7ff fd45 	bl	8001e58 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_1, Servo::GBD300T};
 80023ce:	2300      	movs	r3, #0
 80023d0:	2200      	movs	r2, #0
 80023d2:	4918      	ldr	r1, [pc, #96]	@ (8002434 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80023d4:	4818      	ldr	r0, [pc, #96]	@ (8002438 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80023d6:	f7ff fd11 	bl	8001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD1800T};
 80023da:	2302      	movs	r3, #2
 80023dc:	2204      	movs	r2, #4
 80023de:	4917      	ldr	r1, [pc, #92]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023e0:	4817      	ldr	r0, [pc, #92]	@ (8002440 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80023e2:	f7ff fd0b 	bl	8001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 80023e6:	2300      	movs	r3, #0
 80023e8:	220c      	movs	r2, #12
 80023ea:	4914      	ldr	r1, [pc, #80]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023ec:	4815      	ldr	r0, [pc, #84]	@ (8002444 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80023ee:	f7ff fd05 	bl	8001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_3, Servo::GBD300T};
 80023f2:	2300      	movs	r3, #0
 80023f4:	2208      	movs	r2, #8
 80023f6:	4911      	ldr	r1, [pc, #68]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80023f8:	4813      	ldr	r0, [pc, #76]	@ (8002448 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80023fa:	f7ff fcff 	bl	8001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 80023fe:	2302      	movs	r3, #2
 8002400:	2200      	movs	r2, #0
 8002402:	490e      	ldr	r1, [pc, #56]	@ (800243c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002404:	4811      	ldr	r0, [pc, #68]	@ (800244c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002406:	f7ff fcf9 	bl	8001dfc <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
float mm_per_turn = total_high / total_turns; // 每步對應的公分數
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800240c:	edd3 6a00 	vldr	s13, [r3]
 8002410:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002412:	ed93 7a00 	vldr	s14, [r3]
 8002416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800241c:	edc3 7a00 	vstr	s15, [r3]
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200002a8 	.word	0x200002a8
 800242c:	200001c4 	.word	0x200001c4
 8002430:	20000494 	.word	0x20000494
 8002434:	20000178 	.word	0x20000178
 8002438:	200004ec 	.word	0x200004ec
 800243c:	200000e0 	.word	0x200000e0
 8002440:	2000050c 	.word	0x2000050c
 8002444:	2000052c 	.word	0x2000052c
 8002448:	2000054c 	.word	0x2000054c
 800244c:	2000056c 	.word	0x2000056c
 8002450:	20000008 	.word	0x20000008
 8002454:	20000004 	.word	0x20000004
 8002458:	200005b0 	.word	0x200005b0

0800245c <_GLOBAL__sub_I_Motor_updown>:
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
 8002460:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff ff93 	bl	8002390 <_Z41__static_initialization_and_destruction_0ii>
 800246a:	bd80      	pop	{r7, pc}

0800246c <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	if(open == 0){
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <_Z14gripperControlb+0x22>
		servo_gripper.turnTo(240);  //close
 800247c:	2200      	movs	r2, #0
 800247e:	21f0      	movs	r1, #240	@ 0xf0
 8002480:	4809      	ldr	r0, [pc, #36]	@ (80024a8 <_Z14gripperControlb+0x3c>)
 8002482:	f002 fd75 	bl	8004f70 <_ZN5Servo6turnToEii>
		_gripperFinish = 0; //
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <_Z14gripperControlb+0x40>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //open
		_gripperFinish = 1;
	}
}
 800248c:	e007      	b.n	800249e <_Z14gripperControlb+0x32>
		servo_gripper.turnTo(0); //open
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <_Z14gripperControlb+0x3c>)
 8002494:	f002 fd6c 	bl	8004f70 <_ZN5Servo6turnToEii>
		_gripperFinish = 1;
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <_Z14gripperControlb+0x40>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000050c 	.word	0x2000050c
 80024ac:	200005c4 	.word	0x200005c4

080024b0 <_Z10middleTurni>:

void middleTurn(int angle){
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	float degree = angle;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	edc7 7a03 	vstr	s15, [r7, #12]
	_current_theta = angle;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <_Z10middleTurni+0xa8>)
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	if(angle < 0 && angle > -260){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da18      	bge.n	800250e <_Z10middleTurni+0x5e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f513 7f82 	cmn.w	r3, #260	@ 0x104
 80024e2:	dd14      	ble.n	800250e <_Z10middleTurni+0x5e>
		servo_turn.turnTo(261.0 + degree, 5000);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7fe f803 	bl	80004f0 <__aeabi_f2d>
 80024ea:	a319      	add	r3, pc, #100	@ (adr r3, 8002550 <_Z10middleTurni+0xa0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fd fea0 	bl	8000234 <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe faea 	bl	8000ad4 <__aeabi_d2iz>
 8002500:	4603      	mov	r3, r0
 8002502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002506:	4619      	mov	r1, r3
 8002508:	4814      	ldr	r0, [pc, #80]	@ (800255c <_Z10middleTurni+0xac>)
 800250a:	f002 fd31 	bl	8004f70 <_ZN5Servo6turnToEii>
	}
	if(angle >= 0 && angle < 30){
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db17      	blt.n	8002544 <_Z10middleTurni+0x94>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b1d      	cmp	r3, #29
 8002518:	dc14      	bgt.n	8002544 <_Z10middleTurni+0x94>
		servo_turn.turnTo(261.0 + degree, 5000);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7fd ffe8 	bl	80004f0 <__aeabi_f2d>
 8002520:	a30b      	add	r3, pc, #44	@ (adr r3, 8002550 <_Z10middleTurni+0xa0>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fd fe85 	bl	8000234 <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe facf 	bl	8000ad4 <__aeabi_d2iz>
 8002536:	4603      	mov	r3, r0
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4619      	mov	r1, r3
 800253e:	4807      	ldr	r0, [pc, #28]	@ (800255c <_Z10middleTurni+0xac>)
 8002540:	f002 fd16 	bl	8004f70 <_ZN5Servo6turnToEii>
	}
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	f3af 8000 	nop.w
 8002550:	00000000 	.word	0x00000000
 8002554:	40705000 	.word	0x40705000
 8002558:	200005c0 	.word	0x200005c0
 800255c:	200004ec 	.word	0x200004ec

08002560 <_Z14forwardToPointf>:
void for_last_mission(){
	servo_turn.turnTo(81);
	servo_forward.turnTo(30);
}

void forwardToPoint(float forward_mm){
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	ed87 0a01 	vstr	s0, [r7, #4]
	if(forward_mm < 0 && forward_mm > -90){
 800256a:	edd7 7a01 	vldr	s15, [r7, #4]
 800256e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	d523      	bpl.n	80025c0 <_Z14forwardToPointf+0x60>
 8002578:	edd7 7a01 	vldr	s15, [r7, #4]
 800257c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002644 <_Z14forwardToPointf+0xe4>
 8002580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	dd1a      	ble.n	80025c0 <_Z14forwardToPointf+0x60>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 800258a:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <_Z14forwardToPointf+0xe8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002596:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <_Z14forwardToPointf+0xec>)
 8002598:	edd3 6a00 	vldr	s13, [r3]
 800259c:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	2200      	movs	r2, #0
 80025ae:	ee17 1a90 	vmov	r1, s15
 80025b2:	4827      	ldr	r0, [pc, #156]	@ (8002650 <_Z14forwardToPointf+0xf0>)
 80025b4:	f002 fcdc 	bl	8004f70 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 80025b8:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <_Z14forwardToPointf+0xf4>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e03d      	b.n	800263c <_Z14forwardToPointf+0xdc>
		
	}
	else if(forward_mm > 0 && forward_mm < 220){
 80025c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	dd23      	ble.n	8002616 <_Z14forwardToPointf+0xb6>
 80025ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002658 <_Z14forwardToPointf+0xf8>
 80025d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	d51a      	bpl.n	8002616 <_Z14forwardToPointf+0xb6>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <_Z14forwardToPointf+0xe8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ec:	4b17      	ldr	r3, [pc, #92]	@ (800264c <_Z14forwardToPointf+0xec>)
 80025ee:	edd3 6a00 	vldr	s13, [r3]
 80025f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002602:	2200      	movs	r2, #0
 8002604:	ee17 1a90 	vmov	r1, s15
 8002608:	4811      	ldr	r0, [pc, #68]	@ (8002650 <_Z14forwardToPointf+0xf0>)
 800260a:	f002 fcb1 	bl	8004f70 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 800260e:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <_Z14forwardToPointf+0xf4>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e012      	b.n	800263c <_Z14forwardToPointf+0xdc>
	}
	else if(forward_mm == 0){
 8002616:	edd7 7a01 	vldr	s15, [r7, #4]
 800261a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	d10b      	bne.n	800263c <_Z14forwardToPointf+0xdc>
		servo_forward.turnTo(zeroPointAngle);
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <_Z14forwardToPointf+0xe8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	4808      	ldr	r0, [pc, #32]	@ (8002650 <_Z14forwardToPointf+0xf0>)
 800262e:	f002 fc9f 	bl	8004f70 <_ZN5Servo6turnToEii>
		_current_y = 0;
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_Z14forwardToPointf+0xf4>)
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
	}
}
 800263a:	e7ff      	b.n	800263c <_Z14forwardToPointf+0xdc>
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	c2b40000 	.word	0xc2b40000
 8002648:	20000010 	.word	0x20000010
 800264c:	2000000c 	.word	0x2000000c
 8002650:	2000056c 	.word	0x2000056c
 8002654:	200005bc 	.word	0x200005bc
 8002658:	435c0000 	.word	0x435c0000

0800265c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	4a04      	ldr	r2, [pc, #16]	@ (800269c <_ZN3ros3MsgC1Ev+0x1c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	0800b1d4 	.word	0x0800b1d4

080026a0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
      data()
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ffe8 	bl	8002680 <_ZN3ros3MsgC1Ev>
 80026b0:	4a06      	ldr	r2, [pc, #24]	@ (80026cc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffce 	bl	800265c <_ZN3ros4TimeC1Ev>
    {
    }
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	0800b1bc 	.word	0x0800b1bc

080026d0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	b2ca      	uxtb	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0a19      	lsrs	r1, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3301      	adds	r3, #1
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0c19      	lsrs	r1, r3, #16
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3302      	adds	r3, #2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	b2ca      	uxtb	r2, r1
 800270e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0e19      	lsrs	r1, r3, #24
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3303      	adds	r3, #3
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3304      	adds	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	b2ca      	uxtb	r2, r1
 8002734:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a19      	lsrs	r1, r3, #8
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	b2ca      	uxtb	r2, r1
 8002746:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	0c19      	lsrs	r1, r3, #16
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3302      	adds	r3, #2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	b2ca      	uxtb	r2, r1
 8002758:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0e19      	lsrs	r1, r3, #24
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3303      	adds	r3, #3
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	4413      	add	r3, r2
 8002768:	b2ca      	uxtb	r2, r1
 800276a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
      return offset;
 8002772:	68fb      	ldr	r3, [r7, #12]
    }
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	440b      	add	r3, r1
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3302      	adds	r3, #2
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	440b      	add	r3, r1
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3303      	adds	r3, #3
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	440b      	add	r3, r1
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3304      	adds	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	440b      	add	r3, r1
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3302      	adds	r3, #2
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	440b      	add	r3, r1
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3303      	adds	r3, #3
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	440b      	add	r3, r1
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3304      	adds	r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
     return offset;
 800283a:	68fb      	ldr	r3, [r7, #12]
    }
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	0800ae50 	.word	0x0800ae50

08002864 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	0800ae60 	.word	0x0800ae60

08002880 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fef8 	bl	8002680 <_ZN3ros3MsgC1Ev>
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028a0:	609a      	str	r2, [r3, #8]
      message_type(""),
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028a6:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80028ac:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
    {
    }
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	0800b1a4 	.word	0x0800b1a4
 80028c4:	0800ae84 	.word	0x0800ae84

080028c8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8899      	ldrh	r1, [r3, #4]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	889b      	ldrh	r3, [r3, #4]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	b299      	uxth	r1, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	b2ca      	uxtb	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	3302      	adds	r3, #2
 80028fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fc88 	bl	8000218 <strlen>
 8002908:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	4618      	mov	r0, r3
 8002914:	f001 fa50 	bl	8003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3304      	adds	r3, #4
 800291c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	18d0      	adds	r0, r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4619      	mov	r1, r3
 800292c:	f008 f946 	bl	800abbc <memcpy>
      offset += length_topic_name;
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4413      	add	r3, r2
 8002936:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fc6b 	bl	8000218 <strlen>
 8002942:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	4618      	mov	r0, r3
 800294e:	f001 fa33 	bl	8003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	18d0      	adds	r0, r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4619      	mov	r1, r3
 8002966:	f008 f929 	bl	800abbc <memcpy>
      offset += length_message_type;
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4413      	add	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fc4e 	bl	8000218 <strlen>
 800297c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	6939      	ldr	r1, [r7, #16]
 8002986:	4618      	mov	r0, r3
 8002988:	f001 fa16 	bl	8003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3304      	adds	r3, #4
 8002990:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	18d0      	adds	r0, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4619      	mov	r1, r3
 80029a0:	f008 f90c 	bl	800abbc <memcpy>
      offset += length_md5sum;
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	0a19      	lsrs	r1, r3, #8
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0c19      	lsrs	r1, r3, #16
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3302      	adds	r3, #2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	b2ca      	uxtb	r2, r1
 80029dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0e19      	lsrs	r1, r3, #24
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3303      	adds	r3, #3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80029f4:	69fb      	ldr	r3, [r7, #28]
    }
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08a      	sub	sp, #40	@ 0x28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	889b      	ldrh	r3, [r3, #4]
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	3301      	adds	r3, #1
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	440b      	add	r3, r1
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	441a      	add	r2, r3
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f9d3 	bl	8003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3304      	adds	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5a:	e00b      	b.n	8002a74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	441a      	add	r2, r3
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	3b01      	subs	r3, #1
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	440b      	add	r3, r1
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	3301      	adds	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4413      	add	r3, r2
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3ed      	bcc.n	8002a5c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	4413      	add	r3, r2
 8002a86:	3b01      	subs	r3, #1
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	441a      	add	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f9a0 	bl	8003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	e00b      	b.n	8002ada <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	441a      	add	r2, r3
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	440b      	add	r3, r1
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3ed      	bcc.n	8002ac2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	3b01      	subs	r3, #1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	441a      	add	r2, r3
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f96d 	bl	8003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e00b      	b.n	8002b40 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	440b      	add	r3, r1
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3ed      	bcc.n	8002b28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	3b01      	subs	r3, #1
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	3301      	adds	r3, #1
 8002b88:	6839      	ldr	r1, [r7, #0]
 8002b8a:	440b      	add	r3, r1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	3303      	adds	r3, #3
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	440b      	add	r3, r1
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	61bb      	str	r3, [r7, #24]
     return offset;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    }
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	0800ae88 	.word	0x0800ae88

08002bec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	0800aea4 	.word	0x0800aea4

08002c08 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd34 	bl	8002680 <_ZN3ros3MsgC1Ev>
 8002c18:	4a06      	ldr	r2, [pc, #24]	@ (8002c34 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
      level(0),
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	711a      	strb	r2, [r3, #4]
      msg("")
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002c28:	609a      	str	r2, [r3, #8]
    {
    }
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	0800b18c 	.word	0x0800b18c
 8002c38:	0800ae84 	.word	0x0800ae84

08002c3c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	7912      	ldrb	r2, [r2, #4]
 8002c54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fad9 	bl	8000218 <strlen>
 8002c66:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 f8a1 	bl	8003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	18d0      	adds	r0, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f007 ff97 	bl	800abbc <memcpy>
      offset += length_msg;
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c96:	68fb      	ldr	r3, [r7, #12]
    }
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	441a      	add	r2, r3
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 f892 	bl	8003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00b      	b.n	8002cf6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	440b      	add	r3, r1
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d3ed      	bcc.n	8002cde <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
     return offset;
 8002d26:	693b      	ldr	r3, [r7, #16]
    }
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	0800aec8 	.word	0x0800aec8

08002d4c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	0800aedc 	.word	0x0800aedc

08002d68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fc84 	bl	8002680 <_ZN3ros3MsgC1Ev>
 8002d78:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	61da      	str	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	0800b174 	.word	0x0800b174

08002db0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	@ 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2ca      	uxtb	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0a19      	lsrs	r1, r3, #8
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b2ca      	uxtb	r2, r1
 8002ddc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0c19      	lsrs	r1, r3, #16
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	3302      	adds	r3, #2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	b2ca      	uxtb	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0e19      	lsrs	r1, r3, #24
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	3303      	adds	r3, #3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	3304      	adds	r3, #4
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	e02a      	b.n	8002e64 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	b2ca      	uxtb	r2, r1
 8002e26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	0a19      	lsrs	r1, r3, #8
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	3301      	adds	r3, #1
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	0c19      	lsrs	r1, r3, #16
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	3302      	adds	r3, #2
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	b2ca      	uxtb	r2, r1
 8002e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	0e19      	lsrs	r1, r3, #24
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	3303      	adds	r3, #3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	3301      	adds	r3, #1
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3cf      	bcc.n	8002e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6919      	ldr	r1, [r3, #16]
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	0a19      	lsrs	r1, r3, #8
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	3301      	adds	r3, #1
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	b2ca      	uxtb	r2, r1
 8002e8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	0c19      	lsrs	r1, r3, #16
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	3302      	adds	r3, #2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b2ca      	uxtb	r2, r1
 8002e9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	0e19      	lsrs	r1, r3, #24
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e02a      	b.n	8002f14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	b2ca      	uxtb	r2, r1
 8002ed6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0a19      	lsrs	r1, r3, #8
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	3301      	adds	r3, #1
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b2ca      	uxtb	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	0c19      	lsrs	r1, r3, #16
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	3302      	adds	r3, #2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	b2ca      	uxtb	r2, r1
 8002ef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0e19      	lsrs	r1, r3, #24
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	3303      	adds	r3, #3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d3cf      	bcc.n	8002ebe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69d9      	ldr	r1, [r3, #28]
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	0a19      	lsrs	r1, r3, #8
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	0c19      	lsrs	r1, r3, #16
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	3302      	adds	r3, #2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b2ca      	uxtb	r2, r1
 8002f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	0e19      	lsrs	r1, r3, #24
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	3303      	adds	r3, #3
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	3304      	adds	r3, #4
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e027      	b.n	8002fbe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f94c 	bl	8000218 <strlen>
 8002f80:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ff14 	bl	8003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	3304      	adds	r3, #4
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	18d0      	adds	r0, r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4619      	mov	r1, r3
 8002fac:	f007 fe06 	bl	800abbc <memcpy>
      offset += length_stringsi;
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3d2      	bcc.n	8002f6e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08e      	sub	sp, #56	@ 0x38
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fec:	3301      	adds	r3, #1
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	3302      	adds	r3, #2
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	4313      	orrs	r3, r2
 800300c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	3303      	adds	r3, #3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	4413      	add	r3, r2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	4313      	orrs	r3, r2
 800301e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	3304      	adds	r3, #4
 8003024:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	429a      	cmp	r2, r3
 800302e:	d90a      	bls.n	8003046 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f007 fd54 	bl	800aae8 <realloc>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800304c:	2300      	movs	r3, #0
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003050:	e035      	b.n	80030be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	440a      	add	r2, r1
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003068:	3301      	adds	r3, #1
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	440b      	add	r3, r1
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307a:	3302      	adds	r3, #2
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	440b      	add	r3, r1
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308c:	3303      	adds	r3, #3
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	440b      	add	r3, r1
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80030a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a2:	3304      	adds	r3, #4
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	3301      	adds	r3, #1
 80030bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3c4      	bcc.n	8003052 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d4:	3301      	adds	r3, #1
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	3302      	adds	r3, #2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f8:	3303      	adds	r3, #3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	4313      	orrs	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	3304      	adds	r3, #4
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d90a      	bls.n	800312e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f007 fce0 	bl	800aae8 <realloc>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003138:	e035      	b.n	80031a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	440a      	add	r2, r1
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	3301      	adds	r3, #1
 8003152:	6839      	ldr	r1, [r7, #0]
 8003154:	440b      	add	r3, r1
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003162:	3302      	adds	r3, #2
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	440b      	add	r3, r1
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	3303      	adds	r3, #3
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	440b      	add	r3, r1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318a:	3304      	adds	r3, #4
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	3214      	adds	r2, #20
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80031a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a2:	3301      	adds	r3, #1
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3c4      	bcc.n	800313a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	3301      	adds	r3, #1
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	3302      	adds	r3, #2
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e0:	3303      	adds	r3, #3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	3304      	adds	r3, #4
 80031f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d90a      	bls.n	8003216 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f007 fc6c 	bl	800aae8 <realloc>
 8003210:	4602      	mov	r2, r0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800321c:	2300      	movs	r3, #0
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003220:	e03e      	b.n	80032a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	441a      	add	r2, r3
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fde1 	bl	8003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	3304      	adds	r3, #4
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
 800323e:	e00b      	b.n	8003258 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	441a      	add	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	3b01      	subs	r3, #1
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	440b      	add	r3, r1
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	3301      	adds	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
 8003258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	429a      	cmp	r2, r3
 8003262:	d3ed      	bcc.n	8003240 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	3b01      	subs	r3, #1
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	3b01      	subs	r3, #1
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	441a      	add	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	3220      	adds	r2, #32
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	3301      	adds	r3, #1
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3bb      	bcc.n	8003222 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80032ac:	4618      	mov	r0, r3
 80032ae:	3738      	adds	r7, #56	@ 0x38
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	0800b098 	.word	0x0800b098

080032d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	0800af00 	.word	0x0800af00

080032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	611a      	str	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68d8      	ldr	r0, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6891      	ldr	r1, [r2, #8]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4798      	blx	r3
 8003338:	4603      	mov	r3, r0
  };
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
  }
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a0c      	ldr	r2, [pc, #48]	@ (80033c0 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a0:	461a      	mov	r2, r3
 80033a2:	2300      	movs	r3, #0
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ac:	461a      	mov	r2, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	60d3      	str	r3, [r2, #12]
    }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	20000340 	.word	0x20000340

080033c4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f804 	bl	80033da <_ZN13STM32Hardware10reset_rbufEv>
    }
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ee:	4619      	mov	r1, r3
 80033f0:	f005 ff2c 	bl	800924c <HAL_UART_Receive_DMA>
    }
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN13STM32Hardware4readEv>:

    int read(){
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffa2 	bl	800335a <_ZN13STM32Hardware10getRdmaIndEv>
 8003416:	4603      	mov	r3, r0
 8003418:	429c      	cmp	r4, r3
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800342c:	1c59      	adds	r1, r3, #1
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8003442:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 800344c:	68fb      	ldr	r3, [r7, #12]
    }
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}
	...

08003458 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003468:	2b20      	cmp	r3, #32
 800346a:	d108      	bne.n	800347e <_ZN13STM32Hardware5flushEv+0x26>
 800346c:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <_ZN13STM32Hardware5flushEv+0xc8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <_ZN13STM32Hardware5flushEv+0x26>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <_ZN13STM32Hardware5flushEv+0x28>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d049      	beq.n	8003518 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003484:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	429a      	cmp	r2, r3
 800349c:	d039      	beq.n	8003512 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <_ZN13STM32Hardware5flushEv+0x74>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	e007      	b.n	80034dc <_ZN13STM32Hardware5flushEv+0x84>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80034da:	b29b      	uxth	r3, r3
 80034dc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	89fa      	ldrh	r2, [r7, #14]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f005 fe29 	bl	800914c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	4413      	add	r3, r2
 8003506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003510:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003512:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
      }
    }
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200005c5 	.word	0x200005c5

08003524 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800353a:	bfa8      	it	ge
 800353c:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 8003540:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4293      	cmp	r3, r2
 8003552:	bf28      	it	cs
 8003554:	4613      	movcs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f007 fb25 	bl	800abbc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	4413      	add	r3, r2
 800357e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003588:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	d00b      	beq.n	80035aa <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	18d1      	adds	r1, r2, r3
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	f007 fb09 	bl	800abbc <memcpy>
      }

      flush();
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff ff54 	bl	8003458 <_ZN13STM32Hardware5flushEv>
    }
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	f002 fa3c 	bl	8005a3c <HAL_GetTick>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
      data(0)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f850 	bl	8002680 <_ZN3ros3MsgC1Ev>
 80035e0:	4a05      	ldr	r2, [pc, #20]	@ (80035f8 <_ZN8std_msgs5Int32C1Ev+0x28>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
    {
    }
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0800b130 	.word	0x0800b130

080035fc <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0a19      	lsrs	r1, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	b2ca      	uxtb	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c19      	lsrs	r1, r3, #16
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3302      	adds	r3, #2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	b2ca      	uxtb	r2, r1
 800363a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	0e19      	lsrs	r1, r3, #24
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3303      	adds	r3, #3
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	4413      	add	r3, r2
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3304      	adds	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
      return offset;
 8003652:	68fb      	ldr	r3, [r7, #12]
    }
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	440a      	add	r2, r1
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3301      	adds	r3, #1
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	440b      	add	r3, r1
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4313      	orrs	r3, r2
 8003690:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3302      	adds	r3, #2
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	440b      	add	r3, r1
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3303      	adds	r3, #3
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	440b      	add	r3, r1
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3304      	adds	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
     return offset;
 80036c2:	68fb      	ldr	r3, [r7, #12]
    }
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	0800af24 	.word	0x0800af24

080036ec <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	0800af34 	.word	0x0800af34

08003708 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
      data(0)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe ffb4 	bl	8002680 <_ZN3ros3MsgC1Ev>
 8003718:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	711a      	strb	r2, [r3, #4]
    {
    }
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	0800b118 	.word	0x0800b118

08003734 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	791b      	ldrb	r3, [r3, #4]
 8003746:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4413      	add	r3, r2
 800374e:	7a3a      	ldrb	r2, [r7, #8]
 8003750:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3301      	adds	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
      return offset;
 8003758:	68fb      	ldr	r3, [r7, #12]
    }
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003778:	7a3a      	ldrb	r2, [r7, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	440b      	add	r3, r1
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	b2db      	uxtb	r3, r3
 8003786:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003788:	7a3a      	ldrb	r2, [r7, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
     return offset;
 8003794:	68fb      	ldr	r3, [r7, #12]
    }
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	0800af58 	.word	0x0800af58

080037c0 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	0800af68 	.word	0x0800af68

080037dc <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
      data(0)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ff4a 	bl	8002680 <_ZN3ros3MsgC1Ev>
 80037ec:	4a07      	ldr	r2, [pc, #28]	@ (800380c <_ZN8std_msgs7Float64C1Ev+0x30>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	0800b100 	.word	0x0800b100

08003810 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003824:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	4401      	add	r1, r0
 8003832:	b2d3      	uxtb	r3, r2
 8003834:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	0a02      	lsrs	r2, r0, #8
 8003844:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003848:	0a0b      	lsrs	r3, r1, #8
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	3101      	adds	r1, #1
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	4401      	add	r1, r0
 8003852:	b2d3      	uxtb	r3, r2
 8003854:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003856:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	0c02      	lsrs	r2, r0, #16
 8003864:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003868:	0c0b      	lsrs	r3, r1, #16
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	3102      	adds	r1, #2
 800386e:	6838      	ldr	r0, [r7, #0]
 8003870:	4401      	add	r1, r0
 8003872:	b2d3      	uxtb	r3, r2
 8003874:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	0e02      	lsrs	r2, r0, #24
 8003884:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003888:	0e0b      	lsrs	r3, r1, #24
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	3103      	adds	r1, #3
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	4401      	add	r1, r0
 8003892:	b2d3      	uxtb	r3, r2
 8003894:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	000a      	movs	r2, r1
 80038a4:	2300      	movs	r3, #0
 80038a6:	6979      	ldr	r1, [r7, #20]
 80038a8:	3104      	adds	r1, #4
 80038aa:	6838      	ldr	r0, [r7, #0]
 80038ac:	4401      	add	r1, r0
 80038ae:	b2d3      	uxtb	r3, r2
 80038b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80038b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	0a0a      	lsrs	r2, r1, #8
 80038c0:	2300      	movs	r3, #0
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	3105      	adds	r1, #5
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	4401      	add	r1, r0
 80038ca:	b2d3      	uxtb	r3, r2
 80038cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80038ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	0c0a      	lsrs	r2, r1, #16
 80038dc:	2300      	movs	r3, #0
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	3106      	adds	r1, #6
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	4401      	add	r1, r0
 80038e6:	b2d3      	uxtb	r3, r2
 80038e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80038ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	0e0a      	lsrs	r2, r1, #24
 80038f8:	2300      	movs	r3, #0
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	3107      	adds	r1, #7
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	4401      	add	r1, r0
 8003902:	b2d3      	uxtb	r3, r2
 8003904:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	3308      	adds	r3, #8
 800390a:	617b      	str	r3, [r7, #20]
      return offset;
 800390c:	697b      	ldr	r3, [r7, #20]
    }
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800391a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800391e:	b0a3      	sub	sp, #140	@ 0x8c
 8003920:	af00      	add	r7, sp, #0
 8003922:	6778      	str	r0, [r7, #116]	@ 0x74
 8003924:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800393c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003942:	4413      	add	r3, r2
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2200      	movs	r2, #0
 800394a:	461c      	mov	r4, r3
 800394c:	4615      	mov	r5, r2
 800394e:	ea40 0804 	orr.w	r8, r0, r4
 8003952:	ea41 0905 	orr.w	r9, r1, r5
 8003956:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800395a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800395e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003966:	4413      	add	r3, r2
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2200      	movs	r2, #0
 800396e:	469a      	mov	sl, r3
 8003970:	4693      	mov	fp, r2
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800397e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003982:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003986:	ea40 0402 	orr.w	r4, r0, r2
 800398a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800398c:	430b      	orrs	r3, r1
 800398e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003990:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003994:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003998:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800399c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2200      	movs	r2, #0
 80039ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039bc:	464c      	mov	r4, r9
 80039be:	0423      	lsls	r3, r4, #16
 80039c0:	4644      	mov	r4, r8
 80039c2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039c6:	4644      	mov	r4, r8
 80039c8:	0422      	lsls	r2, r4, #16
 80039ca:	ea40 0402 	orr.w	r4, r0, r2
 80039ce:	65bc      	str	r4, [r7, #88]	@ 0x58
 80039d0:	430b      	orrs	r3, r1
 80039d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039d4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80039d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039e4:	1cda      	adds	r2, r3, #3
 80039e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2200      	movs	r2, #0
 80039f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80039f2:	657a      	str	r2, [r7, #84]	@ 0x54
 80039f4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80039f8:	4623      	mov	r3, r4
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039fe:	4623      	mov	r3, r4
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a04:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a08:	4623      	mov	r3, r4
 8003a0a:	4303      	orrs	r3, r0
 8003a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0e:	462b      	mov	r3, r5
 8003a10:	430b      	orrs	r3, r1
 8003a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a14:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003a18:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a28:	4413      	add	r3, r2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2200      	movs	r2, #0
 8003a30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a32:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003a3e:	0023      	movs	r3, r4
 8003a40:	2200      	movs	r2, #0
 8003a42:	ea40 0402 	orr.w	r4, r0, r2
 8003a46:	633c      	str	r4, [r7, #48]	@ 0x30
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003a50:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a54:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a5c:	1d5a      	adds	r2, r3, #5
 8003a5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003a76:	0223      	lsls	r3, r4, #8
 8003a78:	2200      	movs	r2, #0
 8003a7a:	ea40 0402 	orr.w	r4, r0, r2
 8003a7e:	623c      	str	r4, [r7, #32]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003a88:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a94:	3306      	adds	r3, #6
 8003a96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a98:	4413      	add	r3, r2
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	61fa      	str	r2, [r7, #28]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	69bc      	ldr	r4, [r7, #24]
 8003aae:	0423      	lsls	r3, r4, #16
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	ea40 0402 	orr.w	r4, r0, r2
 8003ab6:	613c      	str	r4, [r7, #16]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003ac0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ac4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003acc:	3307      	adds	r3, #7
 8003ace:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	60fa      	str	r2, [r7, #12]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	68bc      	ldr	r4, [r7, #8]
 8003ae6:	0623      	lsls	r3, r4, #24
 8003ae8:	2200      	movs	r2, #0
 8003aea:	ea40 0402 	orr.w	r4, r0, r2
 8003aee:	603c      	str	r4, [r7, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003af8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8003afc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003b00:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003b02:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8003b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8003b14:	4618      	mov	r0, r3
 8003b16:	378c      	adds	r7, #140	@ 0x8c
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b1e:	4770      	bx	lr

08003b20 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	0800af8c 	.word	0x0800af8c

08003b3c <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	4b03      	ldr	r3, [pc, #12]	@ (8003b54 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	0800afa0 	.word	0x0800afa0

08003b58 <_ZN4ROS14initEv>:
namespace ROS1 {
  /**
   * @brief ROS1 節點宣告。
   * @param void
   */
  void init(void){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003b5c:	4818      	ldr	r0, [pc, #96]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b5e:	f000 fa73 	bl	8004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.advertise(pub_gripper);
 8003b62:	4918      	ldr	r1, [pc, #96]	@ (8003bc4 <_ZN4ROS14initEv+0x6c>)
 8003b64:	4816      	ldr	r0, [pc, #88]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b66:	f000 fa98 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_basket);
 8003b6a:	4917      	ldr	r1, [pc, #92]	@ (8003bc8 <_ZN4ROS14initEv+0x70>)
 8003b6c:	4814      	ldr	r0, [pc, #80]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b6e:	f000 fa94 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_elevator);
 8003b72:	4916      	ldr	r1, [pc, #88]	@ (8003bcc <_ZN4ROS14initEv+0x74>)
 8003b74:	4812      	ldr	r0, [pc, #72]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b76:	f000 fa90 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_touch);
 8003b7a:	4915      	ldr	r1, [pc, #84]	@ (8003bd0 <_ZN4ROS14initEv+0x78>)
 8003b7c:	4810      	ldr	r0, [pc, #64]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b7e:	f000 fa8c 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_y);
 8003b82:	4914      	ldr	r1, [pc, #80]	@ (8003bd4 <_ZN4ROS14initEv+0x7c>)
 8003b84:	480e      	ldr	r0, [pc, #56]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b86:	f000 fa88 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_theta);
 8003b8a:	4913      	ldr	r1, [pc, #76]	@ (8003bd8 <_ZN4ROS14initEv+0x80>)
 8003b8c:	480c      	ldr	r0, [pc, #48]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b8e:	f000 fa84 	bl	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    nh.subscribe(sub_gripper);
 8003b92:	4912      	ldr	r1, [pc, #72]	@ (8003bdc <_ZN4ROS14initEv+0x84>)
 8003b94:	480a      	ldr	r0, [pc, #40]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b96:	f000 fab0 	bl	80040fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_elevatorHeight);
 8003b9a:	4911      	ldr	r1, [pc, #68]	@ (8003be0 <_ZN4ROS14initEv+0x88>)
 8003b9c:	4808      	ldr	r0, [pc, #32]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003b9e:	f000 fad7 	bl	8004150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_basketDoor);
 8003ba2:	4910      	ldr	r1, [pc, #64]	@ (8003be4 <_ZN4ROS14initEv+0x8c>)
 8003ba4:	4806      	ldr	r0, [pc, #24]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003ba6:	f000 faa8 	bl	80040fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_turn);
 8003baa:	490f      	ldr	r1, [pc, #60]	@ (8003be8 <_ZN4ROS14initEv+0x90>)
 8003bac:	4804      	ldr	r0, [pc, #16]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003bae:	f000 facf 	bl	8004150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_forward);
 8003bb2:	490e      	ldr	r1, [pc, #56]	@ (8003bec <_ZN4ROS14initEv+0x94>)
 8003bb4:	4802      	ldr	r0, [pc, #8]	@ (8003bc0 <_ZN4ROS14initEv+0x68>)
 8003bb6:	f000 facb 	bl	8004150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>

    return;
 8003bba:	bf00      	nop
  }
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200005c8 	.word	0x200005c8
 8003bc4:	20001b0c 	.word	0x20001b0c
 8003bc8:	20001b44 	.word	0x20001b44
 8003bcc:	20001b68 	.word	0x20001b68
 8003bd0:	20001b28 	.word	0x20001b28
 8003bd4:	20001ba0 	.word	0x20001ba0
 8003bd8:	20001bb4 	.word	0x20001bb4
 8003bdc:	20001bc8 	.word	0x20001bc8
 8003be0:	20001c1c 	.word	0x20001c1c
 8003be4:	20001c38 	.word	0x20001c38
 8003be8:	20001be4 	.word	0x20001be4
 8003bec:	20001c00 	.word	0x20001c00

08003bf0 <_ZN4ROS19spinCycleEv>:

  /**
   * @brief ROS1 循環單位。
   * @param void
   */
  void spinCycle(void){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003bf4:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <_ZN4ROS19spinCycleEv+0x10>)
 8003bf6:	f000 fad6 	bl	80041a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
    return;
 8003bfa:	bf00      	nop
  }
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200005c8 	.word	0x200005c8

08003c04 <_ZN4ROS110_pub_touchEv>:

  void _pub_touch(void){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	touchFinish.data = table_isTouch;
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <_ZN4ROS110_pub_touchEv+0x18>)
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	4b04      	ldr	r3, [pc, #16]	@ (8003c20 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003c0e:	711a      	strb	r2, [r3, #4]
	pub_touch.publish(&touchFinish);
 8003c10:	4903      	ldr	r1, [pc, #12]	@ (8003c20 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003c12:	4804      	ldr	r0, [pc, #16]	@ (8003c24 <_ZN4ROS110_pub_touchEv+0x20>)
 8003c14:	f7ff fb81 	bl	800331a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	return;
 8003c18:	bf00      	nop
  }
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000591 	.word	0x20000591
 8003c20:	20001b20 	.word	0x20001b20
 8003c24:	20001b28 	.word	0x20001b28

08003c28 <_ZN4ROS112_pub_gripperEv>:
  void _pub_gripper(void){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
    gripperFinish.data = _gripperFinish;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <_ZN4ROS112_pub_gripperEv+0x18>)
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c32:	711a      	strb	r2, [r3, #4]
    //	gripperIsGet = 0;
    pub_gripper.publish(&gripperFinish);
 8003c34:	4903      	ldr	r1, [pc, #12]	@ (8003c44 <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003c36:	4804      	ldr	r0, [pc, #16]	@ (8003c48 <_ZN4ROS112_pub_gripperEv+0x20>)
 8003c38:	f7ff fb6f 	bl	800331a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c3c:	bf00      	nop
  }
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200005c4 	.word	0x200005c4
 8003c44:	20001b04 	.word	0x20001b04
 8003c48:	20001b0c 	.word	0x20001b0c

08003c4c <_ZN4ROS16_pub_yEv>:
  void _pub_elevator(void){
    elevatorHeight.data = high;
    pub_basket.publish(&basketFinish);
    return;
  }
  void _pub_y(void){
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
    current_y.data = _current_y;
 8003c50:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <_ZN4ROS16_pub_yEv+0x24>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fc4b 	bl	80004f0 <__aeabi_f2d>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4905      	ldr	r1, [pc, #20]	@ (8003c74 <_ZN4ROS16_pub_yEv+0x28>)
 8003c60:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_y.publish(&current_y);
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <_ZN4ROS16_pub_yEv+0x28>)
 8003c66:	4804      	ldr	r0, [pc, #16]	@ (8003c78 <_ZN4ROS16_pub_yEv+0x2c>)
 8003c68:	f7ff fb57 	bl	800331a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c6c:	bf00      	nop
  }
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	200005bc 	.word	0x200005bc
 8003c74:	20001b80 	.word	0x20001b80
 8003c78:	20001ba0 	.word	0x20001ba0

08003c7c <_ZN4ROS110_pub_thetaEv>:
  void _pub_theta(void){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    current_theta.data = _current_theta;
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <_ZN4ROS110_pub_thetaEv+0x24>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fc33 	bl	80004f0 <__aeabi_f2d>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4905      	ldr	r1, [pc, #20]	@ (8003ca4 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c90:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_theta.publish(&current_theta);
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <_ZN4ROS110_pub_thetaEv+0x28>)
 8003c96:	4804      	ldr	r0, [pc, #16]	@ (8003ca8 <_ZN4ROS110_pub_thetaEv+0x2c>)
 8003c98:	f7ff fb3f 	bl	800331a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003c9c:	bf00      	nop
  }
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200005c0 	.word	0x200005c0
 8003ca4:	20001b90 	.word	0x20001b90
 8003ca8:	20001bb4 	.word	0x20001bb4

08003cac <_ZN4ROS113callback_turnERKN8std_msgs5Int32E>:

  void callback_turn(const std_msgs::Int32 &msg){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	  if(isTop == 1){
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x2c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x1c>
		  middleTurn(msg.data);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fbf5 	bl	80024b0 <_Z10middleTurni>
	  }
	  else{
		  speeds = 0.5;
	  }
  }
 8003cc6:	e003      	b.n	8003cd0 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x24>
		  speeds = 0.5;
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x30>)
 8003cca:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003cce:	601a      	str	r2, [r3, #0]
  }
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000590 	.word	0x20000590
 8003cdc:	20000594 	.word	0x20000594

08003ce0 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:
  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	791b      	ldrb	r3, [r3, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fbbd 	bl	800246c <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8003cf2:	bf00      	nop
  }
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZN4ROS116callback_forwardERKN8std_msgs5Int32E>:
  void callback_basketDoor(const std_msgs::Bool &msg){
	basketControl(msg.data);
	return;
   }

  void callback_forward(const std_msgs::Int32 &msg){   //-90~220
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
	  forwardToPoint(msg.data);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d12:	f7fe fc25 	bl	8002560 <_Z14forwardToPointf>
	  return;
 8003d16:	bf00      	nop
  }
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	  if(table_isTouch == 0){
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x70>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12b      	bne.n	8003d88 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
		if(elevator_type  != -1 && msg.data == -1){
 8003d30:	4b18      	ldr	r3, [pc, #96]	@ (8003d94 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d009      	beq.n	8003d4e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d104      	bne.n	8003d4e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
			speeds = -0.5;
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d46:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e01b      	b.n	8003d86 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		else if(elevator_type  != 3 && msg.data == 1 && isTop == 0){
 8003d4e:	4b11      	ldr	r3, [pc, #68]	@ (8003d94 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d00c      	beq.n	8003d70 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d108      	bne.n	8003d70 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x7c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
			speeds = 0.5;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003d68:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e00a      	b.n	8003d86 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		      // runElevator = msg.data;
		 else{
			Motor_updown.heightTo((float) msg.data);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d80:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x80>)
 8003d82:	f7fd fa5d 	bl	8001240 <_ZN8DC_motor8heightToEf>
		 }
	  }


    return;
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
  }
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000591 	.word	0x20000591
 8003d94:	200005a8 	.word	0x200005a8
 8003d98:	20000594 	.word	0x20000594
 8003d9c:	20000590 	.word	0x20000590
 8003da0:	20000494 	.word	0x20000494

08003da4 <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 8003dac:	bf00      	nop
  }
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e00c      	b.n	8003de2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	fa22 f103 	lsr.w	r1, r2, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	b2ca      	uxtb	r2, r1
 8003dda:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d9ef      	bls.n	8003dc8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e010      	b.n	8003e2e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	440a      	add	r2, r1
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	00d2      	lsls	r2, r2, #3
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d9eb      	bls.n	8003e0c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	0800b160 	.word	0x0800b160

08003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ffe8 	bl	8003e44 <_ZN3ros15NodeHandleBase_C1Ev>
 8003e74:	4a47      	ldr	r2, [pc, #284]	@ (8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fa80 	bl	8003384 <_ZN13STM32HardwareC1Ev>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003e96:	3314      	adds	r3, #20
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe ff65 	bl	8002d68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e00a      	b.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b18      	cmp	r3, #24
 8003ebe:	d9f1      	bls.n	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e009      	b.n	8003eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b18      	cmp	r3, #24
 8003ede:	d9f2      	bls.n	8003ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e00a      	b.n	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f02:	d3f0      	bcc.n	8003ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	e00a      	b.n	8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003f14:	3304      	adds	r3, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f26:	d3f0      	bcc.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6213      	str	r3, [r2, #32]
  }
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800b0ec 	.word	0x0800b0ec

08003f98 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	0800b148 	.word	0x0800b148

08003fb8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ffe5 	bl	8003f98 <_ZN3ros11Subscriber_C1Ev>
 8003fce:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fb95 	bl	8003708 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	609a      	str	r2, [r3, #8]
  };
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0800b0d4 	.word	0x0800b0d4

08004000 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ffc1 	bl	8003f98 <_ZN3ros11Subscriber_C1Ev>
 8004016:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	330c      	adds	r3, #12
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fad5 	bl	80035d0 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]
  };
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	0800b0bc 	.word	0x0800b0bc

08004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f9b5 	bl	80033c4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004060:	461a      	mov	r2, r3
 8004062:	2300      	movs	r3, #0
 8004064:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
    bytes_ = 0;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
    index_ = 0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407c:	461a      	mov	r2, r3
 800407e:	2300      	movs	r3, #0
 8004080:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
    topic_ = 0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
  };
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e01d      	b.n	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	60da      	str	r2, [r3, #12]
        return true;
 80040dc:	2301      	movs	r3, #1
 80040de:	e006      	b.n	80040ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b18      	cmp	r3, #24
 80040ea:	ddde      	ble.n	80040aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80040ec:	2300      	movs	r3, #0
  }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e018      	b.n	800413c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800411a:	6839      	ldr	r1, [r7, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	605a      	str	r2, [r3, #4]
        return true;
 8004132:	2301      	movs	r3, #1
 8004134:	e006      	b.n	8004144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3301      	adds	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b18      	cmp	r3, #24
 8004140:	dde3      	ble.n	800410a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x10>
      }
    }
    return false;
 8004142:	2300      	movs	r3, #0
  }
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e018      	b.n	8004192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800417a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	605a      	str	r2, [r3, #4]
        return true;
 8004188:	2301      	movs	r3, #1
 800418a:	e006      	b.n	800419a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b18      	cmp	r3, #24
 8004196:	dde3      	ble.n	8004160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x10>
    return false;
 8004198:	2300      	movs	r3, #0
  }
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fa00 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 80041b8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d905      	bls.n	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    if (mode_ != MODE_FIRST_FF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00e      	beq.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d906      	bls.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004200:	461a      	mov	r2, r3
 8004202:	2300      	movs	r3, #0
 8004204:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
      if (spin_timeout_ > 0)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f9cd 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	429a      	cmp	r2, r3
 800422e:	bf8c      	ite	hi
 8004230:	2301      	movhi	r3, #1
 8004232:	2300      	movls	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800423a:	f06f 0301 	mvn.w	r3, #1
 800423e:	e226      	b.n	800468e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f8d9 	bl	80033fc <_ZN13STM32Hardware4readEv>
 800424a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f2c0 81ff 	blt.w	8004652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4413      	add	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004268:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004272:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004276:	2b07      	cmp	r3, #7
 8004278:	d12d      	bne.n	80042d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004280:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800428c:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	b2d1      	uxtb	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800429c:	3304      	adds	r3, #4
 800429e:	460a      	mov	r2, r1
 80042a0:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042a8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80042ac:	3b01      	subs	r3, #1
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042b4:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042be:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1a0      	bne.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042cc:	461a      	mov	r2, r3
 80042ce:	2308      	movs	r3, #8
 80042d0:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80042d4:	e798      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042dc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d130      	bne.n	8004346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2bff      	cmp	r3, #255	@ 0xff
 80042e8:	d112      	bne.n	8004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80042f4:	3301      	adds	r3, #1
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042fc:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3314      	adds	r3, #20
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800430a:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 800430e:	e77b      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f94f 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	bf8c      	ite	hi
 8004328:	2301      	movhi	r3, #1
 800432a:	2300      	movls	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	f43f af6a 	beq.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 8004340:	f06f 0301 	mvn.w	r3, #1
 8004344:	e1a3      	b.n	800468e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004350:	2b01      	cmp	r3, #1
 8004352:	d121      	bne.n	8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2bfe      	cmp	r3, #254	@ 0xfe
 8004358:	d10b      	bne.n	8004372 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004360:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004364:	3301      	adds	r3, #1
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800436c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004370:	e74a      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004378:	461a      	mov	r2, r3
 800437a:	2300      	movs	r3, #0
 800437c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004386:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800438a:	2b00      	cmp	r3, #0
 800438c:	f47f af3c 	bne.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f980 	bl	8004696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004396:	e737      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d120      	bne.n	80043e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043cc:	3301      	adds	r3, #1
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043d4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80043e6:	e70f      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d118      	bne.n	8004428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fc:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4413      	add	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800440c:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004416:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800441a:	3301      	adds	r3, #1
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004422:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004426:	e6ef      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800442e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004432:	2b04      	cmp	r3, #4
 8004434:	d11f      	bne.n	8004476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004440:	425a      	negs	r2, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	bf58      	it	pl
 8004448:	4253      	negpl	r3, r2
 800444a:	2bff      	cmp	r3, #255	@ 0xff
 800444c:	d10b      	bne.n	8004466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004454:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004458:	3301      	adds	r3, #1
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004460:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004464:	e6d0      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004474:	e6c8      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004480:	2b05      	cmp	r3, #5
 8004482:	d119      	bne.n	80044b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004498:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800449c:	3301      	adds	r3, #1
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a4:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 80044b6:	e6a7      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d123      	bne.n	800450e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044cc:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	4413      	add	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044dc:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e6:	461a      	mov	r2, r3
 80044e8:	2307      	movs	r3, #7
 80044ea:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f47f ae85 	bne.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	461a      	mov	r2, r3
 8004506:	2308      	movs	r3, #8
 8004508:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800450c:	e67c      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004514:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004518:	2b08      	cmp	r3, #8
 800451a:	f47f ae75 	bne.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004524:	461a      	mov	r2, r3
 8004526:	2300      	movs	r3, #0
 8004528:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004532:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004536:	425a      	negs	r2, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	bf58      	it	pl
 800453e:	4253      	negpl	r3, r2
 8004540:	2bff      	cmp	r3, #255	@ 0xff
 8004542:	f47f ae61 	bne.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f89e 	bl	8004696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8ba 	bl	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	e085      	b.n	800468e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004588:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800458c:	2b0a      	cmp	r3, #10
 800458e:	d108      	bne.n	80045a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f97c 	bl	8004898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80045a0:	e632      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045a8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d112      	bne.n	80045d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 80045b6:	3314      	adds	r3, #20
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 80045be:	3204      	adds	r2, #4
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fd05 	bl	8002fd2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 80045d4:	e618      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045dc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045e0:	2b0b      	cmp	r3, #11
 80045e2:	d106      	bne.n	80045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 80045f0:	e60a      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045fc:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f43f adfc 	beq.w	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004616:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800461a:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004624:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004632:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4790      	blx	r2
    while (true)
 8004650:	e5da      	b.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004652:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800465e:	2b00      	cmp	r3, #0
 8004660:	d014      	beq.n	800468c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004668:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004674:	4293      	cmp	r3, r2
 8004676:	d909      	bls.n	800468c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f80c 	bl	8004696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	461a      	mov	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    return SPIN_OK;
 800468c:	2300      	movs	r3, #0
  }
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fffc 	bl	80026a0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f107 020c 	add.w	r2, r7, #12
 80046b2:	210a      	movs	r1, #10
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
    rt_time = hardware_.time();
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe ff7b 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ca:	615a      	str	r2, [r3, #20]
  }
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b08b      	sub	sp, #44	@ 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe f8cd 	bl	8002880 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ea:	e062      	b.n	80047b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d056      	beq.n	80047ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	b29b      	uxth	r3, r3
 8004710:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4608      	mov	r0, r1
 800474c:	4798      	blx	r3
 800474e:	4603      	mov	r3, r0
 8004750:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4608      	mov	r0, r1
 800477a:	4798      	blx	r3
 800477c:	4603      	mov	r3, r0
 800477e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004784:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681c      	ldr	r4, [r3, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fdd1 	bl	8003342 <_ZN3ros9Publisher15getEndpointTypeEv>
 80047a0:	4601      	mov	r1, r0
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	461a      	mov	r2, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	3301      	adds	r3, #1
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	2b18      	cmp	r3, #24
 80047b6:	dd99      	ble.n	80046ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80047bc:	e05e      	b.n	800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d053      	beq.n	8004876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80047f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004800:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4608      	mov	r0, r1
 8004810:	4798      	blx	r3
 8004812:	4603      	mov	r3, r0
 8004814:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800481e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004826:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4608      	mov	r0, r1
 8004836:	4798      	blx	r3
 8004838:	4603      	mov	r3, r0
 800483a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800483c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004840:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681c      	ldr	r4, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004858:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800485c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3304      	adds	r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4608      	mov	r0, r1
 8004868:	4798      	blx	r3
 800486a:	4601      	mov	r1, r0
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	461a      	mov	r2, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	3301      	adds	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	2b18      	cmp	r3, #24
 8004880:	dd9d      	ble.n	80047be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 800488e:	bf00      	nop
 8004890:	372c      	adds	r7, #44	@ 0x2c
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}
	...

08004898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fefa 	bl	80026a0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe fe81 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd ff58 	bl	8002780 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4915      	ldr	r1, [pc, #84]	@ (800492c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048d6:	fba1 1303 	umull	r1, r3, r1, r3
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	4413      	add	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80048e0:	6939      	ldr	r1, [r7, #16]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048e6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048f0:	fb00 f303 	mul.w	r3, r0, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	440b      	add	r3, r1
 80048fe:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8bf 	bl	8004a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3304      	adds	r3, #4
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fe50 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004920:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	10624dd3 	.word	0x10624dd3
 8004930:	000f4240 	.word	0x000f4240

08004934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b63      	cmp	r3, #99	@ 0x63
 8004944:	dd0b      	ble.n	800495e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800494c:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004950:	f083 0301 	eor.w	r3, r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800495a:	2300      	movs	r3, #0
 800495c:	e090      	b.n	8004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 800496a:	3304      	adds	r3, #4
 800496c:	3307      	adds	r3, #7
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4790      	blx	r2
 8004974:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800497c:	22ff      	movs	r2, #255	@ 0xff
 800497e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004988:	22fe      	movs	r2, #254	@ 0xfe
 800498a:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004998:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ac:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b6:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c0:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 80049c4:	4413      	add	r3, r2
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d2:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e0:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	b21b      	sxth	r3, r3
 80049e8:	121b      	asrs	r3, r3, #8
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f4:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80049fc:	2305      	movs	r3, #5
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e00d      	b.n	8004a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3306      	adds	r3, #6
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	ddec      	ble.n	8004a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3307      	adds	r3, #7
 8004a2c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	425a      	negs	r2, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	bf58      	it	pl
 8004a38:	4253      	negpl	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	6179      	str	r1, [r7, #20]
 8004a42:	43d2      	mvns	r2, r2
 8004a44:	b2d1      	uxtb	r1, r2
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a4e:	3304      	adds	r3, #4
 8004a50:	460a      	mov	r2, r1
 8004a52:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5a:	dc0b      	bgt.n	8004a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1d18      	adds	r0, r3, #4
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a66:	3304      	adds	r3, #4
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fe fd5a 	bl	8003524 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	e005      	b.n	8004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004a74:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f84c 	bl	8004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	0800afc4 	.word	0x0800afc4

08004a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fd8c 	bl	80035b8 <_ZN13STM32Hardware4timeEv>
 8004aa0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8004aae:	099b      	lsrs	r3, r3, #6
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aba:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004ac4:	fba3 0302 	umull	r0, r3, r3, r2
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	1aca      	subs	r2, r1, r3
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004ade:	4413      	add	r3, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ae6:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aee:	3318      	adds	r3, #24
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004af6:	321c      	adds	r2, #28
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc f9da 	bl	8000eb4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	10624dd3 	.word	0x10624dd3
 8004b0c:	000f4240 	.word	0x000f4240
 8004b10:	3b9aca00 	.word	0x3b9aca00

08004b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	2103      	movs	r1, #3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f804 	bl	8004b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f860 	bl	8002c08 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f107 0214 	add.w	r2, r7, #20
 8004b5a:	2107      	movs	r1, #7
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	4798      	blx	r3
  }
 8004b60:	bf00      	nop
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d15b      	bne.n	8004c30 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d156      	bne.n	8004c30 <_Z41__static_initialization_and_destruction_0ii+0xc8>
ros::NodeHandle nh;
 8004b82:	482d      	ldr	r0, [pc, #180]	@ (8004c38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004b84:	f7ff f96e 	bl	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8004b88:	482c      	ldr	r0, [pc, #176]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b8a:	f7fe fdbd 	bl	8003708 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4a2a      	ldr	r2, [pc, #168]	@ (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004b92:	492b      	ldr	r1, [pc, #172]	@ (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004b94:	482b      	ldr	r0, [pc, #172]	@ (8004c44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004b96:	f7fe fba9 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool touchFinish;
 8004b9a:	482b      	ldr	r0, [pc, #172]	@ (8004c48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004b9c:	f7fe fdb4 	bl	8003708 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_touch("/touch", &touchFinish);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4a29      	ldr	r2, [pc, #164]	@ (8004c48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004ba4:	4929      	ldr	r1, [pc, #164]	@ (8004c4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004ba6:	482a      	ldr	r0, [pc, #168]	@ (8004c50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004ba8:	f7fe fba0 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 8004bac:	4829      	ldr	r0, [pc, #164]	@ (8004c54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004bae:	f7fe fdab 	bl	8003708 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4a27      	ldr	r2, [pc, #156]	@ (8004c54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004bb6:	4928      	ldr	r1, [pc, #160]	@ (8004c58 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8004bb8:	4828      	ldr	r0, [pc, #160]	@ (8004c5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8004bba:	f7fe fb97 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 elevatorHeight;
 8004bbe:	4828      	ldr	r0, [pc, #160]	@ (8004c60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004bc0:	f7fe fe0c 	bl	80037dc <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_elevator("/elevator", &elevatorHeight);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004bc8:	4926      	ldr	r1, [pc, #152]	@ (8004c64 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8004bca:	4827      	ldr	r0, [pc, #156]	@ (8004c68 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8004bcc:	f7fe fb8e 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 current_y;
 8004bd0:	4826      	ldr	r0, [pc, #152]	@ (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004bd2:	f7fe fe03 	bl	80037dc <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 current_theta;
 8004bd6:	4826      	ldr	r0, [pc, #152]	@ (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bd8:	f7fe fe00 	bl	80037dc <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_y("/current_y", &current_y);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004be0:	4924      	ldr	r1, [pc, #144]	@ (8004c74 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8004be2:	4825      	ldr	r0, [pc, #148]	@ (8004c78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8004be4:	f7fe fb82 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_theta("/current_theta", &current_theta);
 8004be8:	2300      	movs	r3, #0
 8004bea:	4a21      	ldr	r2, [pc, #132]	@ (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004bec:	4923      	ldr	r1, [pc, #140]	@ (8004c7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8004bee:	4824      	ldr	r0, [pc, #144]	@ (8004c80 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8004bf0:	f7fe fb7c 	bl	80032ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4a23      	ldr	r2, [pc, #140]	@ (8004c84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004bf8:	4923      	ldr	r1, [pc, #140]	@ (8004c88 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004bfa:	4824      	ldr	r0, [pc, #144]	@ (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004bfc:	f7ff f9dc 	bl	8003fb8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_turn("/cmd_servoturn", ROS1::callback_turn);
 8004c00:	2301      	movs	r3, #1
 8004c02:	4a23      	ldr	r2, [pc, #140]	@ (8004c90 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c04:	4923      	ldr	r1, [pc, #140]	@ (8004c94 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004c06:	4824      	ldr	r0, [pc, #144]	@ (8004c98 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004c08:	f7ff f9fa 	bl	8004000 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_forward("/cmd_forward", ROS1::callback_forward);
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004c10:	4923      	ldr	r1, [pc, #140]	@ (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004c12:	4824      	ldr	r0, [pc, #144]	@ (8004ca4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004c14:	f7ff f9f4 	bl	8004000 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevatorHeight("/cmd_elevator", ROS1::callback_Elevator);
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ca8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004c1c:	4923      	ldr	r1, [pc, #140]	@ (8004cac <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004c1e:	4824      	ldr	r0, [pc, #144]	@ (8004cb0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004c20:	f7ff f9ee 	bl	8004000 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8004c24:	2301      	movs	r3, #1
 8004c26:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004c28:	4923      	ldr	r1, [pc, #140]	@ (8004cb8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004c2a:	4824      	ldr	r0, [pc, #144]	@ (8004cbc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004c2c:	f7ff f9c4 	bl	8003fb8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200005c8 	.word	0x200005c8
 8004c3c:	20001b04 	.word	0x20001b04
 8004c40:	0800b000 	.word	0x0800b000
 8004c44:	20001b0c 	.word	0x20001b0c
 8004c48:	20001b20 	.word	0x20001b20
 8004c4c:	0800b00c 	.word	0x0800b00c
 8004c50:	20001b28 	.word	0x20001b28
 8004c54:	20001b3c 	.word	0x20001b3c
 8004c58:	0800b014 	.word	0x0800b014
 8004c5c:	20001b44 	.word	0x20001b44
 8004c60:	20001b58 	.word	0x20001b58
 8004c64:	0800b01c 	.word	0x0800b01c
 8004c68:	20001b68 	.word	0x20001b68
 8004c6c:	20001b80 	.word	0x20001b80
 8004c70:	20001b90 	.word	0x20001b90
 8004c74:	0800b028 	.word	0x0800b028
 8004c78:	20001ba0 	.word	0x20001ba0
 8004c7c:	0800b034 	.word	0x0800b034
 8004c80:	20001bb4 	.word	0x20001bb4
 8004c84:	08003ce1 	.word	0x08003ce1
 8004c88:	0800b044 	.word	0x0800b044
 8004c8c:	20001bc8 	.word	0x20001bc8
 8004c90:	08003cad 	.word	0x08003cad
 8004c94:	0800b058 	.word	0x0800b058
 8004c98:	20001be4 	.word	0x20001be4
 8004c9c:	08003cfb 	.word	0x08003cfb
 8004ca0:	0800b068 	.word	0x0800b068
 8004ca4:	20001c00 	.word	0x20001c00
 8004ca8:	08003d21 	.word	0x08003d21
 8004cac:	0800b078 	.word	0x0800b078
 8004cb0:	20001c1c 	.word	0x20001c1c
 8004cb4:	08003da5 	.word	0x08003da5
 8004cb8:	0800b088 	.word	0x0800b088
 8004cbc:	20001c38 	.word	0x20001c38

08004cc0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fcc5 	bl	8003660 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	320c      	adds	r2, #12
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4798      	blx	r3
  }
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
  }
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fcde 	bl	80036d0 <_ZN8std_msgs5Int327getTypeEv>
 8004d14:	4603      	mov	r3, r0
  }
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fcde 	bl	80036ec <_ZN8std_msgs5Int326getMD5Ev>
 8004d30:	4603      	mov	r3, r0
  }
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	330c      	adds	r3, #12
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fd0b 	bl	8003766 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	320c      	adds	r2, #12
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
  }
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
  }
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	330c      	adds	r3, #12
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fd0b 	bl	80037a4 <_ZN8std_msgs4Bool7getTypeEv>
 8004d8e:	4603      	mov	r3, r0
  }
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	330c      	adds	r3, #12
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fd0b 	bl	80037c0 <_ZN8std_msgs4Bool6getMD5Ev>
 8004daa:	4603      	mov	r3, r0
  }
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
    return configured_;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dc2:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <_GLOBAL__sub_I_nh>:
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f7ff fec4 	bl	8004b68 <_Z41__static_initialization_and_destruction_0ii>
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f002 fe84 	bl	8007b04 <HAL_TIM_PWM_Start>
	write(startAngle);
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f804 	bl	8004e0c <_ZN5Servo5writeEi>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	angle = ang;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e48:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e60:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	dd08      	ble.n	8004e90 <_ZN5Servo5writeEi+0x84>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8a:	edc7 7a03 	vstr	s15, [r7, #12]
 8004e8e:	e014      	b.n	8004eba <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	d507      	bpl.n	8004eba <_ZN5Servo5writeEi+0xae>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb6:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <_ZN5Servo5writeEi+0xcc>
 8004ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	ee17 2a90 	vmov	r2, s15
 8004ed4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004ed6:	e045      	b.n	8004f64 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d10a      	bne.n	8004ef6 <_ZN5Servo5writeEi+0xea>
 8004ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	ee17 2a90 	vmov	r2, s15
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004ef4:	e036      	b.n	8004f64 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d10a      	bne.n	8004f14 <_ZN5Servo5writeEi+0x108>
 8004efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	ee17 2a90 	vmov	r2, s15
 8004f10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004f12:	e027      	b.n	8004f64 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d10a      	bne.n	8004f32 <_ZN5Servo5writeEi+0x126>
 8004f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	ee17 2a90 	vmov	r2, s15
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004f30:	e018      	b.n	8004f64 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d10a      	bne.n	8004f50 <_ZN5Servo5writeEi+0x144>
 8004f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	ee17 2a90 	vmov	r2, s15
 8004f4c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004f4e:	e009      	b.n	8004f64 <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	ee17 2a90 	vmov	r2, s15
 8004f62:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f300 80b0 	bgt.w	80050e8 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f2c0 80ae 	blt.w	80050ec <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 8004fa4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	ee17 3a90 	vmov	r3, s15
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfb8      	it	lt
 8004fb4:	425b      	neglt	r3, r3
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc8:	ee17 0a90 	vmov	r0, s15
 8004fcc:	f7fb fa90 	bl	80004f0 <__aeabi_f2d>
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8005100 <_ZN5Servo6turnToEii+0x190>)
 8004fd6:	f7fb fc0d 	bl	80007f4 <__aeabi_ddiv>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <_ZN5Servo6turnToEii+0x194>)
 8004fe8:	f7fb fada 	bl	80005a0 <__aeabi_dmul>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7fb fd96 	bl	8000b24 <__aeabi_d2f>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4a43      	ldr	r2, [pc, #268]	@ (8005108 <_ZN5Servo6turnToEii+0x198>)
 8004ffc:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 8004ffe:	4b42      	ldr	r3, [pc, #264]	@ (8005108 <_ZN5Servo6turnToEii+0x198>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb fa74 	bl	80004f0 <__aeabi_f2d>
 8005008:	a33b      	add	r3, pc, #236	@ (adr r3, 80050f8 <_ZN5Servo6turnToEii+0x188>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f7fb fac7 	bl	80005a0 <__aeabi_dmul>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	f7fb fd83 	bl	8000b24 <__aeabi_d2f>
 800501e:	4603      	mov	r3, r0
 8005020:	4a39      	ldr	r2, [pc, #228]	@ (8005108 <_ZN5Servo6turnToEii+0x198>)
 8005022:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800502e:	4b36      	ldr	r3, [pc, #216]	@ (8005108 <_ZN5Servo6turnToEii+0x198>)
 8005030:	edd3 7a00 	vldr	s15, [r3]
 8005034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d510      	bpl.n	8005060 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 800503e:	4b32      	ldr	r3, [pc, #200]	@ (8005108 <_ZN5Servo6turnToEii+0x198>)
 8005040:	edd3 7a00 	vldr	s15, [r3]
 8005044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005048:	ee17 3a90 	vmov	r3, s15
 800504c:	607b      	str	r3, [r7, #4]
		write(ang);
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff fedb 	bl	8004e0c <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 8005056:	492d      	ldr	r1, [pc, #180]	@ (800510c <_ZN5Servo6turnToEii+0x19c>)
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fc ffbf 	bl	8001fdc <_Z4waitiP17TIM_HandleTypeDef>
		return;
 800505e:	e046      	b.n	80050ee <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 8005060:	230a      	movs	r3, #10
 8005062:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	61fb      	str	r3, [r7, #28]
	t = 0;
 800506a:	4b29      	ldr	r3, [pc, #164]	@ (8005110 <_ZN5Servo6turnToEii+0x1a0>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1a3 0209 	sub.w	r2, r3, #9
 8005076:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <_ZN5Servo6turnToEii+0x1a0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	dd2e      	ble.n	80050dc <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 800507e:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <_ZN5Servo6turnToEii+0x1a0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	ee07 3a90 	vmov	s15, r3
 8005090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005098:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80050ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ba:	ee17 3a90 	vmov	r3, s15
 80050be:	617b      	str	r3, [r7, #20]
		write(a);
 80050c0:	6979      	ldr	r1, [r7, #20]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff fea2 	bl	8004e0c <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 80050c8:	4910      	ldr	r1, [pc, #64]	@ (800510c <_ZN5Servo6turnToEii+0x19c>)
 80050ca:	200a      	movs	r0, #10
 80050cc:	f7fc ff86 	bl	8001fdc <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <_ZN5Servo6turnToEii+0x1a0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330a      	adds	r3, #10
 80050d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005110 <_ZN5Servo6turnToEii+0x1a0>)
 80050d8:	6013      	str	r3, [r2, #0]
	}
 80050da:	e7c9      	b.n	8005070 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 80050dc:	bf00      	nop
	write(ang);
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fe93 	bl	8004e0c <_ZN5Servo5writeEi>
 80050e6:	e002      	b.n	80050ee <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 80050ec:	bf00      	nop
}
 80050ee:	3728      	adds	r7, #40	@ 0x28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	f3af 8000 	nop.w
 80050f8:	9999999a 	.word	0x9999999a
 80050fc:	3ff19999 	.word	0x3ff19999
 8005100:	404e0000 	.word	0x404e0000
 8005104:	408f4000 	.word	0x408f4000
 8005108:	20001c54 	.word	0x20001c54
 800510c:	2000012c 	.word	0x2000012c
 8005110:	20001c58 	.word	0x20001c58

08005114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511a:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <HAL_MspInit+0x54>)
 800511c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511e:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <HAL_MspInit+0x54>)
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	6613      	str	r3, [r2, #96]	@ 0x60
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <HAL_MspInit+0x54>)
 8005128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005132:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <HAL_MspInit+0x54>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005136:	4a0c      	ldr	r2, [pc, #48]	@ (8005168 <HAL_MspInit+0x54>)
 8005138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800513c:	6593      	str	r3, [r2, #88]	@ 0x58
 800513e:	4b0a      	ldr	r3, [pc, #40]	@ (8005168 <HAL_MspInit+0x54>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800514a:	2200      	movs	r2, #0
 800514c:	2100      	movs	r1, #0
 800514e:	2005      	movs	r0, #5
 8005150:	f000 fd5b 	bl	8005c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005154:	2005      	movs	r0, #5
 8005156:	f000 fd72 	bl	8005c3e <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800515a:	f001 fc5d 	bl	8006a18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b09c      	sub	sp, #112	@ 0x70
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005184:	f107 0318 	add.w	r3, r7, #24
 8005188:	2244      	movs	r2, #68	@ 0x44
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f005 fce1 	bl	800ab54 <memset>
  if(hi2c->Instance==I2C1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2e      	ldr	r2, [pc, #184]	@ (8005250 <HAL_I2C_MspInit+0xe4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d154      	bne.n	8005246 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800519c:	2340      	movs	r3, #64	@ 0x40
 800519e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80051a0:	2300      	movs	r3, #0
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051a4:	f107 0318 	add.w	r3, r7, #24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f002 f973 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80051b4:	f7fc fdd6 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b8:	4b26      	ldr	r3, [pc, #152]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051bc:	4a25      	ldr	r2, [pc, #148]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051c4:	4b23      	ldr	r3, [pc, #140]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d0:	4b20      	ldr	r3, [pc, #128]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 80051de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051ee:	2312      	movs	r3, #18
 80051f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f6:	2300      	movs	r3, #0
 80051f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051fa:	2304      	movs	r3, #4
 80051fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005202:	4619      	mov	r1, r3
 8005204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005208:	f001 f866 	bl	80062d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800520c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005210:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005212:	2312      	movs	r3, #18
 8005214:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800521a:	2300      	movs	r3, #0
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800521e:	2304      	movs	r3, #4
 8005220:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005222:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005226:	4619      	mov	r1, r3
 8005228:	480b      	ldr	r0, [pc, #44]	@ (8005258 <HAL_I2C_MspInit+0xec>)
 800522a:	f001 f855 	bl	80062d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005232:	4a08      	ldr	r2, [pc, #32]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 8005234:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005238:	6593      	str	r3, [r2, #88]	@ 0x58
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_I2C_MspInit+0xe8>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005246:	bf00      	nop
 8005248:	3770      	adds	r7, #112	@ 0x70
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40005400 	.word	0x40005400
 8005254:	40021000 	.word	0x40021000
 8005258:	48000400 	.word	0x48000400

0800525c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1f      	ldr	r2, [pc, #124]	@ (80052e8 <HAL_TIM_PWM_MspInit+0x8c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d114      	bne.n	8005298 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800526e:	4b1f      	ldr	r3, [pc, #124]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 8005270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 8005274:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005278:	6613      	str	r3, [r2, #96]	@ 0x60
 800527a:	4b1c      	ldr	r3, [pc, #112]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 800527c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005286:	2200      	movs	r2, #0
 8005288:	2100      	movs	r1, #0
 800528a:	2018      	movs	r0, #24
 800528c:	f000 fcbd 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005290:	2018      	movs	r0, #24
 8005292:	f000 fcd4 	bl	8005c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005296:	e022      	b.n	80052de <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <HAL_TIM_PWM_MspInit+0x94>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052a2:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a6:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80052ae:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
}
 80052ba:	e010      	b.n	80052de <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM8)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <HAL_TIM_PWM_MspInit+0x98>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10b      	bne.n	80052de <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052c6:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ca:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_TIM_PWM_MspInit+0x90>)
 80052d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40013400 	.word	0x40013400

080052f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005308:	d114      	bne.n	8005334 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800530a:	4b33      	ldr	r3, [pc, #204]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	4a32      	ldr	r2, [pc, #200]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6593      	str	r3, [r2, #88]	@ 0x58
 8005316:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	201c      	movs	r0, #28
 8005328:	f000 fc6f 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800532c:	201c      	movs	r0, #28
 800532e:	f000 fc86 	bl	8005c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005332:	e04c      	b.n	80053ce <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a28      	ldr	r2, [pc, #160]	@ (80053dc <HAL_TIM_Base_MspInit+0xe4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d114      	bne.n	8005368 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800533e:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005342:	4a25      	ldr	r2, [pc, #148]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005344:	f043 0310 	orr.w	r3, r3, #16
 8005348:	6593      	str	r3, [r2, #88]	@ 0x58
 800534a:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005356:	2200      	movs	r2, #0
 8005358:	2100      	movs	r1, #0
 800535a:	2036      	movs	r0, #54	@ 0x36
 800535c:	f000 fc55 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005360:	2036      	movs	r0, #54	@ 0x36
 8005362:	f000 fc6c 	bl	8005c3e <HAL_NVIC_EnableIRQ>
}
 8005366:	e032      	b.n	80053ce <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <HAL_TIM_Base_MspInit+0xe8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d114      	bne.n	800539c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005372:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005376:	4a18      	ldr	r2, [pc, #96]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	6593      	str	r3, [r2, #88]	@ 0x58
 800537e:	4b16      	ldr	r3, [pc, #88]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800538a:	2200      	movs	r2, #0
 800538c:	2100      	movs	r1, #0
 800538e:	2037      	movs	r0, #55	@ 0x37
 8005390:	f000 fc3b 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005394:	2037      	movs	r0, #55	@ 0x37
 8005396:	f000 fc52 	bl	8005c3e <HAL_NVIC_EnableIRQ>
}
 800539a:	e018      	b.n	80053ce <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <HAL_TIM_Base_MspInit+0xec>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d113      	bne.n	80053ce <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80053a6:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 80053a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053aa:	4a0b      	ldr	r2, [pc, #44]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80053b2:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_TIM_Base_MspInit+0xe0>)
 80053b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	2018      	movs	r0, #24
 80053c4:	f000 fc21 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80053c8:	2018      	movs	r0, #24
 80053ca:	f000 fc38 	bl	8005c3e <HAL_NVIC_EnableIRQ>
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40001000 	.word	0x40001000
 80053e0:	40001400 	.word	0x40001400
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f0:	f107 0314 	add.w	r3, r7, #20
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a18      	ldr	r2, [pc, #96]	@ (8005468 <HAL_TIM_Encoder_MspInit+0x80>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d129      	bne.n	800545e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800540a:	4b18      	ldr	r3, [pc, #96]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	4a17      	ldr	r2, [pc, #92]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 8005410:	f043 0304 	orr.w	r3, r3, #4
 8005414:	6593      	str	r3, [r2, #88]	@ 0x58
 8005416:	4b15      	ldr	r3, [pc, #84]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	4b12      	ldr	r3, [pc, #72]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	4a11      	ldr	r2, [pc, #68]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800542e:	4b0f      	ldr	r3, [pc, #60]	@ (800546c <HAL_TIM_Encoder_MspInit+0x84>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800543a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800543e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005440:	2302      	movs	r3, #2
 8005442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800544c:	230a      	movs	r3, #10
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800545a:	f000 ff3d 	bl	80062d8 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800545e:	bf00      	nop
 8005460:	3728      	adds	r7, #40	@ 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40000800 	.word	0x40000800
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	@ 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005478:	f107 031c 	add.w	r3, r7, #28
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a41      	ldr	r2, [pc, #260]	@ (8005594 <HAL_TIM_MspPostInit+0x124>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d11c      	bne.n	80054cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005492:	4b41      	ldr	r3, [pc, #260]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 8005494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005496:	4a40      	ldr	r2, [pc, #256]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800549e:	4b3e      	ldr	r3, [pc, #248]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80054aa:	230f      	movs	r3, #15
 80054ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ae:	2302      	movs	r3, #2
 80054b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80054ba:	2302      	movs	r3, #2
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054be:	f107 031c 	add.w	r3, r7, #28
 80054c2:	4619      	mov	r1, r3
 80054c4:	4835      	ldr	r0, [pc, #212]	@ (800559c <HAL_TIM_MspPostInit+0x12c>)
 80054c6:	f000 ff07 	bl	80062d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80054ca:	e05f      	b.n	800558c <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a33      	ldr	r2, [pc, #204]	@ (80055a0 <HAL_TIM_MspPostInit+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d139      	bne.n	800554a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054da:	4a2f      	ldr	r2, [pc, #188]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f2:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054f4:	f043 0302 	orr.w	r3, r3, #2
 80054f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054fa:	4b27      	ldr	r3, [pc, #156]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005506:	2340      	movs	r3, #64	@ 0x40
 8005508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	2302      	movs	r3, #2
 800550c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005512:	2300      	movs	r3, #0
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005516:	2302      	movs	r3, #2
 8005518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551a:	f107 031c 	add.w	r3, r7, #28
 800551e:	4619      	mov	r1, r3
 8005520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005524:	f000 fed8 	bl	80062d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005528:	2320      	movs	r3, #32
 800552a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005534:	2300      	movs	r3, #0
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005538:	2302      	movs	r3, #2
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553c:	f107 031c 	add.w	r3, r7, #28
 8005540:	4619      	mov	r1, r3
 8005542:	4818      	ldr	r0, [pc, #96]	@ (80055a4 <HAL_TIM_MspPostInit+0x134>)
 8005544:	f000 fec8 	bl	80062d8 <HAL_GPIO_Init>
}
 8005548:	e020      	b.n	800558c <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <HAL_TIM_MspPostInit+0x138>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d11b      	bne.n	800558c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005554:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 8005556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005558:	4a0f      	ldr	r2, [pc, #60]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 800555a:	f043 0304 	orr.w	r3, r3, #4
 800555e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005560:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <HAL_TIM_MspPostInit+0x128>)
 8005562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005570:	2302      	movs	r3, #2
 8005572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005578:	2300      	movs	r3, #0
 800557a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800557c:	2304      	movs	r3, #4
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005580:	f107 031c 	add.w	r3, r7, #28
 8005584:	4619      	mov	r1, r3
 8005586:	4805      	ldr	r0, [pc, #20]	@ (800559c <HAL_TIM_MspPostInit+0x12c>)
 8005588:	f000 fea6 	bl	80062d8 <HAL_GPIO_Init>
}
 800558c:	bf00      	nop
 800558e:	3730      	adds	r7, #48	@ 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40021000 	.word	0x40021000
 800559c:	48000800 	.word	0x48000800
 80055a0:	40000400 	.word	0x40000400
 80055a4:	48000400 	.word	0x48000400
 80055a8:	40013400 	.word	0x40013400

080055ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b09a      	sub	sp, #104	@ 0x68
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055c4:	f107 0310 	add.w	r3, r7, #16
 80055c8:	2244      	movs	r2, #68	@ 0x44
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f005 fac1 	bl	800ab54 <memset>
  if(huart->Instance==USART2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005710 <HAL_UART_MspInit+0x164>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	f040 8094 	bne.w	8005706 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80055de:	2302      	movs	r3, #2
 80055e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055e6:	f107 0310 	add.w	r3, r7, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 ff52 	bl	8007494 <HAL_RCCEx_PeriphCLKConfig>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80055f6:	f7fc fbb5 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055fa:	4b46      	ldr	r3, [pc, #280]	@ (8005714 <HAL_UART_MspInit+0x168>)
 80055fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fe:	4a45      	ldr	r2, [pc, #276]	@ (8005714 <HAL_UART_MspInit+0x168>)
 8005600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005604:	6593      	str	r3, [r2, #88]	@ 0x58
 8005606:	4b43      	ldr	r3, [pc, #268]	@ (8005714 <HAL_UART_MspInit+0x168>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005612:	4b40      	ldr	r3, [pc, #256]	@ (8005714 <HAL_UART_MspInit+0x168>)
 8005614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005616:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <HAL_UART_MspInit+0x168>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800561e:	4b3d      	ldr	r3, [pc, #244]	@ (8005714 <HAL_UART_MspInit+0x168>)
 8005620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800562a:	230c      	movs	r3, #12
 800562c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562e:	2302      	movs	r3, #2
 8005630:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005632:	2300      	movs	r3, #0
 8005634:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005636:	2300      	movs	r3, #0
 8005638:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800563a:	2307      	movs	r3, #7
 800563c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005642:	4619      	mov	r1, r3
 8005644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005648:	f000 fe46 	bl	80062d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800564c:	4b32      	ldr	r3, [pc, #200]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 800564e:	4a33      	ldr	r2, [pc, #204]	@ (800571c <HAL_UART_MspInit+0x170>)
 8005650:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005652:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005654:	221a      	movs	r2, #26
 8005656:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005658:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800565e:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005660:	2200      	movs	r2, #0
 8005662:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005664:	4b2c      	ldr	r3, [pc, #176]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005666:	2280      	movs	r2, #128	@ 0x80
 8005668:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800566a:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005670:	4b29      	ldr	r3, [pc, #164]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005676:	4b28      	ldr	r3, [pc, #160]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005678:	2220      	movs	r2, #32
 800567a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800567c:	4b26      	ldr	r3, [pc, #152]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 800567e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8005682:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005684:	4824      	ldr	r0, [pc, #144]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005686:	f000 faf5 	bl	8005c74 <HAL_DMA_Init>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8005690:	f7fc fb68 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a20      	ldr	r2, [pc, #128]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800569c:	4a1e      	ldr	r2, [pc, #120]	@ (8005718 <HAL_UART_MspInit+0x16c>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005724 <HAL_UART_MspInit+0x178>)
 80056a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80056a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056aa:	221b      	movs	r2, #27
 80056ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056b0:	2210      	movs	r2, #16
 80056b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056bc:	2280      	movs	r2, #128	@ 0x80
 80056be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c0:	4b17      	ldr	r3, [pc, #92]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056c6:	4b16      	ldr	r3, [pc, #88]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056d4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80056d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80056da:	4811      	ldr	r0, [pc, #68]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056dc:	f000 faca 	bl	8005c74 <HAL_DMA_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80056e6:	f7fc fb3d 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056ee:	67da      	str	r2, [r3, #124]	@ 0x7c
 80056f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005720 <HAL_UART_MspInit+0x174>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	2026      	movs	r0, #38	@ 0x26
 80056fc:	f000 fa85 	bl	8005c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005700:	2026      	movs	r0, #38	@ 0x26
 8005702:	f000 fa9c 	bl	8005c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005706:	bf00      	nop
 8005708:	3768      	adds	r7, #104	@ 0x68
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40004400 	.word	0x40004400
 8005714:	40021000 	.word	0x40021000
 8005718:	200003d4 	.word	0x200003d4
 800571c:	40020030 	.word	0x40020030
 8005720:	20000434 	.word	0x20000434
 8005724:	40020044 	.word	0x40020044

08005728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <NMI_Handler+0x4>

08005730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <HardFault_Handler+0x4>

08005738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <MemManage_Handler+0x4>

08005740 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <BusFault_Handler+0x4>

08005748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <UsageFault_Handler+0x4>

08005750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800577e:	f000 f94b 	bl	8005a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}

08005786 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005798:	2008      	movs	r0, #8
 800579a:	f000 ff4f 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80057a6:	2010      	movs	r0, #16
 80057a8:	f000 ff48 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <DMA1_Channel3_IRQHandler+0x10>)
 80057b6:	f000 fc40 	bl	800603a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200003d4 	.word	0x200003d4

080057c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80057c8:	4802      	ldr	r0, [pc, #8]	@ (80057d4 <DMA1_Channel4_IRQHandler+0x10>)
 80057ca:	f000 fc36 	bl	800603a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000434 	.word	0x20000434

080057d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80057dc:	2020      	movs	r0, #32
 80057de:	f000 ff2d 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80057e2:	2080      	movs	r0, #128	@ 0x80
 80057e4:	f000 ff2a 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057e8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80057ec:	f000 ff26 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80057f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80057f4:	f000 ff22 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057f8:	bf00      	nop
 80057fa:	bd80      	pop	{r7, pc}

080057fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005800:	4803      	ldr	r0, [pc, #12]	@ (8005810 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8005802:	f002 fb25 	bl	8007e50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8005806:	4803      	ldr	r0, [pc, #12]	@ (8005814 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8005808:	f002 fb22 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}
 8005810:	200000e0 	.word	0x200000e0
 8005814:	200002f4 	.word	0x200002f4

08005818 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800581c:	4802      	ldr	r0, [pc, #8]	@ (8005828 <TIM2_IRQHandler+0x10>)
 800581e:	f002 fb17 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	2000012c 	.word	0x2000012c

0800582c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005830:	4802      	ldr	r0, [pc, #8]	@ (800583c <USART2_IRQHandler+0x10>)
 8005832:	f003 fd57 	bl	80092e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000340 	.word	0x20000340

08005840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005844:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005848:	f000 fef8 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800584c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005850:	f000 fef4 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005854:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005858:	f000 fef0 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800585c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005860:	f000 feec 	bl	800663c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}

08005868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800586c:	4802      	ldr	r0, [pc, #8]	@ (8005878 <TIM6_DAC_IRQHandler+0x10>)
 800586e:	f002 faef 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000210 	.word	0x20000210

0800587c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005880:	4802      	ldr	r0, [pc, #8]	@ (800588c <TIM7_IRQHandler+0x10>)
 8005882:	f002 fae5 	bl	8007e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2000025c 	.word	0x2000025c

08005890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <_sbrk+0x5c>)
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <_sbrk+0x60>)
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058a4:	4b13      	ldr	r3, [pc, #76]	@ (80058f4 <_sbrk+0x64>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <_sbrk+0x64>)
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <_sbrk+0x68>)
 80058b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <_sbrk+0x64>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d207      	bcs.n	80058d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058c0:	f005 f950 	bl	800ab64 <__errno>
 80058c4:	4603      	mov	r3, r0
 80058c6:	220c      	movs	r2, #12
 80058c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	e009      	b.n	80058e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058d0:	4b08      	ldr	r3, [pc, #32]	@ (80058f4 <_sbrk+0x64>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <_sbrk+0x64>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <_sbrk+0x64>)
 80058e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058e2:	68fb      	ldr	r3, [r7, #12]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20008000 	.word	0x20008000
 80058f0:	00000400 	.word	0x00000400
 80058f4:	20001c5c 	.word	0x20001c5c
 80058f8:	20001db0 	.word	0x20001db0

080058fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <SystemInit+0x20>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	4a05      	ldr	r2, [pc, #20]	@ (800591c <SystemInit+0x20>)
 8005908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800590c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005920:	480d      	ldr	r0, [pc, #52]	@ (8005958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005922:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005924:	f7ff ffea 	bl	80058fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005928:	480c      	ldr	r0, [pc, #48]	@ (800595c <LoopForever+0x6>)
  ldr r1, =_edata
 800592a:	490d      	ldr	r1, [pc, #52]	@ (8005960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800592c:	4a0d      	ldr	r2, [pc, #52]	@ (8005964 <LoopForever+0xe>)
  movs r3, #0
 800592e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005930:	e002      	b.n	8005938 <LoopCopyDataInit>

08005932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005936:	3304      	adds	r3, #4

08005938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800593a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800593c:	d3f9      	bcc.n	8005932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800593e:	4a0a      	ldr	r2, [pc, #40]	@ (8005968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005940:	4c0a      	ldr	r4, [pc, #40]	@ (800596c <LoopForever+0x16>)
  movs r3, #0
 8005942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005944:	e001      	b.n	800594a <LoopFillZerobss>

08005946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005948:	3204      	adds	r2, #4

0800594a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800594a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800594c:	d3fb      	bcc.n	8005946 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800594e:	f005 f90f 	bl	800ab70 <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 8005952:	f7fb fd2d 	bl	80013b0 <main>

08005956 <LoopForever>:

LoopForever:
    b LoopForever
 8005956:	e7fe      	b.n	8005956 <LoopForever>
  ldr   r0, =_estack
 8005958:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800595c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005960:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005964:	0800b23c 	.word	0x0800b23c
  ldr r2, =_sbss
 8005968:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800596c:	20001dac 	.word	0x20001dac

08005970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005970:	e7fe      	b.n	8005970 <ADC1_2_IRQHandler>

08005972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800597c:	2003      	movs	r0, #3
 800597e:	f000 f939 	bl	8005bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005982:	200f      	movs	r0, #15
 8005984:	f000 f80e 	bl	80059a4 <HAL_InitTick>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	71fb      	strb	r3, [r7, #7]
 8005992:	e001      	b.n	8005998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005994:	f7ff fbbe 	bl	8005114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005998:	79fb      	ldrb	r3, [r7, #7]

}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80059b0:	4b16      	ldr	r3, [pc, #88]	@ (8005a0c <HAL_InitTick+0x68>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d022      	beq.n	80059fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80059b8:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <HAL_InitTick+0x6c>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <HAL_InitTick+0x68>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80059c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 f944 	bl	8005c5a <HAL_SYSTICK_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10f      	bne.n	80059f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b0f      	cmp	r3, #15
 80059dc:	d809      	bhi.n	80059f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059de:	2200      	movs	r2, #0
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	f000 f910 	bl	8005c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005a14 <HAL_InitTick+0x70>)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e007      	b.n	8005a02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	e004      	b.n	8005a02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
 80059fc:	e001      	b.n	8005a02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	2000001c 	.word	0x2000001c
 8005a10:	20000014 	.word	0x20000014
 8005a14:	20000018 	.word	0x20000018

08005a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_IncTick+0x1c>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_IncTick+0x20>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a03      	ldr	r2, [pc, #12]	@ (8005a34 <HAL_IncTick+0x1c>)
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20001c60 	.word	0x20001c60
 8005a38:	2000001c 	.word	0x2000001c

08005a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <HAL_GetTick+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20001c60 	.word	0x20001c60

08005a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a64:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <__NVIC_SetPriorityGrouping+0x44>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a86:	4a04      	ldr	r2, [pc, #16]	@ (8005a98 <__NVIC_SetPriorityGrouping+0x44>)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	60d3      	str	r3, [r2, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aa0:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	f003 0307 	and.w	r3, r3, #7
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db0b      	blt.n	8005ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	f003 021f 	and.w	r2, r3, #31
 8005ad0:	4907      	ldr	r1, [pc, #28]	@ (8005af0 <__NVIC_EnableIRQ+0x38>)
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2001      	movs	r0, #1
 8005ada:	fa00 f202 	lsl.w	r2, r0, r2
 8005ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e100 	.word	0xe000e100

08005af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	db0a      	blt.n	8005b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	490c      	ldr	r1, [pc, #48]	@ (8005b40 <__NVIC_SetPriority+0x4c>)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	0112      	lsls	r2, r2, #4
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	440b      	add	r3, r1
 8005b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b1c:	e00a      	b.n	8005b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4908      	ldr	r1, [pc, #32]	@ (8005b44 <__NVIC_SetPriority+0x50>)
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	3b04      	subs	r3, #4
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	440b      	add	r3, r1
 8005b32:	761a      	strb	r2, [r3, #24]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000e100 	.word	0xe000e100
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b089      	sub	sp, #36	@ 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f1c3 0307 	rsb	r3, r3, #7
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	bf28      	it	cs
 8005b66:	2304      	movcs	r3, #4
 8005b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d902      	bls.n	8005b78 <NVIC_EncodePriority+0x30>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3b03      	subs	r3, #3
 8005b76:	e000      	b.n	8005b7a <NVIC_EncodePriority+0x32>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b90:	f04f 31ff 	mov.w	r1, #4294967295
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	43d9      	mvns	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ba0:	4313      	orrs	r3, r2
         );
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3724      	adds	r7, #36	@ 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bc0:	d301      	bcc.n	8005bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e00f      	b.n	8005be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf0 <SysTick_Config+0x40>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bce:	210f      	movs	r1, #15
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	f7ff ff8e 	bl	8005af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd8:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <SysTick_Config+0x40>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bde:	4b04      	ldr	r3, [pc, #16]	@ (8005bf0 <SysTick_Config+0x40>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	e000e010 	.word	0xe000e010

08005bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff29 	bl	8005a54 <__NVIC_SetPriorityGrouping>
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	4603      	mov	r3, r0
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c18:	f7ff ff40 	bl	8005a9c <__NVIC_GetPriorityGrouping>
 8005c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	f7ff ff90 	bl	8005b48 <NVIC_EncodePriority>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff5f 	bl	8005af4 <__NVIC_SetPriority>
}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	4603      	mov	r3, r0
 8005c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff33 	bl	8005ab8 <__NVIC_EnableIRQ>
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ffa4 	bl	8005bb0 <SysTick_Config>
 8005c68:	4603      	mov	r3, r0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e08d      	b.n	8005da2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b47      	ldr	r3, [pc, #284]	@ (8005dac <HAL_DMA_Init+0x138>)
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d80f      	bhi.n	8005cb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	4b45      	ldr	r3, [pc, #276]	@ (8005db0 <HAL_DMA_Init+0x13c>)
 8005c9a:	4413      	add	r3, r2
 8005c9c:	4a45      	ldr	r2, [pc, #276]	@ (8005db4 <HAL_DMA_Init+0x140>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	009a      	lsls	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a42      	ldr	r2, [pc, #264]	@ (8005db8 <HAL_DMA_Init+0x144>)
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cb0:	e00e      	b.n	8005cd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <HAL_DMA_Init+0x148>)
 8005cba:	4413      	add	r3, r2
 8005cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8005db4 <HAL_DMA_Init+0x140>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	009a      	lsls	r2, r3, #2
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc0 <HAL_DMA_Init+0x14c>)
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa76 	bl	8006214 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d30:	d102      	bne.n	8005d38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d010      	beq.n	8005d78 <HAL_DMA_Init+0x104>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d80c      	bhi.n	8005d78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa96 	bl	8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d74:	605a      	str	r2, [r3, #4]
 8005d76:	e008      	b.n	8005d8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40020407 	.word	0x40020407
 8005db0:	bffdfff8 	.word	0xbffdfff8
 8005db4:	cccccccd 	.word	0xcccccccd
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	bffdfbf8 	.word	0xbffdfbf8
 8005dc0:	40020400 	.word	0x40020400

08005dc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_DMA_Start_IT+0x20>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e066      	b.n	8005eb2 <HAL_DMA_Start_IT+0xee>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d155      	bne.n	8005ea4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f9bb 	bl	8006198 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 020e 	orr.w	r2, r2, #14
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e00f      	b.n	8005e5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 020a 	orr.w	r2, r2, #10
 8005e5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e005      	b.n	8005eb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d005      	beq.n	8005ede <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e037      	b.n	8005f4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 020e 	bic.w	r2, r2, #14
 8005eec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005efc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00c      	beq.n	8005f4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d00d      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2204      	movs	r2, #4
 8005f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
 8005f9e:	e047      	b.n	8006030 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 020e 	bic.w	r2, r2, #14
 8005fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd4:	f003 021f 	and.w	r2, r3, #31
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006004:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800600e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
    }
  }
  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2204      	movs	r2, #4
 800605c:	409a      	lsls	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d026      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x7a>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d021      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0204 	bic.w	r2, r2, #4
 800608c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	f003 021f 	and.w	r2, r3, #31
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2104      	movs	r1, #4
 800609c:	fa01 f202 	lsl.w	r2, r1, r2
 80060a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d071      	beq.n	800618e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060b2:	e06c      	b.n	800618e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2202      	movs	r2, #2
 80060be:	409a      	lsls	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d02e      	beq.n	8006126 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d029      	beq.n	8006126 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020a 	bic.w	r2, r2, #10
 80060ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fc:	f003 021f 	and.w	r2, r3, #31
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	2102      	movs	r1, #2
 8006106:	fa01 f202 	lsl.w	r2, r1, r2
 800610a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d038      	beq.n	800618e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006124:	e033      	b.n	800618e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2208      	movs	r2, #8
 8006130:	409a      	lsls	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02a      	beq.n	8006190 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d025      	beq.n	8006190 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 020e 	bic.w	r2, r2, #14
 8006152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006158:	f003 021f 	and.w	r2, r3, #31
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f202 	lsl.w	r2, r1, r2
 8006166:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800618e:	bf00      	nop
 8006190:	bf00      	nop
}
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80061ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80061c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	f003 021f 	and.w	r2, r3, #31
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ce:	2101      	movs	r1, #1
 80061d0:	fa01 f202 	lsl.w	r2, r1, r2
 80061d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b10      	cmp	r3, #16
 80061e4:	d108      	bne.n	80061f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061f6:	e007      	b.n	8006208 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	60da      	str	r2, [r3, #12]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	4b16      	ldr	r3, [pc, #88]	@ (800627c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006224:	429a      	cmp	r2, r3
 8006226:	d802      	bhi.n	800622e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006228:	4b15      	ldr	r3, [pc, #84]	@ (8006280 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e001      	b.n	8006232 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006230:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	3b08      	subs	r3, #8
 800623e:	4a12      	ldr	r2, [pc, #72]	@ (8006288 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624c:	089b      	lsrs	r3, r3, #2
 800624e:	009a      	lsls	r2, r3, #2
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	461a      	mov	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0b      	ldr	r2, [pc, #44]	@ (800628c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800625e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	409a      	lsls	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40020407 	.word	0x40020407
 8006280:	40020800 	.word	0x40020800
 8006284:	40020820 	.word	0x40020820
 8006288:	cccccccd 	.word	0xcccccccd
 800628c:	40020880 	.word	0x40020880

08006290 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a08      	ldr	r2, [pc, #32]	@ (80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2201      	movs	r2, #1
 80062be:	409a      	lsls	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	1000823f 	.word	0x1000823f
 80062d4:	40020940 	.word	0x40020940

080062d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062e6:	e15a      	b.n	800659e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	2101      	movs	r1, #1
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 814c 	beq.w	8006598 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d005      	beq.n	8006318 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006314:	2b02      	cmp	r3, #2
 8006316:	d130      	bne.n	800637a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	2203      	movs	r2, #3
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800634e:	2201      	movs	r2, #1
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43db      	mvns	r3, r3
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4013      	ands	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	091b      	lsrs	r3, r3, #4
 8006364:	f003 0201 	and.w	r2, r3, #1
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b03      	cmp	r3, #3
 8006384:	d017      	beq.n	80063b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	2203      	movs	r2, #3
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4013      	ands	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d123      	bne.n	800640a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	08da      	lsrs	r2, r3, #3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3208      	adds	r2, #8
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	220f      	movs	r2, #15
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43db      	mvns	r3, r3
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4013      	ands	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	08da      	lsrs	r2, r3, #3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3208      	adds	r2, #8
 8006404:	6939      	ldr	r1, [r7, #16]
 8006406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	2203      	movs	r2, #3
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4013      	ands	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f003 0203 	and.w	r2, r3, #3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80a6 	beq.w	8006598 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644c:	4b5b      	ldr	r3, [pc, #364]	@ (80065bc <HAL_GPIO_Init+0x2e4>)
 800644e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006450:	4a5a      	ldr	r2, [pc, #360]	@ (80065bc <HAL_GPIO_Init+0x2e4>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	6613      	str	r3, [r2, #96]	@ 0x60
 8006458:	4b58      	ldr	r3, [pc, #352]	@ (80065bc <HAL_GPIO_Init+0x2e4>)
 800645a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006464:	4a56      	ldr	r2, [pc, #344]	@ (80065c0 <HAL_GPIO_Init+0x2e8>)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	3302      	adds	r3, #2
 800646c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	220f      	movs	r2, #15
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4013      	ands	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800648e:	d01f      	beq.n	80064d0 <HAL_GPIO_Init+0x1f8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a4c      	ldr	r2, [pc, #304]	@ (80065c4 <HAL_GPIO_Init+0x2ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d019      	beq.n	80064cc <HAL_GPIO_Init+0x1f4>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a4b      	ldr	r2, [pc, #300]	@ (80065c8 <HAL_GPIO_Init+0x2f0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_GPIO_Init+0x1f0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a4a      	ldr	r2, [pc, #296]	@ (80065cc <HAL_GPIO_Init+0x2f4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00d      	beq.n	80064c4 <HAL_GPIO_Init+0x1ec>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a49      	ldr	r2, [pc, #292]	@ (80065d0 <HAL_GPIO_Init+0x2f8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <HAL_GPIO_Init+0x1e8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a48      	ldr	r2, [pc, #288]	@ (80065d4 <HAL_GPIO_Init+0x2fc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_GPIO_Init+0x1e4>
 80064b8:	2305      	movs	r3, #5
 80064ba:	e00a      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064bc:	2306      	movs	r3, #6
 80064be:	e008      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064c0:	2304      	movs	r3, #4
 80064c2:	e006      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064c4:	2303      	movs	r3, #3
 80064c6:	e004      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e002      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <HAL_GPIO_Init+0x1fa>
 80064d0:	2300      	movs	r3, #0
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	f002 0203 	and.w	r2, r2, #3
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	4093      	lsls	r3, r2
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064e2:	4937      	ldr	r1, [pc, #220]	@ (80065c0 <HAL_GPIO_Init+0x2e8>)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	089b      	lsrs	r3, r3, #2
 80064e8:	3302      	adds	r3, #2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064f0:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4013      	ands	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006514:	4a30      	ldr	r2, [pc, #192]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800651a:	4b2f      	ldr	r3, [pc, #188]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	43db      	mvns	r3, r3
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4013      	ands	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800653e:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006544:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	43db      	mvns	r3, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006568:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800656e:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43db      	mvns	r3, r3
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006592:	4a11      	ldr	r2, [pc, #68]	@ (80065d8 <HAL_GPIO_Init+0x300>)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	3301      	adds	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f ae9d 	bne.w	80062e8 <HAL_GPIO_Init+0x10>
  }
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40010000 	.word	0x40010000
 80065c4:	48000400 	.word	0x48000400
 80065c8:	48000800 	.word	0x48000800
 80065cc:	48000c00 	.word	0x48000c00
 80065d0:	48001000 	.word	0x48001000
 80065d4:	48001400 	.word	0x48001400
 80065d8:	40010400 	.word	0x40010400

080065dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e001      	b.n	80065fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
 8006618:	4613      	mov	r3, r2
 800661a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800661c:	787b      	ldrb	r3, [r7, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006628:	e002      	b.n	8006630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800662a:	887a      	ldrh	r2, [r7, #2]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006646:	4b08      	ldr	r3, [pc, #32]	@ (8006668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d006      	beq.n	8006660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006652:	4a05      	ldr	r2, [pc, #20]	@ (8006668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb fd3c 	bl	80020d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40010400 	.word	0x40010400

0800666c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e08d      	b.n	800679a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fe fd6a 	bl	800516c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	@ 0x24
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	e006      	b.n	80066f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d108      	bne.n	800670e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670a:	605a      	str	r2, [r3, #4]
 800670c:	e007      	b.n	800671e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800671c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d138      	bne.n	800682a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e032      	b.n	800682c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	@ 0x24
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6819      	ldr	r1, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e000      	b.n	800682c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800682a:	2302      	movs	r3, #2
  }
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	d139      	bne.n	80068c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006858:	2302      	movs	r3, #2
 800685a:	e033      	b.n	80068c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	@ 0x24
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800688a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d141      	bne.n	8006962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068de:	4b4b      	ldr	r3, [pc, #300]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ea:	d131      	bne.n	8006950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068ec:	4b47      	ldr	r3, [pc, #284]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f2:	4a46      	ldr	r2, [pc, #280]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068fc:	4b43      	ldr	r3, [pc, #268]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006904:	4a41      	ldr	r2, [pc, #260]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800690a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800690c:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2232      	movs	r2, #50	@ 0x32
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4a3f      	ldr	r2, [pc, #252]	@ (8006a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	0c9b      	lsrs	r3, r3, #18
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006922:	e002      	b.n	800692a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b01      	subs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692a:	4b38      	ldr	r3, [pc, #224]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006936:	d102      	bne.n	800693e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f2      	bne.n	8006924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800693e:	4b33      	ldr	r3, [pc, #204]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694a:	d158      	bne.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e057      	b.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006950:	4b2e      	ldr	r3, [pc, #184]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006956:	4a2d      	ldr	r2, [pc, #180]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800695c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006960:	e04d      	b.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006968:	d141      	bne.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800696a:	4b28      	ldr	r3, [pc, #160]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006976:	d131      	bne.n	80069dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006978:	4b24      	ldr	r3, [pc, #144]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697e:	4a23      	ldr	r2, [pc, #140]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006988:	4b20      	ldr	r3, [pc, #128]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006990:	4a1e      	ldr	r2, [pc, #120]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006998:	4b1d      	ldr	r3, [pc, #116]	@ (8006a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2232      	movs	r2, #50	@ 0x32
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	0c9b      	lsrs	r3, r3, #18
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ae:	e002      	b.n	80069b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069b6:	4b15      	ldr	r3, [pc, #84]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c2:	d102      	bne.n	80069ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f2      	bne.n	80069b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069ca:	4b10      	ldr	r3, [pc, #64]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d6:	d112      	bne.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e011      	b.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069dc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e2:	4a0a      	ldr	r2, [pc, #40]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069ec:	e007      	b.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069ee:	4b07      	ldr	r3, [pc, #28]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069f6:	4a05      	ldr	r2, [pc, #20]	@ (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	20000014 	.word	0x20000014
 8006a14:	431bde83 	.word	0x431bde83

08006a18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a26:	6093      	str	r3, [r2, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40007000 	.word	0x40007000

08006a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e2fe      	b.n	8007048 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d075      	beq.n	8006b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a56:	4b97      	ldr	r3, [pc, #604]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a60:	4b94      	ldr	r3, [pc, #592]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	d102      	bne.n	8006a76 <HAL_RCC_OscConfig+0x3e>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d002      	beq.n	8006a7c <HAL_RCC_OscConfig+0x44>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d10b      	bne.n	8006a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d05b      	beq.n	8006b40 <HAL_RCC_OscConfig+0x108>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d157      	bne.n	8006b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e2d9      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a9c:	d106      	bne.n	8006aac <HAL_RCC_OscConfig+0x74>
 8006a9e:	4b85      	ldr	r3, [pc, #532]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a84      	ldr	r2, [pc, #528]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e01d      	b.n	8006ae8 <HAL_RCC_OscConfig+0xb0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x98>
 8006ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7e      	ldr	r2, [pc, #504]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e00b      	b.n	8006ae8 <HAL_RCC_OscConfig+0xb0>
 8006ad0:	4b78      	ldr	r3, [pc, #480]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a77      	ldr	r2, [pc, #476]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	4b75      	ldr	r3, [pc, #468]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a74      	ldr	r2, [pc, #464]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d013      	beq.n	8006b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fe ffa4 	bl	8005a3c <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af8:	f7fe ffa0 	bl	8005a3c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b64      	cmp	r3, #100	@ 0x64
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e29e      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCC_OscConfig+0xc0>
 8006b16:	e014      	b.n	8006b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fe ff90 	bl	8005a3c <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fe ff8c 	bl	8005a3c <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b64      	cmp	r3, #100	@ 0x64
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e28a      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b32:	4b60      	ldr	r3, [pc, #384]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0xe8>
 8006b3e:	e000      	b.n	8006b42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d075      	beq.n	8006c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b4e:	4b59      	ldr	r3, [pc, #356]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
 8006b56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b58:	4b56      	ldr	r3, [pc, #344]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d102      	bne.n	8006b6e <HAL_RCC_OscConfig+0x136>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d002      	beq.n	8006b74 <HAL_RCC_OscConfig+0x13c>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d11f      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b74:	4b4f      	ldr	r3, [pc, #316]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_OscConfig+0x154>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e25d      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b49      	ldr	r3, [pc, #292]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	4946      	ldr	r1, [pc, #280]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ba0:	4b45      	ldr	r3, [pc, #276]	@ (8006cb8 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fefd 	bl	80059a4 <HAL_InitTick>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d043      	beq.n	8006c38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e249      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d023      	beq.n	8006c04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fe ff38 	bl	8005a3c <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fe ff34 	bl	8005a3c <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e232      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006be2:	4b34      	ldr	r3, [pc, #208]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bee:	4b31      	ldr	r3, [pc, #196]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	492d      	ldr	r1, [pc, #180]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	604b      	str	r3, [r1, #4]
 8006c02:	e01a      	b.n	8006c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c04:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fe ff14 	bl	8005a3c <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c18:	f7fe ff10 	bl	8005a3c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e20e      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c2a:	4b22      	ldr	r3, [pc, #136]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x1e0>
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d041      	beq.n	8006cca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01c      	beq.n	8006c88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4e:	4b19      	ldr	r3, [pc, #100]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c54:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5e:	f7fe feed 	bl	8005a3c <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c66:	f7fe fee9 	bl	8005a3c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e1e7      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c78:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0ef      	beq.n	8006c66 <HAL_RCC_OscConfig+0x22e>
 8006c86:	e020      	b.n	8006cca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c88:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c8e:	4a09      	ldr	r2, [pc, #36]	@ (8006cb4 <HAL_RCC_OscConfig+0x27c>)
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c98:	f7fe fed0 	bl	8005a3c <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c9e:	e00d      	b.n	8006cbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fe fecc 	bl	8005a3c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d906      	bls.n	8006cbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e1ca      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ea      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80a6 	beq.w	8006e24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cdc:	4b84      	ldr	r3, [pc, #528]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_RCC_OscConfig+0x2b4>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_RCC_OscConfig+0x2b6>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d0e:	4b79      	ldr	r3, [pc, #484]	@ (8006ef4 <HAL_RCC_OscConfig+0x4bc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d118      	bne.n	8006d4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1a:	4b76      	ldr	r3, [pc, #472]	@ (8006ef4 <HAL_RCC_OscConfig+0x4bc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a75      	ldr	r2, [pc, #468]	@ (8006ef4 <HAL_RCC_OscConfig+0x4bc>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d26:	f7fe fe89 	bl	8005a3c <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2e:	f7fe fe85 	bl	8005a3c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e183      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d40:	4b6c      	ldr	r3, [pc, #432]	@ (8006ef4 <HAL_RCC_OscConfig+0x4bc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d108      	bne.n	8006d66 <HAL_RCC_OscConfig+0x32e>
 8006d54:	4b66      	ldr	r3, [pc, #408]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d64:	e024      	b.n	8006db0 <HAL_RCC_OscConfig+0x378>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b05      	cmp	r3, #5
 8006d6c:	d110      	bne.n	8006d90 <HAL_RCC_OscConfig+0x358>
 8006d6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d74:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d76:	f043 0304 	orr.w	r3, r3, #4
 8006d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d84:	4a5a      	ldr	r2, [pc, #360]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d86:	f043 0301 	orr.w	r3, r3, #1
 8006d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d8e:	e00f      	b.n	8006db0 <HAL_RCC_OscConfig+0x378>
 8006d90:	4b57      	ldr	r3, [pc, #348]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d96:	4a56      	ldr	r2, [pc, #344]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006da0:	4b53      	ldr	r3, [pc, #332]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da6:	4a52      	ldr	r2, [pc, #328]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006da8:	f023 0304 	bic.w	r3, r3, #4
 8006dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d016      	beq.n	8006de6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db8:	f7fe fe40 	bl	8005a3c <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc0:	f7fe fe3c 	bl	8005a3c <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e138      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd6:	4b46      	ldr	r3, [pc, #280]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0ed      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x388>
 8006de4:	e015      	b.n	8006e12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de6:	f7fe fe29 	bl	8005a3c <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dec:	e00a      	b.n	8006e04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dee:	f7fe fe25 	bl	8005a3c <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e121      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e04:	4b3a      	ldr	r3, [pc, #232]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ed      	bne.n	8006dee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e12:	7ffb      	ldrb	r3, [r7, #31]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d105      	bne.n	8006e24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e18:	4b35      	ldr	r3, [pc, #212]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1c:	4a34      	ldr	r2, [pc, #208]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d03c      	beq.n	8006eaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01c      	beq.n	8006e72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e38:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e48:	f7fe fdf8 	bl	8005a3c <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e50:	f7fe fdf4 	bl	8005a3c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0f2      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e62:	4b23      	ldr	r3, [pc, #140]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ef      	beq.n	8006e50 <HAL_RCC_OscConfig+0x418>
 8006e70:	e01b      	b.n	8006eaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e72:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e82:	f7fe fddb 	bl	8005a3c <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e88:	e008      	b.n	8006e9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e8a:	f7fe fdd7 	bl	8005a3c <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0d5      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e9c:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ef      	bne.n	8006e8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80c9 	beq.w	8007046 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	f000 8083 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d15e      	bne.n	8006f88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eca:	4b09      	ldr	r3, [pc, #36]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a08      	ldr	r2, [pc, #32]	@ (8006ef0 <HAL_RCC_OscConfig+0x4b8>)
 8006ed0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed6:	f7fe fdb1 	bl	8005a3c <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006edc:	e00c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fe fdad 	bl	8005a3c <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d905      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e0ab      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef8:	4b55      	ldr	r3, [pc, #340]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ec      	bne.n	8006ede <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f04:	4b52      	ldr	r3, [pc, #328]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	4b52      	ldr	r3, [pc, #328]	@ (8007054 <HAL_RCC_OscConfig+0x61c>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6a11      	ldr	r1, [r2, #32]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f14:	3a01      	subs	r2, #1
 8006f16:	0112      	lsls	r2, r2, #4
 8006f18:	4311      	orrs	r1, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f1e:	0212      	lsls	r2, r2, #8
 8006f20:	4311      	orrs	r1, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f26:	0852      	lsrs	r2, r2, #1
 8006f28:	3a01      	subs	r2, #1
 8006f2a:	0552      	lsls	r2, r2, #21
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f32:	0852      	lsrs	r2, r2, #1
 8006f34:	3a01      	subs	r2, #1
 8006f36:	0652      	lsls	r2, r2, #25
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f3e:	06d2      	lsls	r2, r2, #27
 8006f40:	430a      	orrs	r2, r1
 8006f42:	4943      	ldr	r1, [pc, #268]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f48:	4b41      	ldr	r3, [pc, #260]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a40      	ldr	r2, [pc, #256]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f54:	4b3e      	ldr	r3, [pc, #248]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a3d      	ldr	r2, [pc, #244]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f60:	f7fe fd6c 	bl	8005a3c <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fe fd68 	bl	8005a3c <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e066      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7a:	4b35      	ldr	r3, [pc, #212]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCC_OscConfig+0x530>
 8006f86:	e05e      	b.n	8007046 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f88:	4b31      	ldr	r3, [pc, #196]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a30      	ldr	r2, [pc, #192]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fe fd52 	bl	8005a3c <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f9c:	f7fe fd4e 	bl	8005a3c <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e04c      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fae:	4b28      	ldr	r3, [pc, #160]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006fba:	4b25      	ldr	r3, [pc, #148]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	4924      	ldr	r1, [pc, #144]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006fc0:	4b25      	ldr	r3, [pc, #148]	@ (8007058 <HAL_RCC_OscConfig+0x620>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	60cb      	str	r3, [r1, #12]
 8006fc6:	e03e      	b.n	8007046 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e039      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8007050 <HAL_RCC_OscConfig+0x618>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f003 0203 	and.w	r2, r3, #3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d12c      	bne.n	8007042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d123      	bne.n	8007042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007006:	429a      	cmp	r2, r3
 8007008:	d11b      	bne.n	8007042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007016:	429a      	cmp	r2, r3
 8007018:	d113      	bne.n	8007042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	3b01      	subs	r3, #1
 8007028:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d109      	bne.n	8007042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007038:	085b      	lsrs	r3, r3, #1
 800703a:	3b01      	subs	r3, #1
 800703c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d001      	beq.n	8007046 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40021000 	.word	0x40021000
 8007054:	019f800c 	.word	0x019f800c
 8007058:	feeefffc 	.word	0xfeeefffc

0800705c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e11e      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007074:	4b91      	ldr	r3, [pc, #580]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d910      	bls.n	80070a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007082:	4b8e      	ldr	r3, [pc, #568]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 020f 	bic.w	r2, r3, #15
 800708a:	498c      	ldr	r1, [pc, #560]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007092:	4b8a      	ldr	r3, [pc, #552]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d001      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e106      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d073      	beq.n	8007198 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d129      	bne.n	800710c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070b8:	4b81      	ldr	r3, [pc, #516]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0f4      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80070c8:	f000 f99e 	bl	8007408 <RCC_GetSysClockFreqFromPLLSource>
 80070cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4a7c      	ldr	r2, [pc, #496]	@ (80072c4 <HAL_RCC_ClockConfig+0x268>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d93f      	bls.n	8007156 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070d6:	4b7a      	ldr	r3, [pc, #488]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d033      	beq.n	8007156 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d12f      	bne.n	8007156 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070f6:	4b72      	ldr	r3, [pc, #456]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070fe:	4a70      	ldr	r2, [pc, #448]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007106:	2380      	movs	r3, #128	@ 0x80
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e024      	b.n	8007156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d107      	bne.n	8007124 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007114:	4b6a      	ldr	r3, [pc, #424]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0c6      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007124:	4b66      	ldr	r3, [pc, #408]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0be      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007134:	f000 f8ce 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8007138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4a61      	ldr	r2, [pc, #388]	@ (80072c4 <HAL_RCC_ClockConfig+0x268>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d909      	bls.n	8007156 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007142:	4b5f      	ldr	r3, [pc, #380]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800714a:	4a5d      	ldr	r2, [pc, #372]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 800714c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007150:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007152:	2380      	movs	r3, #128	@ 0x80
 8007154:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007156:	4b5a      	ldr	r3, [pc, #360]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f023 0203 	bic.w	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	4957      	ldr	r1, [pc, #348]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007164:	4313      	orrs	r3, r2
 8007166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007168:	f7fe fc68 	bl	8005a3c <HAL_GetTick>
 800716c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716e:	e00a      	b.n	8007186 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007170:	f7fe fc64 	bl	8005a3c <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e095      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	4b4e      	ldr	r3, [pc, #312]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 020c 	and.w	r2, r3, #12
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	429a      	cmp	r2, r3
 8007196:	d1eb      	bne.n	8007170 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d023      	beq.n	80071ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071b0:	4b43      	ldr	r3, [pc, #268]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a42      	ldr	r2, [pc, #264]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80071c8:	4b3d      	ldr	r3, [pc, #244]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071d0:	4a3b      	ldr	r2, [pc, #236]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d8:	4b39      	ldr	r3, [pc, #228]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4936      	ldr	r1, [pc, #216]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
 80071ea:	e008      	b.n	80071fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b80      	cmp	r3, #128	@ 0x80
 80071f0:	d105      	bne.n	80071fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80071f2:	4b33      	ldr	r3, [pc, #204]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4a32      	ldr	r2, [pc, #200]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 80071f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071fe:	4b2f      	ldr	r3, [pc, #188]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d21d      	bcs.n	8007248 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800720c:	4b2b      	ldr	r3, [pc, #172]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f023 020f 	bic.w	r2, r3, #15
 8007214:	4929      	ldr	r1, [pc, #164]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	4313      	orrs	r3, r2
 800721a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800721c:	f7fe fc0e 	bl	8005a3c <HAL_GetTick>
 8007220:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007222:	e00a      	b.n	800723a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007224:	f7fe fc0a 	bl	8005a3c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e03b      	b.n	80072b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	4b20      	ldr	r3, [pc, #128]	@ (80072bc <HAL_RCC_ClockConfig+0x260>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d1ed      	bne.n	8007224 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007254:	4b1a      	ldr	r3, [pc, #104]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4917      	ldr	r1, [pc, #92]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007262:	4313      	orrs	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007272:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	490f      	ldr	r1, [pc, #60]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 8007282:	4313      	orrs	r3, r2
 8007284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007286:	f000 f825 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 800728a:	4602      	mov	r2, r0
 800728c:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <HAL_RCC_ClockConfig+0x264>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	091b      	lsrs	r3, r3, #4
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	490c      	ldr	r1, [pc, #48]	@ (80072c8 <HAL_RCC_ClockConfig+0x26c>)
 8007298:	5ccb      	ldrb	r3, [r1, r3]
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	4a0a      	ldr	r2, [pc, #40]	@ (80072cc <HAL_RCC_ClockConfig+0x270>)
 80072a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80072a6:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <HAL_RCC_ClockConfig+0x274>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fb7a 	bl	80059a4 <HAL_InitTick>
 80072b0:	4603      	mov	r3, r0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	40022000 	.word	0x40022000
 80072c0:	40021000 	.word	0x40021000
 80072c4:	04c4b400 	.word	0x04c4b400
 80072c8:	0800b1e4 	.word	0x0800b1e4
 80072cc:	20000014 	.word	0x20000014
 80072d0:	20000018 	.word	0x20000018

080072d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072da:	4b2c      	ldr	r3, [pc, #176]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 030c 	and.w	r3, r3, #12
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d102      	bne.n	80072ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007390 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	e047      	b.n	800737c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80072ec:	4b27      	ldr	r3, [pc, #156]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d102      	bne.n	80072fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072f8:	4b26      	ldr	r3, [pc, #152]	@ (8007394 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e03e      	b.n	800737c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072fe:	4b23      	ldr	r3, [pc, #140]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b0c      	cmp	r3, #12
 8007308:	d136      	bne.n	8007378 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800730a:	4b20      	ldr	r3, [pc, #128]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	3301      	adds	r3, #1
 8007320:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b03      	cmp	r3, #3
 8007326:	d10c      	bne.n	8007342 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007328:	4a1a      	ldr	r2, [pc, #104]	@ (8007394 <HAL_RCC_GetSysClockFreq+0xc0>)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	4a16      	ldr	r2, [pc, #88]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007332:	68d2      	ldr	r2, [r2, #12]
 8007334:	0a12      	lsrs	r2, r2, #8
 8007336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	617b      	str	r3, [r7, #20]
      break;
 8007340:	e00c      	b.n	800735c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007342:	4a13      	ldr	r2, [pc, #76]	@ (8007390 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	4a10      	ldr	r2, [pc, #64]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 800734c:	68d2      	ldr	r2, [r2, #12]
 800734e:	0a12      	lsrs	r2, r2, #8
 8007350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	617b      	str	r3, [r7, #20]
      break;
 800735a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800735c:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <HAL_RCC_GetSysClockFreq+0xb8>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	0e5b      	lsrs	r3, r3, #25
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e001      	b.n	800737c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800737c:	693b      	ldr	r3, [r7, #16]
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
 8007390:	00f42400 	.word	0x00f42400
 8007394:	007a1200 	.word	0x007a1200

08007398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800739c:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <HAL_RCC_GetHCLKFreq+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000014 	.word	0x20000014

080073b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073b4:	f7ff fff0 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b06      	ldr	r3, [pc, #24]	@ (80073d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4904      	ldr	r1, [pc, #16]	@ (80073d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40021000 	.word	0x40021000
 80073d8:	0800b1f4 	.word	0x0800b1f4

080073dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073e0:	f7ff ffda 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073e4:	4602      	mov	r2, r0
 80073e6:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	0adb      	lsrs	r3, r3, #11
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073f2:	5ccb      	ldrb	r3, [r1, r3]
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	0800b1f4 	.word	0x0800b1f4

08007408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800740e:	4b1e      	ldr	r3, [pc, #120]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007418:	4b1b      	ldr	r3, [pc, #108]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	3301      	adds	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d10c      	bne.n	8007446 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800742c:	4a17      	ldr	r2, [pc, #92]	@ (800748c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	fbb2 f3f3 	udiv	r3, r2, r3
 8007434:	4a14      	ldr	r2, [pc, #80]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007436:	68d2      	ldr	r2, [r2, #12]
 8007438:	0a12      	lsrs	r2, r2, #8
 800743a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	617b      	str	r3, [r7, #20]
    break;
 8007444:	e00c      	b.n	8007460 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007446:	4a12      	ldr	r2, [pc, #72]	@ (8007490 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	fbb2 f3f3 	udiv	r3, r2, r3
 800744e:	4a0e      	ldr	r2, [pc, #56]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007450:	68d2      	ldr	r2, [r2, #12]
 8007452:	0a12      	lsrs	r2, r2, #8
 8007454:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007458:	fb02 f303 	mul.w	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]
    break;
 800745e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007460:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	0e5b      	lsrs	r3, r3, #25
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	3301      	adds	r3, #1
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	fbb2 f3f3 	udiv	r3, r2, r3
 8007478:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800747a:	687b      	ldr	r3, [r7, #4]
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40021000 	.word	0x40021000
 800748c:	007a1200 	.word	0x007a1200
 8007490:	00f42400 	.word	0x00f42400

08007494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800749c:	2300      	movs	r3, #0
 800749e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074a0:	2300      	movs	r3, #0
 80074a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8098 	beq.w	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074b2:	2300      	movs	r3, #0
 80074b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074b6:	4b43      	ldr	r3, [pc, #268]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074c2:	4b40      	ldr	r3, [pc, #256]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c6:	4a3f      	ldr	r2, [pc, #252]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ce:	4b3d      	ldr	r3, [pc, #244]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074da:	2301      	movs	r3, #1
 80074dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074de:	4b3a      	ldr	r3, [pc, #232]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a39      	ldr	r2, [pc, #228]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ea:	f7fe faa7 	bl	8005a3c <HAL_GetTick>
 80074ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074f0:	e009      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f2:	f7fe faa3 	bl	8005a3c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d902      	bls.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	74fb      	strb	r3, [r7, #19]
        break;
 8007504:	e005      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007506:	4b30      	ldr	r3, [pc, #192]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ef      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007512:	7cfb      	ldrb	r3, [r7, #19]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d159      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007518:	4b2a      	ldr	r3, [pc, #168]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800751a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007522:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01e      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	429a      	cmp	r2, r3
 8007532:	d019      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007534:	4b23      	ldr	r3, [pc, #140]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800753e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007540:	4b20      	ldr	r3, [pc, #128]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007546:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800754c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007550:	4b1c      	ldr	r3, [pc, #112]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007556:	4a1b      	ldr	r2, [pc, #108]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800755c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007560:	4a18      	ldr	r2, [pc, #96]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d016      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007572:	f7fe fa63 	bl	8005a3c <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007578:	e00b      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757a:	f7fe fa5f 	bl	8005a3c <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007588:	4293      	cmp	r3, r2
 800758a:	d902      	bls.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	74fb      	strb	r3, [r7, #19]
            break;
 8007590:	e006      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007592:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0ec      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b4:	4903      	ldr	r1, [pc, #12]	@ (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80075bc:	e008      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075be:	7cfb      	ldrb	r3, [r7, #19]
 80075c0:	74bb      	strb	r3, [r7, #18]
 80075c2:	e005      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80075c4:	40021000 	.word	0x40021000
 80075c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075d0:	7c7b      	ldrb	r3, [r7, #17]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d105      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075d6:	4ba6      	ldr	r3, [pc, #664]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075da:	4aa5      	ldr	r2, [pc, #660]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075ee:	4ba0      	ldr	r3, [pc, #640]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f4:	f023 0203 	bic.w	r2, r3, #3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	499c      	ldr	r1, [pc, #624]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007610:	4b97      	ldr	r3, [pc, #604]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	f023 020c 	bic.w	r2, r3, #12
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	4994      	ldr	r1, [pc, #592]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007632:	4b8f      	ldr	r3, [pc, #572]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007638:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	498b      	ldr	r1, [pc, #556]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007654:	4b86      	ldr	r3, [pc, #536]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	4983      	ldr	r1, [pc, #524]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007676:	4b7e      	ldr	r3, [pc, #504]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	497a      	ldr	r1, [pc, #488]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007698:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	4972      	ldr	r1, [pc, #456]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	4969      	ldr	r1, [pc, #420]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076dc:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	4961      	ldr	r1, [pc, #388]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	4958      	ldr	r1, [pc, #352]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007720:	4b53      	ldr	r3, [pc, #332]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772e:	4950      	ldr	r1, [pc, #320]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007740:	4b4b      	ldr	r3, [pc, #300]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4a4a      	ldr	r2, [pc, #296]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800774a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007758:	4b45      	ldr	r3, [pc, #276]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	4942      	ldr	r1, [pc, #264]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007776:	d105      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007778:	4b3d      	ldr	r3, [pc, #244]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a3c      	ldr	r2, [pc, #240]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007782:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007790:	4b37      	ldr	r3, [pc, #220]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007796:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779e:	4934      	ldr	r1, [pc, #208]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ae:	d105      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077c8:	4b29      	ldr	r3, [pc, #164]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d6:	4926      	ldr	r1, [pc, #152]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077e8:	4b21      	ldr	r3, [pc, #132]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4a20      	ldr	r2, [pc, #128]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d015      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007800:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007806:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780e:	4918      	ldr	r1, [pc, #96]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800781e:	d105      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007820:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a12      	ldr	r2, [pc, #72]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d015      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007838:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800783a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	490a      	ldr	r1, [pc, #40]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007856:	d105      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4a04      	ldr	r2, [pc, #16]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007862:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007864:	7cbb      	ldrb	r3, [r7, #18]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40021000 	.word	0x40021000

08007874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e049      	b.n	800791a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fd fd2c 	bl	80052f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f000 fe52 	bl	800855c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d001      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e04a      	b.n	80079d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a21      	ldr	r2, [pc, #132]	@ (80079e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x6c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007966:	d013      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x6c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1d      	ldr	r2, [pc, #116]	@ (80079e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x6c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x6c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1a      	ldr	r2, [pc, #104]	@ (80079ec <HAL_TIM_Base_Start_IT+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x6c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a19      	ldr	r2, [pc, #100]	@ (80079f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d115      	bne.n	80079bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	4b17      	ldr	r3, [pc, #92]	@ (80079f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007998:	4013      	ands	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d015      	beq.n	80079ce <HAL_TIM_Base_Start_IT+0xaa>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a8:	d011      	beq.n	80079ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	e008      	b.n	80079ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	e000      	b.n	80079d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	00010007 	.word	0x00010007

080079f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a1a      	ldr	r2, [r3, #32]
 8007a16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <HAL_TIM_Base_Stop_IT+0x48>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIM_Base_Stop_IT+0x48>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e049      	b.n	8007afc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fd fbed 	bl	800525c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f000 fd61 	bl	800855c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d109      	bne.n	8007b28 <HAL_TIM_PWM_Start+0x24>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e03c      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x9e>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d109      	bne.n	8007b42 <HAL_TIM_PWM_Start+0x3e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	e02f      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x9e>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d109      	bne.n	8007b5c <HAL_TIM_PWM_Start+0x58>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e022      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x9e>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b0c      	cmp	r3, #12
 8007b60:	d109      	bne.n	8007b76 <HAL_TIM_PWM_Start+0x72>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	e015      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x9e>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d109      	bne.n	8007b90 <HAL_TIM_PWM_Start+0x8c>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e008      	b.n	8007ba2 <HAL_TIM_PWM_Start+0x9e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	bf14      	ite	ne
 8007b9c:	2301      	movne	r3, #1
 8007b9e:	2300      	moveq	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e097      	b.n	8007cda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_PWM_Start+0xb6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb8:	e023      	b.n	8007c02 <HAL_TIM_PWM_Start+0xfe>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_PWM_Start+0xc6>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bc8:	e01b      	b.n	8007c02 <HAL_TIM_PWM_Start+0xfe>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_PWM_Start+0xd6>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bd8:	e013      	b.n	8007c02 <HAL_TIM_PWM_Start+0xfe>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b0c      	cmp	r3, #12
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_PWM_Start+0xe6>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_PWM_Start+0xfe>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_PWM_Start+0xf6>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf8:	e003      	b.n	8007c02 <HAL_TIM_PWM_Start+0xfe>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2201      	movs	r2, #1
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f8d4 	bl	8008db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a33      	ldr	r2, [pc, #204]	@ (8007ce4 <HAL_TIM_PWM_Start+0x1e0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <HAL_TIM_PWM_Start+0x13e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a32      	ldr	r2, [pc, #200]	@ (8007ce8 <HAL_TIM_PWM_Start+0x1e4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00e      	beq.n	8007c42 <HAL_TIM_PWM_Start+0x13e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a30      	ldr	r2, [pc, #192]	@ (8007cec <HAL_TIM_PWM_Start+0x1e8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <HAL_TIM_PWM_Start+0x13e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf0 <HAL_TIM_PWM_Start+0x1ec>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <HAL_TIM_PWM_Start+0x13e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1f0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d101      	bne.n	8007c46 <HAL_TIM_PWM_Start+0x142>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <HAL_TIM_PWM_Start+0x144>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a20      	ldr	r2, [pc, #128]	@ (8007ce4 <HAL_TIM_PWM_Start+0x1e0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x194>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6e:	d013      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x194>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a20      	ldr	r2, [pc, #128]	@ (8007cf8 <HAL_TIM_PWM_Start+0x1f4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x194>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cfc <HAL_TIM_PWM_Start+0x1f8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x194>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a17      	ldr	r2, [pc, #92]	@ (8007ce8 <HAL_TIM_PWM_Start+0x1e4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIM_PWM_Start+0x194>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a16      	ldr	r2, [pc, #88]	@ (8007cec <HAL_TIM_PWM_Start+0x1e8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d115      	bne.n	8007cc4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	4b18      	ldr	r3, [pc, #96]	@ (8007d00 <HAL_TIM_PWM_Start+0x1fc>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b06      	cmp	r3, #6
 8007ca8:	d015      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x1d2>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb0:	d011      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	e008      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e000      	b.n	8007cd8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	00010007 	.word	0x00010007

08007d04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e097      	b.n	8007e48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fd fb5b 	bl	80053e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007d48:	f023 0307 	bic.w	r3, r3, #7
 8007d4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f000 fbff 	bl	800855c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	4313      	orrs	r3, r2
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007da4:	f023 030c 	bic.w	r3, r3, #12
 8007da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	011a      	lsls	r2, r3, #4
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	031b      	lsls	r3, r3, #12
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007dea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	4313      	orrs	r3, r2
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d020      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01b      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0202 	mvn.w	r2, #2
 8007e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 0303 	and.w	r3, r3, #3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fb40 	bl	8008520 <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fb32 	bl	800850c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb43 	bl	8008534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d020      	beq.n	8007f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01b      	beq.n	8007f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f06f 0204 	mvn.w	r2, #4
 8007ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fb1a 	bl	8008520 <HAL_TIM_IC_CaptureCallback>
 8007eec:	e005      	b.n	8007efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fb0c 	bl	800850c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fb1d 	bl	8008534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 0308 	and.w	r3, r3, #8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d020      	beq.n	8007f4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f003 0308 	and.w	r3, r3, #8
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01b      	beq.n	8007f4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0208 	mvn.w	r2, #8
 8007f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2204      	movs	r2, #4
 8007f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 faf4 	bl	8008520 <HAL_TIM_IC_CaptureCallback>
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fae6 	bl	800850c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 faf7 	bl	8008534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d020      	beq.n	8007f98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01b      	beq.n	8007f98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0210 	mvn.w	r2, #16
 8007f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 face 	bl	8008520 <HAL_TIM_IC_CaptureCallback>
 8007f84:	e005      	b.n	8007f92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fac0 	bl	800850c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fad1 	bl	8008534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00c      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0201 	mvn.w	r2, #1
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fa f82c 	bl	8002014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f825 	bl	8009034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f81d 	bl	8009048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800802a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fa8b 	bl	8008548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f06f 0220 	mvn.w	r2, #32
 800804e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 ffe5 	bl	8009020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fff1 	bl	800905c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 ffe9 	bl	8009070 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 ffe1 	bl	8009084 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00c      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80080de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 ffd9 	bl	8009098 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800810a:	2302      	movs	r3, #2
 800810c:	e0ff      	b.n	800830e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b14      	cmp	r3, #20
 800811a:	f200 80f0 	bhi.w	80082fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008179 	.word	0x08008179
 8008128:	080082ff 	.word	0x080082ff
 800812c:	080082ff 	.word	0x080082ff
 8008130:	080082ff 	.word	0x080082ff
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080082ff 	.word	0x080082ff
 800813c:	080082ff 	.word	0x080082ff
 8008140:	080082ff 	.word	0x080082ff
 8008144:	080081fb 	.word	0x080081fb
 8008148:	080082ff 	.word	0x080082ff
 800814c:	080082ff 	.word	0x080082ff
 8008150:	080082ff 	.word	0x080082ff
 8008154:	0800823b 	.word	0x0800823b
 8008158:	080082ff 	.word	0x080082ff
 800815c:	080082ff 	.word	0x080082ff
 8008160:	080082ff 	.word	0x080082ff
 8008164:	0800827d 	.word	0x0800827d
 8008168:	080082ff 	.word	0x080082ff
 800816c:	080082ff 	.word	0x080082ff
 8008170:	080082ff 	.word	0x080082ff
 8008174:	080082bd 	.word	0x080082bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fa88 	bl	8008694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0208 	orr.w	r2, r2, #8
 8008192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0204 	bic.w	r2, r2, #4
 80081a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6999      	ldr	r1, [r3, #24]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	691a      	ldr	r2, [r3, #16]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	619a      	str	r2, [r3, #24]
      break;
 80081b6:	e0a5      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 faf8 	bl	80087b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699a      	ldr	r2, [r3, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6999      	ldr	r1, [r3, #24]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	021a      	lsls	r2, r3, #8
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	430a      	orrs	r2, r1
 80081f6:	619a      	str	r2, [r3, #24]
      break;
 80081f8:	e084      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fb61 	bl	80088c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0208 	orr.w	r2, r2, #8
 8008214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0204 	bic.w	r2, r2, #4
 8008224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69d9      	ldr	r1, [r3, #28]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	61da      	str	r2, [r3, #28]
      break;
 8008238:	e064      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fbc9 	bl	80089d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69da      	ldr	r2, [r3, #28]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69d9      	ldr	r1, [r3, #28]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	021a      	lsls	r2, r3, #8
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	61da      	str	r2, [r3, #28]
      break;
 800827a:	e043      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fc32 	bl	8008aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0208 	orr.w	r2, r2, #8
 8008296:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0204 	bic.w	r2, r2, #4
 80082a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80082ba:	e023      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fc76 	bl	8008bb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	021a      	lsls	r2, r3, #8
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80082fc:	e002      	b.n	8008304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
      break;
 8008302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop

08008318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_TIM_ConfigClockSource+0x1c>
 8008330:	2302      	movs	r3, #2
 8008332:	e0de      	b.n	80084f2 <HAL_TIM_ConfigClockSource+0x1da>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800835e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a63      	ldr	r2, [pc, #396]	@ (80084fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	f000 80a9 	beq.w	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008374:	4a61      	ldr	r2, [pc, #388]	@ (80084fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	f200 80ae 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800837c:	4a60      	ldr	r2, [pc, #384]	@ (8008500 <HAL_TIM_ConfigClockSource+0x1e8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	f000 80a1 	beq.w	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008384:	4a5e      	ldr	r2, [pc, #376]	@ (8008500 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	f200 80a6 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800838c:	4a5d      	ldr	r2, [pc, #372]	@ (8008504 <HAL_TIM_ConfigClockSource+0x1ec>)
 800838e:	4293      	cmp	r3, r2
 8008390:	f000 8099 	beq.w	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008394:	4a5b      	ldr	r2, [pc, #364]	@ (8008504 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	f200 809e 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800839c:	4a5a      	ldr	r2, [pc, #360]	@ (8008508 <HAL_TIM_ConfigClockSource+0x1f0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	f000 8091 	beq.w	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80083a4:	4a58      	ldr	r2, [pc, #352]	@ (8008508 <HAL_TIM_ConfigClockSource+0x1f0>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	f200 8096 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80083b0:	f000 8089 	beq.w	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80083b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80083b8:	f200 808e 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083c0:	d03e      	beq.n	8008440 <HAL_TIM_ConfigClockSource+0x128>
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083c6:	f200 8087 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ce:	f000 8086 	beq.w	80084de <HAL_TIM_ConfigClockSource+0x1c6>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083d6:	d87f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083d8:	2b70      	cmp	r3, #112	@ 0x70
 80083da:	d01a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0xfa>
 80083dc:	2b70      	cmp	r3, #112	@ 0x70
 80083de:	d87b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083e0:	2b60      	cmp	r3, #96	@ 0x60
 80083e2:	d050      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x16e>
 80083e4:	2b60      	cmp	r3, #96	@ 0x60
 80083e6:	d877      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083e8:	2b50      	cmp	r3, #80	@ 0x50
 80083ea:	d03c      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0x14e>
 80083ec:	2b50      	cmp	r3, #80	@ 0x50
 80083ee:	d873      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083f0:	2b40      	cmp	r3, #64	@ 0x40
 80083f2:	d058      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x18e>
 80083f4:	2b40      	cmp	r3, #64	@ 0x40
 80083f6:	d86f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80083f8:	2b30      	cmp	r3, #48	@ 0x30
 80083fa:	d064      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80083fc:	2b30      	cmp	r3, #48	@ 0x30
 80083fe:	d86b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008400:	2b20      	cmp	r3, #32
 8008402:	d060      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d867      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d05c      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800840c:	2b10      	cmp	r3, #16
 800840e:	d05a      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008410:	e062      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008422:	f000 fca9 	bl	8008d78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
      break;
 800843e:	e04f      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008450:	f000 fc92 	bl	8008d78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008462:	609a      	str	r2, [r3, #8]
      break;
 8008464:	e03c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	461a      	mov	r2, r3
 8008474:	f000 fc04 	bl	8008c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2150      	movs	r1, #80	@ 0x50
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fc5d 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 8008484:	e02c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008492:	461a      	mov	r2, r3
 8008494:	f000 fc23 	bl	8008cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2160      	movs	r1, #96	@ 0x60
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fc4d 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 80084a4:	e01c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	461a      	mov	r2, r3
 80084b4:	f000 fbe4 	bl	8008c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2140      	movs	r1, #64	@ 0x40
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fc3d 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 80084c4:	e00c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f000 fc34 	bl	8008d3e <TIM_ITRx_SetConfig>
      break;
 80084d6:	e003      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e000      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80084de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	00100070 	.word	0x00100070
 8008500:	00100040 	.word	0x00100040
 8008504:	00100030 	.word	0x00100030
 8008508:	00100020 	.word	0x00100020

0800850c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a42      	ldr	r2, [pc, #264]	@ (8008678 <TIM_Base_SetConfig+0x11c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00f      	beq.n	8008594 <TIM_Base_SetConfig+0x38>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857a:	d00b      	beq.n	8008594 <TIM_Base_SetConfig+0x38>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3f      	ldr	r2, [pc, #252]	@ (800867c <TIM_Base_SetConfig+0x120>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d007      	beq.n	8008594 <TIM_Base_SetConfig+0x38>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3e      	ldr	r2, [pc, #248]	@ (8008680 <TIM_Base_SetConfig+0x124>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_Base_SetConfig+0x38>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a3d      	ldr	r2, [pc, #244]	@ (8008684 <TIM_Base_SetConfig+0x128>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d108      	bne.n	80085a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a33      	ldr	r2, [pc, #204]	@ (8008678 <TIM_Base_SetConfig+0x11c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01b      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b4:	d017      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a30      	ldr	r2, [pc, #192]	@ (800867c <TIM_Base_SetConfig+0x120>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d013      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008680 <TIM_Base_SetConfig+0x124>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00f      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008684 <TIM_Base_SetConfig+0x128>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008688 <TIM_Base_SetConfig+0x12c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2c      	ldr	r2, [pc, #176]	@ (800868c <TIM_Base_SetConfig+0x130>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_Base_SetConfig+0x8a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008690 <TIM_Base_SetConfig+0x134>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d108      	bne.n	80085f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a16      	ldr	r2, [pc, #88]	@ (8008678 <TIM_Base_SetConfig+0x11c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00f      	beq.n	8008644 <TIM_Base_SetConfig+0xe8>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a17      	ldr	r2, [pc, #92]	@ (8008684 <TIM_Base_SetConfig+0x128>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00b      	beq.n	8008644 <TIM_Base_SetConfig+0xe8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a16      	ldr	r2, [pc, #88]	@ (8008688 <TIM_Base_SetConfig+0x12c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d007      	beq.n	8008644 <TIM_Base_SetConfig+0xe8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a15      	ldr	r2, [pc, #84]	@ (800868c <TIM_Base_SetConfig+0x130>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d003      	beq.n	8008644 <TIM_Base_SetConfig+0xe8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a14      	ldr	r2, [pc, #80]	@ (8008690 <TIM_Base_SetConfig+0x134>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d103      	bne.n	800864c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f023 0201 	bic.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	611a      	str	r2, [r3, #16]
  }
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40012c00 	.word	0x40012c00
 800867c:	40000400 	.word	0x40000400
 8008680:	40000800 	.word	0x40000800
 8008684:	40013400 	.word	0x40013400
 8008688:	40014000 	.word	0x40014000
 800868c:	40014400 	.word	0x40014400
 8008690:	40014800 	.word	0x40014800

08008694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	f023 0201 	bic.w	r2, r3, #1
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 0302 	bic.w	r3, r3, #2
 80086e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a2c      	ldr	r2, [pc, #176]	@ (80087a0 <TIM_OC1_SetConfig+0x10c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_OC1_SetConfig+0x80>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a2b      	ldr	r2, [pc, #172]	@ (80087a4 <TIM_OC1_SetConfig+0x110>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_OC1_SetConfig+0x80>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2a      	ldr	r2, [pc, #168]	@ (80087a8 <TIM_OC1_SetConfig+0x114>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_OC1_SetConfig+0x80>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a29      	ldr	r2, [pc, #164]	@ (80087ac <TIM_OC1_SetConfig+0x118>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC1_SetConfig+0x80>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a28      	ldr	r2, [pc, #160]	@ (80087b0 <TIM_OC1_SetConfig+0x11c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10c      	bne.n	800872e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0308 	bic.w	r3, r3, #8
 800871a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0304 	bic.w	r3, r3, #4
 800872c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1b      	ldr	r2, [pc, #108]	@ (80087a0 <TIM_OC1_SetConfig+0x10c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00f      	beq.n	8008756 <TIM_OC1_SetConfig+0xc2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a1a      	ldr	r2, [pc, #104]	@ (80087a4 <TIM_OC1_SetConfig+0x110>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00b      	beq.n	8008756 <TIM_OC1_SetConfig+0xc2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a19      	ldr	r2, [pc, #100]	@ (80087a8 <TIM_OC1_SetConfig+0x114>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <TIM_OC1_SetConfig+0xc2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <TIM_OC1_SetConfig+0x118>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_OC1_SetConfig+0xc2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <TIM_OC1_SetConfig+0x11c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d111      	bne.n	800877a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800875c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	621a      	str	r2, [r3, #32]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40012c00 	.word	0x40012c00
 80087a4:	40013400 	.word	0x40013400
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	40014800 	.word	0x40014800

080087b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	f023 0210 	bic.w	r2, r3, #16
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f023 0320 	bic.w	r3, r3, #32
 8008802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a28      	ldr	r2, [pc, #160]	@ (80088b4 <TIM_OC2_SetConfig+0x100>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_OC2_SetConfig+0x6c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a27      	ldr	r2, [pc, #156]	@ (80088b8 <TIM_OC2_SetConfig+0x104>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10d      	bne.n	800883c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800883a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a1d      	ldr	r2, [pc, #116]	@ (80088b4 <TIM_OC2_SetConfig+0x100>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d00f      	beq.n	8008864 <TIM_OC2_SetConfig+0xb0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a1c      	ldr	r2, [pc, #112]	@ (80088b8 <TIM_OC2_SetConfig+0x104>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00b      	beq.n	8008864 <TIM_OC2_SetConfig+0xb0>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a1b      	ldr	r2, [pc, #108]	@ (80088bc <TIM_OC2_SetConfig+0x108>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d007      	beq.n	8008864 <TIM_OC2_SetConfig+0xb0>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a1a      	ldr	r2, [pc, #104]	@ (80088c0 <TIM_OC2_SetConfig+0x10c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_OC2_SetConfig+0xb0>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a19      	ldr	r2, [pc, #100]	@ (80088c4 <TIM_OC2_SetConfig+0x110>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d113      	bne.n	800888c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800886a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40013400 	.word	0x40013400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a27      	ldr	r2, [pc, #156]	@ (80089c4 <TIM_OC3_SetConfig+0xfc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_OC3_SetConfig+0x6a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a26      	ldr	r2, [pc, #152]	@ (80089c8 <TIM_OC3_SetConfig+0x100>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10d      	bne.n	800894e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800894c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1c      	ldr	r2, [pc, #112]	@ (80089c4 <TIM_OC3_SetConfig+0xfc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00f      	beq.n	8008976 <TIM_OC3_SetConfig+0xae>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1b      	ldr	r2, [pc, #108]	@ (80089c8 <TIM_OC3_SetConfig+0x100>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00b      	beq.n	8008976 <TIM_OC3_SetConfig+0xae>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1a      	ldr	r2, [pc, #104]	@ (80089cc <TIM_OC3_SetConfig+0x104>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d007      	beq.n	8008976 <TIM_OC3_SetConfig+0xae>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a19      	ldr	r2, [pc, #100]	@ (80089d0 <TIM_OC3_SetConfig+0x108>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d003      	beq.n	8008976 <TIM_OC3_SetConfig+0xae>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <TIM_OC3_SetConfig+0x10c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d113      	bne.n	800899e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800897c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	621a      	str	r2, [r3, #32]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	40013400 	.word	0x40013400
 80089cc:	40014000 	.word	0x40014000
 80089d0:	40014400 	.word	0x40014400
 80089d4:	40014800 	.word	0x40014800

080089d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a28      	ldr	r2, [pc, #160]	@ (8008ad8 <TIM_OC4_SetConfig+0x100>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC4_SetConfig+0x6c>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a27      	ldr	r2, [pc, #156]	@ (8008adc <TIM_OC4_SetConfig+0x104>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10d      	bne.n	8008a60 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	031b      	lsls	r3, r3, #12
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad8 <TIM_OC4_SetConfig+0x100>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00f      	beq.n	8008a88 <TIM_OC4_SetConfig+0xb0>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008adc <TIM_OC4_SetConfig+0x104>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00b      	beq.n	8008a88 <TIM_OC4_SetConfig+0xb0>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae0 <TIM_OC4_SetConfig+0x108>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d007      	beq.n	8008a88 <TIM_OC4_SetConfig+0xb0>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae4 <TIM_OC4_SetConfig+0x10c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_OC4_SetConfig+0xb0>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a19      	ldr	r2, [pc, #100]	@ (8008ae8 <TIM_OC4_SetConfig+0x110>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d113      	bne.n	8008ab0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	019b      	lsls	r3, r3, #6
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	019b      	lsls	r3, r3, #6
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40012c00 	.word	0x40012c00
 8008adc:	40013400 	.word	0x40013400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800

08008aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <TIM_OC5_SetConfig+0xb4>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00f      	beq.n	8008b66 <TIM_OC5_SetConfig+0x7a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a16      	ldr	r2, [pc, #88]	@ (8008ba4 <TIM_OC5_SetConfig+0xb8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00b      	beq.n	8008b66 <TIM_OC5_SetConfig+0x7a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a15      	ldr	r2, [pc, #84]	@ (8008ba8 <TIM_OC5_SetConfig+0xbc>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d007      	beq.n	8008b66 <TIM_OC5_SetConfig+0x7a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a14      	ldr	r2, [pc, #80]	@ (8008bac <TIM_OC5_SetConfig+0xc0>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d003      	beq.n	8008b66 <TIM_OC5_SetConfig+0x7a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a13      	ldr	r2, [pc, #76]	@ (8008bb0 <TIM_OC5_SetConfig+0xc4>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d109      	bne.n	8008b7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	621a      	str	r2, [r3, #32]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40012c00 	.word	0x40012c00
 8008ba4:	40013400 	.word	0x40013400
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800

08008bb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	051b      	lsls	r3, r3, #20
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a18      	ldr	r2, [pc, #96]	@ (8008c6c <TIM_OC6_SetConfig+0xb8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00f      	beq.n	8008c30 <TIM_OC6_SetConfig+0x7c>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a17      	ldr	r2, [pc, #92]	@ (8008c70 <TIM_OC6_SetConfig+0xbc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_OC6_SetConfig+0x7c>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a16      	ldr	r2, [pc, #88]	@ (8008c74 <TIM_OC6_SetConfig+0xc0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_OC6_SetConfig+0x7c>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a15      	ldr	r2, [pc, #84]	@ (8008c78 <TIM_OC6_SetConfig+0xc4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_OC6_SetConfig+0x7c>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a14      	ldr	r2, [pc, #80]	@ (8008c7c <TIM_OC6_SetConfig+0xc8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d109      	bne.n	8008c44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	40012c00 	.word	0x40012c00
 8008c70:	40013400 	.word	0x40013400
 8008c74:	40014000 	.word	0x40014000
 8008c78:	40014400 	.word	0x40014400
 8008c7c:	40014800 	.word	0x40014800

08008c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	f023 0201 	bic.w	r2, r3, #1
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 030a 	bic.w	r3, r3, #10
 8008cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	621a      	str	r2, [r3, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b087      	sub	sp, #28
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f023 0210 	bic.w	r2, r3, #16
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	031b      	lsls	r3, r3, #12
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f043 0307 	orr.w	r3, r3, #7
 8008d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	609a      	str	r2, [r3, #8]
}
 8008d6c:	bf00      	nop
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	021a      	lsls	r2, r3, #8
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	609a      	str	r2, [r3, #8]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 031f 	and.w	r3, r3, #31
 8008dca:	2201      	movs	r2, #1
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1a      	ldr	r2, [r3, #32]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	401a      	ands	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1a      	ldr	r2, [r3, #32]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f003 031f 	and.w	r3, r3, #31
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	431a      	orrs	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	621a      	str	r2, [r3, #32]
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e065      	b.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d108      	bne.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e92:	d013      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a18      	ldr	r2, [pc, #96]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a17      	ldr	r2, [pc, #92]	@ (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a12      	ldr	r2, [pc, #72]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a13      	ldr	r2, [pc, #76]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d10c      	bne.n	8008ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40014000 	.word	0x40014000

08008f08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d101      	bne.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f20:	2302      	movs	r3, #2
 8008f22:	e073      	b.n	800900c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	041b      	lsls	r3, r3, #16
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a19      	ldr	r2, [pc, #100]	@ (8009018 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a18      	ldr	r2, [pc, #96]	@ (800901c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d11c      	bne.n	8008ffa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	051b      	lsls	r3, r3, #20
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40013400 	.word	0x40013400

08009020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e042      	b.n	8009144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d106      	bne.n	80090d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fc fa6b 	bl	80055ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2224      	movs	r2, #36	@ 0x24
 80090da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 ff40 	bl	8009f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fc71 	bl	80099e4 <UART_SetConfig>
 8009102:	4603      	mov	r3, r0
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e01b      	b.n	8009144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800911a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800912a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0201 	orr.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 ffbf 	bl	800a0c0 <UART_CheckIdleState>
 8009142:	4603      	mov	r3, r0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	@ 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009160:	2b20      	cmp	r3, #32
 8009162:	d167      	bne.n	8009234 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_UART_Transmit_DMA+0x24>
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e060      	b.n	8009236 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2221      	movs	r2, #33	@ 0x21
 8009196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d028      	beq.n	80091f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091a6:	4a26      	ldr	r2, [pc, #152]	@ (8009240 <HAL_UART_Transmit_DMA+0xf4>)
 80091a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091ae:	4a25      	ldr	r2, [pc, #148]	@ (8009244 <HAL_UART_Transmit_DMA+0xf8>)
 80091b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091b6:	4a24      	ldr	r2, [pc, #144]	@ (8009248 <HAL_UART_Transmit_DMA+0xfc>)
 80091b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091be:	2200      	movs	r2, #0
 80091c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ca:	4619      	mov	r1, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3328      	adds	r3, #40	@ 0x28
 80091d2:	461a      	mov	r2, r3
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	f7fc fdf5 	bl	8005dc4 <HAL_DMA_Start_IT>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d009      	beq.n	80091f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2210      	movs	r2, #16
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e020      	b.n	8009236 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	613b      	str	r3, [r7, #16]
   return(result);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009212:	627b      	str	r3, [r7, #36]	@ 0x24
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921c:	623a      	str	r2, [r7, #32]
 800921e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	69f9      	ldr	r1, [r7, #28]
 8009222:	6a3a      	ldr	r2, [r7, #32]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	61bb      	str	r3, [r7, #24]
   return(result);
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009234:	2302      	movs	r3, #2
  }
}
 8009236:	4618      	mov	r0, r3
 8009238:	3728      	adds	r7, #40	@ 0x28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	0800a58b 	.word	0x0800a58b
 8009244:	0800a625 	.word	0x0800a625
 8009248:	0800a7ab 	.word	0x0800a7ab

0800924c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	@ 0x28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009260:	2b20      	cmp	r3, #32
 8009262:	d137      	bne.n	80092d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <HAL_UART_Receive_DMA+0x24>
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e030      	b.n	80092d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a18      	ldr	r2, [pc, #96]	@ (80092e0 <HAL_UART_Receive_DMA+0x94>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d01f      	beq.n	80092c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d018      	beq.n	80092c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	613b      	str	r3, [r7, #16]
   return(result);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	623b      	str	r3, [r7, #32]
 80092b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	69f9      	ldr	r1, [r7, #28]
 80092b6:	6a3a      	ldr	r2, [r7, #32]
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e6      	bne.n	8009292 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	461a      	mov	r2, r3
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f001 f810 	bl	800a2f0 <UART_Start_Receive_DMA>
 80092d0:	4603      	mov	r3, r0
 80092d2:	e000      	b.n	80092d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092d4:	2302      	movs	r3, #2
  }
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3728      	adds	r7, #40	@ 0x28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	40008000 	.word	0x40008000

080092e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b0ba      	sub	sp, #232	@ 0xe8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800930e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009312:	4013      	ands	r3, r2
 8009314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d11b      	bne.n	8009358 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d015      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800933c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8300 	beq.w	800994e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      }
      return;
 8009356:	e2fa      	b.n	800994e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8123 	beq.w	80095a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009362:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009366:	4b8d      	ldr	r3, [pc, #564]	@ (800959c <HAL_UART_IRQHandler+0x2b8>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800936e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009372:	4b8b      	ldr	r3, [pc, #556]	@ (80095a0 <HAL_UART_IRQHandler+0x2bc>)
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8116 	beq.w	80095a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d011      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
 80093b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2202      	movs	r2, #2
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2204      	movs	r2, #4
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009428:	4b5c      	ldr	r3, [pc, #368]	@ (800959c <HAL_UART_IRQHandler+0x2b8>)
 800942a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2208      	movs	r2, #8
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943e:	f043 0208 	orr.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009450:	2b00      	cmp	r3, #0
 8009452:	d012      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
 8009454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009458:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8266 	beq.w	8009952 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d013      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800949e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ce:	2b40      	cmp	r3, #64	@ 0x40
 80094d0:	d005      	beq.n	80094de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d054      	beq.n	8009588 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 ffed 	bl	800a4be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ee:	2b40      	cmp	r3, #64	@ 0x40
 80094f0:	d146      	bne.n	8009580 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800950c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800951e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800952a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1d9      	bne.n	80094f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	2b00      	cmp	r3, #0
 8009546:	d017      	beq.n	8009578 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800954e:	4a15      	ldr	r2, [pc, #84]	@ (80095a4 <HAL_UART_IRQHandler+0x2c0>)
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009558:	4618      	mov	r0, r3
 800955a:	f7fc fd07 	bl	8005f6c <HAL_DMA_Abort_IT>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d019      	beq.n	8009598 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009576:	e00f      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa1d 	bl	80099b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957e:	e00b      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa19 	bl	80099b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009586:	e007      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fa15 	bl	80099b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009596:	e1dc      	b.n	8009952 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	bf00      	nop
    return;
 800959a:	e1da      	b.n	8009952 <HAL_UART_IRQHandler+0x66e>
 800959c:	10000001 	.word	0x10000001
 80095a0:	04000120 	.word	0x04000120
 80095a4:	0800a82b 	.word	0x0800a82b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	f040 8170 	bne.w	8009892 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8169 	beq.w	8009892 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8162 	beq.w	8009892 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2210      	movs	r2, #16
 80095d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e0:	2b40      	cmp	r3, #64	@ 0x40
 80095e2:	f040 80d8 	bne.w	8009796 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80af 	beq.w	800975c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009608:	429a      	cmp	r2, r3
 800960a:	f080 80a7 	bcs.w	800975c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009614:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 8087 	bne.w	800973a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800965a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009662:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800966e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1da      	bne.n	800962c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800969a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800969e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e1      	bne.n	8009676 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3308      	adds	r3, #8
 80096d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e3      	bne.n	80096b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009708:	f023 0310 	bic.w	r3, r3, #16
 800970c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800971a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800971c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e4      	bne.n	80096f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009734:	4618      	mov	r0, r3
 8009736:	f7fc fbc0 	bl	8005eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800974c:	b29b      	uxth	r3, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	b29b      	uxth	r3, r3
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f939 	bl	80099cc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800975a:	e0fc      	b.n	8009956 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009766:	429a      	cmp	r2, r3
 8009768:	f040 80f5 	bne.w	8009956 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	2b20      	cmp	r3, #32
 800977c:	f040 80eb 	bne.w	8009956 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f91c 	bl	80099cc <HAL_UARTEx_RxEventCallback>
      return;
 8009794:	e0df      	b.n	8009956 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80d1 	beq.w	800995a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80097b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 80cc 	beq.w	800995a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e4      	bne.n	80097c2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	623b      	str	r3, [r7, #32]
   return(result);
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800980e:	f023 0301 	bic.w	r3, r3, #1
 8009812:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009820:	633a      	str	r2, [r7, #48]	@ 0x30
 8009822:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e1      	bne.n	80097f8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	60fb      	str	r3, [r7, #12]
   return(result);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f023 0310 	bic.w	r3, r3, #16
 800985c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800986a:	61fb      	str	r3, [r7, #28]
 800986c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	617b      	str	r3, [r7, #20]
   return(result);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e4      	bne.n	8009848 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f89e 	bl	80099cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009890:	e063      	b.n	800995a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <HAL_UART_IRQHandler+0x5d8>
 800989e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fff5 	bl	800a8a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ba:	e051      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d014      	beq.n	80098f2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d008      	beq.n	80098f2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d03a      	beq.n	800995e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
    }
    return;
 80098f0:	e035      	b.n	800995e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_UART_IRQHandler+0x62e>
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 ff9f 	bl	800a84e <UART_EndTransmit_IT>
    return;
 8009910:	e026      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009916:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <HAL_UART_IRQHandler+0x64e>
 800991e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009922:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 ffce 	bl	800a8cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009930:	e016      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <HAL_UART_IRQHandler+0x67c>
 800993e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009942:	2b00      	cmp	r3, #0
 8009944:	da0c      	bge.n	8009960 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 ffb6 	bl	800a8b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800994c:	e008      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
      return;
 800994e:	bf00      	nop
 8009950:	e006      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
    return;
 8009952:	bf00      	nop
 8009954:	e004      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
      return;
 8009956:	bf00      	nop
 8009958:	e002      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
      return;
 800995a:	bf00      	nop
 800995c:	e000      	b.n	8009960 <HAL_UART_IRQHandler+0x67c>
    return;
 800995e:	bf00      	nop
  }
}
 8009960:	37e8      	adds	r7, #232	@ 0xe8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop

08009968 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099e8:	b08c      	sub	sp, #48	@ 0x30
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	431a      	orrs	r2, r3
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	431a      	orrs	r2, r3
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4bab      	ldr	r3, [pc, #684]	@ (8009cc0 <UART_SetConfig+0x2dc>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4aa0      	ldr	r2, [pc, #640]	@ (8009cc4 <UART_SetConfig+0x2e0>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d004      	beq.n	8009a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a64:	430b      	orrs	r3, r1
 8009a66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6e:	f023 010f 	bic.w	r1, r3, #15
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a91      	ldr	r2, [pc, #580]	@ (8009cc8 <UART_SetConfig+0x2e4>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d125      	bne.n	8009ad4 <UART_SetConfig+0xf0>
 8009a88:	4b90      	ldr	r3, [pc, #576]	@ (8009ccc <UART_SetConfig+0x2e8>)
 8009a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d81a      	bhi.n	8009acc <UART_SetConfig+0xe8>
 8009a96:	a201      	add	r2, pc, #4	@ (adr r2, 8009a9c <UART_SetConfig+0xb8>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009aad 	.word	0x08009aad
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009ac5 	.word	0x08009ac5
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e0d6      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aba:	e0d2      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009abc:	2304      	movs	r3, #4
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e0ce      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e0ca      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009acc:	2310      	movs	r3, #16
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e0c6      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a7d      	ldr	r2, [pc, #500]	@ (8009cd0 <UART_SetConfig+0x2ec>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d138      	bne.n	8009b50 <UART_SetConfig+0x16c>
 8009ade:	4b7b      	ldr	r3, [pc, #492]	@ (8009ccc <UART_SetConfig+0x2e8>)
 8009ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae4:	f003 030c 	and.w	r3, r3, #12
 8009ae8:	2b0c      	cmp	r3, #12
 8009aea:	d82d      	bhi.n	8009b48 <UART_SetConfig+0x164>
 8009aec:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <UART_SetConfig+0x110>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b29 	.word	0x08009b29
 8009af8:	08009b49 	.word	0x08009b49
 8009afc:	08009b49 	.word	0x08009b49
 8009b00:	08009b49 	.word	0x08009b49
 8009b04:	08009b39 	.word	0x08009b39
 8009b08:	08009b49 	.word	0x08009b49
 8009b0c:	08009b49 	.word	0x08009b49
 8009b10:	08009b49 	.word	0x08009b49
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b49 	.word	0x08009b49
 8009b1c:	08009b49 	.word	0x08009b49
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b2e:	e098      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b30:	2302      	movs	r3, #2
 8009b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b36:	e094      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3e:	e090      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b40:	2308      	movs	r3, #8
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b46:	e08c      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4e:	e088      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a5f      	ldr	r2, [pc, #380]	@ (8009cd4 <UART_SetConfig+0x2f0>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d125      	bne.n	8009ba6 <UART_SetConfig+0x1c2>
 8009b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8009ccc <UART_SetConfig+0x2e8>)
 8009b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b64:	2b30      	cmp	r3, #48	@ 0x30
 8009b66:	d016      	beq.n	8009b96 <UART_SetConfig+0x1b2>
 8009b68:	2b30      	cmp	r3, #48	@ 0x30
 8009b6a:	d818      	bhi.n	8009b9e <UART_SetConfig+0x1ba>
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	d00a      	beq.n	8009b86 <UART_SetConfig+0x1a2>
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	d814      	bhi.n	8009b9e <UART_SetConfig+0x1ba>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <UART_SetConfig+0x19a>
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d008      	beq.n	8009b8e <UART_SetConfig+0x1aa>
 8009b7c:	e00f      	b.n	8009b9e <UART_SetConfig+0x1ba>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b84:	e06d      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b86:	2302      	movs	r3, #2
 8009b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b8c:	e069      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b8e:	2304      	movs	r3, #4
 8009b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b94:	e065      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b96:	2308      	movs	r3, #8
 8009b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b9c:	e061      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ba4:	e05d      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a4b      	ldr	r2, [pc, #300]	@ (8009cd8 <UART_SetConfig+0x2f4>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d125      	bne.n	8009bfc <UART_SetConfig+0x218>
 8009bb0:	4b46      	ldr	r3, [pc, #280]	@ (8009ccc <UART_SetConfig+0x2e8>)
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bbc:	d016      	beq.n	8009bec <UART_SetConfig+0x208>
 8009bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bc0:	d818      	bhi.n	8009bf4 <UART_SetConfig+0x210>
 8009bc2:	2b80      	cmp	r3, #128	@ 0x80
 8009bc4:	d00a      	beq.n	8009bdc <UART_SetConfig+0x1f8>
 8009bc6:	2b80      	cmp	r3, #128	@ 0x80
 8009bc8:	d814      	bhi.n	8009bf4 <UART_SetConfig+0x210>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <UART_SetConfig+0x1f0>
 8009bce:	2b40      	cmp	r3, #64	@ 0x40
 8009bd0:	d008      	beq.n	8009be4 <UART_SetConfig+0x200>
 8009bd2:	e00f      	b.n	8009bf4 <UART_SetConfig+0x210>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bda:	e042      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009be2:	e03e      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bea:	e03a      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bf2:	e036      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfa:	e032      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a30      	ldr	r2, [pc, #192]	@ (8009cc4 <UART_SetConfig+0x2e0>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d12a      	bne.n	8009c5c <UART_SetConfig+0x278>
 8009c06:	4b31      	ldr	r3, [pc, #196]	@ (8009ccc <UART_SetConfig+0x2e8>)
 8009c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c14:	d01a      	beq.n	8009c4c <UART_SetConfig+0x268>
 8009c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c1a:	d81b      	bhi.n	8009c54 <UART_SetConfig+0x270>
 8009c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c20:	d00c      	beq.n	8009c3c <UART_SetConfig+0x258>
 8009c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c26:	d815      	bhi.n	8009c54 <UART_SetConfig+0x270>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <UART_SetConfig+0x250>
 8009c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c30:	d008      	beq.n	8009c44 <UART_SetConfig+0x260>
 8009c32:	e00f      	b.n	8009c54 <UART_SetConfig+0x270>
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c3a:	e012      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c42:	e00e      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c4a:	e00a      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c52:	e006      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c5a:	e002      	b.n	8009c62 <UART_SetConfig+0x27e>
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a17      	ldr	r2, [pc, #92]	@ (8009cc4 <UART_SetConfig+0x2e0>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	f040 80a8 	bne.w	8009dbe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c72:	2b08      	cmp	r3, #8
 8009c74:	d834      	bhi.n	8009ce0 <UART_SetConfig+0x2fc>
 8009c76:	a201      	add	r2, pc, #4	@ (adr r2, 8009c7c <UART_SetConfig+0x298>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ce1 	.word	0x08009ce1
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009caf 	.word	0x08009caf
 8009c90:	08009ce1 	.word	0x08009ce1
 8009c94:	08009ce1 	.word	0x08009ce1
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009cb7 	.word	0x08009cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca0:	f7fd fb86 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8009ca4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca6:	e021      	b.n	8009cec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8009cdc <UART_SetConfig+0x2f8>)
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cac:	e01e      	b.n	8009cec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cae:	f7fd fb11 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8009cb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cb4:	e01a      	b.n	8009cec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cbc:	e016      	b.n	8009cec <UART_SetConfig+0x308>
 8009cbe:	bf00      	nop
 8009cc0:	cfff69f3 	.word	0xcfff69f3
 8009cc4:	40008000 	.word	0x40008000
 8009cc8:	40013800 	.word	0x40013800
 8009ccc:	40021000 	.word	0x40021000
 8009cd0:	40004400 	.word	0x40004400
 8009cd4:	40004800 	.word	0x40004800
 8009cd8:	40004c00 	.word	0x40004c00
 8009cdc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 812a 	beq.w	8009f48 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	4a9e      	ldr	r2, [pc, #632]	@ (8009f74 <UART_SetConfig+0x590>)
 8009cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	4413      	add	r3, r2
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d305      	bcc.n	8009d24 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d903      	bls.n	8009d2c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d2a:	e10d      	b.n	8009f48 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	2200      	movs	r2, #0
 8009d30:	60bb      	str	r3, [r7, #8]
 8009d32:	60fa      	str	r2, [r7, #12]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d38:	4a8e      	ldr	r2, [pc, #568]	@ (8009f74 <UART_SetConfig+0x590>)
 8009d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	2200      	movs	r2, #0
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d4e:	f7f6 ff39 	bl	8000bc4 <__aeabi_uldivmod>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	f04f 0200 	mov.w	r2, #0
 8009d5e:	f04f 0300 	mov.w	r3, #0
 8009d62:	020b      	lsls	r3, r1, #8
 8009d64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d68:	0202      	lsls	r2, r0, #8
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	6849      	ldr	r1, [r1, #4]
 8009d6e:	0849      	lsrs	r1, r1, #1
 8009d70:	2000      	movs	r0, #0
 8009d72:	460c      	mov	r4, r1
 8009d74:	4605      	mov	r5, r0
 8009d76:	eb12 0804 	adds.w	r8, r2, r4
 8009d7a:	eb43 0905 	adc.w	r9, r3, r5
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	469a      	mov	sl, r3
 8009d86:	4693      	mov	fp, r2
 8009d88:	4652      	mov	r2, sl
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 ff18 	bl	8000bc4 <__aeabi_uldivmod>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4613      	mov	r3, r2
 8009d9a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009da2:	d308      	bcc.n	8009db6 <UART_SetConfig+0x3d2>
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009daa:	d204      	bcs.n	8009db6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	60da      	str	r2, [r3, #12]
 8009db4:	e0c8      	b.n	8009f48 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009dbc:	e0c4      	b.n	8009f48 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dc6:	d167      	bne.n	8009e98 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d828      	bhi.n	8009e22 <UART_SetConfig+0x43e>
 8009dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <UART_SetConfig+0x3f4>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009dfd 	.word	0x08009dfd
 8009ddc:	08009e05 	.word	0x08009e05
 8009de0:	08009e0d 	.word	0x08009e0d
 8009de4:	08009e23 	.word	0x08009e23
 8009de8:	08009e13 	.word	0x08009e13
 8009dec:	08009e23 	.word	0x08009e23
 8009df0:	08009e23 	.word	0x08009e23
 8009df4:	08009e23 	.word	0x08009e23
 8009df8:	08009e1b 	.word	0x08009e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dfc:	f7fd fad8 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8009e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e02:	e014      	b.n	8009e2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e04:	f7fd faea 	bl	80073dc <HAL_RCC_GetPCLK2Freq>
 8009e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e0a:	e010      	b.n	8009e2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8009f78 <UART_SetConfig+0x594>)
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e10:	e00d      	b.n	8009e2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e12:	f7fd fa5f 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8009e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e18:	e009      	b.n	8009e2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e20:	e005      	b.n	8009e2e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 8089 	beq.w	8009f48 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8009f74 <UART_SetConfig+0x590>)
 8009e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e40:	461a      	mov	r2, r3
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e48:	005a      	lsls	r2, r3, #1
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	441a      	add	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	2b0f      	cmp	r3, #15
 8009e60:	d916      	bls.n	8009e90 <UART_SetConfig+0x4ac>
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e68:	d212      	bcs.n	8009e90 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f023 030f 	bic.w	r3, r3, #15
 8009e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	8bfb      	ldrh	r3, [r7, #30]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	8bfa      	ldrh	r2, [r7, #30]
 8009e8c:	60da      	str	r2, [r3, #12]
 8009e8e:	e05b      	b.n	8009f48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e96:	e057      	b.n	8009f48 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d828      	bhi.n	8009ef2 <UART_SetConfig+0x50e>
 8009ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <UART_SetConfig+0x4c4>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009ed5 	.word	0x08009ed5
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	08009ef3 	.word	0x08009ef3
 8009eb8:	08009ee3 	.word	0x08009ee3
 8009ebc:	08009ef3 	.word	0x08009ef3
 8009ec0:	08009ef3 	.word	0x08009ef3
 8009ec4:	08009ef3 	.word	0x08009ef3
 8009ec8:	08009eeb 	.word	0x08009eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ecc:	f7fd fa70 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8009ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ed2:	e014      	b.n	8009efe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed4:	f7fd fa82 	bl	80073dc <HAL_RCC_GetPCLK2Freq>
 8009ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eda:	e010      	b.n	8009efe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009edc:	4b26      	ldr	r3, [pc, #152]	@ (8009f78 <UART_SetConfig+0x594>)
 8009ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ee0:	e00d      	b.n	8009efe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ee2:	f7fd f9f7 	bl	80072d4 <HAL_RCC_GetSysClockFreq>
 8009ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ee8:	e009      	b.n	8009efe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ef0:	e005      	b.n	8009efe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009efc:	bf00      	nop
    }

    if (pclk != 0U)
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d021      	beq.n	8009f48 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f08:	4a1a      	ldr	r2, [pc, #104]	@ (8009f74 <UART_SetConfig+0x590>)
 8009f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	085b      	lsrs	r3, r3, #1
 8009f1c:	441a      	add	r2, r3
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b0f      	cmp	r3, #15
 8009f2c:	d909      	bls.n	8009f42 <UART_SetConfig+0x55e>
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f34:	d205      	bcs.n	8009f42 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60da      	str	r2, [r3, #12]
 8009f40:	e002      	b.n	8009f48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2200      	movs	r2, #0
 8009f62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3730      	adds	r7, #48	@ 0x30
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f72:	bf00      	nop
 8009f74:	0800b1fc 	.word	0x0800b1fc
 8009f78:	00f42400 	.word	0x00f42400

08009f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f88:	f003 0308 	and.w	r3, r3, #8
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00a      	beq.n	8009fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	f003 0304 	and.w	r3, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a010:	f003 0310 	and.w	r3, r3, #16
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00a      	beq.n	800a050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01a      	beq.n	800a092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a07a:	d10a      	bne.n	800a092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b098      	sub	sp, #96	@ 0x60
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0d0:	f7fb fcb4 	bl	8005a3c <HAL_GetTick>
 800a0d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d12f      	bne.n	800a144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f88e 	bl	800a214 <UART_WaitOnFlagUntilTimeout>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d022      	beq.n	800a144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a112:	653b      	str	r3, [r7, #80]	@ 0x50
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a11e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e6      	bne.n	800a0fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e063      	b.n	800a20c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d149      	bne.n	800a1e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a152:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a15a:	2200      	movs	r2, #0
 800a15c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f857 	bl	800a214 <UART_WaitOnFlagUntilTimeout>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d03c      	beq.n	800a1e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	623b      	str	r3, [r7, #32]
   return(result);
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a18c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e6      	bne.n	800a16c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1be:	61fa      	str	r2, [r7, #28]
 800a1c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	69b9      	ldr	r1, [r7, #24]
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e5      	bne.n	800a19e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e012      	b.n	800a20c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3758      	adds	r7, #88	@ 0x58
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4613      	mov	r3, r2
 800a222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a224:	e04f      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22c:	d04b      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22e:	f7fb fc05 	bl	8005a3c <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d302      	bcc.n	800a244 <UART_WaitOnFlagUntilTimeout+0x30>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e04e      	b.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d037      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b80      	cmp	r3, #128	@ 0x80
 800a25a:	d034      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b40      	cmp	r3, #64	@ 0x40
 800a260:	d031      	beq.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	f003 0308 	and.w	r3, r3, #8
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	d110      	bne.n	800a292 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2208      	movs	r2, #8
 800a276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f920 	bl	800a4be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2208      	movs	r2, #8
 800a282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e029      	b.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a29c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2a0:	d111      	bne.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f906 	bl	800a4be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e00f      	b.n	800a2e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	bf0c      	ite	eq
 800a2d6:	2301      	moveq	r3, #1
 800a2d8:	2300      	movne	r3, #0
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d0a0      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b096      	sub	sp, #88	@ 0x58
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2222      	movs	r2, #34	@ 0x22
 800a318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a322:	2b00      	cmp	r3, #0
 800a324:	d02d      	beq.n	800a382 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a32c:	4a40      	ldr	r2, [pc, #256]	@ (800a430 <UART_Start_Receive_DMA+0x140>)
 800a32e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a336:	4a3f      	ldr	r2, [pc, #252]	@ (800a434 <UART_Start_Receive_DMA+0x144>)
 800a338:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a340:	4a3d      	ldr	r2, [pc, #244]	@ (800a438 <UART_Start_Receive_DMA+0x148>)
 800a342:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a34a:	2200      	movs	r2, #0
 800a34c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3324      	adds	r3, #36	@ 0x24
 800a35a:	4619      	mov	r1, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a360:	461a      	mov	r2, r3
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	f7fb fd2e 	bl	8005dc4 <HAL_DMA_Start_IT>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2210      	movs	r2, #16
 800a372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e051      	b.n	800a426 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d018      	beq.n	800a3bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a392:	e853 3f00 	ldrex	r3, [r3]
 800a396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a39e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3b0:	e841 2300 	strex	r3, r2, [r1]
 800a3b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e6      	bne.n	800a38a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3dc:	637a      	str	r2, [r7, #52]	@ 0x34
 800a3de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e5      	bne.n	800a3bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3308      	adds	r3, #8
 800a40e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a410:	623a      	str	r2, [r7, #32]
 800a412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	69f9      	ldr	r1, [r7, #28]
 800a416:	6a3a      	ldr	r2, [r7, #32]
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e5      	bne.n	800a3f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3758      	adds	r7, #88	@ 0x58
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	0800a641 	.word	0x0800a641
 800a434:	0800a76d 	.word	0x0800a76d
 800a438:	0800a7ab 	.word	0x0800a7ab

0800a43c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b08f      	sub	sp, #60	@ 0x3c
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	61fb      	str	r3, [r7, #28]
   return(result);
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a458:	637b      	str	r3, [r7, #52]	@ 0x34
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a464:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e6      	bne.n	800a444 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3308      	adds	r3, #8
 800a47c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	e853 3f00 	ldrex	r3, [r3]
 800a484:	60bb      	str	r3, [r7, #8]
   return(result);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a496:	61ba      	str	r2, [r7, #24]
 800a498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6979      	ldr	r1, [r7, #20]
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e5      	bne.n	800a476 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a4b2:	bf00      	nop
 800a4b4:	373c      	adds	r7, #60	@ 0x3c
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b095      	sub	sp, #84	@ 0x54
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e6      	bne.n	800a4c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	61fb      	str	r3, [r7, #28]
   return(result);
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a50e:	f023 0301 	bic.w	r3, r3, #1
 800a512:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3308      	adds	r3, #8
 800a51a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a51c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a51e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a524:	e841 2300 	strex	r3, r2, [r1]
 800a528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1e3      	bne.n	800a4f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a534:	2b01      	cmp	r3, #1
 800a536:	d118      	bne.n	800a56a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	60bb      	str	r3, [r7, #8]
   return(result);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f023 0310 	bic.w	r3, r3, #16
 800a54c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a556:	61bb      	str	r3, [r7, #24]
 800a558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55a:	6979      	ldr	r1, [r7, #20]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	613b      	str	r3, [r7, #16]
   return(result);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e6      	bne.n	800a538 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a57e:	bf00      	nop
 800a580:	3754      	adds	r7, #84	@ 0x54
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b090      	sub	sp, #64	@ 0x40
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d137      	bne.n	800a616 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	e853 3f00 	ldrex	r3, [r3]
 800a5ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	69b9      	ldr	r1, [r7, #24]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	617b      	str	r3, [r7, #20]
   return(result);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e6      	bne.n	800a5e2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a614:	e002      	b.n	800a61c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a616:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a618:	f7ff f9a6 	bl	8009968 <HAL_UART_TxCpltCallback>
}
 800a61c:	bf00      	nop
 800a61e:	3740      	adds	r7, #64	@ 0x40
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff f9a2 	bl	800997c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b09c      	sub	sp, #112	@ 0x70
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0320 	and.w	r3, r3, #32
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d171      	bne.n	800a740 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a65e:	2200      	movs	r2, #0
 800a660:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a67a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	461a      	mov	r2, r3
 800a680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a682:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a684:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a688:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a68a:	e841 2300 	strex	r3, r2, [r1]
 800a68e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1e6      	bne.n	800a664 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3308      	adds	r3, #8
 800a69c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a0:	e853 3f00 	ldrex	r3, [r3]
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a8:	f023 0301 	bic.w	r3, r3, #1
 800a6ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e5      	bne.n	800a696 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e5      	bne.n	800a6ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a700:	2220      	movs	r2, #32
 800a702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d118      	bne.n	800a740 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a70e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	e853 3f00 	ldrex	r3, [r3]
 800a71a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 0310 	bic.w	r3, r3, #16
 800a722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	69b9      	ldr	r1, [r7, #24]
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	e841 2300 	strex	r3, r2, [r1]
 800a738:	617b      	str	r3, [r7, #20]
   return(result);
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e6      	bne.n	800a70e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a742:	2200      	movs	r2, #0
 800a744:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d107      	bne.n	800a75e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a754:	4619      	mov	r1, r3
 800a756:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a758:	f7ff f938 	bl	80099cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a75c:	e002      	b.n	800a764 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a75e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a760:	f7ff f916 	bl	8009990 <HAL_UART_RxCpltCallback>
}
 800a764:	bf00      	nop
 800a766:	3770      	adds	r7, #112	@ 0x70
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a784:	2b01      	cmp	r3, #1
 800a786:	d109      	bne.n	800a79c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	b29b      	uxth	r3, r3
 800a792:	4619      	mov	r1, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff f919 	bl	80099cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a79a:	e002      	b.n	800a7a2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff f901 	bl	80099a4 <HAL_UART_RxHalfCpltCallback>
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b086      	sub	sp, #24
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7d2:	2b80      	cmp	r3, #128	@ 0x80
 800a7d4:	d109      	bne.n	800a7ea <UART_DMAError+0x40>
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b21      	cmp	r3, #33	@ 0x21
 800a7da:	d106      	bne.n	800a7ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a7e4:	6978      	ldr	r0, [r7, #20]
 800a7e6:	f7ff fe29 	bl	800a43c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f4:	2b40      	cmp	r3, #64	@ 0x40
 800a7f6:	d109      	bne.n	800a80c <UART_DMAError+0x62>
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b22      	cmp	r3, #34	@ 0x22
 800a7fc:	d106      	bne.n	800a80c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2200      	movs	r2, #0
 800a802:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a806:	6978      	ldr	r0, [r7, #20]
 800a808:	f7ff fe59 	bl	800a4be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a812:	f043 0210 	orr.w	r2, r3, #16
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a81c:	6978      	ldr	r0, [r7, #20]
 800a81e:	f7ff f8cb 	bl	80099b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a822:	bf00      	nop
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff f8b9 	bl	80099b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b088      	sub	sp, #32
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	e853 3f00 	ldrex	r3, [r3]
 800a862:	60bb      	str	r3, [r7, #8]
   return(result);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	461a      	mov	r2, r3
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a878:	6979      	ldr	r1, [r7, #20]
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	e841 2300 	strex	r3, r2, [r1]
 800a880:	613b      	str	r3, [r7, #16]
   return(result);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e6      	bne.n	800a856 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff f866 	bl	8009968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89c:	bf00      	nop
 800a89e:	3720      	adds	r7, #32
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e027      	b.n	800a946 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2224      	movs	r2, #36	@ 0x24
 800a902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f022 0201 	bic.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a966:	2302      	movs	r3, #2
 800a968:	e02d      	b.n	800a9c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2224      	movs	r2, #36	@ 0x24
 800a976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0201 	bic.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f850 	bl	800aa4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e02d      	b.n	800aa42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2224      	movs	r2, #36	@ 0x24
 800a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f022 0201 	bic.w	r2, r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f812 	bl	800aa4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d108      	bne.n	800aa6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa6c:	e031      	b.n	800aad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa6e:	2308      	movs	r3, #8
 800aa70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa72:	2308      	movs	r3, #8
 800aa74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	0e5b      	lsrs	r3, r3, #25
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	f003 0307 	and.w	r3, r3, #7
 800aa84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	0f5b      	lsrs	r3, r3, #29
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0307 	and.w	r3, r3, #7
 800aa94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	7b3a      	ldrb	r2, [r7, #12]
 800aa9a:	4911      	ldr	r1, [pc, #68]	@ (800aae0 <UARTEx_SetNbDataToProcess+0x94>)
 800aa9c:	5c8a      	ldrb	r2, [r1, r2]
 800aa9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aaa2:	7b3a      	ldrb	r2, [r7, #12]
 800aaa4:	490f      	ldr	r1, [pc, #60]	@ (800aae4 <UARTEx_SetNbDataToProcess+0x98>)
 800aaa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aaa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	7b7a      	ldrb	r2, [r7, #13]
 800aab8:	4909      	ldr	r1, [pc, #36]	@ (800aae0 <UARTEx_SetNbDataToProcess+0x94>)
 800aaba:	5c8a      	ldrb	r2, [r1, r2]
 800aabc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aac0:	7b7a      	ldrb	r2, [r7, #13]
 800aac2:	4908      	ldr	r1, [pc, #32]	@ (800aae4 <UARTEx_SetNbDataToProcess+0x98>)
 800aac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aac6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aad2:	bf00      	nop
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	0800b214 	.word	0x0800b214
 800aae4:	0800b21c 	.word	0x0800b21c

0800aae8 <realloc>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	@ (800aaf4 <realloc+0xc>)
 800aaea:	460a      	mov	r2, r1
 800aaec:	4601      	mov	r1, r0
 800aaee:	6818      	ldr	r0, [r3, #0]
 800aaf0:	f000 b802 	b.w	800aaf8 <_realloc_r>
 800aaf4:	20000020 	.word	0x20000020

0800aaf8 <_realloc_r>:
 800aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aafc:	4680      	mov	r8, r0
 800aafe:	4615      	mov	r5, r2
 800ab00:	460c      	mov	r4, r1
 800ab02:	b921      	cbnz	r1, 800ab0e <_realloc_r+0x16>
 800ab04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	4611      	mov	r1, r2
 800ab0a:	f000 b8d1 	b.w	800acb0 <_malloc_r>
 800ab0e:	b92a      	cbnz	r2, 800ab1c <_realloc_r+0x24>
 800ab10:	f000 f862 	bl	800abd8 <_free_r>
 800ab14:	2400      	movs	r4, #0
 800ab16:	4620      	mov	r0, r4
 800ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1c:	f000 f954 	bl	800adc8 <_malloc_usable_size_r>
 800ab20:	4285      	cmp	r5, r0
 800ab22:	4606      	mov	r6, r0
 800ab24:	d802      	bhi.n	800ab2c <_realloc_r+0x34>
 800ab26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab2a:	d8f4      	bhi.n	800ab16 <_realloc_r+0x1e>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f000 f8be 	bl	800acb0 <_malloc_r>
 800ab34:	4607      	mov	r7, r0
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d0ec      	beq.n	800ab14 <_realloc_r+0x1c>
 800ab3a:	42b5      	cmp	r5, r6
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4621      	mov	r1, r4
 800ab40:	bf28      	it	cs
 800ab42:	4632      	movcs	r2, r6
 800ab44:	f000 f83a 	bl	800abbc <memcpy>
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	f000 f844 	bl	800abd8 <_free_r>
 800ab50:	463c      	mov	r4, r7
 800ab52:	e7e0      	b.n	800ab16 <_realloc_r+0x1e>

0800ab54 <memset>:
 800ab54:	4402      	add	r2, r0
 800ab56:	4603      	mov	r3, r0
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d100      	bne.n	800ab5e <memset+0xa>
 800ab5c:	4770      	bx	lr
 800ab5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab62:	e7f9      	b.n	800ab58 <memset+0x4>

0800ab64 <__errno>:
 800ab64:	4b01      	ldr	r3, [pc, #4]	@ (800ab6c <__errno+0x8>)
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20000020 	.word	0x20000020

0800ab70 <__libc_init_array>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	4d0d      	ldr	r5, [pc, #52]	@ (800aba8 <__libc_init_array+0x38>)
 800ab74:	4c0d      	ldr	r4, [pc, #52]	@ (800abac <__libc_init_array+0x3c>)
 800ab76:	1b64      	subs	r4, r4, r5
 800ab78:	10a4      	asrs	r4, r4, #2
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	42a6      	cmp	r6, r4
 800ab7e:	d109      	bne.n	800ab94 <__libc_init_array+0x24>
 800ab80:	4d0b      	ldr	r5, [pc, #44]	@ (800abb0 <__libc_init_array+0x40>)
 800ab82:	4c0c      	ldr	r4, [pc, #48]	@ (800abb4 <__libc_init_array+0x44>)
 800ab84:	f000 f938 	bl	800adf8 <_init>
 800ab88:	1b64      	subs	r4, r4, r5
 800ab8a:	10a4      	asrs	r4, r4, #2
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	42a6      	cmp	r6, r4
 800ab90:	d105      	bne.n	800ab9e <__libc_init_array+0x2e>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}
 800ab94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab98:	4798      	blx	r3
 800ab9a:	3601      	adds	r6, #1
 800ab9c:	e7ee      	b.n	800ab7c <__libc_init_array+0xc>
 800ab9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba2:	4798      	blx	r3
 800aba4:	3601      	adds	r6, #1
 800aba6:	e7f2      	b.n	800ab8e <__libc_init_array+0x1e>
 800aba8:	0800b22c 	.word	0x0800b22c
 800abac:	0800b22c 	.word	0x0800b22c
 800abb0:	0800b22c 	.word	0x0800b22c
 800abb4:	0800b238 	.word	0x0800b238

0800abb8 <__retarget_lock_acquire_recursive>:
 800abb8:	4770      	bx	lr

0800abba <__retarget_lock_release_recursive>:
 800abba:	4770      	bx	lr

0800abbc <memcpy>:
 800abbc:	440a      	add	r2, r1
 800abbe:	4291      	cmp	r1, r2
 800abc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800abc4:	d100      	bne.n	800abc8 <memcpy+0xc>
 800abc6:	4770      	bx	lr
 800abc8:	b510      	push	{r4, lr}
 800abca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abd2:	4291      	cmp	r1, r2
 800abd4:	d1f9      	bne.n	800abca <memcpy+0xe>
 800abd6:	bd10      	pop	{r4, pc}

0800abd8 <_free_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4605      	mov	r5, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	d041      	beq.n	800ac64 <_free_r+0x8c>
 800abe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe4:	1f0c      	subs	r4, r1, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bfb8      	it	lt
 800abea:	18e4      	addlt	r4, r4, r3
 800abec:	f000 f8e0 	bl	800adb0 <__malloc_lock>
 800abf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <_free_r+0x90>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	b933      	cbnz	r3, 800ac04 <_free_r+0x2c>
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	6014      	str	r4, [r2, #0]
 800abfa:	4628      	mov	r0, r5
 800abfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac00:	f000 b8dc 	b.w	800adbc <__malloc_unlock>
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d908      	bls.n	800ac1a <_free_r+0x42>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	1821      	adds	r1, r4, r0
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf01      	itttt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	1809      	addeq	r1, r1, r0
 800ac16:	6021      	streq	r1, [r4, #0]
 800ac18:	e7ed      	b.n	800abf6 <_free_r+0x1e>
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b10b      	cbz	r3, 800ac24 <_free_r+0x4c>
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	d9fa      	bls.n	800ac1a <_free_r+0x42>
 800ac24:	6811      	ldr	r1, [r2, #0]
 800ac26:	1850      	adds	r0, r2, r1
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d10b      	bne.n	800ac44 <_free_r+0x6c>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	4401      	add	r1, r0
 800ac30:	1850      	adds	r0, r2, r1
 800ac32:	4283      	cmp	r3, r0
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	d1e0      	bne.n	800abfa <_free_r+0x22>
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	6053      	str	r3, [r2, #4]
 800ac3e:	4408      	add	r0, r1
 800ac40:	6010      	str	r0, [r2, #0]
 800ac42:	e7da      	b.n	800abfa <_free_r+0x22>
 800ac44:	d902      	bls.n	800ac4c <_free_r+0x74>
 800ac46:	230c      	movs	r3, #12
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	e7d6      	b.n	800abfa <_free_r+0x22>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	1821      	adds	r1, r4, r0
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf04      	itt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	6063      	str	r3, [r4, #4]
 800ac5a:	bf04      	itt	eq
 800ac5c:	1809      	addeq	r1, r1, r0
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	6054      	str	r4, [r2, #4]
 800ac62:	e7ca      	b.n	800abfa <_free_r+0x22>
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	20001da8 	.word	0x20001da8

0800ac6c <sbrk_aligned>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4e0f      	ldr	r6, [pc, #60]	@ (800acac <sbrk_aligned+0x40>)
 800ac70:	460c      	mov	r4, r1
 800ac72:	6831      	ldr	r1, [r6, #0]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b911      	cbnz	r1, 800ac7e <sbrk_aligned+0x12>
 800ac78:	f000 f8ae 	bl	800add8 <_sbrk_r>
 800ac7c:	6030      	str	r0, [r6, #0]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 f8a9 	bl	800add8 <_sbrk_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d103      	bne.n	800ac92 <sbrk_aligned+0x26>
 800ac8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ac8e:	4620      	mov	r0, r4
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	1cc4      	adds	r4, r0, #3
 800ac94:	f024 0403 	bic.w	r4, r4, #3
 800ac98:	42a0      	cmp	r0, r4
 800ac9a:	d0f8      	beq.n	800ac8e <sbrk_aligned+0x22>
 800ac9c:	1a21      	subs	r1, r4, r0
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f89a 	bl	800add8 <_sbrk_r>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d1f2      	bne.n	800ac8e <sbrk_aligned+0x22>
 800aca8:	e7ef      	b.n	800ac8a <sbrk_aligned+0x1e>
 800acaa:	bf00      	nop
 800acac:	20001da4 	.word	0x20001da4

0800acb0 <_malloc_r>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	1ccd      	adds	r5, r1, #3
 800acb6:	f025 0503 	bic.w	r5, r5, #3
 800acba:	3508      	adds	r5, #8
 800acbc:	2d0c      	cmp	r5, #12
 800acbe:	bf38      	it	cc
 800acc0:	250c      	movcc	r5, #12
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	4606      	mov	r6, r0
 800acc6:	db01      	blt.n	800accc <_malloc_r+0x1c>
 800acc8:	42a9      	cmp	r1, r5
 800acca:	d904      	bls.n	800acd6 <_malloc_r+0x26>
 800accc:	230c      	movs	r3, #12
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adac <_malloc_r+0xfc>
 800acda:	f000 f869 	bl	800adb0 <__malloc_lock>
 800acde:	f8d8 3000 	ldr.w	r3, [r8]
 800ace2:	461c      	mov	r4, r3
 800ace4:	bb44      	cbnz	r4, 800ad38 <_malloc_r+0x88>
 800ace6:	4629      	mov	r1, r5
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ffbf 	bl	800ac6c <sbrk_aligned>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	4604      	mov	r4, r0
 800acf2:	d158      	bne.n	800ada6 <_malloc_r+0xf6>
 800acf4:	f8d8 4000 	ldr.w	r4, [r8]
 800acf8:	4627      	mov	r7, r4
 800acfa:	2f00      	cmp	r7, #0
 800acfc:	d143      	bne.n	800ad86 <_malloc_r+0xd6>
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	d04b      	beq.n	800ad9a <_malloc_r+0xea>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	4639      	mov	r1, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	eb04 0903 	add.w	r9, r4, r3
 800ad0c:	f000 f864 	bl	800add8 <_sbrk_r>
 800ad10:	4581      	cmp	r9, r0
 800ad12:	d142      	bne.n	800ad9a <_malloc_r+0xea>
 800ad14:	6821      	ldr	r1, [r4, #0]
 800ad16:	1a6d      	subs	r5, r5, r1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ffa6 	bl	800ac6c <sbrk_aligned>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d03a      	beq.n	800ad9a <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	442b      	add	r3, r5
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	bb62      	cbnz	r2, 800ad8c <_malloc_r+0xdc>
 800ad32:	f8c8 7000 	str.w	r7, [r8]
 800ad36:	e00f      	b.n	800ad58 <_malloc_r+0xa8>
 800ad38:	6822      	ldr	r2, [r4, #0]
 800ad3a:	1b52      	subs	r2, r2, r5
 800ad3c:	d420      	bmi.n	800ad80 <_malloc_r+0xd0>
 800ad3e:	2a0b      	cmp	r2, #11
 800ad40:	d917      	bls.n	800ad72 <_malloc_r+0xc2>
 800ad42:	1961      	adds	r1, r4, r5
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	6025      	str	r5, [r4, #0]
 800ad48:	bf18      	it	ne
 800ad4a:	6059      	strne	r1, [r3, #4]
 800ad4c:	6863      	ldr	r3, [r4, #4]
 800ad4e:	bf08      	it	eq
 800ad50:	f8c8 1000 	streq.w	r1, [r8]
 800ad54:	5162      	str	r2, [r4, r5]
 800ad56:	604b      	str	r3, [r1, #4]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 f82f 	bl	800adbc <__malloc_unlock>
 800ad5e:	f104 000b 	add.w	r0, r4, #11
 800ad62:	1d23      	adds	r3, r4, #4
 800ad64:	f020 0007 	bic.w	r0, r0, #7
 800ad68:	1ac2      	subs	r2, r0, r3
 800ad6a:	bf1c      	itt	ne
 800ad6c:	1a1b      	subne	r3, r3, r0
 800ad6e:	50a3      	strne	r3, [r4, r2]
 800ad70:	e7af      	b.n	800acd2 <_malloc_r+0x22>
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	bf0c      	ite	eq
 800ad78:	f8c8 2000 	streq.w	r2, [r8]
 800ad7c:	605a      	strne	r2, [r3, #4]
 800ad7e:	e7eb      	b.n	800ad58 <_malloc_r+0xa8>
 800ad80:	4623      	mov	r3, r4
 800ad82:	6864      	ldr	r4, [r4, #4]
 800ad84:	e7ae      	b.n	800ace4 <_malloc_r+0x34>
 800ad86:	463c      	mov	r4, r7
 800ad88:	687f      	ldr	r7, [r7, #4]
 800ad8a:	e7b6      	b.n	800acfa <_malloc_r+0x4a>
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d1fb      	bne.n	800ad8c <_malloc_r+0xdc>
 800ad94:	2300      	movs	r3, #0
 800ad96:	6053      	str	r3, [r2, #4]
 800ad98:	e7de      	b.n	800ad58 <_malloc_r+0xa8>
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f80c 	bl	800adbc <__malloc_unlock>
 800ada4:	e794      	b.n	800acd0 <_malloc_r+0x20>
 800ada6:	6005      	str	r5, [r0, #0]
 800ada8:	e7d6      	b.n	800ad58 <_malloc_r+0xa8>
 800adaa:	bf00      	nop
 800adac:	20001da8 	.word	0x20001da8

0800adb0 <__malloc_lock>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__malloc_lock+0x8>)
 800adb2:	f7ff bf01 	b.w	800abb8 <__retarget_lock_acquire_recursive>
 800adb6:	bf00      	nop
 800adb8:	20001da0 	.word	0x20001da0

0800adbc <__malloc_unlock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	@ (800adc4 <__malloc_unlock+0x8>)
 800adbe:	f7ff befc 	b.w	800abba <__retarget_lock_release_recursive>
 800adc2:	bf00      	nop
 800adc4:	20001da0 	.word	0x20001da0

0800adc8 <_malloc_usable_size_r>:
 800adc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adcc:	1f18      	subs	r0, r3, #4
 800adce:	2b00      	cmp	r3, #0
 800add0:	bfbc      	itt	lt
 800add2:	580b      	ldrlt	r3, [r1, r0]
 800add4:	18c0      	addlt	r0, r0, r3
 800add6:	4770      	bx	lr

0800add8 <_sbrk_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d06      	ldr	r5, [pc, #24]	@ (800adf4 <_sbrk_r+0x1c>)
 800addc:	2300      	movs	r3, #0
 800adde:	4604      	mov	r4, r0
 800ade0:	4608      	mov	r0, r1
 800ade2:	602b      	str	r3, [r5, #0]
 800ade4:	f7fa fd54 	bl	8005890 <_sbrk>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_sbrk_r+0x1a>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_sbrk_r+0x1a>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20001d9c 	.word	0x20001d9c

0800adf8 <_init>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr

0800ae04 <_fini>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr
