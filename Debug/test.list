
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b084  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b670  0800b670  0000d070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b670  0800b670  0000c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b678  0800b678  0000d070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b678  0800b678  0000c678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b684  0800b684  0000c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800b688  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000070  0800b6f8  0000d070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  0800b6f8  0000ddac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e1a  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004443  00000000  00000000  00030eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00035300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001371  00000000  00000000  00036bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e86  00000000  00000000  00037f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f73b  00000000  00000000  00058db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00d4  00000000  00000000  000784f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001485c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f24  00000000  00000000  0014860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b244 	.word	0x0800b244

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800b244 	.word	0x0800b244

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_uldivmod>:
 8000bc4:	b953      	cbnz	r3, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc6:	b94a      	cbnz	r2, 8000bdc <__aeabi_uldivmod+0x18>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	bf08      	it	eq
 8000bcc:	2800      	cmpeq	r0, #0
 8000bce:	bf1c      	itt	ne
 8000bd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd8:	f000 b96a 	b.w	8000eb0 <__aeabi_idiv0>
 8000bdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be4:	f000 f806 	bl	8000bf4 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9d08      	ldr	r5, [sp, #32]
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14e      	bne.n	8000c9e <__udivmoddi4+0xaa>
 8000c00:	4694      	mov	ip, r2
 8000c02:	458c      	cmp	ip, r1
 8000c04:	4686      	mov	lr, r0
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	d962      	bls.n	8000cd2 <__udivmoddi4+0xde>
 8000c0c:	b14a      	cbz	r2, 8000c22 <__udivmoddi4+0x2e>
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	4091      	lsls	r1, r2
 8000c14:	fa20 f303 	lsr.w	r3, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	4319      	orrs	r1, r3
 8000c1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f f68c 	uxth.w	r6, ip
 8000c2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	fb07 1114 	mls	r1, r7, r4, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb04 f106 	mul.w	r1, r4, r6
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x64>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4a:	f080 8112 	bcs.w	8000e72 <__udivmoddi4+0x27e>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 810f 	bls.w	8000e72 <__udivmoddi4+0x27e>
 8000c54:	3c02      	subs	r4, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c62:	fb07 1110 	mls	r1, r7, r0, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb00 f606 	mul.w	r6, r0, r6
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7a:	f080 80fc 	bcs.w	8000e76 <__udivmoddi4+0x282>
 8000c7e:	429e      	cmp	r6, r3
 8000c80:	f240 80f9 	bls.w	8000e76 <__udivmoddi4+0x282>
 8000c84:	4463      	add	r3, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa6>
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xba>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb4>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x150>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xcc>
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	f0c0 80f0 	bcc.w	8000ea0 <__udivmoddi4+0x2ac>
 8000cc0:	1a86      	subs	r6, r0, r2
 8000cc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d0e6      	beq.n	8000c9a <__udivmoddi4+0xa6>
 8000ccc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd0:	e7e3      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x204>
 8000cd8:	eba1 040c 	sub.w	r4, r1, ip
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa1f f78c 	uxth.w	r7, ip
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cee:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf6:	fb07 f006 	mul.w	r0, r7, r6
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x11c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x11a>
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2b4>
 8000d0e:	4626      	mov	r6, r4
 8000d10:	1a1c      	subs	r4, r3, r0
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d22:	fb00 f707 	mul.w	r7, r0, r7
 8000d26:	429f      	cmp	r7, r3
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x148>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x146>
 8000d34:	429f      	cmp	r7, r3
 8000d36:	f200 80b0 	bhi.w	8000e9a <__udivmoddi4+0x2a6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	1bdb      	subs	r3, r3, r7
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x9c>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d54:	fa04 f301 	lsl.w	r3, r4, r1
 8000d58:	ea43 030c 	orr.w	r3, r3, ip
 8000d5c:	40f4      	lsrs	r4, r6
 8000d5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d62:	0c38      	lsrs	r0, r7, #16
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb4 fef0 	udiv	lr, r4, r0
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	fb00 441e 	mls	r4, r0, lr, r4
 8000d74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d78:	fb0e f90c 	mul.w	r9, lr, ip
 8000d7c:	45a1      	cmp	r9, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x1a6>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8a:	f080 8084 	bcs.w	8000e96 <__udivmoddi4+0x2a2>
 8000d8e:	45a1      	cmp	r9, r4
 8000d90:	f240 8081 	bls.w	8000e96 <__udivmoddi4+0x2a2>
 8000d94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da6:	fb00 4413 	mls	r4, r0, r3, r4
 8000daa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1d2>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dbc:	d267      	bcs.n	8000e8e <__udivmoddi4+0x29a>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d965      	bls.n	8000e8e <__udivmoddi4+0x29a>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dca:	fba0 9302 	umull	r9, r3, r0, r2
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	46ce      	mov	lr, r9
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	d351      	bcc.n	8000e7e <__udivmoddi4+0x28a>
 8000dda:	d04e      	beq.n	8000e7a <__udivmoddi4+0x286>
 8000ddc:	b155      	cbz	r5, 8000df4 <__udivmoddi4+0x200>
 8000dde:	ebb8 030e 	subs.w	r3, r8, lr
 8000de2:	eb64 040c 	sbc.w	r4, r4, ip
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	40cb      	lsrs	r3, r1
 8000dec:	431e      	orrs	r6, r3
 8000dee:	40cc      	lsrs	r4, r1
 8000df0:	e9c5 6400 	strd	r6, r4, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	e750      	b.n	8000c9a <__udivmoddi4+0xa6>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa24 f303 	lsr.w	r3, r4, r3
 8000e08:	4094      	lsls	r4, r2
 8000e0a:	430c      	orrs	r4, r1
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e20:	0c23      	lsrs	r3, r4, #16
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb00 f107 	mul.w	r1, r0, r7
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x24c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e36:	d22c      	bcs.n	8000e92 <__udivmoddi4+0x29e>
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d92a      	bls.n	8000e92 <__udivmoddi4+0x29e>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e48:	fb08 3311 	mls	r3, r8, r1, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb01 f307 	mul.w	r3, r1, r7
 8000e54:	42a3      	cmp	r3, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x276>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e60:	d213      	bcs.n	8000e8a <__udivmoddi4+0x296>
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	d911      	bls.n	8000e8a <__udivmoddi4+0x296>
 8000e66:	3902      	subs	r1, #2
 8000e68:	4464      	add	r4, ip
 8000e6a:	1ae4      	subs	r4, r4, r3
 8000e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e70:	e739      	b.n	8000ce6 <__udivmoddi4+0xf2>
 8000e72:	4604      	mov	r4, r0
 8000e74:	e6f0      	b.n	8000c58 <__udivmoddi4+0x64>
 8000e76:	4608      	mov	r0, r1
 8000e78:	e706      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e7a:	45c8      	cmp	r8, r9
 8000e7c:	d2ae      	bcs.n	8000ddc <__udivmoddi4+0x1e8>
 8000e7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7a8      	b.n	8000ddc <__udivmoddi4+0x1e8>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	e7ed      	b.n	8000e6a <__udivmoddi4+0x276>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e799      	b.n	8000dc6 <__udivmoddi4+0x1d2>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e7d4      	b.n	8000e40 <__udivmoddi4+0x24c>
 8000e96:	46d6      	mov	lr, sl
 8000e98:	e77f      	b.n	8000d9a <__udivmoddi4+0x1a6>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74d      	b.n	8000d3c <__udivmoddi4+0x148>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e70f      	b.n	8000cc8 <__udivmoddi4+0xd4>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	e730      	b.n	8000d10 <__udivmoddi4+0x11c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0a5a      	lsrs	r2, r3, #9
 8000ec4:	490f      	ldr	r1, [pc, #60]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ec6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eca:	09d2      	lsrs	r2, r2, #7
 8000ecc:	490e      	ldr	r1, [pc, #56]	@ (8000f08 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09db      	lsrs	r3, r3, #7
 8000ee4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	00044b83 	.word	0x00044b83
 8000f08:	3b9aca00 	.word	0x3b9aca00

08000f0c <_ZN8DC_motor6PI_runEv>:
#include <cmath>




void DC_motor::PI_run(){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    float u = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
    float bound = 1/ki;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    error = sp - speed;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]
    integral += error*span;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
    differential = error - pre_error;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edc3 7a06 	vstr	s15, [r3, #24]

    if (integral > bound)integral = bound;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d503      	bpl.n	8000f98 <_ZN8DC_motor6PI_runEv+0x8c>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	e012      	b.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
    else if (integral < -bound)integral = -bound;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fa2:	eef1 7a67 	vneg.f32	s15, s15
 8000fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d506      	bpl.n	8000fbe <_ZN8DC_motor6PI_runEv+0xb2>
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eef1 7a67 	vneg.f32	s15, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edc3 7a05 	vstr	s15, [r3, #20]
    u = kp*error + ki*integral + kd*differential;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]
    pre_error = error;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]

    if (u > 1) u = 1;
 8001002:	edd7 7a05 	vldr	s15, [r7, #20]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd03      	ble.n	800101c <_ZN8DC_motor6PI_runEv+0x110>
 8001014:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
    else if (u < -1) u = -1;
 800101c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001020:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d501      	bpl.n	8001032 <_ZN8DC_motor6PI_runEv+0x126>
 800102e:	4b56      	ldr	r3, [pc, #344]	@ (8001188 <_ZN8DC_motor6PI_runEv+0x27c>)
 8001030:	617b      	str	r3, [r7, #20]
    pul = (int)(fabs(u)*arr);
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa57 	bl	80004f0 <__aeabi_f2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa3e 	bl	80004cc <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd36 	bl	8000ad4 <__aeabi_d2iz>
 8001068:	4603      	mov	r3, r0
 800106a:	613b      	str	r3, [r7, #16]
    if(dir_pin == true){
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001072:	2b01      	cmp	r3, #1
 8001074:	d124      	bne.n	80010c0 <_ZN8DC_motor6PI_runEv+0x1b4>
       	if(u>0){
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd09      	ble.n	8001098 <_ZN8DC_motor6PI_runEv+0x18c>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f005 fb07 	bl	80066a4 <HAL_GPIO_WritePin>
 8001096:	e03c      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d509      	bpl.n	80010ba <_ZN8DC_motor6PI_runEv+0x1ae>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f005 faf6 	bl	80066a4 <HAL_GPIO_WritePin>
 80010b8:	e02b      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e028      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }
       }else if(dir_pin == false){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d123      	bne.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	if(u>0){
 80010ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd09      	ble.n	80010ec <_ZN8DC_motor6PI_runEv+0x1e0>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f005 fadd 	bl	80066a4 <HAL_GPIO_WritePin>
 80010ea:	e012      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else if (u<0){
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	d509      	bpl.n	800110e <_ZN8DC_motor6PI_runEv+0x202>
       	        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f005 facc 	bl	80066a4 <HAL_GPIO_WritePin>
 800110c:	e001      	b.n	8001112 <_ZN8DC_motor6PI_runEv+0x206>
       	    }else{
       	        pul = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
       	    }
       }
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <_ZN8DC_motor6PI_runEv+0x21a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001124:	e02c      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <_ZN8DC_motor6PI_runEv+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001138:	e022      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <_ZN8DC_motor6PI_runEv+0x242>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800114c:	e018      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d105      	bne.n	8001162 <_ZN8DC_motor6PI_runEv+0x256>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e00e      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001166:	2b10      	cmp	r3, #16
 8001168:	d105      	bne.n	8001176 <_ZN8DC_motor6PI_runEv+0x26a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001174:	e004      	b.n	8001180 <_ZN8DC_motor6PI_runEv+0x274>
    __HAL_TIM_SET_COMPARE(PWM_htim, PWM_TIM_CHANNEL, pul);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	bf800000 	.word	0xbf800000

0800118c <_ZN8DC_motor8setspeedEf>:


void DC_motor::setspeed(float target_speed){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]
    sp = target_speed;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	621a      	str	r2, [r3, #32]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN8DC_motor12update_speedEi>:
void DC_motor::update_speed(int sign){
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    int16_t enc ;
	enc = __HAL_TIM_GetCounter(enc_htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	81fb      	strh	r3, [r7, #14]
	speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a07 	vstr	s15, [r3, #28]
	turn += speed*span;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	ed93 7a07 	vldr	s14, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <_ZN8DC_motor12update_speedEi+0x90>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    __HAL_TIM_SetCounter(enc_htim,0);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000598 	.word	0x20000598

08001240 <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f006 fda2 	bl	8007d9c <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f006 ff8e 	bl	8008180 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f006 ff88 	bl	8008180 <HAL_TIM_Encoder_Start>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN8DC_motor8heightToEf>:
    this->resolution = resolution;
}

// 控cascade lift

void DC_motor::heightTo(float high){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	ed87 0a00 	vstr	s0, [r7]
	//height = 25 + turn * mm_per_turn;
	//target_turns = 0.0f;
	if(high != 0){
 8001284:	edd7 7a00 	vldr	s15, [r7]
 8001288:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	f000 80a7 	beq.w	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		if(high >= height){
 8001294:	4b58      	ldr	r3, [pc, #352]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ed97 7a00 	vldr	s14, [r7]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	db14      	blt.n	80012d2 <_ZN8DC_motor8heightToEf+0x5a>
			target_turns = turn + ( (high - height )/ mm_per_turn );
 80012a8:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ed97 7a00 	vldr	s14, [r7]
 80012b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012b6:	4b51      	ldr	r3, [pc, #324]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
 80012d0:	e039      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
		}
		else{
			target_turns = turn - ( (height - high ) / mm_per_turn );
 80012d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <_ZN8DC_motor8heightToEf+0x180>)
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	edd7 7a00 	vldr	s15, [r7]
 80012e2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80012e6:	4b45      	ldr	r3, [pc, #276]	@ (80013fc <_ZN8DC_motor8heightToEf+0x184>)
 80012e8:	edd3 6a00 	vldr	s13, [r3]
 80012ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f4:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
		}

		while(turn < target_turns && high1 != 0){
 80012fa:	e024      	b.n	8001346 <_ZN8DC_motor8heightToEf+0xce>
			if(fabs(target_turns - turn) < 0.001){
 80012fc:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80012fe:	ed93 7a00 	vldr	s14, [r3]
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	eef0 7ae7 	vabs.f32	s15, s15
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f8ec 	bl	80004f0 <__aeabi_f2d>
 8001318:	a335      	add	r3, pc, #212	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff fbb1 	bl	8000a84 <__aeabi_dcmplt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <_ZN8DC_motor8heightToEf+0xc4>
				//target_turns = 0;
				high1 = 0;
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				setspeed(0);
 8001330:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 800133a:	e017      	b.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
			}
			else{
				setspeed(0.5);
 800133c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff23 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn < target_turns && high1 != 0){
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d507      	bpl.n	800136c <_ZN8DC_motor8heightToEf+0xf4>
 800135c:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	d1c7      	bne.n	80012fc <_ZN8DC_motor8heightToEf+0x84>
			}
		}
		while(turn > target_turns && high1 != 0){
 800136c:	e025      	b.n	80013ba <_ZN8DC_motor8heightToEf+0x142>
			if(fabs(target_turns - turn) < 0.001){
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137e:	eef0 7ae7 	vabs.f32	s15, s15
 8001382:	ee17 0a90 	vmov	r0, s15
 8001386:	f7ff f8b3 	bl	80004f0 <__aeabi_f2d>
 800138a:	a319      	add	r3, pc, #100	@ (adr r3, 80013f0 <_ZN8DC_motor8heightToEf+0x178>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fb78 	bl	8000a84 <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <_ZN8DC_motor8heightToEf+0x138>
				//target_turns = 0;
				high1 = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
				setspeed(0);
 80013a2:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800140c <_ZN8DC_motor8heightToEf+0x194>
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fef0 	bl	800118c <_ZN8DC_motor8setspeedEf>
				break;
 80013ac:	bf00      	nop

		}
	}

	//setspeed(0);
}
 80013ae:	e018      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
				setspeed(-0.5);
 80013b0:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fee9 	bl	800118c <_ZN8DC_motor8setspeedEf>
		while(turn > target_turns && high1 != 0){
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_ZN8DC_motor8heightToEf+0x188>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_ZN8DC_motor8heightToEf+0x18c>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dc00      	bgt.n	80013d2 <_ZN8DC_motor8heightToEf+0x15a>
}
 80013d0:	e007      	b.n	80013e2 <_ZN8DC_motor8heightToEf+0x16a>
		while(turn > target_turns && high1 != 0){
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <_ZN8DC_motor8heightToEf+0x190>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d1c5      	bne.n	800136e <_ZN8DC_motor8heightToEf+0xf6>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	f3af 8000 	nop.w
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	200005b0 	.word	0x200005b0
 80013fc:	200005ac 	.word	0x200005ac
 8001400:	20000598 	.word	0x20000598
 8001404:	200005b4 	.word	0x200005b4
 8001408:	2000059c 	.word	0x2000059c
 800140c:	00000000 	.word	0x00000000

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f004 faf9 	bl	8005a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f81c 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f000 fc2c 	bl	8001c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f000 fbf8 	bl	8001c14 <MX_DMA_Init>
  MX_TIM1_Init();
 8001424:	f000 f896 	bl	8001554 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001428:	f000 f94c 	bl	80016c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800142c:	f000 f998 	bl	8001760 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001430:	f000 f9fc 	bl	800182c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001434:	f000 fabc 	bl	80019b0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001438:	f000 f84c 	bl	80014d4 <MX_I2C1_Init>
  MX_TIM6_Init();
 800143c:	f000 fa4c 	bl	80018d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001440:	f000 fa80 	bl	8001944 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001444:	f000 fb9a 	bl	8001b7c <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8001448:	f000 fb46 	bl	8001ad8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 800144c:	f000 fe0a 	bl	8002064 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <main+0x40>

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	2238      	movs	r2, #56	@ 0x38
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f009 fd9c 	bl	800afa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001476:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147a:	f005 fa75 	bl	8006968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001488:	2340      	movs	r3, #64	@ 0x40
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	4618      	mov	r0, r3
 8001496:	f005 fb1b 	bl	8006ad0 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a0:	f000 fc90 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a8:	2301      	movs	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 fe19 	bl	80070f4 <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014c8:	f000 fc7c 	bl	8001dc4 <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <MX_I2C1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <MX_I2C1_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <MX_I2C1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <MX_I2C1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150e:	480e      	ldr	r0, [pc, #56]	@ (8001548 <MX_I2C1_Init+0x74>)
 8001510:	f005 f8f8 	bl	8006704 <HAL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fc53 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <MX_I2C1_Init+0x74>)
 8001522:	f005 f98a 	bl	800683a <HAL_I2CEx_ConfigAnalogFilter>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 fc4a 	bl	8001dc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_I2C1_Init+0x74>)
 8001534:	f005 f9cc 	bl	80068d0 <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fc41 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000008c 	.word	0x2000008c
 800154c:	40005400 	.word	0x40005400
 8001550:	00503d58 	.word	0x00503d58

08001554 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b098      	sub	sp, #96	@ 0x60
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2234      	movs	r2, #52	@ 0x34
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f009 fd0d 	bl	800afa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <MX_TIM1_Init+0x168>)
 8001588:	4a4d      	ldr	r2, [pc, #308]	@ (80016c0 <MX_TIM1_Init+0x16c>)
 800158a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800158c:	4b4b      	ldr	r3, [pc, #300]	@ (80016bc <MX_TIM1_Init+0x168>)
 800158e:	220f      	movs	r2, #15
 8001590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <MX_TIM1_Init+0x168>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001598:	4b48      	ldr	r3, [pc, #288]	@ (80016bc <MX_TIM1_Init+0x168>)
 800159a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800159e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <MX_TIM1_Init+0x168>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a6:	4b45      	ldr	r3, [pc, #276]	@ (80016bc <MX_TIM1_Init+0x168>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <MX_TIM1_Init+0x168>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015b2:	4842      	ldr	r0, [pc, #264]	@ (80016bc <MX_TIM1_Init+0x168>)
 80015b4:	f006 fa9b 	bl	8007aee <HAL_TIM_PWM_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fc01 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d2:	4619      	mov	r1, r3
 80015d4:	4839      	ldr	r0, [pc, #228]	@ (80016bc <MX_TIM1_Init+0x168>)
 80015d6:	f007 fe3b 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e0:	f000 fbf0 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	@ 0x60
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	482c      	ldr	r0, [pc, #176]	@ (80016bc <MX_TIM1_Init+0x168>)
 800160a:	f006 ff97 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001614:	f000 fbd6 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001618:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4826      	ldr	r0, [pc, #152]	@ (80016bc <MX_TIM1_Init+0x168>)
 8001622:	f006 ff8b 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800162c:	f000 fbca 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001630:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001634:	2208      	movs	r2, #8
 8001636:	4619      	mov	r1, r3
 8001638:	4820      	ldr	r0, [pc, #128]	@ (80016bc <MX_TIM1_Init+0x168>)
 800163a:	f006 ff7f 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001644:	f000 fbbe 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800164c:	220c      	movs	r2, #12
 800164e:	4619      	mov	r1, r3
 8001650:	481a      	ldr	r0, [pc, #104]	@ (80016bc <MX_TIM1_Init+0x168>)
 8001652:	f006 ff73 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800165c:	f000 fbb2 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4807      	ldr	r0, [pc, #28]	@ (80016bc <MX_TIM1_Init+0x168>)
 800169e:	f007 fe59 	bl	8009354 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80016a8:	f000 fb8c 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <MX_TIM1_Init+0x168>)
 80016ae:	f003 ff2b 	bl	8005508 <HAL_TIM_MspPostInit>

}
 80016b2:	bf00      	nop
 80016b4:	3760      	adds	r7, #96	@ 0x60
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000e0 	.word	0x200000e0
 80016c0:	40012c00 	.word	0x40012c00

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <MX_TIM2_Init+0x98>)
 80016e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_TIM2_Init+0x98>)
 80016ec:	220f      	movs	r2, #15
 80016ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_TIM2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <MX_TIM2_Init+0x98>)
 80016f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_TIM2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_TIM2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170a:	4814      	ldr	r0, [pc, #80]	@ (800175c <MX_TIM2_Init+0x98>)
 800170c:	f006 f8fe 	bl	800790c <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001716:	f000 fb55 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	@ (800175c <MX_TIM2_Init+0x98>)
 8001728:	f007 f81c 	bl	8008764 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001732:	f000 fb47 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	@ (800175c <MX_TIM2_Init+0x98>)
 8001744:	f007 fd84 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800174e:	f000 fb39 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000012c 	.word	0x2000012c

08001760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_TIM3_Init+0xc4>)
 8001786:	4a28      	ldr	r2, [pc, #160]	@ (8001828 <MX_TIM3_Init+0xc8>)
 8001788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <MX_TIM3_Init+0xc4>)
 800178c:	220f      	movs	r2, #15
 800178e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <MX_TIM3_Init+0xc4>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <MX_TIM3_Init+0xc4>)
 8001798:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800179c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_TIM3_Init+0xc4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <MX_TIM3_Init+0xc4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017aa:	481e      	ldr	r0, [pc, #120]	@ (8001824 <MX_TIM3_Init+0xc4>)
 80017ac:	f006 f99f 	bl	8007aee <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80017b6:	f000 fb05 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4816      	ldr	r0, [pc, #88]	@ (8001824 <MX_TIM3_Init+0xc4>)
 80017ca:	f007 fd41 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017d4:	f000 faf6 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d8:	2360      	movs	r3, #96	@ 0x60
 80017da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <MX_TIM3_Init+0xc4>)
 80017f0:	f006 fea4 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80017fa:	f000 fae3 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	2204      	movs	r2, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <MX_TIM3_Init+0xc4>)
 8001806:	f006 fe99 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001810:	f000 fad8 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <MX_TIM3_Init+0xc4>)
 8001816:	f003 fe77 	bl	8005508 <HAL_TIM_MspPostInit>

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000178 	.word	0x20000178
 8001828:	40000400 	.word	0x40000400

0800182c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	@ 0x30
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	2224      	movs	r2, #36	@ 0x24
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fbb0 	bl	800afa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 800184c:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <MX_TIM4_Init+0xa8>)
 800184e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001850:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 800185e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001862:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001870:	2303      	movs	r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001878:	2301      	movs	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 800189c:	f006 fbca 	bl	8008034 <HAL_TIM_Encoder_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80018a6:	f000 fa8d 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	@ (80018d0 <MX_TIM4_Init+0xa4>)
 80018b8:	f007 fcca 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018c2:	f000 fa7f 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3730      	adds	r7, #48	@ 0x30
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200001c4 	.word	0x200001c4
 80018d4:	40000800 	.word	0x40000800

080018d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_TIM6_Init+0x64>)
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <MX_TIM6_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_TIM6_Init+0x64>)
 80018f0:	220f      	movs	r2, #15
 80018f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_TIM6_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_TIM6_Init+0x64>)
 80018fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001900:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_TIM6_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <MX_TIM6_Init+0x64>)
 800190a:	f005 ffff 	bl	800790c <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001914:	f000 fa56 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	@ (800193c <MX_TIM6_Init+0x64>)
 8001926:	f007 fc93 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001930:	f000 fa48 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000210 	.word	0x20000210
 8001940:	40001000 	.word	0x40001000

08001944 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001956:	4a15      	ldr	r2, [pc, #84]	@ (80019ac <MX_TIM7_Init+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_TIM7_Init+0x64>)
 800195c:	220f      	movs	r2, #15
 800195e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001968:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800196c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001976:	f005 ffc9 	bl	800790c <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001980:	f000 fa20 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <MX_TIM7_Init+0x64>)
 8001992:	f007 fc5d 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800199c:	f000 fa12 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000025c 	.word	0x2000025c
 80019ac:	40001400 	.word	0x40001400

080019b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b098      	sub	sp, #96	@ 0x60
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2234      	movs	r2, #52	@ 0x34
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 fadf 	bl	800afa0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 80019e4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <MX_TIM8_Init+0x124>)
 80019e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80019e8:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 80019ea:	220f      	movs	r2, #15
 80019ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80019f4:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 80019f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a02:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a0e:	4830      	ldr	r0, [pc, #192]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001a10:	f006 f86d 	bl	8007aee <HAL_TIM_PWM_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f000 f9d3 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4827      	ldr	r0, [pc, #156]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001a32:	f007 fc0d 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a3c:	f000 f9c2 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a40:	2360      	movs	r3, #96	@ 0x60
 8001a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a60:	2204      	movs	r2, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	481a      	ldr	r0, [pc, #104]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001a66:	f006 fd69 	bl	800853c <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a70:	f000 f9a8 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001ab2:	f007 fc4f 	bl	8009354 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001abc:	f000 f982 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <MX_TIM8_Init+0x120>)
 8001ac2:	f003 fd21 	bl	8005508 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3760      	adds	r7, #96	@ 0x60
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002a8 	.word	0x200002a8
 8001ad4:	40013400 	.word	0x40013400

08001ad8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001af8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b78 <MX_TIM15_Init+0xa0>)
 8001afa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b22:	4814      	ldr	r0, [pc, #80]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b24:	f005 fef2 	bl	800790c <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001b2e:	f000 f949 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b40:	f006 fe10 	bl	8008764 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001b4a:	f000 f93b 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <MX_TIM15_Init+0x9c>)
 8001b5c:	f007 fb78 	bl	8009250 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001b66:	f000 f92d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002f4 	.word	0x200002f4
 8001b78:	40014000 	.word	0x40014000

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <MX_USART2_UART_Init+0x94>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc4:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bc6:	f007 fc97 	bl	80094f8 <HAL_UART_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f000 f8f8 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bd8:	f009 f8e1 	bl	800ad9e <HAL_UARTEx_SetTxFifoThreshold>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001be2:	f000 f8ef 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bea:	f009 f916 	bl	800ae1a <HAL_UARTEx_SetRxFifoThreshold>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf4:	f000 f8e6 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_USART2_UART_Init+0x90>)
 8001bfa:	f009 f897 	bl	800ad2c <HAL_UARTEx_DisableFifoMode>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c04:	f000 f8de 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000340 	.word	0x20000340
 8001c10:	40004400 	.word	0x40004400

08001c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1e:	4a15      	ldr	r2, [pc, #84]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c26:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <MX_DMA_Init+0x60>)
 8001c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	200d      	movs	r0, #13
 8001c50:	f004 f827 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c54:	200d      	movs	r0, #13
 8001c56:	f004 f83e 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	200e      	movs	r0, #14
 8001c60:	f004 f81f 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c64:	200e      	movs	r0, #14
 8001c66:	f004 f836 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	4a4a      	ldr	r2, [pc, #296]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9a:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a44      	ldr	r2, [pc, #272]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a38      	ldr	r2, [pc, #224]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <MX_GPIO_Init+0x144>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f240 4103 	movw	r1, #1027	@ 0x403
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf8:	f004 fcd4 	bl	80066a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001cfc:	f240 4303 	movw	r3, #1027	@ 0x403
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d18:	f004 fb2a 	bl	8006370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8001d1c:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 8001d20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d22:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d36:	f004 fb1b 	bl	8006370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3;
 8001d3a:	f243 0308 	movw	r3, #12296	@ 0x3008
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481b      	ldr	r0, [pc, #108]	@ (8001dc0 <MX_GPIO_Init+0x148>)
 8001d52:	f004 fb0d 	bl	8006370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d56:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4814      	ldr	r0, [pc, #80]	@ (8001dc0 <MX_GPIO_Init+0x148>)
 8001d6e:	f004 faff 	bl	8006370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2009      	movs	r0, #9
 8001d78:	f003 ff93 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d7c:	2009      	movs	r0, #9
 8001d7e:	f003 ffaa 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	200a      	movs	r0, #10
 8001d88:	f003 ff8b 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f003 ffa2 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2017      	movs	r0, #23
 8001d98:	f003 ff83 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f003 ff9a 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2028      	movs	r0, #40	@ 0x28
 8001da8:	f003 ff7b 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dac:	2028      	movs	r0, #40	@ 0x28
 8001dae:	f003 ff92 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	@ 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <Error_Handler+0x8>

08001dd0 <_ZN5Servo12getServoInfoENS_4typeE>:
		enum type ServoType = GBD300T;

		bool isMoving = false;


		static Info getServoInfo(type servoType){
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
			switch(servoType){
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d82a      	bhi.n	8001e38 <_ZN5Servo12getServoInfoENS_4typeE+0x68>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <_ZN5Servo12getServoInfoENS_4typeE+0x18>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e09 	.word	0x08001e09
 8001df0:	08001e19 	.word	0x08001e19
 8001df4:	08001e29 	.word	0x08001e29
			case GBD300T:
				return {300,500,2500,0.25};
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <_ZN5Servo12getServoInfoENS_4typeE+0x7c>)
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e06:	e01d      	b.n	8001e44 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD300S:
				return {300,500,2500,0.11};
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <_ZN5Servo12getServoInfoENS_4typeE+0x80>)
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e16:	e015      	b.n	8001e44 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800T:
				return {1800,500,2500,0.25};
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e54 <_ZN5Servo12getServoInfoENS_4typeE+0x84>)
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e26:	e00d      	b.n	8001e44 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			case GBD1800S:
				return {1800,500,2500,0.11};
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e58 <_ZN5Servo12getServoInfoENS_4typeE+0x88>)
 8001e2c:	461c      	mov	r4, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e36:	e005      	b.n	8001e44 <_ZN5Servo12getServoInfoENS_4typeE+0x74>
			default:
				return getServoInfo(GBD300T);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ffc7 	bl	8001dd0 <_ZN5Servo12getServoInfoENS_4typeE>
 8001e42:	bf00      	nop
			}
		}
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	0800b25c 	.word	0x0800b25c
 8001e50:	0800b26c 	.word	0x0800b26c
 8001e54:	0800b27c 	.word	0x0800b27c
 8001e58:	0800b28c 	.word	0x0800b28c

08001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>:
			servoInfo.minPulse = MinPulse;
			servoInfo.maxPulse = MaxPulse;
			servoInfo.maxServoSpeed = maxServoSpeed;
		}

		Servo(TIM_HandleTypeDef* h, uint32_t ch,type servoType) {
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	61f8      	str	r0, [r7, #28]
 8001e64:	61b9      	str	r1, [r7, #24]
 8001e66:	617a      	str	r2, [r7, #20]
 8001e68:	74fb      	strb	r3, [r7, #19]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE+0x58>)
 8001e6e:	f103 040c 	add.w	r4, r3, #12
 8001e72:	4613      	mov	r3, r2
 8001e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2200      	movs	r2, #0
 8001e84:	775a      	strb	r2, [r3, #29]
			htim = h;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	609a      	str	r2, [r3, #8]
			channel = ch;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
			servoInfo = getServoInfo(servoType);
 8001e92:	69fc      	ldr	r4, [r7, #28]
 8001e94:	463b      	mov	r3, r7
 8001e96:	7cfa      	ldrb	r2, [r7, #19]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff98 	bl	8001dd0 <_ZN5Servo12getServoInfoENS_4typeE>
 8001ea0:	340c      	adds	r4, #12
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4618      	mov	r0, r3
 8001eae:	3724      	adds	r7, #36	@ 0x24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	0800b25c 	.word	0x0800b25c

08001eb8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>:
	void stepTo(int32_t steps);
	void heightTo(float high);
	void set_motor_parameter(float reduction_ratio,int resolution) ;
	void set_PID_parameter(float _kp,float _ki);

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim,
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6178      	str	r0, [r7, #20]
 8001ec0:	6139      	str	r1, [r7, #16]
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ec8:	edc7 0a00 	vstr	s1, [r7]
 8001ecc:	817b      	strh	r3, [r7, #10]
			uint32_t _PWM_TIM_CHANNEL,bool _dirpin,float _kp,float _ki) {
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff+0xdc>)
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2264      	movs	r2, #100	@ 0x64
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f36:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
		enc_htim = _enc_htim;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	645a      	str	r2, [r3, #68]	@ 0x44
		dirPort = _dirPort;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	649a      	str	r2, [r3, #72]	@ 0x48
		dirPin = _dirPin;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	897a      	ldrh	r2, [r7, #10]
 8001f5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		PWM_htim = _PWM_htim;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	651a      	str	r2, [r3, #80]	@ 0x50
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
		dir_pin = _dirpin;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		kp = _kp;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
	    ki = _ki;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	};
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	3a83126f 	.word	0x3a83126f

08001f98 <_Z9setup_allv>:
float _current_y = 0.0f;
float _current_theta = 0.0f;

bool initFinish = 1;

void setup_all(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	ROS1::init();
 8001f9c:	f001 fe28 	bl	8003bf0 <_ZN4ROS14initEv>
	HAL_TIM_Base_Start_IT(&htim6);
 8001fa0:	4824      	ldr	r0, [pc, #144]	@ (8002034 <_Z9setup_allv+0x9c>)
 8001fa2:	f005 fd0b 	bl	80079bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001fa6:	4824      	ldr	r0, [pc, #144]	@ (8002038 <_Z9setup_allv+0xa0>)
 8001fa8:	f005 fd08 	bl	80079bc <HAL_TIM_Base_Start_IT>
	ms++;
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <_Z9setup_allv+0xa4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a22      	ldr	r2, [pc, #136]	@ (800203c <_Z9setup_allv+0xa4>)
 8001fb4:	6013      	str	r3, [r2, #0]
	servo_forward.setup(920);
 8001fb6:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8001fba:	4821      	ldr	r0, [pc, #132]	@ (8002040 <_Z9setup_allv+0xa8>)
 8001fbc:	f002 ff5d 	bl	8004e7a <_ZN5Servo5setupEi>
	servo_turn.setup(261);
 8001fc0:	f240 1105 	movw	r1, #261	@ 0x105
 8001fc4:	481f      	ldr	r0, [pc, #124]	@ (8002044 <_Z9setup_allv+0xac>)
 8001fc6:	f002 ff58 	bl	8004e7a <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8001fca:	481f      	ldr	r0, [pc, #124]	@ (8002048 <_Z9setup_allv+0xb0>)
 8001fcc:	f7ff f938 	bl	8001240 <_ZN8DC_motor5setupEv>
	initialized = true;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <_Z9setup_allv+0xb4>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
	speeds = -0.5;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <_Z9setup_allv+0xb8>)
 8001fd8:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001fdc:	601a      	str	r2, [r3, #0]
	wait(3000, &htim2);
 8001fde:	491d      	ldr	r1, [pc, #116]	@ (8002054 <_Z9setup_allv+0xbc>)
 8001fe0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001fe4:	f000 f846 	bl	8002074 <_Z4waitiP17TIM_HandleTypeDef>
	initialized = false;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	@ (800204c <_Z9setup_allv+0xb4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
	speeds = 0.5;
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <_Z9setup_allv+0xb8>)
 8001ff0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ff4:	601a      	str	r2, [r3, #0]
	wait(1500, &htim2);
 8001ff6:	4917      	ldr	r1, [pc, #92]	@ (8002054 <_Z9setup_allv+0xbc>)
 8001ff8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001ffc:	f000 f83a 	bl	8002074 <_Z4waitiP17TIM_HandleTypeDef>


	wait(5000, &htim2);
 8002000:	4914      	ldr	r1, [pc, #80]	@ (8002054 <_Z9setup_allv+0xbc>)
 8002002:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002006:	f000 f835 	bl	8002074 <_Z4waitiP17TIM_HandleTypeDef>
	servo_gripper.setup(0);
 800200a:	2100      	movs	r1, #0
 800200c:	4812      	ldr	r0, [pc, #72]	@ (8002058 <_Z9setup_allv+0xc0>)
 800200e:	f002 ff34 	bl	8004e7a <_ZN5Servo5setupEi>
	servo_right.setup(58);
 8002012:	213a      	movs	r1, #58	@ 0x3a
 8002014:	4811      	ldr	r0, [pc, #68]	@ (800205c <_Z9setup_allv+0xc4>)
 8002016:	f002 ff30 	bl	8004e7a <_ZN5Servo5setupEi>
	servo_left.setup(0);
 800201a:	2100      	movs	r1, #0
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <_Z9setup_allv+0xc8>)
 800201e:	f002 ff2c 	bl	8004e7a <_ZN5Servo5setupEi>
	servo_forward.turnTo(300); //920---40 底
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <_Z9setup_allv+0xa8>)
 800202a:	f002 ffed 	bl	8005008 <_ZN5Servo6turnToEii>





}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000210 	.word	0x20000210
 8002038:	2000025c 	.word	0x2000025c
 800203c:	200005a8 	.word	0x200005a8
 8002040:	2000056c 	.word	0x2000056c
 8002044:	200004ec 	.word	0x200004ec
 8002048:	20000494 	.word	0x20000494
 800204c:	20000592 	.word	0x20000592
 8002050:	20000594 	.word	0x20000594
 8002054:	2000012c 	.word	0x2000012c
 8002058:	2000050c 	.word	0x2000050c
 800205c:	2000054c 	.word	0x2000054c
 8002060:	2000052c 	.word	0x2000052c

08002064 <main_function>:
void main_function(){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	setup_all();
 8002068:	f7ff ff96 	bl	8001f98 <_Z9setup_allv>

	//ROS1::init();
	while(1){
		ROS1::spinCycle();
 800206c:	f001 fe0c 	bl	8003c88 <_ZN4ROS19spinCycleEv>
 8002070:	e7fc      	b.n	800206c <main_function+0x8>
	...

08002074 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f005 fc9c 	bl	80079bc <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8002084:	e001      	b.n	800208a <_Z4waitiP17TIM_HandleTypeDef+0x16>
		ROS1::spinCycle();
 8002086:	f001 fdff 	bl	8003c88 <_ZN4ROS19spinCycleEv>
	while(delay_count < time){
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <_Z4waitiP17TIM_HandleTypeDef+0x34>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dcf8      	bgt.n	8002086 <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f005 fcfb 	bl	8007a90 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 800209a:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <_Z4waitiP17TIM_HandleTypeDef+0x34>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200005a0 	.word	0x200005a0

080020ac <HAL_TIM_PeriodElapsedCallback>:
float s;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020bc:	d104      	bne.n	80020c8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		delay_count++;
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020c6:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d127      	bne.n	8002122 <HAL_TIM_PeriodElapsedCallback+0x76>
		if(initialized){
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00e      	beq.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			height = 445 + turn * mm_per_turn;
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80020dc:	ed93 7a00 	vldr	s14, [r3]
 80020e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002158 <HAL_TIM_PeriodElapsedCallback+0xac>
 80020ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80020f4:	edc3 7a00 	vstr	s15, [r3]
		}
		Motor_updown.PI_run();
 80020f8:	4819      	ldr	r0, [pc, #100]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020fa:	f7fe ff07 	bl	8000f0c <_ZN8DC_motor6PI_runEv>
		Motor_updown.update_speed(-1);
 80020fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002102:	4817      	ldr	r0, [pc, #92]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002104:	f7ff f852 	bl	80011ac <_ZN8DC_motor12update_speedEi>
		Motor_updown.setspeed(speeds);
 8002108:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	4813      	ldr	r0, [pc, #76]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002114:	f7ff f83a 	bl	800118c <_ZN8DC_motor8setspeedEf>
		ms++;
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002120:	6013      	str	r3, [r2, #0]

		//ROS1::_pub_elevator();
	}
	if(htim->Instance == TIM7){
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a11      	ldr	r2, [pc, #68]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d107      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x90>


		ROS1::_pub_gripper();
 800212c:	f001 fdc8 	bl	8003cc0 <_ZN4ROS112_pub_gripperEv>
		ROS1::_pub_touch();
 8002130:	f001 fdb4 	bl	8003c9c <_ZN4ROS110_pub_touchEv>
		ROS1::_pub_theta();
 8002134:	f001 fdee 	bl	8003d14 <_ZN4ROS110_pub_thetaEv>
		ROS1::_pub_y();
 8002138:	f001 fdd4 	bl	8003ce4 <_ZN4ROS16_pub_yEv>


		//s++;
		}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200005a0 	.word	0x200005a0
 8002148:	40001000 	.word	0x40001000
 800214c:	20000592 	.word	0x20000592
 8002150:	20000598 	.word	0x20000598
 8002154:	200005ac 	.word	0x200005ac
 8002158:	43de8000 	.word	0x43de8000
 800215c:	200005b0 	.word	0x200005b0
 8002160:	20000494 	.word	0x20000494
 8002164:	20000594 	.word	0x20000594
 8002168:	200005a8 	.word	0x200005a8
 800216c:	40001400 	.word	0x40001400

08002170 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002180:	f000 8106 	beq.w	8002390 <HAL_GPIO_EXTI_Callback+0x220>
 8002184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002188:	f300 8137 	bgt.w	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
 800218c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002190:	d06d      	beq.n	800226e <HAL_GPIO_EXTI_Callback+0xfe>
 8002192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002196:	f300 8130 	bgt.w	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
 800219a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800219e:	d03a      	beq.n	8002216 <HAL_GPIO_EXTI_Callback+0xa6>
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a4:	f300 8129 	bgt.w	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
 80021a8:	2b80      	cmp	r3, #128	@ 0x80
 80021aa:	d009      	beq.n	80021c0 <HAL_GPIO_EXTI_Callback+0x50>
 80021ac:	2b80      	cmp	r3, #128	@ 0x80
 80021ae:	f300 8124 	bgt.w	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_GPIO_EXTI_Callback+0x156>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	f000 80b4 	beq.w	8002326 <HAL_GPIO_EXTI_Callback+0x1b6>
				isTop = 0;

			}

	}
}
 80021be:	e11c      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c8:	f004 fa54 	bl	8006674 <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_GPIO_EXTI_Callback+0x80>
				tt = 7;
 80021dc:	4b89      	ldr	r3, [pc, #548]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 80021de:	2207      	movs	r2, #7
 80021e0:	601a      	str	r2, [r3, #0]
				elevator_type = 1;
 80021e2:	4b89      	ldr	r3, [pc, #548]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
				casecadeLift = false;  // 重置初始化狀態
 80021e8:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_GPIO_EXTI_Callback+0x29c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
			break;
 80021ee:	e0fb      	b.n	80023e8 <HAL_GPIO_EXTI_Callback+0x278>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f004 fa3c 	bl	8006674 <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ed 	beq.w	80023e8 <HAL_GPIO_EXTI_Callback+0x278>
				casecadeLift = true;
 800220e:	4b7f      	ldr	r3, [pc, #508]	@ (800240c <HAL_GPIO_EXTI_Callback+0x29c>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
			break;
 8002214:	e0e8      	b.n	80023e8 <HAL_GPIO_EXTI_Callback+0x278>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221e:	f004 fa29 	bl	8006674 <HAL_GPIO_ReadPin>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_GPIO_EXTI_Callback+0xd8>
				elevator_type = 2;
 8002232:	4b75      	ldr	r3, [pc, #468]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
				tt = 8;
 8002238:	4b72      	ldr	r3, [pc, #456]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 800223a:	2208      	movs	r2, #8
 800223c:	601a      	str	r2, [r3, #0]
				speeds = 0;
 800223e:	4b74      	ldr	r3, [pc, #464]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
			break;
 8002246:	e0d1      	b.n	80023ec <HAL_GPIO_EXTI_Callback+0x27c>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002250:	f004 fa10 	bl	8006674 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80c3 	beq.w	80023ec <HAL_GPIO_EXTI_Callback+0x27c>
				elevator_type = 1;
 8002266:	4b68      	ldr	r3, [pc, #416]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]
			break;
 800226c:	e0be      	b.n	80023ec <HAL_GPIO_EXTI_Callback+0x27c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002276:	f004 f9fd 	bl	8006674 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_GPIO_EXTI_Callback+0x130>
				tt = 9;
 800228a:	4b5e      	ldr	r3, [pc, #376]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 800228c:	2209      	movs	r2, #9
 800228e:	601a      	str	r2, [r3, #0]
				speeds = 0;
 8002290:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
				table_isTouch = 1;
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
			break;
 800229e:	e0a7      	b.n	80023f0 <HAL_GPIO_EXTI_Callback+0x280>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a8:	f004 f9e4 	bl	8006674 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8099 	beq.w	80023f0 <HAL_GPIO_EXTI_Callback+0x280>
				table_isTouch = 0;
 80022be:	4b55      	ldr	r3, [pc, #340]	@ (8002414 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
			break;
 80022c4:	e094      	b.n	80023f0 <HAL_GPIO_EXTI_Callback+0x280>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ce:	f004 f9d1 	bl	8006674 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00f      	beq.n	8002302 <HAL_GPIO_EXTI_Callback+0x192>
				tt = 4;
 80022e2:	4b48      	ldr	r3, [pc, #288]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 80022e4:	2204      	movs	r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
				speeds = 0;
 80022e8:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
				elevator_type = -1;
 80022f0:	4b45      	ldr	r3, [pc, #276]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 80022f2:	f04f 32ff 	mov.w	r2, #4294967295
 80022f6:	601a      	str	r2, [r3, #0]
				turn = 0;
 80022f8:	4b47      	ldr	r3, [pc, #284]	@ (8002418 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
			break;
 8002300:	e078      	b.n	80023f4 <HAL_GPIO_EXTI_Callback+0x284>
			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230a:	f004 f9b3 	bl	8006674 <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06a      	beq.n	80023f4 <HAL_GPIO_EXTI_Callback+0x284>
				elevator_type = 0;
 800231e:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
			break;
 8002324:	e066      	b.n	80023f4 <HAL_GPIO_EXTI_Callback+0x284>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_RESET){
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232e:	f004 f9a1 	bl	8006674 <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_GPIO_EXTI_Callback+0x1fc>
				tt = 5;
 8002342:	4b30      	ldr	r3, [pc, #192]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 8002344:	2205      	movs	r2, #5
 8002346:	601a      	str	r2, [r3, #0]
				if(initialized == false){
 8002348:	4b34      	ldr	r3, [pc, #208]	@ (800241c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <HAL_GPIO_EXTI_Callback+0x1ee>
					initialized = true;  // 重置初始化狀態
 8002350:	4b32      	ldr	r3, [pc, #200]	@ (800241c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
					speeds = 0;
 8002356:	4b2e      	ldr	r3, [pc, #184]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
				isTop = 1;
 800235e:	4b30      	ldr	r3, [pc, #192]	@ (8002420 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
				elevator_type = 1;
 8002364:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
			break;
 800236a:	e045      	b.n	80023f8 <HAL_GPIO_EXTI_Callback+0x288>
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_Pin) == GPIO_PIN_SET){
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f004 f97e 	bl	8006674 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d037      	beq.n	80023f8 <HAL_GPIO_EXTI_Callback+0x288>
				isTop = 0;
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			break;
 800238e:	e033      	b.n	80023f8 <HAL_GPIO_EXTI_Callback+0x288>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_RESET){
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4619      	mov	r1, r3
 8002394:	4823      	ldr	r0, [pc, #140]	@ (8002424 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002396:	f004 f96d 	bl	8006674 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <HAL_GPIO_EXTI_Callback+0x256>
				tt = 14;
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x294>)
 80023ac:	220e      	movs	r2, #14
 80023ae:	601a      	str	r2, [r3, #0]
				isTop = 3;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
				speeds = 0;
 80023b6:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
				elevator_type = 3;
 80023be:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x298>)
 80023c0:	2203      	movs	r2, #3
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	e019      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4619      	mov	r1, r3
 80023ca:	4816      	ldr	r0, [pc, #88]	@ (8002424 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80023cc:	f004 f952 	bl	8006674 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
				isTop = 0;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
}
 80023e6:	e008      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 80023e8:	bf00      	nop
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 80023ec:	bf00      	nop
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 80023f0:	bf00      	nop
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 80023f4:	bf00      	nop
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x28a>
			break;
 80023f8:	bf00      	nop
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000058c 	.word	0x2000058c
 8002408:	200005a4 	.word	0x200005a4
 800240c:	20000000 	.word	0x20000000
 8002410:	20000594 	.word	0x20000594
 8002414:	20000591 	.word	0x20000591
 8002418:	20000598 	.word	0x20000598
 800241c:	20000592 	.word	0x20000592
 8002420:	20000590 	.word	0x20000590
 8002424:	48000400 	.word	0x48000400

08002428 <_Z41__static_initialization_and_destruction_0ii>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af04      	add	r7, sp, #16
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d13f      	bne.n	80024b8 <_Z41__static_initialization_and_destruction_0ii+0x90>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800243e:	4293      	cmp	r3, r2
 8002440:	d13a      	bne.n	80024b8 <_Z41__static_initialization_and_destruction_0ii+0x90>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2,0,4,12};
 8002442:	2300      	movs	r3, #0
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	2304      	movs	r3, #4
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8002452:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8002456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800245a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800245e:	4919      	ldr	r1, [pc, #100]	@ (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002460:	4819      	ldr	r0, [pc, #100]	@ (80024c8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002462:	f7ff fd29 	bl	8001eb8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_mbff>
Servo servo_turn = {&htim3, TIM_CHANNEL_1, Servo::GBD300T};
 8002466:	2300      	movs	r3, #0
 8002468:	2200      	movs	r2, #0
 800246a:	4918      	ldr	r1, [pc, #96]	@ (80024cc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800246c:	4818      	ldr	r0, [pc, #96]	@ (80024d0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800246e:	f7ff fcf5 	bl	8001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2, Servo::GBD300T};
 8002472:	2300      	movs	r3, #0
 8002474:	2204      	movs	r2, #4
 8002476:	4917      	ldr	r1, [pc, #92]	@ (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002478:	4817      	ldr	r0, [pc, #92]	@ (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800247a:	f7ff fcef 	bl	8001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_left = {&htim1, TIM_CHANNEL_4, Servo::GBD300T};
 800247e:	2300      	movs	r3, #0
 8002480:	220c      	movs	r2, #12
 8002482:	4914      	ldr	r1, [pc, #80]	@ (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002484:	4815      	ldr	r0, [pc, #84]	@ (80024dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002486:	f7ff fce9 	bl	8001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_right = {&htim1, TIM_CHANNEL_3, Servo::GBD300T};
 800248a:	2300      	movs	r3, #0
 800248c:	2208      	movs	r2, #8
 800248e:	4911      	ldr	r1, [pc, #68]	@ (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002490:	4813      	ldr	r0, [pc, #76]	@ (80024e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002492:	f7ff fce3 	bl	8001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
Servo servo_forward = {&htim1, TIM_CHANNEL_1, Servo::GBD1800T};
 8002496:	2302      	movs	r3, #2
 8002498:	2200      	movs	r2, #0
 800249a:	490e      	ldr	r1, [pc, #56]	@ (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800249c:	4811      	ldr	r0, [pc, #68]	@ (80024e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800249e:	f7ff fcdd 	bl	8001e5c <_ZN5ServoC1EP17TIM_HandleTypeDefmNS_4typeE>
float mm_per_turn = total_high / total_turns; // 每步對應的公分數
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80024a4:	edd3 6a00 	vldr	s13, [r3]
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b2:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80024b4:	edc3 7a00 	vstr	s15, [r3]
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200002a8 	.word	0x200002a8
 80024c4:	200001c4 	.word	0x200001c4
 80024c8:	20000494 	.word	0x20000494
 80024cc:	20000178 	.word	0x20000178
 80024d0:	200004ec 	.word	0x200004ec
 80024d4:	200000e0 	.word	0x200000e0
 80024d8:	2000050c 	.word	0x2000050c
 80024dc:	2000052c 	.word	0x2000052c
 80024e0:	2000054c 	.word	0x2000054c
 80024e4:	2000056c 	.word	0x2000056c
 80024e8:	20000008 	.word	0x20000008
 80024ec:	20000004 	.word	0x20000004
 80024f0:	200005ac 	.word	0x200005ac

080024f4 <_GLOBAL__sub_I_Motor_updown>:
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff ff93 	bl	8002428 <_Z41__static_initialization_and_destruction_0ii>
 8002502:	bd80      	pop	{r7, pc}

08002504 <_Z14gripperControlb>:
}
void mission_4(){

}

void gripperControl(bool open){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
	if(open == 0){
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d108      	bne.n	8002526 <_Z14gripperControlb+0x22>
		servo_gripper.turnTo(240);  //close
 8002514:	2200      	movs	r2, #0
 8002516:	21f0      	movs	r1, #240	@ 0xf0
 8002518:	4809      	ldr	r0, [pc, #36]	@ (8002540 <_Z14gripperControlb+0x3c>)
 800251a:	f002 fd75 	bl	8005008 <_ZN5Servo6turnToEii>
		_gripperFinish = 0; //
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <_Z14gripperControlb+0x40>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
	}
	else{
		servo_gripper.turnTo(0); //open
		_gripperFinish = 1;
	}
}
 8002524:	e007      	b.n	8002536 <_Z14gripperControlb+0x32>
		servo_gripper.turnTo(0); //open
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	4805      	ldr	r0, [pc, #20]	@ (8002540 <_Z14gripperControlb+0x3c>)
 800252c:	f002 fd6c 	bl	8005008 <_ZN5Servo6turnToEii>
		_gripperFinish = 1;
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <_Z14gripperControlb+0x40>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000050c 	.word	0x2000050c
 8002544:	200005c0 	.word	0x200005c0

08002548 <_Z10middleTurni>:

void middleTurn(int angle){
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	float degree = angle;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255a:	edc7 7a03 	vstr	s15, [r7, #12]
	_current_theta = angle;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <_Z10middleTurni+0xa8>)
 800256a:	edc3 7a00 	vstr	s15, [r3]
	if(angle < 0 && angle > -260){
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	da18      	bge.n	80025a6 <_Z10middleTurni+0x5e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f513 7f82 	cmn.w	r3, #260	@ 0x104
 800257a:	dd14      	ble.n	80025a6 <_Z10middleTurni+0x5e>
		servo_turn.turnTo(261.0 + degree, 5000);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7fd ffb7 	bl	80004f0 <__aeabi_f2d>
 8002582:	a319      	add	r3, pc, #100	@ (adr r3, 80025e8 <_Z10middleTurni+0xa0>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fd fe54 	bl	8000234 <__adddf3>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fa9e 	bl	8000ad4 <__aeabi_d2iz>
 8002598:	4603      	mov	r3, r0
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4619      	mov	r1, r3
 80025a0:	4814      	ldr	r0, [pc, #80]	@ (80025f4 <_Z10middleTurni+0xac>)
 80025a2:	f002 fd31 	bl	8005008 <_ZN5Servo6turnToEii>
	}
	if(angle >= 0 && angle < 30){
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db17      	blt.n	80025dc <_Z10middleTurni+0x94>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b1d      	cmp	r3, #29
 80025b0:	dc14      	bgt.n	80025dc <_Z10middleTurni+0x94>
		servo_turn.turnTo(261.0 + degree, 5000);
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f7fd ff9c 	bl	80004f0 <__aeabi_f2d>
 80025b8:	a30b      	add	r3, pc, #44	@ (adr r3, 80025e8 <_Z10middleTurni+0xa0>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd fe39 	bl	8000234 <__adddf3>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe fa83 	bl	8000ad4 <__aeabi_d2iz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4619      	mov	r1, r3
 80025d6:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <_Z10middleTurni+0xac>)
 80025d8:	f002 fd16 	bl	8005008 <_ZN5Servo6turnToEii>
	}
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	f3af 8000 	nop.w
 80025e8:	00000000 	.word	0x00000000
 80025ec:	40705000 	.word	0x40705000
 80025f0:	200005bc 	.word	0x200005bc
 80025f4:	200004ec 	.word	0x200004ec

080025f8 <_Z14forwardToPointf>:
void for_last_mission(){
	servo_turn.turnTo(81);
	servo_forward.turnTo(30);
}

void forwardToPoint(float forward_mm){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(forward_mm < 0 && forward_mm > -90){
 8002602:	edd7 7a01 	vldr	s15, [r7, #4]
 8002606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	d523      	bpl.n	8002658 <_Z14forwardToPointf+0x60>
 8002610:	edd7 7a01 	vldr	s15, [r7, #4]
 8002614:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80026dc <_Z14forwardToPointf+0xe4>
 8002618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	dd1a      	ble.n	8002658 <_Z14forwardToPointf+0x60>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <_Z14forwardToPointf+0xe8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <_Z14forwardToPointf+0xec>)
 8002630:	edd3 6a00 	vldr	s13, [r3]
 8002634:	edd7 7a01 	vldr	s15, [r7, #4]
 8002638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002644:	2200      	movs	r2, #0
 8002646:	ee17 1a90 	vmov	r1, s15
 800264a:	4827      	ldr	r0, [pc, #156]	@ (80026e8 <_Z14forwardToPointf+0xf0>)
 800264c:	f002 fcdc 	bl	8005008 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 8002650:	4a26      	ldr	r2, [pc, #152]	@ (80026ec <_Z14forwardToPointf+0xf4>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e03d      	b.n	80026d4 <_Z14forwardToPointf+0xdc>
		
	}
	else if(forward_mm > 0 && forward_mm < 220){
 8002658:	edd7 7a01 	vldr	s15, [r7, #4]
 800265c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	dd23      	ble.n	80026ae <_Z14forwardToPointf+0xb6>
 8002666:	edd7 7a01 	vldr	s15, [r7, #4]
 800266a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80026f0 <_Z14forwardToPointf+0xf8>
 800266e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	d51a      	bpl.n	80026ae <_Z14forwardToPointf+0xb6>
		servo_forward.turnTo(int(zeroPointAngle + forward_mm*angle_per_mm));
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <_Z14forwardToPointf+0xe8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <_Z14forwardToPointf+0xec>)
 8002686:	edd3 6a00 	vldr	s13, [r3]
 800268a:	edd7 7a01 	vldr	s15, [r7, #4]
 800268e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269a:	2200      	movs	r2, #0
 800269c:	ee17 1a90 	vmov	r1, s15
 80026a0:	4811      	ldr	r0, [pc, #68]	@ (80026e8 <_Z14forwardToPointf+0xf0>)
 80026a2:	f002 fcb1 	bl	8005008 <_ZN5Servo6turnToEii>
		_current_y = forward_mm;
 80026a6:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <_Z14forwardToPointf+0xf4>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e012      	b.n	80026d4 <_Z14forwardToPointf+0xdc>
	}
	else if(forward_mm == 0){
 80026ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d10b      	bne.n	80026d4 <_Z14forwardToPointf+0xdc>
		servo_forward.turnTo(zeroPointAngle);
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <_Z14forwardToPointf+0xe8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4808      	ldr	r0, [pc, #32]	@ (80026e8 <_Z14forwardToPointf+0xf0>)
 80026c6:	f002 fc9f 	bl	8005008 <_ZN5Servo6turnToEii>
		_current_y = 0;
 80026ca:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_Z14forwardToPointf+0xf4>)
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
	}
}
 80026d2:	e7ff      	b.n	80026d4 <_Z14forwardToPointf+0xdc>
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	c2b40000 	.word	0xc2b40000
 80026e0:	20000010 	.word	0x20000010
 80026e4:	2000000c 	.word	0x2000000c
 80026e8:	2000056c 	.word	0x2000056c
 80026ec:	200005b8 	.word	0x200005b8
 80026f0:	435c0000 	.word	0x435c0000

080026f4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <_ZN3ros3MsgC1Ev+0x1c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	0800b620 	.word	0x0800b620

08002738 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
      data()
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffe8 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8002748:	4a06      	ldr	r2, [pc, #24]	@ (8002764 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff ffce 	bl	80026f4 <_ZN3ros4TimeC1Ev>
    {
    }
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	0800b608 	.word	0x0800b608

08002768 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0a19      	lsrs	r1, r3, #8
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3301      	adds	r3, #1
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	b2ca      	uxtb	r2, r1
 8002794:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0c19      	lsrs	r1, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3302      	adds	r3, #2
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0e19      	lsrs	r1, r3, #24
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3303      	adds	r3, #3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3304      	adds	r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	b2ca      	uxtb	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a19      	lsrs	r1, r3, #8
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	0c19      	lsrs	r1, r3, #16
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3302      	adds	r3, #2
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0e19      	lsrs	r1, r3, #24
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3303      	adds	r3, #3
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3304      	adds	r3, #4
 8002808:	60fb      	str	r3, [r7, #12]
      return offset;
 800280a:	68fb      	ldr	r3, [r7, #12]
    }
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	440b      	add	r3, r1
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3302      	adds	r3, #2
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	440b      	add	r3, r1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3303      	adds	r3, #3
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	440b      	add	r3, r1
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	061b      	lsls	r3, r3, #24
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3301      	adds	r3, #1
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	440b      	add	r3, r1
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3302      	adds	r3, #2
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	440b      	add	r3, r1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3303      	adds	r3, #3
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	440b      	add	r3, r1
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
     return offset;
 80028d2:	68fb      	ldr	r3, [r7, #12]
    }
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	0800b29c 	.word	0x0800b29c

080028fc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	0800b2ac 	.word	0x0800b2ac

08002918 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fef8 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8002928:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002938:	609a      	str	r2, [r3, #8]
      message_type(""),
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a07      	ldr	r2, [pc, #28]	@ (800295c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800293e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a06      	ldr	r2, [pc, #24]	@ (800295c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002944:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
    {
    }
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	0800b5f0 	.word	0x0800b5f0
 800295c:	0800b2d0 	.word	0x0800b2d0

08002960 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8899      	ldrh	r1, [r3, #4]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	b2ca      	uxtb	r2, r1
 800297a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	889b      	ldrh	r3, [r3, #4]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b299      	uxth	r1, r3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3302      	adds	r3, #2
 8002994:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fc3c 	bl	8000218 <strlen>
 80029a0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	69b9      	ldr	r1, [r7, #24]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fa50 	bl	8003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3304      	adds	r3, #4
 80029b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	18d0      	adds	r0, r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4619      	mov	r1, r3
 80029c4:	f008 fb20 	bl	800b008 <memcpy>
      offset += length_topic_name;
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fc1f 	bl	8000218 <strlen>
 80029da:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	6979      	ldr	r1, [r7, #20]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fa33 	bl	8003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	18d0      	adds	r0, r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f008 fb03 	bl	800b008 <memcpy>
      offset += length_message_type;
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	4413      	add	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fc02 	bl	8000218 <strlen>
 8002a14:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	6939      	ldr	r1, [r7, #16]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fa16 	bl	8003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3304      	adds	r3, #4
 8002a28:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	18d0      	adds	r0, r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4619      	mov	r1, r3
 8002a38:	f008 fae6 	bl	800b008 <memcpy>
      offset += length_md5sum;
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0a19      	lsrs	r1, r3, #8
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	b2ca      	uxtb	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0c19      	lsrs	r1, r3, #16
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	b2ca      	uxtb	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0e19      	lsrs	r1, r3, #24
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	b2ca      	uxtb	r2, r1
 8002a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	61fb      	str	r3, [r7, #28]
      return offset;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
    }
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b08a      	sub	sp, #40	@ 0x28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	889b      	ldrh	r3, [r3, #4]
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	3301      	adds	r3, #1
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	440b      	add	r3, r1
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	441a      	add	r2, r3
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 f9d3 	bl	8003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	3304      	adds	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af2:	e00b      	b.n	8002b0c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	441a      	add	r2, r3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	3b01      	subs	r3, #1
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	440b      	add	r3, r1
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	3301      	adds	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4413      	add	r3, r2
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3ed      	bcc.n	8002af4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	441a      	add	r2, r3
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f9a0 	bl	8003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3304      	adds	r3, #4
 8002b52:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	e00b      	b.n	8002b72 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	441a      	add	r2, r3
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	440b      	add	r3, r1
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3ed      	bcc.n	8002b5a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	3b01      	subs	r3, #1
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f96d 	bl	8003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e00b      	b.n	8002bd8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	440b      	add	r3, r1
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3ed      	bcc.n	8002bc0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	3b01      	subs	r3, #1
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	440a      	add	r2, r1
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	440b      	add	r3, r1
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	440b      	add	r3, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	3303      	adds	r3, #3
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	440b      	add	r3, r1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	61bb      	str	r3, [r7, #24]
     return offset;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
    }
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3728      	adds	r7, #40	@ 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	0800b2d4 	.word	0x0800b2d4

08002c84 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	0800b2f0 	.word	0x0800b2f0

08002ca0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fd34 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8002cb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
      level(0),
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	711a      	strb	r2, [r3, #4]
      msg("")
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002cc0:	609a      	str	r2, [r3, #8]
    {
    }
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0800b5d8 	.word	0x0800b5d8
 8002cd0:	0800b2d0 	.word	0x0800b2d0

08002cd4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	7912      	ldrb	r2, [r2, #4]
 8002cec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fa8d 	bl	8000218 <strlen>
 8002cfe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f8a1 	bl	8003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3304      	adds	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	18d0      	adds	r0, r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f008 f971 	bl	800b008 <memcpy>
      offset += length_msg;
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3301      	adds	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f892 	bl	8003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00b      	b.n	8002d8e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	440b      	add	r3, r1
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3ed      	bcc.n	8002d76 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b01      	subs	r3, #1
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
     return offset;
 8002dbe:	693b      	ldr	r3, [r7, #16]
    }
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	0800b314 	.word	0x0800b314

08002de4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	0800b328 	.word	0x0800b328

08002e00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fc84 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8002e10:	4a0c      	ldr	r2, [pc, #48]	@ (8002e44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	0800b5c0 	.word	0x0800b5c0

08002e48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	b2ca      	uxtb	r2, r1
 8002e62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	0a19      	lsrs	r1, r3, #8
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	b2ca      	uxtb	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c19      	lsrs	r1, r3, #16
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	3302      	adds	r3, #2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2ca      	uxtb	r2, r1
 8002e86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0e19      	lsrs	r1, r3, #24
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	3303      	adds	r3, #3
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2ca      	uxtb	r2, r1
 8002e98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	e02a      	b.n	8002efc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002eb4:	6939      	ldr	r1, [r7, #16]
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	0a19      	lsrs	r1, r3, #8
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	b2ca      	uxtb	r2, r1
 8002ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	0c19      	lsrs	r1, r3, #16
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	b2ca      	uxtb	r2, r1
 8002ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	0e19      	lsrs	r1, r3, #24
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	3303      	adds	r3, #3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3cf      	bcc.n	8002ea6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2ca      	uxtb	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	0a19      	lsrs	r1, r3, #8
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	b2ca      	uxtb	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	0c19      	lsrs	r1, r3, #16
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	3302      	adds	r3, #2
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	b2ca      	uxtb	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	0e19      	lsrs	r1, r3, #24
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	3303      	adds	r3, #3
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e02a      	b.n	8002fac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2ca      	uxtb	r2, r1
 8002f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	0a19      	lsrs	r1, r3, #8
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	3301      	adds	r3, #1
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b2ca      	uxtb	r2, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	0c19      	lsrs	r1, r3, #16
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	3302      	adds	r3, #2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b2ca      	uxtb	r2, r1
 8002f8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	0e19      	lsrs	r1, r3, #24
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	3303      	adds	r3, #3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2ca      	uxtb	r2, r1
 8002f9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3cf      	bcc.n	8002f56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69d9      	ldr	r1, [r3, #28]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b2ca      	uxtb	r2, r1
 8002fc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	0a19      	lsrs	r1, r3, #8
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	3301      	adds	r3, #1
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	b2ca      	uxtb	r2, r1
 8002fd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	0c19      	lsrs	r1, r3, #16
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	3302      	adds	r3, #2
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	b2ca      	uxtb	r2, r1
 8002fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	0e19      	lsrs	r1, r3, #24
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b2ca      	uxtb	r2, r1
 8002ff8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e027      	b.n	8003056 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd f900 	bl	8000218 <strlen>
 8003018:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	4413      	add	r3, r2
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ff14 	bl	8003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	3304      	adds	r3, #4
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	18d0      	adds	r0, r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4619      	mov	r1, r3
 8003044:	f007 ffe0 	bl	800b008 <memcpy>
      offset += length_stringsi;
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4413      	add	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	3301      	adds	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	d3d2      	bcc.n	8003006 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	@ 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800306a:	b580      	push	{r7, lr}
 800306c:	b08e      	sub	sp, #56	@ 0x38
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	4413      	add	r3, r2
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003084:	3301      	adds	r3, #1
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	4313      	orrs	r3, r2
 8003092:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003096:	3302      	adds	r3, #2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	3303      	adds	r3, #3
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	6a3a      	ldr	r2, [r7, #32]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80030b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ba:	3304      	adds	r3, #4
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d90a      	bls.n	80030de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f007 ff2e 	bl	800af34 <realloc>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80030e4:	2300      	movs	r3, #0
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e8:	e035      	b.n	8003156 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	440a      	add	r2, r1
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	3301      	adds	r3, #1
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	440b      	add	r3, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	3302      	adds	r3, #2
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	440b      	add	r3, r1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	3303      	adds	r3, #3
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	440b      	add	r3, r1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313a:	3304      	adds	r3, #4
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	3301      	adds	r3, #1
 8003154:	633b      	str	r3, [r7, #48]	@ 0x30
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800315c:	429a      	cmp	r2, r3
 800315e:	d3c4      	bcc.n	80030ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	3301      	adds	r3, #1
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317e:	3302      	adds	r3, #2
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	4313      	orrs	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800318e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003190:	3303      	adds	r3, #3
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4413      	add	r3, r2
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	4313      	orrs	r3, r2
 800319e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	3304      	adds	r3, #4
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d90a      	bls.n	80031c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f007 feba 	bl	800af34 <realloc>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031d0:	e035      	b.n	800323e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	440a      	add	r2, r1
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e8:	3301      	adds	r3, #1
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	440b      	add	r3, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fa:	3302      	adds	r3, #2
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	440b      	add	r3, r1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320c:	3303      	adds	r3, #3
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	440b      	add	r3, r1
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003222:	3304      	adds	r3, #4
 8003224:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	3214      	adds	r2, #20
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	3301      	adds	r3, #1
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d3c4      	bcc.n	80031d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	4413      	add	r3, r2
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	3301      	adds	r3, #1
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003266:	3302      	adds	r3, #2
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	3303      	adds	r3, #3
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	3304      	adds	r3, #4
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	429a      	cmp	r2, r3
 8003296:	d90a      	bls.n	80032ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f007 fe46 	bl	800af34 <realloc>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b8:	e03e      	b.n	8003338 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80032ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	441a      	add	r2, r3
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fde1 	bl	8003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	3304      	adds	r3, #4
 80032d0:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80032d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	e00b      	b.n	80032f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	441a      	add	r2, r3
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	3b01      	subs	r3, #1
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	440b      	add	r3, r1
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	3301      	adds	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3ed      	bcc.n	80032d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80032fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	3b01      	subs	r3, #1
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	3b01      	subs	r3, #1
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	441a      	add	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	3220      	adds	r2, #32
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003334:	3301      	adds	r3, #1
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800333e:	429a      	cmp	r2, r3
 8003340:	d3bb      	bcc.n	80032ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003344:	4618      	mov	r0, r3
 8003346:	3738      	adds	r7, #56	@ 0x38
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	0800b4e4 	.word	0x0800b4e4

08003368 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	0800b34c 	.word	0x0800b34c

08003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68d8      	ldr	r0, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6891      	ldr	r1, [r2, #8]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	4798      	blx	r3
 80033d0:	4603      	mov	r3, r0
  };
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
  }
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800340a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003438:	461a      	mov	r2, r3
 800343a:	2300      	movs	r3, #0
 800343c:	6093      	str	r3, [r2, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003444:	461a      	mov	r2, r3
 8003446:	2300      	movs	r3, #0
 8003448:	60d3      	str	r3, [r2, #12]
    }
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	20000340 	.word	0x20000340

0800345c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f804 	bl	8003472 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003486:	4619      	mov	r1, r3
 8003488:	f006 f906 	bl	8009698 <HAL_UART_Receive_DMA>
    }
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
 80034a0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffa2 	bl	80033f2 <_ZN13STM32Hardware10getRdmaIndEv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	429c      	cmp	r4, r3
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	f8c2 1804 	str.w	r1, [r2, #2052]	@ 0x804
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80034da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      }
      return c;
 80034e4:	68fb      	ldr	r3, [r7, #12]
    }
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
	...

080034f0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	2b20      	cmp	r3, #32
 8003502:	d108      	bne.n	8003516 <_ZN13STM32Hardware5flushEv+0x26>
 8003504:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f083 0301 	eor.w	r3, r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <_ZN13STM32Hardware5flushEv+0x26>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <_ZN13STM32Hardware5flushEv+0x28>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d049      	beq.n	80035b0 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 800351c:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <_ZN13STM32Hardware5flushEv+0xc8>)
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	429a      	cmp	r2, r3
 8003534:	d039      	beq.n	80035aa <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20c      	bcs.n	8003564 <_ZN13STM32Hardware5flushEv+0x74>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	b29b      	uxth	r3, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	b29b      	uxth	r3, r3
 8003562:	e007      	b.n	8003574 <_ZN13STM32Hardware5flushEv+0x84>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8003572:	b29b      	uxth	r3, r3
 8003574:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	89fa      	ldrh	r2, [r7, #14]
 800358c:	4619      	mov	r1, r3
 800358e:	f006 f803 	bl	8009598 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	4413      	add	r3, r2
 800359e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035a8:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80035aa:	4b03      	ldr	r3, [pc, #12]	@ (80035b8 <_ZN13STM32Hardware5flushEv+0xc8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
      }
    }
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200005c1 	.word	0x200005c1

080035bc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
      int n = length;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d2:	bfa8      	it	ge
 80035d4:	f44f 6300 	movge.w	r3, #2048	@ 0x800
 80035d8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf28      	it	cs
 80035ec:	4613      	movcs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f007 fcff 	bl	800b008 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4413      	add	r3, r2
 8003616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003620:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d00b      	beq.n	8003642 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f603 0008 	addw	r0, r3, #2056	@ 0x808
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	18d1      	adds	r1, r2, r3
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	461a      	mov	r2, r3
 800363e:	f007 fce3 	bl	800b008 <memcpy>
      }

      flush();
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff ff54 	bl	80034f0 <_ZN13STM32Hardware5flushEv>
    }
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	f002 fa3c 	bl	8005ad4 <HAL_GetTick>
 800365c:	4603      	mov	r3, r0
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
      data(0)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff f850 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8003678:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
    {
    }
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	0800b57c 	.word	0x0800b57c

08003694 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	b2ca      	uxtb	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	0a19      	lsrs	r1, r3, #8
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	b2ca      	uxtb	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c19      	lsrs	r1, r3, #16
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3302      	adds	r3, #2
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	b2ca      	uxtb	r2, r1
 80036d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	0e19      	lsrs	r1, r3, #24
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3303      	adds	r3, #3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	b2ca      	uxtb	r2, r1
 80036e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3304      	adds	r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
      return offset;
 80036ea:	68fb      	ldr	r3, [r7, #12]
    }
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	440a      	add	r2, r1
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	440b      	add	r3, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	4313      	orrs	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3302      	adds	r3, #2
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	440b      	add	r3, r1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3303      	adds	r3, #3
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	440b      	add	r3, r1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
     return offset;
 800375a:	68fb      	ldr	r3, [r7, #12]
    }
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	0800b370 	.word	0x0800b370

08003784 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	0800b380 	.word	0x0800b380

080037a0 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
      data(0)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe ffb4 	bl	8002718 <_ZN3ros3MsgC1Ev>
 80037b0:	4a05      	ldr	r2, [pc, #20]	@ (80037c8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	711a      	strb	r2, [r3, #4]
    {
    }
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	0800b564 	.word	0x0800b564

080037cc <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	7a3a      	ldrb	r2, [r7, #8]
 80037e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3301      	adds	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80037f0:	68fb      	ldr	r3, [r7, #12]
    }
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003810:	7a3a      	ldrb	r2, [r7, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	440b      	add	r3, r1
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	b2db      	uxtb	r3, r3
 800381e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003820:	7a3a      	ldrb	r2, [r7, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
     return offset;
 800382c:	68fb      	ldr	r3, [r7, #12]
    }
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	0800b3a4 	.word	0x0800b3a4

08003858 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	0800b3b4 	.word	0x0800b3b4

08003874 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
      data(0)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ff4a 	bl	8002718 <_ZN3ros3MsgC1Ev>
 8003884:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <_ZN8std_msgs7Float64C1Ev+0x30>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	0800b54c 	.word	0x0800b54c

080038a8 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80038c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	4401      	add	r1, r0
 80038ca:	b2d3      	uxtb	r3, r2
 80038cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80038ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	0a02      	lsrs	r2, r0, #8
 80038dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80038e0:	0a0b      	lsrs	r3, r1, #8
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	3101      	adds	r1, #1
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	4401      	add	r1, r0
 80038ea:	b2d3      	uxtb	r3, r2
 80038ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80038ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	0c02      	lsrs	r2, r0, #16
 80038fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003900:	0c0b      	lsrs	r3, r1, #16
 8003902:	6979      	ldr	r1, [r7, #20]
 8003904:	3102      	adds	r1, #2
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	4401      	add	r1, r0
 800390a:	b2d3      	uxtb	r3, r2
 800390c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800390e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	0e02      	lsrs	r2, r0, #24
 800391c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003920:	0e0b      	lsrs	r3, r1, #24
 8003922:	6979      	ldr	r1, [r7, #20]
 8003924:	3103      	adds	r1, #3
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	4401      	add	r1, r0
 800392a:	b2d3      	uxtb	r3, r2
 800392c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800392e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	000a      	movs	r2, r1
 800393c:	2300      	movs	r3, #0
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	3104      	adds	r1, #4
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	4401      	add	r1, r0
 8003946:	b2d3      	uxtb	r3, r2
 8003948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800394a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	0a0a      	lsrs	r2, r1, #8
 8003958:	2300      	movs	r3, #0
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	3105      	adds	r1, #5
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	4401      	add	r1, r0
 8003962:	b2d3      	uxtb	r3, r2
 8003964:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	0c0a      	lsrs	r2, r1, #16
 8003974:	2300      	movs	r3, #0
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	3106      	adds	r1, #6
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	4401      	add	r1, r0
 800397e:	b2d3      	uxtb	r3, r2
 8003980:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0e0a      	lsrs	r2, r1, #24
 8003990:	2300      	movs	r3, #0
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	3107      	adds	r1, #7
 8003996:	6838      	ldr	r0, [r7, #0]
 8003998:	4401      	add	r1, r0
 800399a:	b2d3      	uxtb	r3, r2
 800399c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3308      	adds	r3, #8
 80039a2:	617b      	str	r3, [r7, #20]
      return offset;
 80039a4:	697b      	ldr	r3, [r7, #20]
    }
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80039b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80039b6:	b0a3      	sub	sp, #140	@ 0x8c
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6778      	str	r0, [r7, #116]	@ 0x74
 80039bc:	6739      	str	r1, [r7, #112]	@ 0x70
    {
      int offset = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80039d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039da:	4413      	add	r3, r2
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2200      	movs	r2, #0
 80039e2:	461c      	mov	r4, r3
 80039e4:	4615      	mov	r5, r2
 80039e6:	ea40 0804 	orr.w	r8, r0, r4
 80039ea:	ea41 0905 	orr.w	r9, r1, r5
 80039ee:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2200      	movs	r2, #0
 8003a06:	469a      	mov	sl, r3
 8003a08:	4693      	mov	fp, r2
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a16:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a1a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a1e:	ea40 0402 	orr.w	r4, r0, r2
 8003a22:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003a24:	430b      	orrs	r3, r1
 8003a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a28:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003a2c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a3c:	4413      	add	r3, r2
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2200      	movs	r2, #0
 8003a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a46:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a54:	464c      	mov	r4, r9
 8003a56:	0423      	lsls	r3, r4, #16
 8003a58:	4644      	mov	r4, r8
 8003a5a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a5e:	4644      	mov	r4, r8
 8003a60:	0422      	lsls	r2, r4, #16
 8003a62:	ea40 0402 	orr.w	r4, r0, r2
 8003a66:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a6c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003a70:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a7c:	1cda      	adds	r2, r3, #3
 8003a7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a80:	4413      	add	r3, r2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2200      	movs	r2, #0
 8003a88:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a8a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003a90:	4623      	mov	r3, r4
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a96:	4623      	mov	r3, r4
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	4303      	orrs	r3, r0
 8003aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003ab0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ab4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003abc:	1d1a      	adds	r2, r3, #4
 8003abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8003ad6:	0023      	movs	r3, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	ea40 0402 	orr.w	r4, r0, r2
 8003ade:	633c      	str	r4, [r7, #48]	@ 0x30
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003ae8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003aec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003af4:	1d5a      	adds	r2, r3, #5
 8003af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af8:	4413      	add	r3, r2
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8003b0e:	0223      	lsls	r3, r4, #8
 8003b10:	2200      	movs	r2, #0
 8003b12:	ea40 0402 	orr.w	r4, r0, r2
 8003b16:	623c      	str	r4, [r7, #32]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b20:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b24:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b2c:	3306      	adds	r3, #6
 8003b2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b30:	4413      	add	r3, r2
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2200      	movs	r2, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	61fa      	str	r2, [r7, #28]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	69bc      	ldr	r4, [r7, #24]
 8003b46:	0423      	lsls	r3, r4, #16
 8003b48:	2200      	movs	r2, #0
 8003b4a:	ea40 0402 	orr.w	r4, r0, r2
 8003b4e:	613c      	str	r4, [r7, #16]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b58:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b5c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b64:	3307      	adds	r3, #7
 8003b66:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	68bc      	ldr	r4, [r7, #8]
 8003b7e:	0623      	lsls	r3, r4, #24
 8003b80:	2200      	movs	r2, #0
 8003b82:	ea40 0402 	orr.w	r4, r0, r2
 8003b86:	603c      	str	r4, [r7, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b90:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      this->data = u_data.real;
 8003b94:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003b98:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003b9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
     return offset;
 8003ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    }
 8003bac:	4618      	mov	r0, r3
 8003bae:	378c      	adds	r7, #140	@ 0x8c
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bb6:	4770      	bx	lr

08003bb8 <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	0800b3d8 	.word	0x0800b3d8

08003bd4 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	0800b3ec 	.word	0x0800b3ec

08003bf0 <_ZN4ROS14initEv>:
namespace ROS1 {
  /**
   * @brief ROS1 節點宣告。
   * @param void
   */
  void init(void){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
    nh.initNode();
 8003bf4:	4818      	ldr	r0, [pc, #96]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003bf6:	f000 fa73 	bl	80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.advertise(pub_gripper);
 8003bfa:	4918      	ldr	r1, [pc, #96]	@ (8003c5c <_ZN4ROS14initEv+0x6c>)
 8003bfc:	4816      	ldr	r0, [pc, #88]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003bfe:	f000 fa98 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_basket);
 8003c02:	4917      	ldr	r1, [pc, #92]	@ (8003c60 <_ZN4ROS14initEv+0x70>)
 8003c04:	4814      	ldr	r0, [pc, #80]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c06:	f000 fa94 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_elevator);
 8003c0a:	4916      	ldr	r1, [pc, #88]	@ (8003c64 <_ZN4ROS14initEv+0x74>)
 8003c0c:	4812      	ldr	r0, [pc, #72]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c0e:	f000 fa90 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_touch);
 8003c12:	4915      	ldr	r1, [pc, #84]	@ (8003c68 <_ZN4ROS14initEv+0x78>)
 8003c14:	4810      	ldr	r0, [pc, #64]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c16:	f000 fa8c 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_y);
 8003c1a:	4914      	ldr	r1, [pc, #80]	@ (8003c6c <_ZN4ROS14initEv+0x7c>)
 8003c1c:	480e      	ldr	r0, [pc, #56]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c1e:	f000 fa88 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
    nh.advertise(pub_theta);
 8003c22:	4913      	ldr	r1, [pc, #76]	@ (8003c70 <_ZN4ROS14initEv+0x80>)
 8003c24:	480c      	ldr	r0, [pc, #48]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c26:	f000 fa84 	bl	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    nh.subscribe(sub_gripper);
 8003c2a:	4912      	ldr	r1, [pc, #72]	@ (8003c74 <_ZN4ROS14initEv+0x84>)
 8003c2c:	480a      	ldr	r0, [pc, #40]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c2e:	f000 fab0 	bl	8004192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_elevatorHeight);
 8003c32:	4911      	ldr	r1, [pc, #68]	@ (8003c78 <_ZN4ROS14initEv+0x88>)
 8003c34:	4808      	ldr	r0, [pc, #32]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c36:	f000 fad7 	bl	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_basketDoor);
 8003c3a:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <_ZN4ROS14initEv+0x8c>)
 8003c3c:	4806      	ldr	r0, [pc, #24]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c3e:	f000 faa8 	bl	8004192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
    nh.subscribe(sub_turn);
 8003c42:	490f      	ldr	r1, [pc, #60]	@ (8003c80 <_ZN4ROS14initEv+0x90>)
 8003c44:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c46:	f000 facf 	bl	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>
    nh.subscribe(sub_forward);
 8003c4a:	490e      	ldr	r1, [pc, #56]	@ (8003c84 <_ZN4ROS14initEv+0x94>)
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <_ZN4ROS14initEv+0x68>)
 8003c4e:	f000 facb 	bl	80041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>

    return;
 8003c52:	bf00      	nop
  }
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200005c4 	.word	0x200005c4
 8003c5c:	20001b08 	.word	0x20001b08
 8003c60:	20001b40 	.word	0x20001b40
 8003c64:	20001b68 	.word	0x20001b68
 8003c68:	20001b24 	.word	0x20001b24
 8003c6c:	20001ba0 	.word	0x20001ba0
 8003c70:	20001bb4 	.word	0x20001bb4
 8003c74:	20001bc8 	.word	0x20001bc8
 8003c78:	20001c1c 	.word	0x20001c1c
 8003c7c:	20001c38 	.word	0x20001c38
 8003c80:	20001be4 	.word	0x20001be4
 8003c84:	20001c00 	.word	0x20001c00

08003c88 <_ZN4ROS19spinCycleEv>:

  /**
   * @brief ROS1 循環單位。
   * @param void
   */
  void spinCycle(void){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003c8c:	4802      	ldr	r0, [pc, #8]	@ (8003c98 <_ZN4ROS19spinCycleEv+0x10>)
 8003c8e:	f000 fad6 	bl	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
    return;
 8003c92:	bf00      	nop
  }
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200005c4 	.word	0x200005c4

08003c9c <_ZN4ROS110_pub_touchEv>:

  void _pub_touch(void){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
	touchFinish.data = table_isTouch;
 8003ca0:	4b04      	ldr	r3, [pc, #16]	@ (8003cb4 <_ZN4ROS110_pub_touchEv+0x18>)
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003ca6:	711a      	strb	r2, [r3, #4]
	pub_touch.publish(&touchFinish);
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <_ZN4ROS110_pub_touchEv+0x1c>)
 8003caa:	4804      	ldr	r0, [pc, #16]	@ (8003cbc <_ZN4ROS110_pub_touchEv+0x20>)
 8003cac:	f7ff fb81 	bl	80033b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	return;
 8003cb0:	bf00      	nop
  }
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000591 	.word	0x20000591
 8003cb8:	20001b1c 	.word	0x20001b1c
 8003cbc:	20001b24 	.word	0x20001b24

08003cc0 <_ZN4ROS112_pub_gripperEv>:
  void _pub_gripper(void){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
    gripperFinish.data = _gripperFinish;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	@ (8003cd8 <_ZN4ROS112_pub_gripperEv+0x18>)
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003cca:	711a      	strb	r2, [r3, #4]
    //	gripperIsGet = 0;
    pub_gripper.publish(&gripperFinish);
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <_ZN4ROS112_pub_gripperEv+0x1c>)
 8003cce:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <_ZN4ROS112_pub_gripperEv+0x20>)
 8003cd0:	f7ff fb6f 	bl	80033b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003cd4:	bf00      	nop
  }
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200005c0 	.word	0x200005c0
 8003cdc:	20001b00 	.word	0x20001b00
 8003ce0:	20001b08 	.word	0x20001b08

08003ce4 <_ZN4ROS16_pub_yEv>:
  void _pub_elevator(void){
    elevatorHeight.data = high;
    pub_basket.publish(&basketFinish);
    return;
  }
  void _pub_y(void){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
    current_y.data = _current_y;
 8003ce8:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <_ZN4ROS16_pub_yEv+0x24>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fbff 	bl	80004f0 <__aeabi_f2d>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4905      	ldr	r1, [pc, #20]	@ (8003d0c <_ZN4ROS16_pub_yEv+0x28>)
 8003cf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_y.publish(&current_y);
 8003cfc:	4903      	ldr	r1, [pc, #12]	@ (8003d0c <_ZN4ROS16_pub_yEv+0x28>)
 8003cfe:	4804      	ldr	r0, [pc, #16]	@ (8003d10 <_ZN4ROS16_pub_yEv+0x2c>)
 8003d00:	f7ff fb57 	bl	80033b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003d04:	bf00      	nop
  }
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200005b8 	.word	0x200005b8
 8003d0c:	20001b80 	.word	0x20001b80
 8003d10:	20001ba0 	.word	0x20001ba0

08003d14 <_ZN4ROS110_pub_thetaEv>:
  void _pub_theta(void){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
    current_theta.data = _current_theta;
 8003d18:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <_ZN4ROS110_pub_thetaEv+0x24>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fbe7 	bl	80004f0 <__aeabi_f2d>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4905      	ldr	r1, [pc, #20]	@ (8003d3c <_ZN4ROS110_pub_thetaEv+0x28>)
 8003d28:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pub_theta.publish(&current_theta);
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <_ZN4ROS110_pub_thetaEv+0x28>)
 8003d2e:	4804      	ldr	r0, [pc, #16]	@ (8003d40 <_ZN4ROS110_pub_thetaEv+0x2c>)
 8003d30:	f7ff fb3f 	bl	80033b2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    return;
 8003d34:	bf00      	nop
  }
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200005bc 	.word	0x200005bc
 8003d3c:	20001b90 	.word	0x20001b90
 8003d40:	20001bb4 	.word	0x20001bb4

08003d44 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E>:

  void callback_turn(const std_msgs::Int32 &msg){
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	  if(isTop == 1){
 8003d4c:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x2c>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x1c>
		  middleTurn(msg.data);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fbf5 	bl	8002548 <_Z10middleTurni>
	  }
	  else{
		  speeds = 0.5;
	  }
  }
 8003d5e:	e003      	b.n	8003d68 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x24>
		  speeds = 0.5;
 8003d60:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <_ZN4ROS113callback_turnERKN8std_msgs5Int32E+0x30>)
 8003d62:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003d66:	601a      	str	r2, [r3, #0]
  }
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000590 	.word	0x20000590
 8003d74:	20000594 	.word	0x20000594

08003d78 <_ZN4ROS116callback_gripperERKN8std_msgs4BoolE>:
  /**
   * @brief Intake 回調函數。
   * @param std_msgs::Bool
   */
  void callback_gripper(const std_msgs::Bool &msg){
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	//gripperIsGet = 1;
	gripperControl(msg.data);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	791b      	ldrb	r3, [r3, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fbbd 	bl	8002504 <_Z14gripperControlb>
	// else runIntake = false;
	return;
 8003d8a:	bf00      	nop
  }
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN4ROS116callback_forwardERKN8std_msgs5Int32E>:
  void callback_basketDoor(const std_msgs::Bool &msg){
	basketControl(msg.data);
	return;
   }

  void callback_forward(const std_msgs::Int32 &msg){   //-90~220
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	  forwardToPoint(msg.data);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da6:	eeb0 0a67 	vmov.f32	s0, s15
 8003daa:	f7fe fc25 	bl	80025f8 <_Z14forwardToPointf>
	  return;
 8003dae:	bf00      	nop
  }
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E>:

  /**
   * @brief Elevator 回調函數。
   * @param std_msgs::Int32
   */
  void callback_Elevator(const std_msgs::Int32 &msg){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	  if(table_isTouch == 0){
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x70>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12b      	bne.n	8003e20 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x68>
		if(elevator_type  != -1 && msg.data == -1){
 8003dc8:	4b18      	ldr	r3, [pc, #96]	@ (8003e2c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d009      	beq.n	8003de6 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d104      	bne.n	8003de6 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x2e>
			speeds = -0.5;
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003dde:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e01b      	b.n	8003e1e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		else if(elevator_type  != 3 && msg.data == 1 && isTop == 0){
 8003de6:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x74>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d00c      	beq.n	8003e08 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
 8003df6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x7c>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x50>
			speeds = 0.5;
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x78>)
 8003e00:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e00a      	b.n	8003e1e <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x66>
		}
		      // runElevator = msg.data;
		 else{
			Motor_updown.heightTo((float) msg.data);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e14:	eeb0 0a67 	vmov.f32	s0, s15
 8003e18:	4807      	ldr	r0, [pc, #28]	@ (8003e38 <_ZN4ROS117callback_ElevatorERKN8std_msgs5Int32E+0x80>)
 8003e1a:	f7fd fa2d 	bl	8001278 <_ZN8DC_motor8heightToEf>
		 }
	  }


    return;
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
  }
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000591 	.word	0x20000591
 8003e2c:	200005a4 	.word	0x200005a4
 8003e30:	20000594 	.word	0x20000594
 8003e34:	20000590 	.word	0x20000590
 8003e38:	20000494 	.word	0x20000494

08003e3c <_ZN4ROS119callback_BasketDoorERKN8std_msgs4BoolE>:

  /**
   * @brief BasketDoor 回調函數。
   * @param std_msgs::Bool
   */
  void callback_BasketDoor(const std_msgs::Bool &msg){
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    // if(msg.data) runBasketDoor = true;
    // else runBasketDoor = false;
    return;
 8003e44:	bf00      	nop
  }
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e00c      	b.n	8003e7a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	fa22 f103 	lsr.w	r1, r2, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b2ca      	uxtb	r2, r1
 8003e72:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d9ef      	bls.n	8003e60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e010      	b.n	8003ec6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6839      	ldr	r1, [r7, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	440a      	add	r2, r1
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	00d2      	lsls	r2, r2, #3
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d9eb      	bls.n	8003ea4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	@ (8003ef8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	0800b5ac 	.word	0x0800b5ac

08003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ffe8 	bl	8003edc <_ZN3ros15NodeHandleBase_C1Ev>
 8003f0c:	4a47      	ldr	r2, [pc, #284]	@ (800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fa80 	bl	800341c <_ZN13STM32HardwareC1Ev>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8003f2e:	3314      	adds	r3, #20
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe ff65 	bl	8002e00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e00a      	b.n	8003f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b18      	cmp	r3, #24
 8003f56:	d9f1      	bls.n	8003f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e009      	b.n	8003f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8003f66:	2100      	movs	r1, #0
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b18      	cmp	r3, #24
 8003f76:	d9f2      	bls.n	8003f5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e00a      	b.n	8003f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9a:	d3f0      	bcc.n	8003f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e00a      	b.n	8003fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8003fac:	3304      	adds	r3, #4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fbe:	d3f0      	bcc.n	8003fa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
    req_param_resp.floats_length = 0;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c2 3524 	str.w	r3, [r2, #1316]	@ 0x524
    req_param_resp.floats = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c2 352c 	str.w	r3, [r2, #1324]	@ 0x52c
    req_param_resp.ints_length = 0;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ffe:	461a      	mov	r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
    req_param_resp.ints = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520

    spin_timeout_ = 0;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6213      	str	r3, [r2, #32]
  }
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	0800b538 	.word	0x0800b538

08004030 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	4a04      	ldr	r2, [pc, #16]	@ (800404c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	0800b594 	.word	0x0800b594

08004050 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ffe5 	bl	8004030 <_ZN3ros11Subscriber_C1Ev>
 8004066:	4a0b      	ldr	r2, [pc, #44]	@ (8004094 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	330c      	adds	r3, #12
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fb95 	bl	80037a0 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  };
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	0800b520 	.word	0x0800b520

08004098 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ffc1 	bl	8004030 <_ZN3ros11Subscriber_C1Ev>
 80040ae:	4a0b      	ldr	r2, [pc, #44]	@ (80040dc <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	330c      	adds	r3, #12
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fad5 	bl	8003668 <_ZN8std_msgs5Int32C1Ev>
    cb_(cb),
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]
  };
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	0800b508 	.word	0x0800b508

080040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f9b5 	bl	800345c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f8:	461a      	mov	r2, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
    bytes_ = 0;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
    index_ = 0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004114:	461a      	mov	r2, r3
 8004116:	2300      	movs	r3, #0
 8004118:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
    topic_ = 0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
  };
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e01d      	b.n	800417e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d111      	bne.n	8004178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	60da      	str	r2, [r3, #12]
        return true;
 8004174:	2301      	movs	r3, #1
 8004176:	e006      	b.n	8004186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b18      	cmp	r3, #24
 8004182:	ddde      	ble.n	8004142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004184:	2300      	movs	r3, #0
  }
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e018      	b.n	80041d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80041b2:	6839      	ldr	r1, [r7, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]
        return true;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e006      	b.n	80041dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b18      	cmp	r3, #24
 80041d8:	dde3      	ble.n	80041a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x10>
      }
    }
    return false;
 80041da:	2300      	movs	r3, #0
  }
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e018      	b.n	800422a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10d      	bne.n	8004224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
        return true;
 8004220:	2301      	movs	r3, #1
 8004222:	e006      	b.n	8004232 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b18      	cmp	r3, #24
 800422e:	dde3      	ble.n	80041f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x10>
    return false;
 8004230:	2300      	movs	r3, #0
  }
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fa00 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 8004250:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004264:	4293      	cmp	r3, r2
 8004266:	d905      	bls.n	8004274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
    if (mode_ != MODE_FIRST_FF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800427a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004288:	f8d3 350c 	ldr.w	r3, [r3, #1292]	@ 0x50c
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	429a      	cmp	r2, r3
 8004290:	d906      	bls.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004298:	461a      	mov	r2, r3
 800429a:	2300      	movs	r3, #0
 800429c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
      if (spin_timeout_ > 0)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff f9cd 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	bf8c      	ite	hi
 80042c8:	2301      	movhi	r3, #1
 80042ca:	2300      	movls	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80042d2:	f06f 0301 	mvn.w	r3, #1
 80042d6:	e226      	b.n	8004726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff f8d9 	bl	8003494 <_ZN13STM32Hardware4readEv>
 80042e2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f2c0 81ff 	blt.w	80046ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f2:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004300:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800430e:	2b07      	cmp	r3, #7
 8004310:	d12d      	bne.n	800436e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004318:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8004324:	f8c1 24f8 	str.w	r2, [r1, #1272]	@ 0x4f8
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	b2d1      	uxtb	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004334:	3304      	adds	r3, #4
 8004336:	460a      	mov	r2, r1
 8004338:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8004344:	3b01      	subs	r3, #1
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800434c:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004356:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1a0      	bne.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004364:	461a      	mov	r2, r3
 8004366:	2308      	movs	r3, #8
 8004368:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800436c:	e798      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004378:	2b00      	cmp	r3, #0
 800437a:	d130      	bne.n	80043de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2bff      	cmp	r3, #255	@ 0xff
 8004380:	d112      	bne.n	80043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004388:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800438c:	3301      	adds	r3, #1
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004394:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3314      	adds	r3, #20
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a2:	f8c2 350c 	str.w	r3, [r2, #1292]	@ 0x50c
 80043a6:	e77b      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f94f 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	bf8c      	ite	hi
 80043c0:	2301      	movhi	r3, #1
 80043c2:	2300      	movls	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f43f af6a 	beq.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
          return SPIN_TIMEOUT;
 80043d8:	f06f 0301 	mvn.w	r3, #1
 80043dc:	e1a3      	b.n	8004726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d121      	bne.n	8004430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80043f0:	d10b      	bne.n	800440a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80043fc:	3301      	adds	r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004404:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 8004408:	e74a      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004410:	461a      	mov	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
          if (configured_ == false)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441e:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8004422:	2b00      	cmp	r3, #0
 8004424:	f47f af3c 	bne.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f980 	bl	800472e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800442e:	e737      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004436:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800443a:	2b02      	cmp	r3, #2
 800443c:	d120      	bne.n	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        index_ = 0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	461a      	mov	r2, r3
 8004454:	2300      	movs	r3, #0
 8004456:	f8c2 34f8 	str.w	r3, [r2, #1272]	@ 0x4f8
        mode_++;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004460:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004464:	3301      	adds	r3, #1
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800446c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 800447e:	e70f      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004486:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800448a:	2b03      	cmp	r3, #3
 800448c:	d118      	bne.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004494:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	@ 0x4f0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	4413      	add	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044a4:	f8c2 34f0 	str.w	r3, [r2, #1264]	@ 0x4f0
        mode_++;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044b2:	3301      	adds	r3, #1
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044ba:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80044be:	e6ef      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d11f      	bne.n	800450e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80044d8:	425a      	negs	r2, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	bf58      	it	pl
 80044e0:	4253      	negpl	r3, r2
 80044e2:	2bff      	cmp	r3, #255	@ 0xff
 80044e4:	d10b      	bne.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80044f0:	3301      	adds	r3, #1
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80044fc:	e6d0      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 800450c:	e6c8      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004514:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004518:	2b05      	cmp	r3, #5
 800451a:	d119      	bne.n	8004550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004522:	461a      	mov	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004530:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 8004534:	3301      	adds	r3, #1
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800453c:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004546:	461a      	mov	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f8c2 34fc 	str.w	r3, [r2, #1276]	@ 0x4fc
 800454e:	e6a7      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800455a:	2b06      	cmp	r3, #6
 800455c:	d123      	bne.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004564:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	@ 0x4f4
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	4413      	add	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004574:	f8c2 34f4 	str.w	r3, [r2, #1268]	@ 0x4f4
        mode_ = MODE_MESSAGE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800457e:	461a      	mov	r2, r3
 8004580:	2307      	movs	r3, #7
 8004582:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if (bytes_ == 0)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f ae85 	bne.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800459c:	461a      	mov	r2, r3
 800459e:	2308      	movs	r3, #8
 80045a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
 80045a4:	e67c      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f47f ae75 	bne.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c2 34ec 	str.w	r3, [r2, #1260]	@ 0x4ec
        if ((checksum_ % 256) == 255)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80045ce:	425a      	negs	r2, r3
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	bf58      	it	pl
 80045d6:	4253      	negpl	r3, r2
 80045d8:	2bff      	cmp	r3, #255	@ 0xff
 80045da:	f47f ae61 	bne.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d116      	bne.n	800461a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f89e 	bl	800472e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8ba 	bl	800476c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
            last_sync_receive_time = c_time;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460c:	461a      	mov	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
            return SPIN_ERR;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	e085      	b.n	8004726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004620:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004624:	2b0a      	cmp	r3, #10
 8004626:	d108      	bne.n	800463a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f97c 	bl	8004930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004638:	e632      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004640:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004644:	2b06      	cmp	r3, #6
 8004646:	d112      	bne.n	800466e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 800464e:	3314      	adds	r3, #20
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	f502 5281 	add.w	r2, r2, #4128	@ 0x1020
 8004656:	3204      	adds	r2, #4
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fd05 	bl	800306a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
 800466c:	e618      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004674:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004678:	2b0b      	cmp	r3, #11
 800467a:	d106      	bne.n	800468a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
 8004688:	e60a      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004690:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 8004694:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f43f adfc 	beq.w	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ae:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80046b2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80046bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 80046ca:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4790      	blx	r2
    while (true)
 80046e8:	e5da      	b.n	80042a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80046ea:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f2:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d014      	beq.n	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004700:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800470c:	4293      	cmp	r3, r2
 800470e:	d909      	bls.n	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f80c 	bl	800472e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471c:	461a      	mov	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
    return SPIN_OK;
 8004724:	2300      	movs	r3, #0
  }
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fffc 	bl	8002738 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f107 020c 	add.w	r2, r7, #12
 800474a:	210a      	movs	r1, #10
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe ff7b 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004762:	615a      	str	r2, [r3, #20]
  }
 8004764:	bf00      	nop
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b08b      	sub	sp, #44	@ 0x2c
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe f8cd 	bl	8002918 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
 8004782:	e062      	b.n	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d056      	beq.n	8004844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4608      	mov	r0, r1
 80047e4:	4798      	blx	r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4608      	mov	r0, r1
 8004812:	4798      	blx	r3
 8004814:	4603      	mov	r3, r0
 8004816:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800481c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681c      	ldr	r4, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fdd1 	bl	80033da <_ZN3ros9Publisher15getEndpointTypeEv>
 8004838:	4601      	mov	r1, r0
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	461a      	mov	r2, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	3301      	adds	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
 800484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484c:	2b18      	cmp	r3, #24
 800484e:	dd99      	ble.n	8004784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
 8004854:	e05e      	b.n	8004914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800485e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d053      	beq.n	800490e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486a:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	b29b      	uxth	r3, r3
 8004876:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800488c:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 8004890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004898:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4608      	mov	r0, r1
 80048a8:	4798      	blx	r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b2:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80048b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048be:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80048c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4798      	blx	r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80048d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048d8:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681c      	ldr	r4, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e4:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80048e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f0:	f202 5222 	addw	r2, r2, #1314	@ 0x522
 80048f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3304      	adds	r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4608      	mov	r0, r1
 8004900:	4798      	blx	r3
 8004902:	4601      	mov	r1, r0
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	461a      	mov	r2, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	3301      	adds	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	2b18      	cmp	r3, #24
 8004918:	dd9d      	ble.n	8004856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
  }
 8004926:	bf00      	nop
 8004928:	372c      	adds	r7, #44	@ 0x2c
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}
	...

08004930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fefa 	bl	8002738 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fe81 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 800494e:	4602      	mov	r2, r0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800495c:	f107 0308 	add.w	r3, r7, #8
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd ff58 	bl	8002818 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4915      	ldr	r1, [pc, #84]	@ (80049c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800496e:	fba1 1303 	umull	r1, r3, r1, r3
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	4413      	add	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004978:	6939      	ldr	r1, [r7, #16]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800497e:	fba3 0302 	umull	r0, r3, r3, r2
 8004982:	099b      	lsrs	r3, r3, #6
 8004984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004988:	fb00 f303 	mul.w	r3, r0, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	4a0e      	ldr	r2, [pc, #56]	@ (80049c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	440b      	add	r3, r1
 8004996:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004998:	f107 0308 	add.w	r3, r7, #8
 800499c:	3304      	adds	r3, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8bf 	bl	8004b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fe50 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 80049b0:	4602      	mov	r2, r0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b8:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	10624dd3 	.word	0x10624dd3
 80049c8:	000f4240 	.word	0x000f4240

080049cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b63      	cmp	r3, #99	@ 0x63
 80049dc:	dd0b      	ble.n	80049f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e4:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80049e8:	f083 0301 	eor.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e090      	b.n	8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004a02:	3304      	adds	r3, #4
 8004a04:	3307      	adds	r3, #7
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4790      	blx	r2
 8004a0c:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a14:	22ff      	movs	r2, #255	@ 0xff
 8004a16:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    message_out[1] = PROTOCOL_VER;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a20:	22fe      	movs	r2, #254	@ 0xfe
 8004a22:	f883 2225 	strb.w	r2, [r3, #549]	@ 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a30:	f883 2226 	strb.w	r2, [r3, #550]	@ 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a44:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4e:	f893 2226 	ldrb.w	r2, [r3, #550]	@ 0x226
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a58:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a6a:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a78:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	121b      	asrs	r3, r3, #8
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8c:	f883 222a 	strb.w	r2, [r3, #554]	@ 0x22a

    /* calculate checksum */
    int chk = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a94:	2305      	movs	r3, #5
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e00d      	b.n	8004ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3306      	adds	r3, #6
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	ddec      	ble.n	8004a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3307      	adds	r3, #7
 8004ac4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	425a      	negs	r2, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	bf58      	it	pl
 8004ad0:	4253      	negpl	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	6179      	str	r1, [r7, #20]
 8004ada:	43d2      	mvns	r2, r2
 8004adc:	b2d1      	uxtb	r1, r2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	460a      	mov	r2, r1
 8004aea:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af2:	dc0b      	bgt.n	8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1d18      	adds	r0, r3, #4
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 5391 	add.w	r3, r3, #4640	@ 0x1220
 8004afe:	3304      	adds	r3, #4
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4619      	mov	r1, r3
 8004b04:	f7fe fd5a 	bl	80035bc <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	e005      	b.n	8004b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004b0c:	4904      	ldr	r1, [pc, #16]	@ (8004b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f84c 	bl	8004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	0800b410 	.word	0x0800b410

08004b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fd8c 	bl	8003650 <_ZN13STM32Hardware4timeEv>
 8004b38:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4917      	ldr	r1, [pc, #92]	@ (8004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b42:	fba1 1303 	umull	r1, r3, r1, r3
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b52:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004b5c:	fba3 0302 	umull	r0, r3, r3, r2
 8004b60:	099b      	lsrs	r3, r3, #6
 8004b62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b66:	fb00 f303 	mul.w	r3, r0, r3
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1aca      	subs	r2, r1, r3
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004b76:	4413      	add	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b7e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b86:	3318      	adds	r3, #24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b8e:	321c      	adds	r2, #28
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc f98e 	bl	8000eb4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	10624dd3 	.word	0x10624dd3
 8004ba4:	000f4240 	.word	0x000f4240
 8004ba8:	3b9aca00 	.word	0x3b9aca00

08004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	2103      	movs	r1, #3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f804 	bl	8004bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe f860 	bl	8002ca0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f107 0214 	add.w	r2, r7, #20
 8004bf2:	2107      	movs	r1, #7
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	4798      	blx	r3
  }
 8004bf8:	bf00      	nop
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d15b      	bne.n	8004cc8 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d156      	bne.n	8004cc8 <_Z41__static_initialization_and_destruction_0ii+0xc8>
ros::NodeHandle nh;
 8004c1a:	482d      	ldr	r0, [pc, #180]	@ (8004cd0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004c1c:	f7ff f96e 	bl	8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool gripperFinish;
 8004c20:	482c      	ldr	r0, [pc, #176]	@ (8004cd4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004c22:	f7fe fdbd 	bl	80037a0 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_gripper("/gripper", &gripperFinish);
 8004c26:	2300      	movs	r3, #0
 8004c28:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004c2a:	492b      	ldr	r1, [pc, #172]	@ (8004cd8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8004c2c:	482b      	ldr	r0, [pc, #172]	@ (8004cdc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8004c2e:	f7fe fba9 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool touchFinish;
 8004c32:	482b      	ldr	r0, [pc, #172]	@ (8004ce0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004c34:	f7fe fdb4 	bl	80037a0 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_touch("/touch", &touchFinish);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4a29      	ldr	r2, [pc, #164]	@ (8004ce0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004c3c:	4929      	ldr	r1, [pc, #164]	@ (8004ce4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004c3e:	482a      	ldr	r0, [pc, #168]	@ (8004ce8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004c40:	f7fe fba0 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool basketFinish;
 8004c44:	4829      	ldr	r0, [pc, #164]	@ (8004cec <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004c46:	f7fe fdab 	bl	80037a0 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_basket("/basket", &basketFinish);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4a27      	ldr	r2, [pc, #156]	@ (8004cec <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004c4e:	4928      	ldr	r1, [pc, #160]	@ (8004cf0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8004c50:	4828      	ldr	r0, [pc, #160]	@ (8004cf4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8004c52:	f7fe fb97 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 elevatorHeight;
 8004c56:	4828      	ldr	r0, [pc, #160]	@ (8004cf8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004c58:	f7fe fe0c 	bl	8003874 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_elevator("/elevator", &elevatorHeight);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8004c60:	4926      	ldr	r1, [pc, #152]	@ (8004cfc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8004c62:	4827      	ldr	r0, [pc, #156]	@ (8004d00 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8004c64:	f7fe fb8e 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float64 current_y;
 8004c68:	4826      	ldr	r0, [pc, #152]	@ (8004d04 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004c6a:	f7fe fe03 	bl	8003874 <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 current_theta;
 8004c6e:	4826      	ldr	r0, [pc, #152]	@ (8004d08 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004c70:	f7fe fe00 	bl	8003874 <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub_y("/current_y", &current_y);
 8004c74:	2300      	movs	r3, #0
 8004c76:	4a23      	ldr	r2, [pc, #140]	@ (8004d04 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8004c78:	4924      	ldr	r1, [pc, #144]	@ (8004d0c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8004c7a:	4825      	ldr	r0, [pc, #148]	@ (8004d10 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8004c7c:	f7fe fb82 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_theta("/current_theta", &current_theta);
 8004c80:	2300      	movs	r3, #0
 8004c82:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8004c84:	4923      	ldr	r1, [pc, #140]	@ (8004d14 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8004c86:	4824      	ldr	r0, [pc, #144]	@ (8004d18 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8004c88:	f7fe fb7c 	bl	8003384 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool> sub_gripper("/cmd_gripperOpen", ROS1::callback_gripper);
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4a23      	ldr	r2, [pc, #140]	@ (8004d1c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004c90:	4923      	ldr	r1, [pc, #140]	@ (8004d20 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004c92:	4824      	ldr	r0, [pc, #144]	@ (8004d24 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004c94:	f7ff f9dc 	bl	8004050 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_turn("/cmd_servoturn", ROS1::callback_turn);
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004c9c:	4923      	ldr	r1, [pc, #140]	@ (8004d2c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004c9e:	4824      	ldr	r0, [pc, #144]	@ (8004d30 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004ca0:	f7ff f9fa 	bl	8004098 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_forward("/cmd_forward", ROS1::callback_forward);
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004ca8:	4923      	ldr	r1, [pc, #140]	@ (8004d38 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004caa:	4824      	ldr	r0, [pc, #144]	@ (8004d3c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004cac:	f7ff f9f4 	bl	8004098 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_elevatorHeight("/cmd_elevator", ROS1::callback_Elevator);
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	4a23      	ldr	r2, [pc, #140]	@ (8004d40 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004cb4:	4923      	ldr	r1, [pc, #140]	@ (8004d44 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004cb6:	4824      	ldr	r0, [pc, #144]	@ (8004d48 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004cb8:	f7ff f9ee 	bl	8004098 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> sub_basketDoor("/cmd_basketDoor", ROS1::callback_BasketDoor);
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4a23      	ldr	r2, [pc, #140]	@ (8004d4c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004cc0:	4923      	ldr	r1, [pc, #140]	@ (8004d50 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004cc2:	4824      	ldr	r0, [pc, #144]	@ (8004d54 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004cc4:	f7ff f9c4 	bl	8004050 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200005c4 	.word	0x200005c4
 8004cd4:	20001b00 	.word	0x20001b00
 8004cd8:	0800b44c 	.word	0x0800b44c
 8004cdc:	20001b08 	.word	0x20001b08
 8004ce0:	20001b1c 	.word	0x20001b1c
 8004ce4:	0800b458 	.word	0x0800b458
 8004ce8:	20001b24 	.word	0x20001b24
 8004cec:	20001b38 	.word	0x20001b38
 8004cf0:	0800b460 	.word	0x0800b460
 8004cf4:	20001b40 	.word	0x20001b40
 8004cf8:	20001b58 	.word	0x20001b58
 8004cfc:	0800b468 	.word	0x0800b468
 8004d00:	20001b68 	.word	0x20001b68
 8004d04:	20001b80 	.word	0x20001b80
 8004d08:	20001b90 	.word	0x20001b90
 8004d0c:	0800b474 	.word	0x0800b474
 8004d10:	20001ba0 	.word	0x20001ba0
 8004d14:	0800b480 	.word	0x0800b480
 8004d18:	20001bb4 	.word	0x20001bb4
 8004d1c:	08003d79 	.word	0x08003d79
 8004d20:	0800b490 	.word	0x0800b490
 8004d24:	20001bc8 	.word	0x20001bc8
 8004d28:	08003d45 	.word	0x08003d45
 8004d2c:	0800b4a4 	.word	0x0800b4a4
 8004d30:	20001be4 	.word	0x20001be4
 8004d34:	08003d93 	.word	0x08003d93
 8004d38:	0800b4b4 	.word	0x0800b4b4
 8004d3c:	20001c00 	.word	0x20001c00
 8004d40:	08003db9 	.word	0x08003db9
 8004d44:	0800b4c4 	.word	0x0800b4c4
 8004d48:	20001c1c 	.word	0x20001c1c
 8004d4c:	08003e3d 	.word	0x08003e3d
 8004d50:	0800b4d4 	.word	0x0800b4d4
 8004d54:	20001c38 	.word	0x20001c38

08004d58 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	330c      	adds	r3, #12
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fcc5 	bl	80036f8 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	320c      	adds	r2, #12
 8004d76:	4610      	mov	r0, r2
 8004d78:	4798      	blx	r3
  }
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
  }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	330c      	adds	r3, #12
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fcde 	bl	8003768 <_ZN8std_msgs5Int327getTypeEv>
 8004dac:	4603      	mov	r3, r0
  }
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fcde 	bl	8003784 <_ZN8std_msgs5Int326getMD5Ev>
 8004dc8:	4603      	mov	r3, r0
  }
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	330c      	adds	r3, #12
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fd0b 	bl	80037fe <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	320c      	adds	r2, #12
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
  }
 8004df4:	bf00      	nop
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699b      	ldr	r3, [r3, #24]
  }
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fd0b 	bl	800383c <_ZN8std_msgs4Bool7getTypeEv>
 8004e26:	4603      	mov	r3, r0
  }
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fd0b 	bl	8003858 <_ZN8std_msgs4Bool6getMD5Ev>
 8004e42:	4603      	mov	r3, r0
  }
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    return configured_;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e5a:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
  };
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <_GLOBAL__sub_I_nh>:
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004e72:	2001      	movs	r0, #1
 8004e74:	f7ff fec4 	bl	8004c00 <_Z41__static_initialization_and_destruction_0ii>
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_ZN5Servo5setupEi>:

void Servo::setMaxServoSpeed(float rpm){
	servoInfo.maxServoSpeed = rpm;
}

void Servo::setup(int startAngle){
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	f002 fe84 	bl	8007b9c <HAL_TIM_PWM_Start>
	write(startAngle);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f804 	bl	8004ea4 <_ZN5Servo5writeEi>
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	servoInfo.maxPulse = max;
	servoInfo.minPulse = min;
}

void Servo::write(int ang) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	angle = ang;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	605a      	str	r2, [r3, #4]
	int pulseRange = servoInfo.maxPulse - servoInfo.minPulse;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	60bb      	str	r3, [r7, #8]
	float pulse = servoInfo.minPulse + (float)pulseRange * (float)ang / (float)servoInfo.maxAng;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ef0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > servoInfo.maxPulse)pulse = servoInfo.maxPulse;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f08:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f14:	dd08      	ble.n	8004f28 <_ZN5Servo5writeEi+0x84>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f22:	edc7 7a03 	vstr	s15, [r7, #12]
 8004f26:	e014      	b.n	8004f52 <_ZN5Servo5writeEi+0xae>
	else if(pulse < servoInfo.minPulse)pulse = servoInfo.minPulse;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f34:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d507      	bpl.n	8004f52 <_ZN5Servo5writeEi+0xae>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4e:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <_ZN5Servo5writeEi+0xcc>
 8004f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	ee17 2a90 	vmov	r2, s15
 8004f6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004f6e:	e045      	b.n	8004ffc <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d10a      	bne.n	8004f8e <_ZN5Servo5writeEi+0xea>
 8004f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	ee17 2a90 	vmov	r2, s15
 8004f8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004f8c:	e036      	b.n	8004ffc <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d10a      	bne.n	8004fac <_ZN5Servo5writeEi+0x108>
 8004f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	ee17 2a90 	vmov	r2, s15
 8004fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004faa:	e027      	b.n	8004ffc <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d10a      	bne.n	8004fca <_ZN5Servo5writeEi+0x126>
 8004fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	ee17 2a90 	vmov	r2, s15
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fc8:	e018      	b.n	8004ffc <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d10a      	bne.n	8004fe8 <_ZN5Servo5writeEi+0x144>
 8004fd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	ee17 2a90 	vmov	r2, s15
 8004fe4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004fe6:	e009      	b.n	8004ffc <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8004fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	ee17 2a90 	vmov	r2, s15
 8004ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_ZN5Servo6turnToEii>:
void Servo::detach() {
	HAL_TIM_PWM_Stop(htim, channel);
}


void Servo::turnTo(int ang,int interval){
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
	if(ang > servoInfo.maxAng)return;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	f300 80b0 	bgt.w	8005180 <_ZN5Servo6turnToEii+0x178>
	if(ang < 0)return;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f2c0 80ae 	blt.w	8005184 <_ZN5Servo6turnToEii+0x17c>
	const float deltaDeg = ang - angle;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005038:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	minInterval = abs(deltaDeg)*servoInfo.maxServoSpeed/60.0*1000.0;
 800503c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005044:	ee17 3a90 	vmov	r3, s15
 8005048:	2b00      	cmp	r3, #0
 800504a:	bfb8      	it	lt
 800504c:	425b      	neglt	r3, r3
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	edd3 7a06 	vldr	s15, [r3, #24]
 800505c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005060:	ee17 0a90 	vmov	r0, s15
 8005064:	f7fb fa44 	bl	80004f0 <__aeabi_f2d>
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	4b4a      	ldr	r3, [pc, #296]	@ (8005198 <_ZN5Servo6turnToEii+0x190>)
 800506e:	f7fb fbc1 	bl	80007f4 <__aeabi_ddiv>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	4b47      	ldr	r3, [pc, #284]	@ (800519c <_ZN5Servo6turnToEii+0x194>)
 8005080:	f7fb fa8e 	bl	80005a0 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	f7fb fd4a 	bl	8000b24 <__aeabi_d2f>
 8005090:	4603      	mov	r3, r0
 8005092:	4a43      	ldr	r2, [pc, #268]	@ (80051a0 <_ZN5Servo6turnToEii+0x198>)
 8005094:	6013      	str	r3, [r2, #0]
	minInterval *= 1.1;
 8005096:	4b42      	ldr	r3, [pc, #264]	@ (80051a0 <_ZN5Servo6turnToEii+0x198>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fb fa28 	bl	80004f0 <__aeabi_f2d>
 80050a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005190 <_ZN5Servo6turnToEii+0x188>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb fa7b 	bl	80005a0 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7fb fd37 	bl	8000b24 <__aeabi_d2f>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4a39      	ldr	r2, [pc, #228]	@ (80051a0 <_ZN5Servo6turnToEii+0x198>)
 80050ba:	6013      	str	r3, [r2, #0]
	if(interval <  minInterval){
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c6:	4b36      	ldr	r3, [pc, #216]	@ (80051a0 <_ZN5Servo6turnToEii+0x198>)
 80050c8:	edd3 7a00 	vldr	s15, [r3]
 80050cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	d510      	bpl.n	80050f8 <_ZN5Servo6turnToEii+0xf0>
		interval = minInterval;
 80050d6:	4b32      	ldr	r3, [pc, #200]	@ (80051a0 <_ZN5Servo6turnToEii+0x198>)
 80050d8:	edd3 7a00 	vldr	s15, [r3]
 80050dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e0:	ee17 3a90 	vmov	r3, s15
 80050e4:	607b      	str	r3, [r7, #4]
		write(ang);
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fedb 	bl	8004ea4 <_ZN5Servo5writeEi>
		wait(interval,&htim2);
 80050ee:	492d      	ldr	r1, [pc, #180]	@ (80051a4 <_ZN5Servo6turnToEii+0x19c>)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fc ffbf 	bl	8002074 <_Z4waitiP17TIM_HandleTypeDef>
		return;
 80050f6:	e046      	b.n	8005186 <_ZN5Servo6turnToEii+0x17e>
	}
	const int dt_ms = 10;
 80050f8:	230a      	movs	r3, #10
 80050fa:	623b      	str	r3, [r7, #32]
	const int lastAng = angle;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	61fb      	str	r3, [r7, #28]
	t = 0;
 8005102:	4b29      	ldr	r3, [pc, #164]	@ (80051a8 <_ZN5Servo6turnToEii+0x1a0>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
	while(1){
		if (t > interval-dt_ms) break;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1a3 0209 	sub.w	r2, r3, #9
 800510e:	4b26      	ldr	r3, [pc, #152]	@ (80051a8 <_ZN5Servo6turnToEii+0x1a0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	dd2e      	ble.n	8005174 <_ZN5Servo6turnToEii+0x16c>
		float u = (float)t / (float)interval;    // 0~1
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <_ZN5Servo6turnToEii+0x1a0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	edc7 7a06 	vstr	s15, [r7, #24]
		int a = lastAng + deltaDeg * u;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800513e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005142:	edd7 7a06 	vldr	s15, [r7, #24]
 8005146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800514a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005152:	ee17 3a90 	vmov	r3, s15
 8005156:	617b      	str	r3, [r7, #20]
		write(a);
 8005158:	6979      	ldr	r1, [r7, #20]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fea2 	bl	8004ea4 <_ZN5Servo5writeEi>
		wait(dt_ms,&htim2);
 8005160:	4910      	ldr	r1, [pc, #64]	@ (80051a4 <_ZN5Servo6turnToEii+0x19c>)
 8005162:	200a      	movs	r0, #10
 8005164:	f7fc ff86 	bl	8002074 <_Z4waitiP17TIM_HandleTypeDef>
		t += dt_ms;
 8005168:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <_ZN5Servo6turnToEii+0x1a0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330a      	adds	r3, #10
 800516e:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <_ZN5Servo6turnToEii+0x1a0>)
 8005170:	6013      	str	r3, [r2, #0]
	}
 8005172:	e7c9      	b.n	8005108 <_ZN5Servo6turnToEii+0x100>
		if (t > interval-dt_ms) break;
 8005174:	bf00      	nop
	write(ang);
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fe93 	bl	8004ea4 <_ZN5Servo5writeEi>
 800517e:	e002      	b.n	8005186 <_ZN5Servo6turnToEii+0x17e>
	if(ang > servoInfo.maxAng)return;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <_ZN5Servo6turnToEii+0x17e>
	if(ang < 0)return;
 8005184:	bf00      	nop
}
 8005186:	3728      	adds	r7, #40	@ 0x28
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	f3af 8000 	nop.w
 8005190:	9999999a 	.word	0x9999999a
 8005194:	3ff19999 	.word	0x3ff19999
 8005198:	404e0000 	.word	0x404e0000
 800519c:	408f4000 	.word	0x408f4000
 80051a0:	20001c54 	.word	0x20001c54
 80051a4:	2000012c 	.word	0x2000012c
 80051a8:	20001c58 	.word	0x20001c58

080051ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b2:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <HAL_MspInit+0x54>)
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	4a12      	ldr	r2, [pc, #72]	@ (8005200 <HAL_MspInit+0x54>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80051be:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <HAL_MspInit+0x54>)
 80051c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_MspInit+0x54>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005200 <HAL_MspInit+0x54>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <HAL_MspInit+0x54>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	2005      	movs	r0, #5
 80051e8:	f000 fd5b 	bl	8005ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80051ec:	2005      	movs	r0, #5
 80051ee:	f000 fd72 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80051f2:	f001 fc5d 	bl	8006ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000

08005204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b09c      	sub	sp, #112	@ 0x70
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800521c:	f107 0318 	add.w	r3, r7, #24
 8005220:	2244      	movs	r2, #68	@ 0x44
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f005 febb 	bl	800afa0 <memset>
  if(hi2c->Instance==I2C1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2e      	ldr	r2, [pc, #184]	@ (80052e8 <HAL_I2C_MspInit+0xe4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d154      	bne.n	80052de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005234:	2340      	movs	r3, #64	@ 0x40
 8005236:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005238:	2300      	movs	r3, #0
 800523a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800523c:	f107 0318 	add.w	r3, r7, #24
 8005240:	4618      	mov	r0, r3
 8005242:	f002 f973 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800524c:	f7fc fdba 	bl	8001dc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005250:	4b26      	ldr	r3, [pc, #152]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 8005252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005254:	4a25      	ldr	r2, [pc, #148]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800525c:	4b23      	ldr	r3, [pc, #140]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 800525e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 800526a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 800526e:	f043 0302 	orr.w	r3, r3, #2
 8005272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005274:	4b1d      	ldr	r3, [pc, #116]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 8005276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005280:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005284:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005286:	2312      	movs	r3, #18
 8005288:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528e:	2300      	movs	r3, #0
 8005290:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005292:	2304      	movs	r3, #4
 8005294:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005296:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800529a:	4619      	mov	r1, r3
 800529c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052a0:	f001 f866 	bl	8006370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052aa:	2312      	movs	r3, #18
 80052ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b2:	2300      	movs	r3, #0
 80052b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052b6:	2304      	movs	r3, #4
 80052b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80052be:	4619      	mov	r1, r3
 80052c0:	480b      	ldr	r0, [pc, #44]	@ (80052f0 <HAL_I2C_MspInit+0xec>)
 80052c2:	f001 f855 	bl	8006370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052c6:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ca:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 80052cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_I2C_MspInit+0xe8>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80052de:	bf00      	nop
 80052e0:	3770      	adds	r7, #112	@ 0x70
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40005400 	.word	0x40005400
 80052ec:	40021000 	.word	0x40021000
 80052f0:	48000400 	.word	0x48000400

080052f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1f      	ldr	r2, [pc, #124]	@ (8005380 <HAL_TIM_PWM_MspInit+0x8c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d114      	bne.n	8005330 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005306:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	4a1e      	ldr	r2, [pc, #120]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 800530c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005310:	6613      	str	r3, [r2, #96]	@ 0x60
 8005312:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800531e:	2200      	movs	r2, #0
 8005320:	2100      	movs	r1, #0
 8005322:	2018      	movs	r0, #24
 8005324:	f000 fcbd 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005328:	2018      	movs	r0, #24
 800532a:	f000 fcd4 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800532e:	e022      	b.n	8005376 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a14      	ldr	r2, [pc, #80]	@ (8005388 <HAL_TIM_PWM_MspInit+0x94>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800533a:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
 8005346:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
}
 8005352:	e010      	b.n	8005376 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM8)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a0c      	ldr	r2, [pc, #48]	@ (800538c <HAL_TIM_PWM_MspInit+0x98>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10b      	bne.n	8005376 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800535e:	4b09      	ldr	r3, [pc, #36]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005362:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 8005364:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005368:	6613      	str	r3, [r2, #96]	@ 0x60
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <HAL_TIM_PWM_MspInit+0x90>)
 800536c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40021000 	.word	0x40021000
 8005388:	40000400 	.word	0x40000400
 800538c:	40013400 	.word	0x40013400

08005390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a0:	d114      	bne.n	80053cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053a2:	4b33      	ldr	r3, [pc, #204]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	4a32      	ldr	r2, [pc, #200]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	201c      	movs	r0, #28
 80053c0:	f000 fc6f 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053c4:	201c      	movs	r0, #28
 80053c6:	f000 fc86 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80053ca:	e04c      	b.n	8005466 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a28      	ldr	r2, [pc, #160]	@ (8005474 <HAL_TIM_Base_MspInit+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d114      	bne.n	8005400 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80053d6:	4b26      	ldr	r3, [pc, #152]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	4a25      	ldr	r2, [pc, #148]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053dc:	f043 0310 	orr.w	r3, r3, #16
 80053e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e2:	4b23      	ldr	r3, [pc, #140]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	2036      	movs	r0, #54	@ 0x36
 80053f4:	f000 fc55 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053f8:	2036      	movs	r0, #54	@ 0x36
 80053fa:	f000 fc6c 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
}
 80053fe:	e032      	b.n	8005466 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1c      	ldr	r2, [pc, #112]	@ (8005478 <HAL_TIM_Base_MspInit+0xe8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d114      	bne.n	8005434 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800540a:	4b19      	ldr	r3, [pc, #100]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	4a18      	ldr	r2, [pc, #96]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6593      	str	r3, [r2, #88]	@ 0x58
 8005416:	4b16      	ldr	r3, [pc, #88]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005422:	2200      	movs	r2, #0
 8005424:	2100      	movs	r1, #0
 8005426:	2037      	movs	r0, #55	@ 0x37
 8005428:	f000 fc3b 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800542c:	2037      	movs	r0, #55	@ 0x37
 800542e:	f000 fc52 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
}
 8005432:	e018      	b.n	8005466 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a10      	ldr	r2, [pc, #64]	@ (800547c <HAL_TIM_Base_MspInit+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d113      	bne.n	8005466 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800543e:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	4a0b      	ldr	r2, [pc, #44]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6613      	str	r3, [r2, #96]	@ 0x60
 800544a:	4b09      	ldr	r3, [pc, #36]	@ (8005470 <HAL_TIM_Base_MspInit+0xe0>)
 800544c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005456:	2200      	movs	r2, #0
 8005458:	2100      	movs	r1, #0
 800545a:	2018      	movs	r0, #24
 800545c:	f000 fc21 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005460:	2018      	movs	r0, #24
 8005462:	f000 fc38 	bl	8005cd6 <HAL_NVIC_EnableIRQ>
}
 8005466:	bf00      	nop
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	40001000 	.word	0x40001000
 8005478:	40001400 	.word	0x40001400
 800547c:	40014000 	.word	0x40014000

08005480 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <HAL_TIM_Encoder_MspInit+0x80>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d129      	bne.n	80054f6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80054a2:	4b18      	ldr	r3, [pc, #96]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	4a17      	ldr	r2, [pc, #92]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054a8:	f043 0304 	orr.w	r3, r3, #4
 80054ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ae:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ba:	4b12      	ldr	r3, [pc, #72]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054be:	4a11      	ldr	r2, [pc, #68]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <HAL_TIM_Encoder_MspInit+0x84>)
 80054c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80054d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80054d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	2302      	movs	r3, #2
 80054da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e0:	2300      	movs	r3, #0
 80054e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80054e4:	230a      	movs	r3, #10
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	4619      	mov	r1, r3
 80054ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80054f2:	f000 ff3d 	bl	8006370 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80054f6:	bf00      	nop
 80054f8:	3728      	adds	r7, #40	@ 0x28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40000800 	.word	0x40000800
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	@ 0x30
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 031c 	add.w	r3, r7, #28
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a41      	ldr	r2, [pc, #260]	@ (800562c <HAL_TIM_MspPostInit+0x124>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d11c      	bne.n	8005564 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800552a:	4b41      	ldr	r3, [pc, #260]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	4a40      	ldr	r2, [pc, #256]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005536:	4b3e      	ldr	r3, [pc, #248]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005542:	230f      	movs	r3, #15
 8005544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	2302      	movs	r3, #2
 8005548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554e:	2300      	movs	r3, #0
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005552:	2302      	movs	r3, #2
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005556:	f107 031c 	add.w	r3, r7, #28
 800555a:	4619      	mov	r1, r3
 800555c:	4835      	ldr	r0, [pc, #212]	@ (8005634 <HAL_TIM_MspPostInit+0x12c>)
 800555e:	f000 ff07 	bl	8006370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005562:	e05f      	b.n	8005624 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM3)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a33      	ldr	r2, [pc, #204]	@ (8005638 <HAL_TIM_MspPostInit+0x130>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d139      	bne.n	80055e2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556e:	4b30      	ldr	r3, [pc, #192]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	4a2f      	ldr	r2, [pc, #188]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800557a:	4b2d      	ldr	r3, [pc, #180]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005586:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	4a29      	ldr	r2, [pc, #164]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005592:	4b27      	ldr	r3, [pc, #156]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 8005594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800559e:	2340      	movs	r3, #64	@ 0x40
 80055a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a2:	2302      	movs	r3, #2
 80055a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055aa:	2300      	movs	r3, #0
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055ae:	2302      	movs	r3, #2
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b2:	f107 031c 	add.w	r3, r7, #28
 80055b6:	4619      	mov	r1, r3
 80055b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055bc:	f000 fed8 	bl	8006370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055c0:	2320      	movs	r3, #32
 80055c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c4:	2302      	movs	r3, #2
 80055c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055d0:	2302      	movs	r3, #2
 80055d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d4:	f107 031c 	add.w	r3, r7, #28
 80055d8:	4619      	mov	r1, r3
 80055da:	4818      	ldr	r0, [pc, #96]	@ (800563c <HAL_TIM_MspPostInit+0x134>)
 80055dc:	f000 fec8 	bl	8006370 <HAL_GPIO_Init>
}
 80055e0:	e020      	b.n	8005624 <HAL_TIM_MspPostInit+0x11c>
  else if(htim->Instance==TIM8)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <HAL_TIM_MspPostInit+0x138>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ec:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 80055ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 80055f2:	f043 0304 	orr.w	r3, r3, #4
 80055f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005630 <HAL_TIM_MspPostInit+0x128>)
 80055fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005608:	2302      	movs	r3, #2
 800560a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560c:	2300      	movs	r3, #0
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005610:	2300      	movs	r3, #0
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005614:	2304      	movs	r3, #4
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005618:	f107 031c 	add.w	r3, r7, #28
 800561c:	4619      	mov	r1, r3
 800561e:	4805      	ldr	r0, [pc, #20]	@ (8005634 <HAL_TIM_MspPostInit+0x12c>)
 8005620:	f000 fea6 	bl	8006370 <HAL_GPIO_Init>
}
 8005624:	bf00      	nop
 8005626:	3730      	adds	r7, #48	@ 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40021000 	.word	0x40021000
 8005634:	48000800 	.word	0x48000800
 8005638:	40000400 	.word	0x40000400
 800563c:	48000400 	.word	0x48000400
 8005640:	40013400 	.word	0x40013400

08005644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b09a      	sub	sp, #104	@ 0x68
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800565c:	f107 0310 	add.w	r3, r7, #16
 8005660:	2244      	movs	r2, #68	@ 0x44
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f005 fc9b 	bl	800afa0 <memset>
  if(huart->Instance==USART2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4e      	ldr	r2, [pc, #312]	@ (80057a8 <HAL_UART_MspInit+0x164>)
 8005670:	4293      	cmp	r3, r2
 8005672:	f040 8094 	bne.w	800579e <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005676:	2302      	movs	r3, #2
 8005678:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800567e:	f107 0310 	add.w	r3, r7, #16
 8005682:	4618      	mov	r0, r3
 8005684:	f001 ff52 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800568e:	f7fc fb99 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005692:	4b46      	ldr	r3, [pc, #280]	@ (80057ac <HAL_UART_MspInit+0x168>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	4a45      	ldr	r2, [pc, #276]	@ (80057ac <HAL_UART_MspInit+0x168>)
 8005698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569c:	6593      	str	r3, [r2, #88]	@ 0x58
 800569e:	4b43      	ldr	r3, [pc, #268]	@ (80057ac <HAL_UART_MspInit+0x168>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056aa:	4b40      	ldr	r3, [pc, #256]	@ (80057ac <HAL_UART_MspInit+0x168>)
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	4a3f      	ldr	r2, [pc, #252]	@ (80057ac <HAL_UART_MspInit+0x168>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056b6:	4b3d      	ldr	r3, [pc, #244]	@ (80057ac <HAL_UART_MspInit+0x168>)
 80056b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056c2:	230c      	movs	r3, #12
 80056c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c6:	2302      	movs	r3, #2
 80056c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ce:	2300      	movs	r3, #0
 80056d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056d2:	2307      	movs	r3, #7
 80056d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80056e0:	f000 fe46 	bl	8006370 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80056e4:	4b32      	ldr	r3, [pc, #200]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 80056e6:	4a33      	ldr	r2, [pc, #204]	@ (80057b4 <HAL_UART_MspInit+0x170>)
 80056e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 80056ec:	221a      	movs	r2, #26
 80056ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056f0:	4b2f      	ldr	r3, [pc, #188]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f6:	4b2e      	ldr	r3, [pc, #184]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056fc:	4b2c      	ldr	r3, [pc, #176]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005702:	4b2b      	ldr	r3, [pc, #172]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005708:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800570e:	4b28      	ldr	r3, [pc, #160]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 8005710:	2220      	movs	r2, #32
 8005712:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005714:	4b26      	ldr	r3, [pc, #152]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 8005716:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800571a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800571c:	4824      	ldr	r0, [pc, #144]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 800571e:	f000 faf5 	bl	8005d0c <HAL_DMA_Init>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8005728:	f7fc fb4c 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 8005730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005734:	4a1e      	ldr	r2, [pc, #120]	@ (80057b0 <HAL_UART_MspInit+0x16c>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800573a:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 800573c:	4a1f      	ldr	r2, [pc, #124]	@ (80057bc <HAL_UART_MspInit+0x178>)
 800573e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005742:	221b      	movs	r2, #27
 8005744:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005746:	4b1c      	ldr	r3, [pc, #112]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005748:	2210      	movs	r2, #16
 800574a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574c:	4b1a      	ldr	r3, [pc, #104]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 800574e:	2200      	movs	r2, #0
 8005750:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005752:	4b19      	ldr	r3, [pc, #100]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005754:	2280      	movs	r2, #128	@ 0x80
 8005756:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005758:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 800575a:	2200      	movs	r2, #0
 800575c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800575e:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005760:	2200      	movs	r2, #0
 8005762:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005764:	4b14      	ldr	r3, [pc, #80]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005766:	2200      	movs	r2, #0
 8005768:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800576a:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 800576c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8005770:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005772:	4811      	ldr	r0, [pc, #68]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005774:	f000 faca 	bl	8005d0c <HAL_DMA_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800577e:	f7fc fb21 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a0c      	ldr	r2, [pc, #48]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 8005786:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005788:	4a0b      	ldr	r2, [pc, #44]	@ (80057b8 <HAL_UART_MspInit+0x174>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800578e:	2200      	movs	r2, #0
 8005790:	2100      	movs	r1, #0
 8005792:	2026      	movs	r0, #38	@ 0x26
 8005794:	f000 fa85 	bl	8005ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005798:	2026      	movs	r0, #38	@ 0x26
 800579a:	f000 fa9c 	bl	8005cd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800579e:	bf00      	nop
 80057a0:	3768      	adds	r7, #104	@ 0x68
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40004400 	.word	0x40004400
 80057ac:	40021000 	.word	0x40021000
 80057b0:	200003d4 	.word	0x200003d4
 80057b4:	40020030 	.word	0x40020030
 80057b8:	20000434 	.word	0x20000434
 80057bc:	40020044 	.word	0x40020044

080057c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <NMI_Handler+0x4>

080057c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <HardFault_Handler+0x4>

080057d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <MemManage_Handler+0x4>

080057d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <BusFault_Handler+0x4>

080057e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <UsageFault_Handler+0x4>

080057e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005816:	f000 f94b 	bl	8005ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}

0800581e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005830:	2008      	movs	r0, #8
 8005832:	f000 ff4f 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}

0800583a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800583e:	2010      	movs	r0, #16
 8005840:	f000 ff48 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005844:	bf00      	nop
 8005846:	bd80      	pop	{r7, pc}

08005848 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800584c:	4802      	ldr	r0, [pc, #8]	@ (8005858 <DMA1_Channel3_IRQHandler+0x10>)
 800584e:	f000 fc40 	bl	80060d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200003d4 	.word	0x200003d4

0800585c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005860:	4802      	ldr	r0, [pc, #8]	@ (800586c <DMA1_Channel4_IRQHandler+0x10>)
 8005862:	f000 fc36 	bl	80060d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000434 	.word	0x20000434

08005870 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005874:	2020      	movs	r0, #32
 8005876:	f000 ff2d 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800587a:	2080      	movs	r0, #128	@ 0x80
 800587c:	f000 ff2a 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005880:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005884:	f000 ff26 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005888:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800588c:	f000 ff22 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}

08005894 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005898:	4803      	ldr	r0, [pc, #12]	@ (80058a8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800589a:	f002 fcff 	bl	800829c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800589e:	4803      	ldr	r0, [pc, #12]	@ (80058ac <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80058a0:	f002 fcfc 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80058a4:	bf00      	nop
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	200000e0 	.word	0x200000e0
 80058ac:	200002f4 	.word	0x200002f4

080058b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058b4:	4802      	ldr	r0, [pc, #8]	@ (80058c0 <TIM2_IRQHandler+0x10>)
 80058b6:	f002 fcf1 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000012c 	.word	0x2000012c

080058c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058c8:	4802      	ldr	r0, [pc, #8]	@ (80058d4 <USART2_IRQHandler+0x10>)
 80058ca:	f003 ff31 	bl	8009730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000340 	.word	0x20000340

080058d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80058dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80058e0:	f000 fef8 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80058e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80058e8:	f000 fef4 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80058ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80058f0:	f000 fef0 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80058f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80058f8:	f000 feec 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}

08005900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005904:	4802      	ldr	r0, [pc, #8]	@ (8005910 <TIM6_DAC_IRQHandler+0x10>)
 8005906:	f002 fcc9 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000210 	.word	0x20000210

08005914 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005918:	4802      	ldr	r0, [pc, #8]	@ (8005924 <TIM7_IRQHandler+0x10>)
 800591a:	f002 fcbf 	bl	800829c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	2000025c 	.word	0x2000025c

08005928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005930:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <_sbrk+0x5c>)
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <_sbrk+0x60>)
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <_sbrk+0x64>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005944:	4b11      	ldr	r3, [pc, #68]	@ (800598c <_sbrk+0x64>)
 8005946:	4a12      	ldr	r2, [pc, #72]	@ (8005990 <_sbrk+0x68>)
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <_sbrk+0x64>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	d207      	bcs.n	8005968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005958:	f005 fb2a 	bl	800afb0 <__errno>
 800595c:	4603      	mov	r3, r0
 800595e:	220c      	movs	r2, #12
 8005960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	e009      	b.n	800597c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <_sbrk+0x64>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800596e:	4b07      	ldr	r3, [pc, #28]	@ (800598c <_sbrk+0x64>)
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	4a05      	ldr	r2, [pc, #20]	@ (800598c <_sbrk+0x64>)
 8005978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800597a:	68fb      	ldr	r3, [r7, #12]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20008000 	.word	0x20008000
 8005988:	00000400 	.word	0x00000400
 800598c:	20001c5c 	.word	0x20001c5c
 8005990:	20001db0 	.word	0x20001db0

08005994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <SystemInit+0x20>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	4a05      	ldr	r2, [pc, #20]	@ (80059b4 <SystemInit+0x20>)
 80059a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059b8:	480d      	ldr	r0, [pc, #52]	@ (80059f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80059bc:	f7ff ffea 	bl	8005994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059c0:	480c      	ldr	r0, [pc, #48]	@ (80059f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80059c2:	490d      	ldr	r1, [pc, #52]	@ (80059f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059c4:	4a0d      	ldr	r2, [pc, #52]	@ (80059fc <LoopForever+0xe>)
  movs r3, #0
 80059c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80059c8:	e002      	b.n	80059d0 <LoopCopyDataInit>

080059ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ce:	3304      	adds	r3, #4

080059d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059d4:	d3f9      	bcc.n	80059ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059d8:	4c0a      	ldr	r4, [pc, #40]	@ (8005a04 <LoopForever+0x16>)
  movs r3, #0
 80059da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059dc:	e001      	b.n	80059e2 <LoopFillZerobss>

080059de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059e0:	3204      	adds	r2, #4

080059e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059e4:	d3fb      	bcc.n	80059de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80059e6:	f005 fae9 	bl	800afbc <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80059ea:	f7fb fd11 	bl	8001410 <main>

080059ee <LoopForever>:

LoopForever:
    b LoopForever
 80059ee:	e7fe      	b.n	80059ee <LoopForever>
  ldr   r0, =_estack
 80059f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80059f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80059fc:	0800b688 	.word	0x0800b688
  ldr r2, =_sbss
 8005a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005a04:	20001dac 	.word	0x20001dac

08005a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a08:	e7fe      	b.n	8005a08 <ADC1_2_IRQHandler>

08005a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a14:	2003      	movs	r0, #3
 8005a16:	f000 f939 	bl	8005c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a1a:	200f      	movs	r0, #15
 8005a1c:	f000 f80e 	bl	8005a3c <HAL_InitTick>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	71fb      	strb	r3, [r7, #7]
 8005a2a:	e001      	b.n	8005a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a2c:	f7ff fbbe 	bl	80051ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a30:	79fb      	ldrb	r3, [r7, #7]

}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005a48:	4b16      	ldr	r3, [pc, #88]	@ (8005aa4 <HAL_InitTick+0x68>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d022      	beq.n	8005a96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005a50:	4b15      	ldr	r3, [pc, #84]	@ (8005aa8 <HAL_InitTick+0x6c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <HAL_InitTick+0x68>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f944 	bl	8005cf2 <HAL_SYSTICK_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d809      	bhi.n	8005a8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a76:	2200      	movs	r2, #0
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7e:	f000 f910 	bl	8005ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a82:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <HAL_InitTick+0x70>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e007      	b.n	8005a9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
 8005a8e:	e004      	b.n	8005a9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e001      	b.n	8005a9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	2000001c 	.word	0x2000001c
 8005aa8:	20000014 	.word	0x20000014
 8005aac:	20000018 	.word	0x20000018

08005ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_IncTick+0x1c>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <HAL_IncTick+0x20>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4413      	add	r3, r2
 8005abe:	4a03      	ldr	r2, [pc, #12]	@ (8005acc <HAL_IncTick+0x1c>)
 8005ac0:	6013      	str	r3, [r2, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20001c60 	.word	0x20001c60
 8005ad0:	2000001c 	.word	0x2000001c

08005ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	@ (8005ae8 <HAL_GetTick+0x14>)
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20001c60 	.word	0x20001c60

08005aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005afc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <__NVIC_SetPriorityGrouping+0x44>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b1e:	4a04      	ldr	r2, [pc, #16]	@ (8005b30 <__NVIC_SetPriorityGrouping+0x44>)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	60d3      	str	r3, [r2, #12]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	e000ed00 	.word	0xe000ed00

08005b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b38:	4b04      	ldr	r3, [pc, #16]	@ (8005b4c <__NVIC_GetPriorityGrouping+0x18>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	f003 0307 	and.w	r3, r3, #7
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	db0b      	blt.n	8005b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	f003 021f 	and.w	r2, r3, #31
 8005b68:	4907      	ldr	r1, [pc, #28]	@ (8005b88 <__NVIC_EnableIRQ+0x38>)
 8005b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	2001      	movs	r0, #1
 8005b72:	fa00 f202 	lsl.w	r2, r0, r2
 8005b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	e000e100 	.word	0xe000e100

08005b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	6039      	str	r1, [r7, #0]
 8005b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db0a      	blt.n	8005bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	490c      	ldr	r1, [pc, #48]	@ (8005bd8 <__NVIC_SetPriority+0x4c>)
 8005ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	440b      	add	r3, r1
 8005bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bb4:	e00a      	b.n	8005bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4908      	ldr	r1, [pc, #32]	@ (8005bdc <__NVIC_SetPriority+0x50>)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	3b04      	subs	r3, #4
 8005bc4:	0112      	lsls	r2, r2, #4
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	440b      	add	r3, r1
 8005bca:	761a      	strb	r2, [r3, #24]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	e000e100 	.word	0xe000e100
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	@ 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f1c3 0307 	rsb	r3, r3, #7
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	bf28      	it	cs
 8005bfe:	2304      	movcs	r3, #4
 8005c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d902      	bls.n	8005c10 <NVIC_EncodePriority+0x30>
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	3b03      	subs	r3, #3
 8005c0e:	e000      	b.n	8005c12 <NVIC_EncodePriority+0x32>
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	401a      	ands	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c28:	f04f 31ff 	mov.w	r1, #4294967295
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	43d9      	mvns	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c38:	4313      	orrs	r3, r2
         );
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3724      	adds	r7, #36	@ 0x24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c58:	d301      	bcc.n	8005c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e00f      	b.n	8005c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c88 <SysTick_Config+0x40>)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c66:	210f      	movs	r1, #15
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	f7ff ff8e 	bl	8005b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c70:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <SysTick_Config+0x40>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c76:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <SysTick_Config+0x40>)
 8005c78:	2207      	movs	r2, #7
 8005c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	e000e010 	.word	0xe000e010

08005c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff29 	bl	8005aec <__NVIC_SetPriorityGrouping>
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	4603      	mov	r3, r0
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cb0:	f7ff ff40 	bl	8005b34 <__NVIC_GetPriorityGrouping>
 8005cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	6978      	ldr	r0, [r7, #20]
 8005cbc:	f7ff ff90 	bl	8005be0 <NVIC_EncodePriority>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff ff5f 	bl	8005b8c <__NVIC_SetPriority>
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff33 	bl	8005b50 <__NVIC_EnableIRQ>
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff ffa4 	bl	8005c48 <SysTick_Config>
 8005d00:	4603      	mov	r3, r0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e08d      	b.n	8005e3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	4b47      	ldr	r3, [pc, #284]	@ (8005e44 <HAL_DMA_Init+0x138>)
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d80f      	bhi.n	8005d4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4b45      	ldr	r3, [pc, #276]	@ (8005e48 <HAL_DMA_Init+0x13c>)
 8005d32:	4413      	add	r3, r2
 8005d34:	4a45      	ldr	r2, [pc, #276]	@ (8005e4c <HAL_DMA_Init+0x140>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	009a      	lsls	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a42      	ldr	r2, [pc, #264]	@ (8005e50 <HAL_DMA_Init+0x144>)
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d48:	e00e      	b.n	8005d68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b40      	ldr	r3, [pc, #256]	@ (8005e54 <HAL_DMA_Init+0x148>)
 8005d52:	4413      	add	r3, r2
 8005d54:	4a3d      	ldr	r2, [pc, #244]	@ (8005e4c <HAL_DMA_Init+0x140>)
 8005d56:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	009a      	lsls	r2, r3, #2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a3c      	ldr	r2, [pc, #240]	@ (8005e58 <HAL_DMA_Init+0x14c>)
 8005d66:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa76 	bl	80062ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc8:	d102      	bne.n	8005dd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005de4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <HAL_DMA_Init+0x104>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d80c      	bhi.n	8005e10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa96 	bl	8006328 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	e008      	b.n	8005e22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40020407 	.word	0x40020407
 8005e48:	bffdfff8 	.word	0xbffdfff8
 8005e4c:	cccccccd 	.word	0xcccccccd
 8005e50:	40020000 	.word	0x40020000
 8005e54:	bffdfbf8 	.word	0xbffdfbf8
 8005e58:	40020400 	.word	0x40020400

08005e5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_DMA_Start_IT+0x20>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e066      	b.n	8005f4a <HAL_DMA_Start_IT+0xee>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d155      	bne.n	8005f3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f9bb 	bl	8006230 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 020e 	orr.w	r2, r2, #14
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e00f      	b.n	8005ef4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 020a 	orr.w	r2, r2, #10
 8005ef2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e005      	b.n	8005f48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
 8005f46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d005      	beq.n	8005f76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
 8005f74:	e037      	b.n	8005fe6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 020e 	bic.w	r2, r2, #14
 8005f84:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f94:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f003 021f 	and.w	r2, r3, #31
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fc2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fda:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fe4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d00d      	beq.n	8006038 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2204      	movs	r2, #4
 8006020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	e047      	b.n	80060c8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 020e 	bic.w	r2, r2, #14
 8006046:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606c:	f003 021f 	and.w	r2, r3, #31
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f202 	lsl.w	r2, r1, r2
 800607a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006084:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800609c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
    }
  }
  return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2204      	movs	r2, #4
 80060f4:	409a      	lsls	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d026      	beq.n	800614c <HAL_DMA_IRQHandler+0x7a>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d021      	beq.n	800614c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	f003 021f 	and.w	r2, r3, #31
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	2104      	movs	r1, #4
 8006134:	fa01 f202 	lsl.w	r2, r1, r2
 8006138:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	2b00      	cmp	r3, #0
 8006140:	d071      	beq.n	8006226 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800614a:	e06c      	b.n	8006226 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2202      	movs	r2, #2
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02e      	beq.n	80061be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d029      	beq.n	80061be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 020a 	bic.w	r2, r2, #10
 8006186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006194:	f003 021f 	and.w	r2, r3, #31
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	2102      	movs	r1, #2
 800619e:	fa01 f202 	lsl.w	r2, r1, r2
 80061a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d038      	beq.n	8006226 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80061bc:	e033      	b.n	8006226 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	2208      	movs	r2, #8
 80061c8:	409a      	lsls	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02a      	beq.n	8006228 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d025      	beq.n	8006228 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 020e 	bic.w	r2, r2, #14
 80061ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f0:	f003 021f 	and.w	r2, r3, #31
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f202 	lsl.w	r2, r1, r2
 80061fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006226:	bf00      	nop
 8006228:	bf00      	nop
}
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006246:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f003 021f 	and.w	r2, r3, #31
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	2101      	movs	r1, #1
 8006268:	fa01 f202 	lsl.w	r2, r1, r2
 800626c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b10      	cmp	r3, #16
 800627c:	d108      	bne.n	8006290 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800628e:	e007      	b.n	80062a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b16      	ldr	r3, [pc, #88]	@ (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d802      	bhi.n	80062c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80062c0:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e001      	b.n	80062ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80062c6:	4b15      	ldr	r3, [pc, #84]	@ (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80062c8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	3b08      	subs	r3, #8
 80062d6:	4a12      	ldr	r2, [pc, #72]	@ (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	009a      	lsls	r2, r3, #2
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80062f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2201      	movs	r2, #1
 8006300:	409a      	lsls	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40020407 	.word	0x40020407
 8006318:	40020800 	.word	0x40020800
 800631c:	40020820 	.word	0x40020820
 8006320:	cccccccd 	.word	0xcccccccd
 8006324:	40020880 	.word	0x40020880

08006328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4b0b      	ldr	r3, [pc, #44]	@ (8006368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a08      	ldr	r2, [pc, #32]	@ (800636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800634a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3b01      	subs	r3, #1
 8006350:	f003 031f 	and.w	r3, r3, #31
 8006354:	2201      	movs	r2, #1
 8006356:	409a      	lsls	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	1000823f 	.word	0x1000823f
 800636c:	40020940 	.word	0x40020940

08006370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800637e:	e15a      	b.n	8006636 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	2101      	movs	r1, #1
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	fa01 f303 	lsl.w	r3, r1, r3
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 814c 	beq.w	8006630 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d005      	beq.n	80063b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d130      	bne.n	8006412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	2203      	movs	r2, #3
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4013      	ands	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063e6:	2201      	movs	r2, #1
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4013      	ands	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 0201 	and.w	r2, r3, #1
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d017      	beq.n	800644e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	2203      	movs	r2, #3
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4013      	ands	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d123      	bne.n	80064a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	08da      	lsrs	r2, r3, #3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3208      	adds	r2, #8
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	220f      	movs	r2, #15
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4013      	ands	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	08da      	lsrs	r2, r3, #3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3208      	adds	r2, #8
 800649c:	6939      	ldr	r1, [r7, #16]
 800649e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	2203      	movs	r2, #3
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4013      	ands	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 0203 	and.w	r2, r3, #3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80a6 	beq.w	8006630 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006654 <HAL_GPIO_Init+0x2e4>)
 80064e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006654 <HAL_GPIO_Init+0x2e4>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80064f0:	4b58      	ldr	r3, [pc, #352]	@ (8006654 <HAL_GPIO_Init+0x2e4>)
 80064f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064fc:	4a56      	ldr	r2, [pc, #344]	@ (8006658 <HAL_GPIO_Init+0x2e8>)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	089b      	lsrs	r3, r3, #2
 8006502:	3302      	adds	r3, #2
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	220f      	movs	r2, #15
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43db      	mvns	r3, r3
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4013      	ands	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006526:	d01f      	beq.n	8006568 <HAL_GPIO_Init+0x1f8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a4c      	ldr	r2, [pc, #304]	@ (800665c <HAL_GPIO_Init+0x2ec>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d019      	beq.n	8006564 <HAL_GPIO_Init+0x1f4>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a4b      	ldr	r2, [pc, #300]	@ (8006660 <HAL_GPIO_Init+0x2f0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_GPIO_Init+0x1f0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a4a      	ldr	r2, [pc, #296]	@ (8006664 <HAL_GPIO_Init+0x2f4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00d      	beq.n	800655c <HAL_GPIO_Init+0x1ec>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a49      	ldr	r2, [pc, #292]	@ (8006668 <HAL_GPIO_Init+0x2f8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <HAL_GPIO_Init+0x1e8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a48      	ldr	r2, [pc, #288]	@ (800666c <HAL_GPIO_Init+0x2fc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <HAL_GPIO_Init+0x1e4>
 8006550:	2305      	movs	r3, #5
 8006552:	e00a      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 8006554:	2306      	movs	r3, #6
 8006556:	e008      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 8006558:	2304      	movs	r3, #4
 800655a:	e006      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 800655c:	2303      	movs	r3, #3
 800655e:	e004      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 8006560:	2302      	movs	r3, #2
 8006562:	e002      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_GPIO_Init+0x1fa>
 8006568:	2300      	movs	r3, #0
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	f002 0203 	and.w	r2, r2, #3
 8006570:	0092      	lsls	r2, r2, #2
 8006572:	4093      	lsls	r3, r2
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800657a:	4937      	ldr	r1, [pc, #220]	@ (8006658 <HAL_GPIO_Init+0x2e8>)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	3302      	adds	r3, #2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006588:	4b39      	ldr	r3, [pc, #228]	@ (8006670 <HAL_GPIO_Init+0x300>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	43db      	mvns	r3, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4013      	ands	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065ac:	4a30      	ldr	r2, [pc, #192]	@ (8006670 <HAL_GPIO_Init+0x300>)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006670 <HAL_GPIO_Init+0x300>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065d6:	4a26      	ldr	r2, [pc, #152]	@ (8006670 <HAL_GPIO_Init+0x300>)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80065dc:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <HAL_GPIO_Init+0x300>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4013      	ands	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_GPIO_Init+0x300>)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006606:	4b1a      	ldr	r3, [pc, #104]	@ (8006670 <HAL_GPIO_Init+0x300>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	43db      	mvns	r3, r3
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4013      	ands	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800662a:	4a11      	ldr	r2, [pc, #68]	@ (8006670 <HAL_GPIO_Init+0x300>)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	f47f ae9d 	bne.w	8006380 <HAL_GPIO_Init+0x10>
  }
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40021000 	.word	0x40021000
 8006658:	40010000 	.word	0x40010000
 800665c:	48000400 	.word	0x48000400
 8006660:	48000800 	.word	0x48000800
 8006664:	48000c00 	.word	0x48000c00
 8006668:	48001000 	.word	0x48001000
 800666c:	48001400 	.word	0x48001400
 8006670:	40010400 	.word	0x40010400

08006674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	887b      	ldrh	r3, [r7, #2]
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	e001      	b.n	8006696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	807b      	strh	r3, [r7, #2]
 80066b0:	4613      	mov	r3, r2
 80066b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066b4:	787b      	ldrb	r3, [r7, #1]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066ba:	887a      	ldrh	r2, [r7, #2]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066c0:	e002      	b.n	80066c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066c2:	887a      	ldrh	r2, [r7, #2]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066de:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066ea:	4a05      	ldr	r2, [pc, #20]	@ (8006700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fb fd3c 	bl	8002170 <HAL_GPIO_EXTI_Callback>
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40010400 	.word	0x40010400

08006704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e08d      	b.n	8006832 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fe fd6a 	bl	8005204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2224      	movs	r2, #36	@ 0x24
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006754:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006764:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d107      	bne.n	800677e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	e006      	b.n	800678c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800678a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d108      	bne.n	80067a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	e007      	b.n	80067b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b20      	cmp	r3, #32
 800684e:	d138      	bne.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800685a:	2302      	movs	r3, #2
 800685c:	e032      	b.n	80068c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2224      	movs	r2, #36	@ 0x24
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800688c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d139      	bne.n	800695a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e033      	b.n	800695c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2224      	movs	r2, #36	@ 0x24
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d141      	bne.n	80069fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006976:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006982:	d131      	bne.n	80069e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006984:	4b47      	ldr	r3, [pc, #284]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800698a:	4a46      	ldr	r2, [pc, #280]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006994:	4b43      	ldr	r3, [pc, #268]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800699c:	4a41      	ldr	r2, [pc, #260]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069a4:	4b40      	ldr	r3, [pc, #256]	@ (8006aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2232      	movs	r2, #50	@ 0x32
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	4a3f      	ldr	r2, [pc, #252]	@ (8006aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	0c9b      	lsrs	r3, r3, #18
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ba:	e002      	b.n	80069c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3b01      	subs	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069c2:	4b38      	ldr	r3, [pc, #224]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ce:	d102      	bne.n	80069d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f2      	bne.n	80069bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069d6:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e2:	d158      	bne.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e057      	b.n	8006a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069e8:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ee:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80069f8:	e04d      	b.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a00:	d141      	bne.n	8006a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a02:	4b28      	ldr	r3, [pc, #160]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a0e:	d131      	bne.n	8006a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a10:	4b24      	ldr	r3, [pc, #144]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a16:	4a23      	ldr	r2, [pc, #140]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a20:	4b20      	ldr	r3, [pc, #128]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a28:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a30:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2232      	movs	r2, #50	@ 0x32
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	0c9b      	lsrs	r3, r3, #18
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a46:	e002      	b.n	8006a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a4e:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5a:	d102      	bne.n	8006a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f2      	bne.n	8006a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6e:	d112      	bne.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e011      	b.n	8006a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a74:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a84:	e007      	b.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a86:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a8e:	4a05      	ldr	r2, [pc, #20]	@ (8006aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	20000014 	.word	0x20000014
 8006aac:	431bde83 	.word	0x431bde83

08006ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ab4:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a04      	ldr	r2, [pc, #16]	@ (8006acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006abe:	6093      	str	r3, [r2, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40007000 	.word	0x40007000

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e2fe      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d075      	beq.n	8006bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aee:	4b97      	ldr	r3, [pc, #604]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006af8:	4b94      	ldr	r3, [pc, #592]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	d102      	bne.n	8006b0e <HAL_RCC_OscConfig+0x3e>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d002      	beq.n	8006b14 <HAL_RCC_OscConfig+0x44>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	4b8d      	ldr	r3, [pc, #564]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d157      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e2d9      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0x74>
 8006b36:	4b85      	ldr	r3, [pc, #532]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a84      	ldr	r2, [pc, #528]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x98>
 8006b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a7e      	ldr	r2, [pc, #504]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b68:	4b78      	ldr	r3, [pc, #480]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a77      	ldr	r2, [pc, #476]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b75      	ldr	r3, [pc, #468]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a74      	ldr	r2, [pc, #464]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b88:	f7fe ffa4 	bl	8005ad4 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fe ffa0 	bl	8005ad4 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	@ 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e29e      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fe ff90 	bl	8005ad4 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe ff8c 	bl	8005ad4 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	@ 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e28a      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bca:	4b60      	ldr	r3, [pc, #384]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d075      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006be6:	4b59      	ldr	r3, [pc, #356]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bf0:	4b56      	ldr	r3, [pc, #344]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0303 	and.w	r3, r3, #3
 8006bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	d102      	bne.n	8006c06 <HAL_RCC_OscConfig+0x136>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d002      	beq.n	8006c0c <HAL_RCC_OscConfig+0x13c>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d11f      	bne.n	8006c4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_OscConfig+0x154>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e25d      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c24:	4b49      	ldr	r3, [pc, #292]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	4946      	ldr	r1, [pc, #280]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c38:	4b45      	ldr	r3, [pc, #276]	@ (8006d50 <HAL_RCC_OscConfig+0x280>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fefd 	bl	8005a3c <HAL_InitTick>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d043      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e249      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d023      	beq.n	8006c9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c54:	4b3d      	ldr	r3, [pc, #244]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3c      	ldr	r2, [pc, #240]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fe ff38 	bl	8005ad4 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c68:	f7fe ff34 	bl	8005ad4 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e232      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c7a:	4b34      	ldr	r3, [pc, #208]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c86:	4b31      	ldr	r3, [pc, #196]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	061b      	lsls	r3, r3, #24
 8006c94:	492d      	ldr	r1, [pc, #180]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	604b      	str	r3, [r1, #4]
 8006c9a:	e01a      	b.n	8006cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fe ff14 	bl	8005ad4 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fe ff10 	bl	8005ad4 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e20e      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cc2:	4b22      	ldr	r3, [pc, #136]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x1e0>
 8006cce:	e000      	b.n	8006cd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d041      	beq.n	8006d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d01c      	beq.n	8006d20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ce6:	4b19      	ldr	r3, [pc, #100]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cec:	4a17      	ldr	r2, [pc, #92]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf6:	f7fe feed 	bl	8005ad4 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fe fee9 	bl	8005ad4 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e1e7      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d10:	4b0e      	ldr	r3, [pc, #56]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0ef      	beq.n	8006cfe <HAL_RCC_OscConfig+0x22e>
 8006d1e:	e020      	b.n	8006d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d20:	4b0a      	ldr	r3, [pc, #40]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d26:	4a09      	ldr	r2, [pc, #36]	@ (8006d4c <HAL_RCC_OscConfig+0x27c>)
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fe fed0 	bl	8005ad4 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d36:	e00d      	b.n	8006d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fe fecc 	bl	8005ad4 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d906      	bls.n	8006d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e1ca      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
 8006d4a:	bf00      	nop
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d54:	4b8c      	ldr	r3, [pc, #560]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1ea      	bne.n	8006d38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a6 	beq.w	8006ebc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d70:	2300      	movs	r3, #0
 8006d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d74:	4b84      	ldr	r3, [pc, #528]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_OscConfig+0x2b4>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x2b6>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d96:	4b7c      	ldr	r3, [pc, #496]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006da2:	2301      	movs	r3, #1
 8006da4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006da6:	4b79      	ldr	r3, [pc, #484]	@ (8006f8c <HAL_RCC_OscConfig+0x4bc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d118      	bne.n	8006de4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006db2:	4b76      	ldr	r3, [pc, #472]	@ (8006f8c <HAL_RCC_OscConfig+0x4bc>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a75      	ldr	r2, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x4bc>)
 8006db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dbe:	f7fe fe89 	bl	8005ad4 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc6:	f7fe fe85 	bl	8005ad4 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e183      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f8c <HAL_RCC_OscConfig+0x4bc>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d108      	bne.n	8006dfe <HAL_RCC_OscConfig+0x32e>
 8006dec:	4b66      	ldr	r3, [pc, #408]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df2:	4a65      	ldr	r2, [pc, #404]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006dfc:	e024      	b.n	8006e48 <HAL_RCC_OscConfig+0x378>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d110      	bne.n	8006e28 <HAL_RCC_OscConfig+0x358>
 8006e06:	4b60      	ldr	r3, [pc, #384]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e0e:	f043 0304 	orr.w	r3, r3, #4
 8006e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e16:	4b5c      	ldr	r3, [pc, #368]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e26:	e00f      	b.n	8006e48 <HAL_RCC_OscConfig+0x378>
 8006e28:	4b57      	ldr	r3, [pc, #348]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2e:	4a56      	ldr	r2, [pc, #344]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e38:	4b53      	ldr	r3, [pc, #332]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3e:	4a52      	ldr	r2, [pc, #328]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d016      	beq.n	8006e7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fe fe40 	bl	8005ad4 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e58:	f7fe fe3c 	bl	8005ad4 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e138      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e6e:	4b46      	ldr	r3, [pc, #280]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0ed      	beq.n	8006e58 <HAL_RCC_OscConfig+0x388>
 8006e7c:	e015      	b.n	8006eaa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7e:	f7fe fe29 	bl	8005ad4 <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e84:	e00a      	b.n	8006e9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e86:	f7fe fe25 	bl	8005ad4 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e121      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ed      	bne.n	8006e86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eaa:	7ffb      	ldrb	r3, [r7, #31]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d105      	bne.n	8006ebc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb0:	4b35      	ldr	r3, [pc, #212]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb4:	4a34      	ldr	r2, [pc, #208]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d03c      	beq.n	8006f42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01c      	beq.n	8006f0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee0:	f7fe fdf8 	bl	8005ad4 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ee8:	f7fe fdf4 	bl	8005ad4 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e0f2      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006efa:	4b23      	ldr	r3, [pc, #140]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0ef      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x418>
 8006f08:	e01b      	b.n	8006f42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f10:	4a1d      	ldr	r2, [pc, #116]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1a:	f7fe fddb 	bl	8005ad4 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f22:	f7fe fdd7 	bl	8005ad4 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e0d5      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f34:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ef      	bne.n	8006f22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80c9 	beq.w	80070de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 030c 	and.w	r3, r3, #12
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	f000 8083 	beq.w	8007060 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d15e      	bne.n	8007020 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f62:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a08      	ldr	r2, [pc, #32]	@ (8006f88 <HAL_RCC_OscConfig+0x4b8>)
 8006f68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6e:	f7fe fdb1 	bl	8005ad4 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f74:	e00c      	b.n	8006f90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f76:	f7fe fdad 	bl	8005ad4 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d905      	bls.n	8006f90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e0ab      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f90:	4b55      	ldr	r3, [pc, #340]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ec      	bne.n	8006f76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9c:	4b52      	ldr	r3, [pc, #328]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006f9e:	68da      	ldr	r2, [r3, #12]
 8006fa0:	4b52      	ldr	r3, [pc, #328]	@ (80070ec <HAL_RCC_OscConfig+0x61c>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6a11      	ldr	r1, [r2, #32]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fac:	3a01      	subs	r2, #1
 8006fae:	0112      	lsls	r2, r2, #4
 8006fb0:	4311      	orrs	r1, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006fb6:	0212      	lsls	r2, r2, #8
 8006fb8:	4311      	orrs	r1, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fbe:	0852      	lsrs	r2, r2, #1
 8006fc0:	3a01      	subs	r2, #1
 8006fc2:	0552      	lsls	r2, r2, #21
 8006fc4:	4311      	orrs	r1, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fca:	0852      	lsrs	r2, r2, #1
 8006fcc:	3a01      	subs	r2, #1
 8006fce:	0652      	lsls	r2, r2, #25
 8006fd0:	4311      	orrs	r1, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006fd6:	06d2      	lsls	r2, r2, #27
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	4943      	ldr	r1, [pc, #268]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fe0:	4b41      	ldr	r3, [pc, #260]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a40      	ldr	r2, [pc, #256]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fec:	4b3e      	ldr	r3, [pc, #248]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a3d      	ldr	r2, [pc, #244]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8006ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fe fd6c 	bl	8005ad4 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007000:	f7fe fd68 	bl	8005ad4 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e066      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007012:	4b35      	ldr	r3, [pc, #212]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x530>
 800701e:	e05e      	b.n	80070de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007020:	4b31      	ldr	r3, [pc, #196]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a30      	ldr	r2, [pc, #192]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800702a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fe fd52 	bl	8005ad4 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007034:	f7fe fd4e 	bl	8005ad4 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e04c      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007046:	4b28      	ldr	r3, [pc, #160]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007052:	4b25      	ldr	r3, [pc, #148]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	4924      	ldr	r1, [pc, #144]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <HAL_RCC_OscConfig+0x620>)
 800705a:	4013      	ands	r3, r2
 800705c:	60cb      	str	r3, [r1, #12]
 800705e:	e03e      	b.n	80070de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e039      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800706c:	4b1e      	ldr	r3, [pc, #120]	@ (80070e8 <HAL_RCC_OscConfig+0x618>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f003 0203 	and.w	r2, r3, #3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	429a      	cmp	r2, r3
 800707e:	d12c      	bne.n	80070da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708a:	3b01      	subs	r3, #1
 800708c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800708e:	429a      	cmp	r2, r3
 8007090:	d123      	bne.n	80070da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800709e:	429a      	cmp	r2, r3
 80070a0:	d11b      	bne.n	80070da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d113      	bne.n	80070da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	3b01      	subs	r3, #1
 80070c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d109      	bne.n	80070da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	3b01      	subs	r3, #1
 80070d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d001      	beq.n	80070de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40021000 	.word	0x40021000
 80070ec:	019f800c 	.word	0x019f800c
 80070f0:	feeefffc 	.word	0xfeeefffc

080070f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e11e      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800710c:	4b91      	ldr	r3, [pc, #580]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d910      	bls.n	800713c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711a:	4b8e      	ldr	r3, [pc, #568]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f023 020f 	bic.w	r2, r3, #15
 8007122:	498c      	ldr	r1, [pc, #560]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	4b8a      	ldr	r3, [pc, #552]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d001      	beq.n	800713c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e106      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d073      	beq.n	8007230 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d129      	bne.n	80071a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007150:	4b81      	ldr	r3, [pc, #516]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0f4      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007160:	f000 f99e 	bl	80074a0 <RCC_GetSysClockFreqFromPLLSource>
 8007164:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4a7c      	ldr	r2, [pc, #496]	@ (800735c <HAL_RCC_ClockConfig+0x268>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d93f      	bls.n	80071ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800716e:	4b7a      	ldr	r3, [pc, #488]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007182:	2b00      	cmp	r3, #0
 8007184:	d033      	beq.n	80071ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800718a:	2b00      	cmp	r3, #0
 800718c:	d12f      	bne.n	80071ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800718e:	4b72      	ldr	r3, [pc, #456]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007196:	4a70      	ldr	r2, [pc, #448]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800719e:	2380      	movs	r3, #128	@ 0x80
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	e024      	b.n	80071ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d107      	bne.n	80071bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0c6      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071bc:	4b66      	ldr	r3, [pc, #408]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0be      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80071cc:	f000 f8ce 	bl	800736c <HAL_RCC_GetSysClockFreq>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4a61      	ldr	r2, [pc, #388]	@ (800735c <HAL_RCC_ClockConfig+0x268>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d909      	bls.n	80071ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071da:	4b5f      	ldr	r3, [pc, #380]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071e2:	4a5d      	ldr	r2, [pc, #372]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80071ea:	2380      	movs	r3, #128	@ 0x80
 80071ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071ee:	4b5a      	ldr	r3, [pc, #360]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 0203 	bic.w	r2, r3, #3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	4957      	ldr	r1, [pc, #348]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007200:	f7fe fc68 	bl	8005ad4 <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007206:	e00a      	b.n	800721e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007208:	f7fe fc64 	bl	8005ad4 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e095      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	4b4e      	ldr	r3, [pc, #312]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 020c 	and.w	r2, r3, #12
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	429a      	cmp	r2, r3
 800722e:	d1eb      	bne.n	8007208 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d023      	beq.n	8007284 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007248:	4b43      	ldr	r3, [pc, #268]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a42      	ldr	r2, [pc, #264]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800724e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007252:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007260:	4b3d      	ldr	r3, [pc, #244]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007268:	4a3b      	ldr	r2, [pc, #236]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800726a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800726e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007270:	4b39      	ldr	r3, [pc, #228]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4936      	ldr	r1, [pc, #216]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
 8007282:	e008      	b.n	8007296 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b80      	cmp	r3, #128	@ 0x80
 8007288:	d105      	bne.n	8007296 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800728a:	4b33      	ldr	r3, [pc, #204]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	4a32      	ldr	r2, [pc, #200]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007294:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007296:	4b2f      	ldr	r3, [pc, #188]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d21d      	bcs.n	80072e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f023 020f 	bic.w	r2, r3, #15
 80072ac:	4929      	ldr	r1, [pc, #164]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072b4:	f7fe fc0e 	bl	8005ad4 <HAL_GetTick>
 80072b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ba:	e00a      	b.n	80072d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072bc:	f7fe fc0a 	bl	8005ad4 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e03b      	b.n	800734a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	4b20      	ldr	r3, [pc, #128]	@ (8007354 <HAL_RCC_ClockConfig+0x260>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d1ed      	bne.n	80072bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	4917      	ldr	r1, [pc, #92]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800730a:	4b13      	ldr	r3, [pc, #76]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	490f      	ldr	r1, [pc, #60]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 800731a:	4313      	orrs	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800731e:	f000 f825 	bl	800736c <HAL_RCC_GetSysClockFreq>
 8007322:	4602      	mov	r2, r0
 8007324:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <HAL_RCC_ClockConfig+0x264>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	490c      	ldr	r1, [pc, #48]	@ (8007360 <HAL_RCC_ClockConfig+0x26c>)
 8007330:	5ccb      	ldrb	r3, [r1, r3]
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	4a0a      	ldr	r2, [pc, #40]	@ (8007364 <HAL_RCC_ClockConfig+0x270>)
 800733c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800733e:	4b0a      	ldr	r3, [pc, #40]	@ (8007368 <HAL_RCC_ClockConfig+0x274>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fb7a 	bl	8005a3c <HAL_InitTick>
 8007348:	4603      	mov	r3, r0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40022000 	.word	0x40022000
 8007358:	40021000 	.word	0x40021000
 800735c:	04c4b400 	.word	0x04c4b400
 8007360:	0800b630 	.word	0x0800b630
 8007364:	20000014 	.word	0x20000014
 8007368:	20000018 	.word	0x20000018

0800736c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007372:	4b2c      	ldr	r3, [pc, #176]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b04      	cmp	r3, #4
 800737c:	d102      	bne.n	8007384 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800737e:	4b2a      	ldr	r3, [pc, #168]	@ (8007428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	e047      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007384:	4b27      	ldr	r3, [pc, #156]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b08      	cmp	r3, #8
 800738e:	d102      	bne.n	8007396 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007390:	4b26      	ldr	r3, [pc, #152]	@ (800742c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	e03e      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007396:	4b23      	ldr	r3, [pc, #140]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 030c 	and.w	r3, r3, #12
 800739e:	2b0c      	cmp	r3, #12
 80073a0:	d136      	bne.n	8007410 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073a2:	4b20      	ldr	r3, [pc, #128]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	3301      	adds	r3, #1
 80073b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d10c      	bne.n	80073da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073c0:	4a1a      	ldr	r2, [pc, #104]	@ (800742c <HAL_RCC_GetSysClockFreq+0xc0>)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	4a16      	ldr	r2, [pc, #88]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073ca:	68d2      	ldr	r2, [r2, #12]
 80073cc:	0a12      	lsrs	r2, r2, #8
 80073ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	617b      	str	r3, [r7, #20]
      break;
 80073d8:	e00c      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073da:	4a13      	ldr	r2, [pc, #76]	@ (8007428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	4a10      	ldr	r2, [pc, #64]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073e4:	68d2      	ldr	r2, [r2, #12]
 80073e6:	0a12      	lsrs	r2, r2, #8
 80073e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
      break;
 80073f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	0e5b      	lsrs	r3, r3, #25
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	3301      	adds	r3, #1
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	e001      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007414:	693b      	ldr	r3, [r7, #16]
}
 8007416:	4618      	mov	r0, r3
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40021000 	.word	0x40021000
 8007428:	00f42400 	.word	0x00f42400
 800742c:	007a1200 	.word	0x007a1200

08007430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007434:	4b03      	ldr	r3, [pc, #12]	@ (8007444 <HAL_RCC_GetHCLKFreq+0x14>)
 8007436:	681b      	ldr	r3, [r3, #0]
}
 8007438:	4618      	mov	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000014 	.word	0x20000014

08007448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800744c:	f7ff fff0 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b06      	ldr	r3, [pc, #24]	@ (800746c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	4904      	ldr	r1, [pc, #16]	@ (8007470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	f003 031f 	and.w	r3, r3, #31
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40021000 	.word	0x40021000
 8007470:	0800b640 	.word	0x0800b640

08007474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007478:	f7ff ffda 	bl	8007430 <HAL_RCC_GetHCLKFreq>
 800747c:	4602      	mov	r2, r0
 800747e:	4b06      	ldr	r3, [pc, #24]	@ (8007498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	0adb      	lsrs	r3, r3, #11
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	4904      	ldr	r1, [pc, #16]	@ (800749c <HAL_RCC_GetPCLK2Freq+0x28>)
 800748a:	5ccb      	ldrb	r3, [r1, r3]
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007494:	4618      	mov	r0, r3
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021000 	.word	0x40021000
 800749c:	0800b640 	.word	0x0800b640

080074a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d10c      	bne.n	80074de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074c4:	4a17      	ldr	r2, [pc, #92]	@ (8007524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074ce:	68d2      	ldr	r2, [r2, #12]
 80074d0:	0a12      	lsrs	r2, r2, #8
 80074d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074d6:	fb02 f303 	mul.w	r3, r2, r3
 80074da:	617b      	str	r3, [r7, #20]
    break;
 80074dc:	e00c      	b.n	80074f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074de:	4a12      	ldr	r2, [pc, #72]	@ (8007528 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074e8:	68d2      	ldr	r2, [r2, #12]
 80074ea:	0a12      	lsrs	r2, r2, #8
 80074ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	617b      	str	r3, [r7, #20]
    break;
 80074f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074f8:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	0e5b      	lsrs	r3, r3, #25
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	3301      	adds	r3, #1
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007512:	687b      	ldr	r3, [r7, #4]
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40021000 	.word	0x40021000
 8007524:	007a1200 	.word	0x007a1200
 8007528:	00f42400 	.word	0x00f42400

0800752c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007534:	2300      	movs	r3, #0
 8007536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007538:	2300      	movs	r3, #0
 800753a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8098 	beq.w	800767a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800754a:	2300      	movs	r3, #0
 800754c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800754e:	4b43      	ldr	r3, [pc, #268]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10d      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800755a:	4b40      	ldr	r3, [pc, #256]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755e:	4a3f      	ldr	r2, [pc, #252]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007564:	6593      	str	r3, [r2, #88]	@ 0x58
 8007566:	4b3d      	ldr	r3, [pc, #244]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007572:	2301      	movs	r3, #1
 8007574:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007576:	4b3a      	ldr	r3, [pc, #232]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a39      	ldr	r2, [pc, #228]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007582:	f7fe faa7 	bl	8005ad4 <HAL_GetTick>
 8007586:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007588:	e009      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800758a:	f7fe faa3 	bl	8005ad4 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d902      	bls.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	74fb      	strb	r3, [r7, #19]
        break;
 800759c:	e005      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800759e:	4b30      	ldr	r3, [pc, #192]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0ef      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80075aa:	7cfb      	ldrb	r3, [r7, #19]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d159      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075b0:	4b2a      	ldr	r3, [pc, #168]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01e      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d019      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075cc:	4b23      	ldr	r3, [pc, #140]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075d8:	4b20      	ldr	r3, [pc, #128]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075de:	4a1f      	ldr	r2, [pc, #124]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075e8:	4b1c      	ldr	r3, [pc, #112]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	4a1b      	ldr	r2, [pc, #108]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075f8:	4a18      	ldr	r2, [pc, #96]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fe fa63 	bl	8005ad4 <HAL_GetTick>
 800760e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007610:	e00b      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7fe fa5f 	bl	8005ad4 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d902      	bls.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	74fb      	strb	r3, [r7, #19]
            break;
 8007628:	e006      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800762a:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0ec      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10b      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764c:	4903      	ldr	r1, [pc, #12]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007654:	e008      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007656:	7cfb      	ldrb	r3, [r7, #19]
 8007658:	74bb      	strb	r3, [r7, #18]
 800765a:	e005      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800765c:	40021000 	.word	0x40021000
 8007660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	7cfb      	ldrb	r3, [r7, #19]
 8007666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007668:	7c7b      	ldrb	r3, [r7, #17]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d105      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800766e:	4ba6      	ldr	r3, [pc, #664]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007672:	4aa5      	ldr	r2, [pc, #660]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007678:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007686:	4ba0      	ldr	r3, [pc, #640]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768c:	f023 0203 	bic.w	r2, r3, #3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	499c      	ldr	r1, [pc, #624]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007696:	4313      	orrs	r3, r2
 8007698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076a8:	4b97      	ldr	r3, [pc, #604]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ae:	f023 020c 	bic.w	r2, r3, #12
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	4994      	ldr	r1, [pc, #592]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	498b      	ldr	r1, [pc, #556]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00a      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076ec:	4b86      	ldr	r3, [pc, #536]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	4983      	ldr	r1, [pc, #524]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800770e:	4b7e      	ldr	r3, [pc, #504]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007714:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	497a      	ldr	r1, [pc, #488]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007730:	4b75      	ldr	r3, [pc, #468]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007736:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	4972      	ldr	r1, [pc, #456]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007740:	4313      	orrs	r3, r2
 8007742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007752:	4b6d      	ldr	r3, [pc, #436]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007758:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	4969      	ldr	r1, [pc, #420]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007774:	4b64      	ldr	r3, [pc, #400]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	4961      	ldr	r1, [pc, #388]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00a      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007796:	4b5c      	ldr	r3, [pc, #368]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	4958      	ldr	r1, [pc, #352]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d015      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077b8:	4b53      	ldr	r3, [pc, #332]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	4950      	ldr	r1, [pc, #320]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077d6:	d105      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d015      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077f0:	4b45      	ldr	r3, [pc, #276]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	4942      	ldr	r1, [pc, #264]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007800:	4313      	orrs	r3, r2
 8007802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800780e:	d105      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007810:	4b3d      	ldr	r3, [pc, #244]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4a3c      	ldr	r2, [pc, #240]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800781a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d015      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007828:	4b37      	ldr	r3, [pc, #220]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007836:	4934      	ldr	r1, [pc, #208]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007846:	d105      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007848:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4a2e      	ldr	r2, [pc, #184]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007852:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d015      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007860:	4b29      	ldr	r3, [pc, #164]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786e:	4926      	ldr	r1, [pc, #152]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007870:	4313      	orrs	r3, r2
 8007872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800787a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787e:	d105      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007880:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800788a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800789a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a6:	4918      	ldr	r1, [pc, #96]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078b6:	d105      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b8:	4b13      	ldr	r3, [pc, #76]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	4a12      	ldr	r2, [pc, #72]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d015      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80078d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078de:	490a      	ldr	r1, [pc, #40]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ee:	d105      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078f0:	4b05      	ldr	r3, [pc, #20]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4a04      	ldr	r2, [pc, #16]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	40021000 	.word	0x40021000

0800790c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e049      	b.n	80079b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fd fd2c 	bl	8005390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	4610      	mov	r0, r2
 800794c:	f001 f82c 	bl	80089a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d001      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e04a      	b.n	8007a6a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a21      	ldr	r2, [pc, #132]	@ (8007a78 <HAL_TIM_Base_Start_IT+0xbc>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d018      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x6c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079fe:	d013      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x6c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1d      	ldr	r2, [pc, #116]	@ (8007a7c <HAL_TIM_Base_Start_IT+0xc0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00e      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x6c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a80 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d009      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x6c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	@ (8007a84 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_TIM_Base_Start_IT+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a19      	ldr	r2, [pc, #100]	@ (8007a88 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d115      	bne.n	8007a54 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b06      	cmp	r3, #6
 8007a38:	d015      	beq.n	8007a66 <HAL_TIM_Base_Start_IT+0xaa>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a40:	d011      	beq.n	8007a66 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a52:	e008      	b.n	8007a66 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e000      	b.n	8007a68 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40013400 	.word	0x40013400
 8007a88:	40014000 	.word	0x40014000
 8007a8c:	00010007 	.word	0x00010007

08007a90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10f      	bne.n	8007ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e049      	b.n	8007b94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7fd fbed 	bl	80052f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f000 ff3b 	bl	80089a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d109      	bne.n	8007bc0 <HAL_TIM_PWM_Start+0x24>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	bf14      	ite	ne
 8007bb8:	2301      	movne	r3, #1
 8007bba:	2300      	moveq	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	e03c      	b.n	8007c3a <HAL_TIM_PWM_Start+0x9e>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d109      	bne.n	8007bda <HAL_TIM_PWM_Start+0x3e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	bf14      	ite	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	2300      	moveq	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	e02f      	b.n	8007c3a <HAL_TIM_PWM_Start+0x9e>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d109      	bne.n	8007bf4 <HAL_TIM_PWM_Start+0x58>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	bf14      	ite	ne
 8007bec:	2301      	movne	r3, #1
 8007bee:	2300      	moveq	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	e022      	b.n	8007c3a <HAL_TIM_PWM_Start+0x9e>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b0c      	cmp	r3, #12
 8007bf8:	d109      	bne.n	8007c0e <HAL_TIM_PWM_Start+0x72>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	e015      	b.n	8007c3a <HAL_TIM_PWM_Start+0x9e>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d109      	bne.n	8007c28 <HAL_TIM_PWM_Start+0x8c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	bf14      	ite	ne
 8007c20:	2301      	movne	r3, #1
 8007c22:	2300      	moveq	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	e008      	b.n	8007c3a <HAL_TIM_PWM_Start+0x9e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	bf14      	ite	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	2300      	moveq	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e097      	b.n	8007d72 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <HAL_TIM_PWM_Start+0xb6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c50:	e023      	b.n	8007c9a <HAL_TIM_PWM_Start+0xfe>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d104      	bne.n	8007c62 <HAL_TIM_PWM_Start+0xc6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c60:	e01b      	b.n	8007c9a <HAL_TIM_PWM_Start+0xfe>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d104      	bne.n	8007c72 <HAL_TIM_PWM_Start+0xd6>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c70:	e013      	b.n	8007c9a <HAL_TIM_PWM_Start+0xfe>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b0c      	cmp	r3, #12
 8007c76:	d104      	bne.n	8007c82 <HAL_TIM_PWM_Start+0xe6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c80:	e00b      	b.n	8007c9a <HAL_TIM_PWM_Start+0xfe>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Start+0xf6>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c90:	e003      	b.n	8007c9a <HAL_TIM_PWM_Start+0xfe>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 faae 	bl	8009204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a33      	ldr	r2, [pc, #204]	@ (8007d7c <HAL_TIM_PWM_Start+0x1e0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_TIM_PWM_Start+0x13e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a32      	ldr	r2, [pc, #200]	@ (8007d80 <HAL_TIM_PWM_Start+0x1e4>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_TIM_PWM_Start+0x13e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a30      	ldr	r2, [pc, #192]	@ (8007d84 <HAL_TIM_PWM_Start+0x1e8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIM_PWM_Start+0x13e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2f      	ldr	r2, [pc, #188]	@ (8007d88 <HAL_TIM_PWM_Start+0x1ec>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIM_PWM_Start+0x13e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8007d8c <HAL_TIM_PWM_Start+0x1f0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d101      	bne.n	8007cde <HAL_TIM_PWM_Start+0x142>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <HAL_TIM_PWM_Start+0x144>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a20      	ldr	r2, [pc, #128]	@ (8007d7c <HAL_TIM_PWM_Start+0x1e0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d018      	beq.n	8007d30 <HAL_TIM_PWM_Start+0x194>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d013      	beq.n	8007d30 <HAL_TIM_PWM_Start+0x194>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a20      	ldr	r2, [pc, #128]	@ (8007d90 <HAL_TIM_PWM_Start+0x1f4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00e      	beq.n	8007d30 <HAL_TIM_PWM_Start+0x194>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1f      	ldr	r2, [pc, #124]	@ (8007d94 <HAL_TIM_PWM_Start+0x1f8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d009      	beq.n	8007d30 <HAL_TIM_PWM_Start+0x194>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a17      	ldr	r2, [pc, #92]	@ (8007d80 <HAL_TIM_PWM_Start+0x1e4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d004      	beq.n	8007d30 <HAL_TIM_PWM_Start+0x194>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a16      	ldr	r2, [pc, #88]	@ (8007d84 <HAL_TIM_PWM_Start+0x1e8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d115      	bne.n	8007d5c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b18      	ldr	r3, [pc, #96]	@ (8007d98 <HAL_TIM_PWM_Start+0x1fc>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d015      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x1d2>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d011      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5a:	e008      	b.n	8007d6e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e000      	b.n	8007d70 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	40013400 	.word	0x40013400
 8007d84:	40014000 	.word	0x40014000
 8007d88:	40014400 	.word	0x40014400
 8007d8c:	40014800 	.word	0x40014800
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	00010007 	.word	0x00010007

08007d9c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_TIM_PWM_Start_IT+0x28>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e03c      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0xa2>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d109      	bne.n	8007dde <HAL_TIM_PWM_Start_IT+0x42>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	bf14      	ite	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	e02f      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0xa2>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d109      	bne.n	8007df8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e022      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0xa2>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d109      	bne.n	8007e12 <HAL_TIM_PWM_Start_IT+0x76>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e015      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d109      	bne.n	8007e2c <HAL_TIM_PWM_Start_IT+0x90>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e008      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e0e2      	b.n	800800c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start_IT+0xba>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e54:	e023      	b.n	8007e9e <HAL_TIM_PWM_Start_IT+0x102>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start_IT+0xca>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e64:	e01b      	b.n	8007e9e <HAL_TIM_PWM_Start_IT+0x102>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_PWM_Start_IT+0xda>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e74:	e013      	b.n	8007e9e <HAL_TIM_PWM_Start_IT+0x102>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b0c      	cmp	r3, #12
 8007e7a:	d104      	bne.n	8007e86 <HAL_TIM_PWM_Start_IT+0xea>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e84:	e00b      	b.n	8007e9e <HAL_TIM_PWM_Start_IT+0x102>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d104      	bne.n	8007e96 <HAL_TIM_PWM_Start_IT+0xfa>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e94:	e003      	b.n	8007e9e <HAL_TIM_PWM_Start_IT+0x102>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	d841      	bhi.n	8007f28 <HAL_TIM_PWM_Start_IT+0x18c>
 8007ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <HAL_TIM_PWM_Start_IT+0x110>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007f29 	.word	0x08007f29
 8007eb4:	08007f29 	.word	0x08007f29
 8007eb8:	08007f29 	.word	0x08007f29
 8007ebc:	08007ef3 	.word	0x08007ef3
 8007ec0:	08007f29 	.word	0x08007f29
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08007f29 	.word	0x08007f29
 8007ecc:	08007f05 	.word	0x08007f05
 8007ed0:	08007f29 	.word	0x08007f29
 8007ed4:	08007f29 	.word	0x08007f29
 8007ed8:	08007f29 	.word	0x08007f29
 8007edc:	08007f17 	.word	0x08007f17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0202 	orr.w	r2, r2, #2
 8007eee:	60da      	str	r2, [r3, #12]
      break;
 8007ef0:	e01d      	b.n	8007f2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0204 	orr.w	r2, r2, #4
 8007f00:	60da      	str	r2, [r3, #12]
      break;
 8007f02:	e014      	b.n	8007f2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0208 	orr.w	r2, r2, #8
 8007f12:	60da      	str	r2, [r3, #12]
      break;
 8007f14:	e00b      	b.n	8007f2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0210 	orr.w	r2, r2, #16
 8007f24:	60da      	str	r2, [r3, #12]
      break;
 8007f26:	e002      	b.n	8007f2e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d16a      	bne.n	800800a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 f961 	bl	8009204 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a33      	ldr	r2, [pc, #204]	@ (8008014 <HAL_TIM_PWM_Start_IT+0x278>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d013      	beq.n	8007f74 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a31      	ldr	r2, [pc, #196]	@ (8008018 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00e      	beq.n	8007f74 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a30      	ldr	r2, [pc, #192]	@ (800801c <HAL_TIM_PWM_Start_IT+0x280>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d009      	beq.n	8007f74 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2e      	ldr	r2, [pc, #184]	@ (8008020 <HAL_TIM_PWM_Start_IT+0x284>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d004      	beq.n	8007f74 <HAL_TIM_PWM_Start_IT+0x1d8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008024 <HAL_TIM_PWM_Start_IT+0x288>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d101      	bne.n	8007f78 <HAL_TIM_PWM_Start_IT+0x1dc>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <HAL_TIM_PWM_Start_IT+0x1de>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a20      	ldr	r2, [pc, #128]	@ (8008014 <HAL_TIM_PWM_Start_IT+0x278>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d018      	beq.n	8007fca <HAL_TIM_PWM_Start_IT+0x22e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa0:	d013      	beq.n	8007fca <HAL_TIM_PWM_Start_IT+0x22e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a20      	ldr	r2, [pc, #128]	@ (8008028 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00e      	beq.n	8007fca <HAL_TIM_PWM_Start_IT+0x22e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800802c <HAL_TIM_PWM_Start_IT+0x290>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_TIM_PWM_Start_IT+0x22e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a17      	ldr	r2, [pc, #92]	@ (8008018 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <HAL_TIM_PWM_Start_IT+0x22e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	@ (800801c <HAL_TIM_PWM_Start_IT+0x280>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d115      	bne.n	8007ff6 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	4b17      	ldr	r3, [pc, #92]	@ (8008030 <HAL_TIM_PWM_Start_IT+0x294>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b06      	cmp	r3, #6
 8007fda:	d015      	beq.n	8008008 <HAL_TIM_PWM_Start_IT+0x26c>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe2:	d011      	beq.n	8008008 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	e008      	b.n	8008008 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0201 	orr.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e000      	b.n	800800a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008008:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800800a:	7bfb      	ldrb	r3, [r7, #15]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40013400 	.word	0x40013400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	40000400 	.word	0x40000400
 800802c:	40000800 	.word	0x40000800
 8008030:	00010007 	.word	0x00010007

08008034 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e097      	b.n	8008178 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fd fa0f 	bl	8005480 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008078:	f023 0307 	bic.w	r3, r3, #7
 800807c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3304      	adds	r3, #4
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f000 fc8d 	bl	80089a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	4313      	orrs	r3, r2
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80080d4:	f023 030c 	bic.w	r3, r3, #12
 80080d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	4313      	orrs	r3, r2
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	011a      	lsls	r2, r3, #4
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	031b      	lsls	r3, r3, #12
 8008104:	4313      	orrs	r3, r2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008112:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800811a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4313      	orrs	r3, r2
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008190:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008198:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d110      	bne.n	80081d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d102      	bne.n	80081bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80081b6:	7b7b      	ldrb	r3, [r7, #13]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d001      	beq.n	80081c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e069      	b.n	8008294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d0:	e031      	b.n	8008236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d110      	bne.n	80081fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d102      	bne.n	80081e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081de:	7b3b      	ldrb	r3, [r7, #12]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d001      	beq.n	80081e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e055      	b.n	8008294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081f8:	e01d      	b.n	8008236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d108      	bne.n	8008212 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d105      	bne.n	8008212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008206:	7b7b      	ldrb	r3, [r7, #13]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d102      	bne.n	8008212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800820c:	7b3b      	ldrb	r3, [r7, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d001      	beq.n	8008216 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e03e      	b.n	8008294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_TIM_Encoder_Start+0xc4>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d008      	beq.n	8008254 <HAL_TIM_Encoder_Start+0xd4>
 8008242:	e00f      	b.n	8008264 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2201      	movs	r2, #1
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f000 ffd9 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008252:	e016      	b.n	8008282 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2201      	movs	r2, #1
 800825a:	2104      	movs	r1, #4
 800825c:	4618      	mov	r0, r3
 800825e:	f000 ffd1 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008262:	e00e      	b.n	8008282 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2201      	movs	r2, #1
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f000 ffc9 	bl	8009204 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	2104      	movs	r1, #4
 800827a:	4618      	mov	r0, r3
 800827c:	f000 ffc2 	bl	8009204 <TIM_CCxChannelCmd>
      break;
 8008280:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0201 	orr.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d020      	beq.n	8008300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01b      	beq.n	8008300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0202 	mvn.w	r2, #2
 80082d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fb40 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb32 	bl	8008958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb43 	bl	8008980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d020      	beq.n	800834c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01b      	beq.n	800834c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0204 	mvn.w	r2, #4
 800831c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2202      	movs	r2, #2
 8008322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fb1a 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8008338:	e005      	b.n	8008346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb0c 	bl	8008958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb1d 	bl	8008980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d020      	beq.n	8008398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01b      	beq.n	8008398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0208 	mvn.w	r2, #8
 8008368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2204      	movs	r2, #4
 800836e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 faf4 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fae6 	bl	8008958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 faf7 	bl	8008980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 0310 	and.w	r3, r3, #16
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d020      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01b      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f06f 0210 	mvn.w	r2, #16
 80083b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2208      	movs	r2, #8
 80083ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 face 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 80083d0:	e005      	b.n	80083de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fac0 	bl	8008958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fad1 	bl	8008980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0201 	mvn.w	r2, #1
 8008400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7f9 fe52 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800842e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 f825 	bl	8009480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f81d 	bl	8009494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00c      	beq.n	800847e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fa8b 	bl	8008994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f06f 0220 	mvn.w	r2, #32
 800849a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 ffe5 	bl	800946c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80084be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fff1 	bl	80094a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00c      	beq.n	80084ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80084e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 ffe9 	bl	80094bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ffe1 	bl	80094d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800852a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 ffd9 	bl	80094e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008556:	2302      	movs	r3, #2
 8008558:	e0ff      	b.n	800875a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b14      	cmp	r3, #20
 8008566:	f200 80f0 	bhi.w	800874a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800856a:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	080085c5 	.word	0x080085c5
 8008574:	0800874b 	.word	0x0800874b
 8008578:	0800874b 	.word	0x0800874b
 800857c:	0800874b 	.word	0x0800874b
 8008580:	08008605 	.word	0x08008605
 8008584:	0800874b 	.word	0x0800874b
 8008588:	0800874b 	.word	0x0800874b
 800858c:	0800874b 	.word	0x0800874b
 8008590:	08008647 	.word	0x08008647
 8008594:	0800874b 	.word	0x0800874b
 8008598:	0800874b 	.word	0x0800874b
 800859c:	0800874b 	.word	0x0800874b
 80085a0:	08008687 	.word	0x08008687
 80085a4:	0800874b 	.word	0x0800874b
 80085a8:	0800874b 	.word	0x0800874b
 80085ac:	0800874b 	.word	0x0800874b
 80085b0:	080086c9 	.word	0x080086c9
 80085b4:	0800874b 	.word	0x0800874b
 80085b8:	0800874b 	.word	0x0800874b
 80085bc:	0800874b 	.word	0x0800874b
 80085c0:	08008709 	.word	0x08008709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fa88 	bl	8008ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0208 	orr.w	r2, r2, #8
 80085de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0204 	bic.w	r2, r2, #4
 80085ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6999      	ldr	r1, [r3, #24]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	619a      	str	r2, [r3, #24]
      break;
 8008602:	e0a5      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 faf8 	bl	8008c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800861e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800862e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6999      	ldr	r1, [r3, #24]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	021a      	lsls	r2, r3, #8
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	619a      	str	r2, [r3, #24]
      break;
 8008644:	e084      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fb61 	bl	8008d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0208 	orr.w	r2, r2, #8
 8008660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0204 	bic.w	r2, r2, #4
 8008670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69d9      	ldr	r1, [r3, #28]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	61da      	str	r2, [r3, #28]
      break;
 8008684:	e064      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fbc9 	bl	8008e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69da      	ldr	r2, [r3, #28]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	69d9      	ldr	r1, [r3, #28]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	021a      	lsls	r2, r3, #8
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	61da      	str	r2, [r3, #28]
      break;
 80086c6:	e043      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fc32 	bl	8008f38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0208 	orr.w	r2, r2, #8
 80086e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0204 	bic.w	r2, r2, #4
 80086f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008706:	e023      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fc76 	bl	8009000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008722:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008732:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	021a      	lsls	r2, r3, #8
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008748:	e002      	b.n	8008750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	75fb      	strb	r3, [r7, #23]
      break;
 800874e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop

08008764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIM_ConfigClockSource+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e0de      	b.n	800893e <HAL_TIM_ConfigClockSource+0x1da>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800879e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a63      	ldr	r2, [pc, #396]	@ (8008948 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	f000 80a9 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 80087c0:	4a61      	ldr	r2, [pc, #388]	@ (8008948 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	f200 80ae 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 80087c8:	4a60      	ldr	r2, [pc, #384]	@ (800894c <HAL_TIM_ConfigClockSource+0x1e8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f000 80a1 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 80087d0:	4a5e      	ldr	r2, [pc, #376]	@ (800894c <HAL_TIM_ConfigClockSource+0x1e8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	f200 80a6 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008950 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f000 8099 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 80087e0:	4a5b      	ldr	r2, [pc, #364]	@ (8008950 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	f200 809e 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e8:	4a5a      	ldr	r2, [pc, #360]	@ (8008954 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f000 8091 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 80087f0:	4a58      	ldr	r2, [pc, #352]	@ (8008954 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f200 8096 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087fc:	f000 8089 	beq.w	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 8008800:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008804:	f200 808e 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800880c:	d03e      	beq.n	800888c <HAL_TIM_ConfigClockSource+0x128>
 800880e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008812:	f200 8087 	bhi.w	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881a:	f000 8086 	beq.w	800892a <HAL_TIM_ConfigClockSource+0x1c6>
 800881e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008822:	d87f      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008824:	2b70      	cmp	r3, #112	@ 0x70
 8008826:	d01a      	beq.n	800885e <HAL_TIM_ConfigClockSource+0xfa>
 8008828:	2b70      	cmp	r3, #112	@ 0x70
 800882a:	d87b      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 800882c:	2b60      	cmp	r3, #96	@ 0x60
 800882e:	d050      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x16e>
 8008830:	2b60      	cmp	r3, #96	@ 0x60
 8008832:	d877      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008834:	2b50      	cmp	r3, #80	@ 0x50
 8008836:	d03c      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x14e>
 8008838:	2b50      	cmp	r3, #80	@ 0x50
 800883a:	d873      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 800883c:	2b40      	cmp	r3, #64	@ 0x40
 800883e:	d058      	beq.n	80088f2 <HAL_TIM_ConfigClockSource+0x18e>
 8008840:	2b40      	cmp	r3, #64	@ 0x40
 8008842:	d86f      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008844:	2b30      	cmp	r3, #48	@ 0x30
 8008846:	d064      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 8008848:	2b30      	cmp	r3, #48	@ 0x30
 800884a:	d86b      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 800884c:	2b20      	cmp	r3, #32
 800884e:	d060      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 8008850:	2b20      	cmp	r3, #32
 8008852:	d867      	bhi.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d05c      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 8008858:	2b10      	cmp	r3, #16
 800885a:	d05a      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0x1ae>
 800885c:	e062      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800886e:	f000 fca9 	bl	80091c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	609a      	str	r2, [r3, #8]
      break;
 800888a:	e04f      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800889c:	f000 fc92 	bl	80091c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088ae:	609a      	str	r2, [r3, #8]
      break;
 80088b0:	e03c      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088be:	461a      	mov	r2, r3
 80088c0:	f000 fc04 	bl	80090cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2150      	movs	r1, #80	@ 0x50
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fc5d 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 80088d0:	e02c      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088de:	461a      	mov	r2, r3
 80088e0:	f000 fc23 	bl	800912a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2160      	movs	r1, #96	@ 0x60
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fc4d 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 80088f0:	e01c      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088fe:	461a      	mov	r2, r3
 8008900:	f000 fbe4 	bl	80090cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2140      	movs	r1, #64	@ 0x40
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fc3d 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 8008910:	e00c      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f000 fc34 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 8008922:	e003      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
      break;
 8008928:	e000      	b.n	800892c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800892a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	00100070 	.word	0x00100070
 800894c:	00100040 	.word	0x00100040
 8008950:	00100030 	.word	0x00100030
 8008954:	00100020 	.word	0x00100020

08008958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a42      	ldr	r2, [pc, #264]	@ (8008ac4 <TIM_Base_SetConfig+0x11c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00f      	beq.n	80089e0 <TIM_Base_SetConfig+0x38>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c6:	d00b      	beq.n	80089e0 <TIM_Base_SetConfig+0x38>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a3f      	ldr	r2, [pc, #252]	@ (8008ac8 <TIM_Base_SetConfig+0x120>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d007      	beq.n	80089e0 <TIM_Base_SetConfig+0x38>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a3e      	ldr	r2, [pc, #248]	@ (8008acc <TIM_Base_SetConfig+0x124>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_Base_SetConfig+0x38>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a3d      	ldr	r2, [pc, #244]	@ (8008ad0 <TIM_Base_SetConfig+0x128>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d108      	bne.n	80089f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a33      	ldr	r2, [pc, #204]	@ (8008ac4 <TIM_Base_SetConfig+0x11c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d01b      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a00:	d017      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a30      	ldr	r2, [pc, #192]	@ (8008ac8 <TIM_Base_SetConfig+0x120>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8008acc <TIM_Base_SetConfig+0x124>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00f      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a2e      	ldr	r2, [pc, #184]	@ (8008ad0 <TIM_Base_SetConfig+0x128>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00b      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ad4 <TIM_Base_SetConfig+0x12c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad8 <TIM_Base_SetConfig+0x130>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d003      	beq.n	8008a32 <TIM_Base_SetConfig+0x8a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8008adc <TIM_Base_SetConfig+0x134>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d108      	bne.n	8008a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a16      	ldr	r2, [pc, #88]	@ (8008ac4 <TIM_Base_SetConfig+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00f      	beq.n	8008a90 <TIM_Base_SetConfig+0xe8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a17      	ldr	r2, [pc, #92]	@ (8008ad0 <TIM_Base_SetConfig+0x128>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00b      	beq.n	8008a90 <TIM_Base_SetConfig+0xe8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a16      	ldr	r2, [pc, #88]	@ (8008ad4 <TIM_Base_SetConfig+0x12c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <TIM_Base_SetConfig+0xe8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a15      	ldr	r2, [pc, #84]	@ (8008ad8 <TIM_Base_SetConfig+0x130>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_Base_SetConfig+0xe8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a14      	ldr	r2, [pc, #80]	@ (8008adc <TIM_Base_SetConfig+0x134>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d103      	bne.n	8008a98 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d105      	bne.n	8008ab6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f023 0201 	bic.w	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	611a      	str	r2, [r3, #16]
  }
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40012c00 	.word	0x40012c00
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	40013400 	.word	0x40013400
 8008ad4:	40014000 	.word	0x40014000
 8008ad8:	40014400 	.word	0x40014400
 8008adc:	40014800 	.word	0x40014800

08008ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	f023 0201 	bic.w	r2, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f023 0302 	bic.w	r3, r3, #2
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bec <TIM_OC1_SetConfig+0x10c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00f      	beq.n	8008b60 <TIM_OC1_SetConfig+0x80>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a2b      	ldr	r2, [pc, #172]	@ (8008bf0 <TIM_OC1_SetConfig+0x110>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00b      	beq.n	8008b60 <TIM_OC1_SetConfig+0x80>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf4 <TIM_OC1_SetConfig+0x114>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d007      	beq.n	8008b60 <TIM_OC1_SetConfig+0x80>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a29      	ldr	r2, [pc, #164]	@ (8008bf8 <TIM_OC1_SetConfig+0x118>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <TIM_OC1_SetConfig+0x80>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a28      	ldr	r2, [pc, #160]	@ (8008bfc <TIM_OC1_SetConfig+0x11c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10c      	bne.n	8008b7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f023 0308 	bic.w	r3, r3, #8
 8008b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f023 0304 	bic.w	r3, r3, #4
 8008b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bec <TIM_OC1_SetConfig+0x10c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00f      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xc2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf0 <TIM_OC1_SetConfig+0x110>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00b      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xc2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a19      	ldr	r2, [pc, #100]	@ (8008bf4 <TIM_OC1_SetConfig+0x114>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d007      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xc2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a18      	ldr	r2, [pc, #96]	@ (8008bf8 <TIM_OC1_SetConfig+0x118>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d003      	beq.n	8008ba2 <TIM_OC1_SetConfig+0xc2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	@ (8008bfc <TIM_OC1_SetConfig+0x11c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d111      	bne.n	8008bc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40013400 	.word	0x40013400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800

08008c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	f023 0210 	bic.w	r2, r3, #16
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f023 0320 	bic.w	r3, r3, #32
 8008c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a28      	ldr	r2, [pc, #160]	@ (8008d00 <TIM_OC2_SetConfig+0x100>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC2_SetConfig+0x6c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <TIM_OC2_SetConfig+0x104>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d10d      	bne.n	8008c88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <TIM_OC2_SetConfig+0x100>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d00f      	beq.n	8008cb0 <TIM_OC2_SetConfig+0xb0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1c      	ldr	r2, [pc, #112]	@ (8008d04 <TIM_OC2_SetConfig+0x104>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00b      	beq.n	8008cb0 <TIM_OC2_SetConfig+0xb0>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008d08 <TIM_OC2_SetConfig+0x108>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <TIM_OC2_SetConfig+0xb0>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d0c <TIM_OC2_SetConfig+0x10c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC2_SetConfig+0xb0>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a19      	ldr	r2, [pc, #100]	@ (8008d10 <TIM_OC2_SetConfig+0x110>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d113      	bne.n	8008cd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40012c00 	.word	0x40012c00
 8008d04:	40013400 	.word	0x40013400
 8008d08:	40014000 	.word	0x40014000
 8008d0c:	40014400 	.word	0x40014400
 8008d10:	40014800 	.word	0x40014800

08008d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a27      	ldr	r2, [pc, #156]	@ (8008e10 <TIM_OC3_SetConfig+0xfc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d003      	beq.n	8008d7e <TIM_OC3_SetConfig+0x6a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a26      	ldr	r2, [pc, #152]	@ (8008e14 <TIM_OC3_SetConfig+0x100>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d10d      	bne.n	8008d9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e10 <TIM_OC3_SetConfig+0xfc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00f      	beq.n	8008dc2 <TIM_OC3_SetConfig+0xae>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e14 <TIM_OC3_SetConfig+0x100>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <TIM_OC3_SetConfig+0xae>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a1a      	ldr	r2, [pc, #104]	@ (8008e18 <TIM_OC3_SetConfig+0x104>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <TIM_OC3_SetConfig+0xae>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a19      	ldr	r2, [pc, #100]	@ (8008e1c <TIM_OC3_SetConfig+0x108>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_OC3_SetConfig+0xae>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a18      	ldr	r2, [pc, #96]	@ (8008e20 <TIM_OC3_SetConfig+0x10c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d113      	bne.n	8008dea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	621a      	str	r2, [r3, #32]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40013400 	.word	0x40013400
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	40014400 	.word	0x40014400
 8008e20:	40014800 	.word	0x40014800

08008e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	031b      	lsls	r3, r3, #12
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a28      	ldr	r2, [pc, #160]	@ (8008f24 <TIM_OC4_SetConfig+0x100>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d003      	beq.n	8008e90 <TIM_OC4_SetConfig+0x6c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a27      	ldr	r2, [pc, #156]	@ (8008f28 <TIM_OC4_SetConfig+0x104>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d10d      	bne.n	8008eac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	031b      	lsls	r3, r3, #12
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a1d      	ldr	r2, [pc, #116]	@ (8008f24 <TIM_OC4_SetConfig+0x100>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00f      	beq.n	8008ed4 <TIM_OC4_SetConfig+0xb0>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <TIM_OC4_SetConfig+0x104>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <TIM_OC4_SetConfig+0xb0>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8008f2c <TIM_OC4_SetConfig+0x108>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d007      	beq.n	8008ed4 <TIM_OC4_SetConfig+0xb0>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f30 <TIM_OC4_SetConfig+0x10c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC4_SetConfig+0xb0>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a19      	ldr	r2, [pc, #100]	@ (8008f34 <TIM_OC4_SetConfig+0x110>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d113      	bne.n	8008efc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eda:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ee2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	019b      	lsls	r3, r3, #6
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	019b      	lsls	r3, r3, #6
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	621a      	str	r2, [r3, #32]
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40012c00 	.word	0x40012c00
 8008f28:	40013400 	.word	0x40013400
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800

08008f38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	041b      	lsls	r3, r3, #16
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a17      	ldr	r2, [pc, #92]	@ (8008fec <TIM_OC5_SetConfig+0xb4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00f      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x7a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a16      	ldr	r2, [pc, #88]	@ (8008ff0 <TIM_OC5_SetConfig+0xb8>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00b      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x7a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ff4 <TIM_OC5_SetConfig+0xbc>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d007      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x7a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a14      	ldr	r2, [pc, #80]	@ (8008ff8 <TIM_OC5_SetConfig+0xc0>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d003      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x7a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a13      	ldr	r2, [pc, #76]	@ (8008ffc <TIM_OC5_SetConfig+0xc4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d109      	bne.n	8008fc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	621a      	str	r2, [r3, #32]
}
 8008fe0:	bf00      	nop
 8008fe2:	371c      	adds	r7, #28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	40013400 	.word	0x40013400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400
 8008ffc:	40014800 	.word	0x40014800

08009000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800902e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	051b      	lsls	r3, r3, #20
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a18      	ldr	r2, [pc, #96]	@ (80090b8 <TIM_OC6_SetConfig+0xb8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00f      	beq.n	800907c <TIM_OC6_SetConfig+0x7c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a17      	ldr	r2, [pc, #92]	@ (80090bc <TIM_OC6_SetConfig+0xbc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00b      	beq.n	800907c <TIM_OC6_SetConfig+0x7c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a16      	ldr	r2, [pc, #88]	@ (80090c0 <TIM_OC6_SetConfig+0xc0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_OC6_SetConfig+0x7c>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a15      	ldr	r2, [pc, #84]	@ (80090c4 <TIM_OC6_SetConfig+0xc4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC6_SetConfig+0x7c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a14      	ldr	r2, [pc, #80]	@ (80090c8 <TIM_OC6_SetConfig+0xc8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d109      	bne.n	8009090 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009082:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	029b      	lsls	r3, r3, #10
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40012c00 	.word	0x40012c00
 80090bc:	40013400 	.word	0x40013400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800

080090cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0201 	bic.w	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f023 030a 	bic.w	r3, r3, #10
 8009108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	621a      	str	r2, [r3, #32]
}
 800911e:	bf00      	nop
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	f023 0210 	bic.w	r2, r3, #16
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	031b      	lsls	r3, r3, #12
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80091a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f043 0307 	orr.w	r3, r3, #7
 80091b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	609a      	str	r2, [r3, #8]
}
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	021a      	lsls	r2, r3, #8
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	609a      	str	r2, [r3, #8]
}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	2201      	movs	r2, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a1a      	ldr	r2, [r3, #32]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	43db      	mvns	r3, r3
 8009226:	401a      	ands	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1a      	ldr	r2, [r3, #32]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	431a      	orrs	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009264:	2302      	movs	r3, #2
 8009266:	e065      	b.n	8009334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a2c      	ldr	r2, [pc, #176]	@ (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a2b      	ldr	r2, [pc, #172]	@ (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80092b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d018      	beq.n	8009308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092de:	d013      	beq.n	8009308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a18      	ldr	r2, [pc, #96]	@ (8009348 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00e      	beq.n	8009308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a17      	ldr	r2, [pc, #92]	@ (800934c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d009      	beq.n	8009308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a12      	ldr	r2, [pc, #72]	@ (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a13      	ldr	r2, [pc, #76]	@ (8009350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d10c      	bne.n	8009322 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800930e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4313      	orrs	r3, r2
 8009318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40013400 	.word	0x40013400
 8009348:	40000400 	.word	0x40000400
 800934c:	40000800 	.word	0x40000800
 8009350:	40014000 	.word	0x40014000

08009354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800936c:	2302      	movs	r3, #2
 800936e:	e073      	b.n	8009458 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a19      	ldr	r2, [pc, #100]	@ (8009464 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d004      	beq.n	800940c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a18      	ldr	r2, [pc, #96]	@ (8009468 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d11c      	bne.n	8009446 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	051b      	lsls	r3, r3, #20
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009434:	4313      	orrs	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	4313      	orrs	r3, r2
 8009444:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40013400 	.word	0x40013400

0800946c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e042      	b.n	8009590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fc f891 	bl	8005644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2224      	movs	r2, #36	@ 0x24
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0201 	bic.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 ff40 	bl	800a3c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc71 	bl	8009e30 <UART_SetConfig>
 800954e:	4603      	mov	r3, r0
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e01b      	b.n	8009590 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 ffbf 	bl	800a50c <UART_CheckIdleState>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	@ 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	d167      	bne.n	8009680 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_UART_Transmit_DMA+0x24>
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e060      	b.n	8009682 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	88fa      	ldrh	r2, [r7, #6]
 80095d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2221      	movs	r2, #33	@ 0x21
 80095e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d028      	beq.n	8009640 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095f2:	4a26      	ldr	r2, [pc, #152]	@ (800968c <HAL_UART_Transmit_DMA+0xf4>)
 80095f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095fa:	4a25      	ldr	r2, [pc, #148]	@ (8009690 <HAL_UART_Transmit_DMA+0xf8>)
 80095fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009602:	4a24      	ldr	r2, [pc, #144]	@ (8009694 <HAL_UART_Transmit_DMA+0xfc>)
 8009604:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800960a:	2200      	movs	r2, #0
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009616:	4619      	mov	r1, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3328      	adds	r3, #40	@ 0x28
 800961e:	461a      	mov	r2, r3
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	f7fc fc1b 	bl	8005e5c <HAL_DMA_Start_IT>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d009      	beq.n	8009640 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2210      	movs	r2, #16
 8009630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e020      	b.n	8009682 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2240      	movs	r2, #64	@ 0x40
 8009646:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	613b      	str	r3, [r7, #16]
   return(result);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009668:	623a      	str	r2, [r7, #32]
 800966a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	69f9      	ldr	r1, [r7, #28]
 800966e:	6a3a      	ldr	r2, [r7, #32]
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	61bb      	str	r3, [r7, #24]
   return(result);
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e5      	bne.n	8009648 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e000      	b.n	8009682 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3728      	adds	r7, #40	@ 0x28
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	0800a9d7 	.word	0x0800a9d7
 8009690:	0800aa71 	.word	0x0800aa71
 8009694:	0800abf7 	.word	0x0800abf7

08009698 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	@ 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d137      	bne.n	8009720 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <HAL_UART_Receive_DMA+0x24>
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e030      	b.n	8009722 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a18      	ldr	r2, [pc, #96]	@ (800972c <HAL_UART_Receive_DMA+0x94>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d01f      	beq.n	8009710 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d018      	beq.n	8009710 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	613b      	str	r3, [r7, #16]
   return(result);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	623b      	str	r3, [r7, #32]
 80096fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	69f9      	ldr	r1, [r7, #28]
 8009702:	6a3a      	ldr	r2, [r7, #32]
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	61bb      	str	r3, [r7, #24]
   return(result);
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e6      	bne.n	80096de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009710:	88fb      	ldrh	r3, [r7, #6]
 8009712:	461a      	mov	r2, r3
 8009714:	68b9      	ldr	r1, [r7, #8]
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 f810 	bl	800a73c <UART_Start_Receive_DMA>
 800971c:	4603      	mov	r3, r0
 800971e:	e000      	b.n	8009722 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009720:	2302      	movs	r3, #2
  }
}
 8009722:	4618      	mov	r0, r3
 8009724:	3728      	adds	r7, #40	@ 0x28
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40008000 	.word	0x40008000

08009730 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b0ba      	sub	sp, #232	@ 0xe8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009756:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800975a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800975e:	4013      	ands	r3, r2
 8009760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d11b      	bne.n	80097a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800976c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009770:	f003 0320 	and.w	r3, r3, #32
 8009774:	2b00      	cmp	r3, #0
 8009776:	d015      	beq.n	80097a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 8300 	beq.w	8009d9a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
      }
      return;
 80097a2:	e2fa      	b.n	8009d9a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 8123 	beq.w	80099f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097b2:	4b8d      	ldr	r3, [pc, #564]	@ (80099e8 <HAL_UART_IRQHandler+0x2b8>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80097be:	4b8b      	ldr	r3, [pc, #556]	@ (80099ec <HAL_UART_IRQHandler+0x2bc>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8116 	beq.w	80099f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d011      	beq.n	80097f8 <HAL_UART_IRQHandler+0xc8>
 80097d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2201      	movs	r2, #1
 80097e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ee:	f043 0201 	orr.w	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d011      	beq.n	8009828 <HAL_UART_IRQHandler+0xf8>
 8009804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2202      	movs	r2, #2
 8009816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981e:	f043 0204 	orr.w	r2, r3, #4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d011      	beq.n	8009858 <HAL_UART_IRQHandler+0x128>
 8009834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2204      	movs	r2, #4
 8009846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984e:	f043 0202 	orr.w	r2, r3, #2
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d017      	beq.n	8009894 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009870:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009874:	4b5c      	ldr	r3, [pc, #368]	@ (80099e8 <HAL_UART_IRQHandler+0x2b8>)
 8009876:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2208      	movs	r2, #8
 8009882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800988a:	f043 0208 	orr.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800989c:	2b00      	cmp	r3, #0
 800989e:	d012      	beq.n	80098c6 <HAL_UART_IRQHandler+0x196>
 80098a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098bc:	f043 0220 	orr.w	r2, r3, #32
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8266 	beq.w	8009d9e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d013      	beq.n	8009906 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991a:	2b40      	cmp	r3, #64	@ 0x40
 800991c:	d005      	beq.n	800992a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800991e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009922:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009926:	2b00      	cmp	r3, #0
 8009928:	d054      	beq.n	80099d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 ffed 	bl	800a90a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993a:	2b40      	cmp	r3, #64	@ 0x40
 800993c:	d146      	bne.n	80099cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009954:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800995c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3308      	adds	r3, #8
 8009966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800996a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800996e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1d9      	bne.n	800993e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009990:	2b00      	cmp	r3, #0
 8009992:	d017      	beq.n	80099c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999a:	4a15      	ldr	r2, [pc, #84]	@ (80099f0 <HAL_UART_IRQHandler+0x2c0>)
 800999c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fc fb2d 	bl	8006004 <HAL_DMA_Abort_IT>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d019      	beq.n	80099e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80099be:	4610      	mov	r0, r2
 80099c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c2:	e00f      	b.n	80099e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa1d 	bl	8009e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ca:	e00b      	b.n	80099e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa19 	bl	8009e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d2:	e007      	b.n	80099e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa15 	bl	8009e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80099e2:	e1dc      	b.n	8009d9e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e4:	bf00      	nop
    return;
 80099e6:	e1da      	b.n	8009d9e <HAL_UART_IRQHandler+0x66e>
 80099e8:	10000001 	.word	0x10000001
 80099ec:	04000120 	.word	0x04000120
 80099f0:	0800ac77 	.word	0x0800ac77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	f040 8170 	bne.w	8009cde <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a02:	f003 0310 	and.w	r3, r3, #16
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 8169 	beq.w	8009cde <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 8162 	beq.w	8009cde <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2210      	movs	r2, #16
 8009a20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2c:	2b40      	cmp	r3, #64	@ 0x40
 8009a2e:	f040 80d8 	bne.w	8009be2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80af 	beq.w	8009ba8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a54:	429a      	cmp	r2, r3
 8009a56:	f080 80a7 	bcs.w	8009ba8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f040 8087 	bne.w	8009b86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1da      	bne.n	8009a78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ae6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009af8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e1      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3308      	adds	r3, #8
 8009b04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e3      	bne.n	8009afe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b54:	f023 0310 	bic.w	r3, r3, #16
 8009b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e4      	bne.n	8009b44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fc f9e6 	bl	8005f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f939 	bl	8009e18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ba6:	e0fc      	b.n	8009da2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	f040 80f5 	bne.w	8009da2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0320 	and.w	r3, r3, #32
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	f040 80eb 	bne.w	8009da2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f91c 	bl	8009e18 <HAL_UARTEx_RxEventCallback>
      return;
 8009be0:	e0df      	b.n	8009da2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 80d1 	beq.w	8009da6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 80cc 	beq.w	8009da6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e4      	bne.n	8009c0e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	623b      	str	r3, [r7, #32]
   return(result);
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c5a:	f023 0301 	bic.w	r3, r3, #1
 8009c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3308      	adds	r3, #8
 8009c68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c74:	e841 2300 	strex	r3, r2, [r1]
 8009c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e1      	bne.n	8009c44 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0310 	bic.w	r3, r3, #16
 8009ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	69b9      	ldr	r1, [r7, #24]
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e4      	bne.n	8009c94 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f89e 	bl	8009e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cdc:	e063      	b.n	8009da6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00e      	beq.n	8009d08 <HAL_UART_IRQHandler+0x5d8>
 8009cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d008      	beq.n	8009d08 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fff5 	bl	800acf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d06:	e051      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d014      	beq.n	8009d3e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d105      	bne.n	8009d2c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d008      	beq.n	8009d3e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d03a      	beq.n	8009daa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
    }
    return;
 8009d3c:	e035      	b.n	8009daa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <HAL_UART_IRQHandler+0x62e>
 8009d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 ff9f 	bl	800ac9a <UART_EndTransmit_IT>
    return;
 8009d5c:	e026      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d009      	beq.n	8009d7e <HAL_UART_IRQHandler+0x64e>
 8009d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 ffce 	bl	800ad18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d7c:	e016      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d010      	beq.n	8009dac <HAL_UART_IRQHandler+0x67c>
 8009d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	da0c      	bge.n	8009dac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 ffb6 	bl	800ad04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d98:	e008      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
      return;
 8009d9a:	bf00      	nop
 8009d9c:	e006      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
    return;
 8009d9e:	bf00      	nop
 8009da0:	e004      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
      return;
 8009da2:	bf00      	nop
 8009da4:	e002      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
      return;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <HAL_UART_IRQHandler+0x67c>
    return;
 8009daa:	bf00      	nop
  }
}
 8009dac:	37e8      	adds	r7, #232	@ 0xe8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop

08009db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e34:	b08c      	sub	sp, #48	@ 0x30
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	69db      	ldr	r3, [r3, #28]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4bab      	ldr	r3, [pc, #684]	@ (800a10c <UART_SetConfig+0x2dc>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	68da      	ldr	r2, [r3, #12]
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4aa0      	ldr	r2, [pc, #640]	@ (800a110 <UART_SetConfig+0x2e0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d004      	beq.n	8009e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009ea6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eba:	f023 010f 	bic.w	r1, r3, #15
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a91      	ldr	r2, [pc, #580]	@ (800a114 <UART_SetConfig+0x2e4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d125      	bne.n	8009f20 <UART_SetConfig+0xf0>
 8009ed4:	4b90      	ldr	r3, [pc, #576]	@ (800a118 <UART_SetConfig+0x2e8>)
 8009ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eda:	f003 0303 	and.w	r3, r3, #3
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d81a      	bhi.n	8009f18 <UART_SetConfig+0xe8>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <UART_SetConfig+0xb8>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009ef9 	.word	0x08009ef9
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f11 	.word	0x08009f11
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009efe:	e0d6      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f00:	2302      	movs	r3, #2
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f06:	e0d2      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f0e:	e0ce      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f16:	e0ca      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f1e:	e0c6      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a7d      	ldr	r2, [pc, #500]	@ (800a11c <UART_SetConfig+0x2ec>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d138      	bne.n	8009f9c <UART_SetConfig+0x16c>
 8009f2a:	4b7b      	ldr	r3, [pc, #492]	@ (800a118 <UART_SetConfig+0x2e8>)
 8009f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f30:	f003 030c 	and.w	r3, r3, #12
 8009f34:	2b0c      	cmp	r3, #12
 8009f36:	d82d      	bhi.n	8009f94 <UART_SetConfig+0x164>
 8009f38:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <UART_SetConfig+0x110>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009f75 	.word	0x08009f75
 8009f44:	08009f95 	.word	0x08009f95
 8009f48:	08009f95 	.word	0x08009f95
 8009f4c:	08009f95 	.word	0x08009f95
 8009f50:	08009f85 	.word	0x08009f85
 8009f54:	08009f95 	.word	0x08009f95
 8009f58:	08009f95 	.word	0x08009f95
 8009f5c:	08009f95 	.word	0x08009f95
 8009f60:	08009f7d 	.word	0x08009f7d
 8009f64:	08009f95 	.word	0x08009f95
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f8d 	.word	0x08009f8d
 8009f74:	2300      	movs	r3, #0
 8009f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7a:	e098      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f82:	e094      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8a:	e090      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f92:	e08c      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9a:	e088      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a5f      	ldr	r2, [pc, #380]	@ (800a120 <UART_SetConfig+0x2f0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d125      	bne.n	8009ff2 <UART_SetConfig+0x1c2>
 8009fa6:	4b5c      	ldr	r3, [pc, #368]	@ (800a118 <UART_SetConfig+0x2e8>)
 8009fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009fb0:	2b30      	cmp	r3, #48	@ 0x30
 8009fb2:	d016      	beq.n	8009fe2 <UART_SetConfig+0x1b2>
 8009fb4:	2b30      	cmp	r3, #48	@ 0x30
 8009fb6:	d818      	bhi.n	8009fea <UART_SetConfig+0x1ba>
 8009fb8:	2b20      	cmp	r3, #32
 8009fba:	d00a      	beq.n	8009fd2 <UART_SetConfig+0x1a2>
 8009fbc:	2b20      	cmp	r3, #32
 8009fbe:	d814      	bhi.n	8009fea <UART_SetConfig+0x1ba>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <UART_SetConfig+0x19a>
 8009fc4:	2b10      	cmp	r3, #16
 8009fc6:	d008      	beq.n	8009fda <UART_SetConfig+0x1aa>
 8009fc8:	e00f      	b.n	8009fea <UART_SetConfig+0x1ba>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd0:	e06d      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd8:	e069      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009fda:	2304      	movs	r3, #4
 8009fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe0:	e065      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009fe2:	2308      	movs	r3, #8
 8009fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe8:	e061      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009fea:	2310      	movs	r3, #16
 8009fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff0:	e05d      	b.n	800a0ae <UART_SetConfig+0x27e>
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a4b      	ldr	r2, [pc, #300]	@ (800a124 <UART_SetConfig+0x2f4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d125      	bne.n	800a048 <UART_SetConfig+0x218>
 8009ffc:	4b46      	ldr	r3, [pc, #280]	@ (800a118 <UART_SetConfig+0x2e8>)
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a006:	2bc0      	cmp	r3, #192	@ 0xc0
 800a008:	d016      	beq.n	800a038 <UART_SetConfig+0x208>
 800a00a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a00c:	d818      	bhi.n	800a040 <UART_SetConfig+0x210>
 800a00e:	2b80      	cmp	r3, #128	@ 0x80
 800a010:	d00a      	beq.n	800a028 <UART_SetConfig+0x1f8>
 800a012:	2b80      	cmp	r3, #128	@ 0x80
 800a014:	d814      	bhi.n	800a040 <UART_SetConfig+0x210>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <UART_SetConfig+0x1f0>
 800a01a:	2b40      	cmp	r3, #64	@ 0x40
 800a01c:	d008      	beq.n	800a030 <UART_SetConfig+0x200>
 800a01e:	e00f      	b.n	800a040 <UART_SetConfig+0x210>
 800a020:	2300      	movs	r3, #0
 800a022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a026:	e042      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a028:	2302      	movs	r3, #2
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02e:	e03e      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a030:	2304      	movs	r3, #4
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a036:	e03a      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a038:	2308      	movs	r3, #8
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e036      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a040:	2310      	movs	r3, #16
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e032      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a30      	ldr	r2, [pc, #192]	@ (800a110 <UART_SetConfig+0x2e0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d12a      	bne.n	800a0a8 <UART_SetConfig+0x278>
 800a052:	4b31      	ldr	r3, [pc, #196]	@ (800a118 <UART_SetConfig+0x2e8>)
 800a054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a05c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a060:	d01a      	beq.n	800a098 <UART_SetConfig+0x268>
 800a062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a066:	d81b      	bhi.n	800a0a0 <UART_SetConfig+0x270>
 800a068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a06c:	d00c      	beq.n	800a088 <UART_SetConfig+0x258>
 800a06e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a072:	d815      	bhi.n	800a0a0 <UART_SetConfig+0x270>
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <UART_SetConfig+0x250>
 800a078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a07c:	d008      	beq.n	800a090 <UART_SetConfig+0x260>
 800a07e:	e00f      	b.n	800a0a0 <UART_SetConfig+0x270>
 800a080:	2300      	movs	r3, #0
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a086:	e012      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a088:	2302      	movs	r3, #2
 800a08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08e:	e00e      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a090:	2304      	movs	r3, #4
 800a092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a096:	e00a      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a098:	2308      	movs	r3, #8
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09e:	e006      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a6:	e002      	b.n	800a0ae <UART_SetConfig+0x27e>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a17      	ldr	r2, [pc, #92]	@ (800a110 <UART_SetConfig+0x2e0>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	f040 80a8 	bne.w	800a20a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d834      	bhi.n	800a12c <UART_SetConfig+0x2fc>
 800a0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <UART_SetConfig+0x298>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a12d 	.word	0x0800a12d
 800a0d0:	0800a0f5 	.word	0x0800a0f5
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a0fb 	.word	0x0800a0fb
 800a0dc:	0800a12d 	.word	0x0800a12d
 800a0e0:	0800a12d 	.word	0x0800a12d
 800a0e4:	0800a12d 	.word	0x0800a12d
 800a0e8:	0800a103 	.word	0x0800a103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ec:	f7fd f9ac 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 800a0f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0f2:	e021      	b.n	800a138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a128 <UART_SetConfig+0x2f8>)
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0f8:	e01e      	b.n	800a138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fa:	f7fd f937 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800a0fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a100:	e01a      	b.n	800a138 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a108:	e016      	b.n	800a138 <UART_SetConfig+0x308>
 800a10a:	bf00      	nop
 800a10c:	cfff69f3 	.word	0xcfff69f3
 800a110:	40008000 	.word	0x40008000
 800a114:	40013800 	.word	0x40013800
 800a118:	40021000 	.word	0x40021000
 800a11c:	40004400 	.word	0x40004400
 800a120:	40004800 	.word	0x40004800
 800a124:	40004c00 	.word	0x40004c00
 800a128:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a136:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 812a 	beq.w	800a394 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a144:	4a9e      	ldr	r2, [pc, #632]	@ (800a3c0 <UART_SetConfig+0x590>)
 800a146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14a:	461a      	mov	r2, r3
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a152:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	429a      	cmp	r2, r3
 800a162:	d305      	bcc.n	800a170 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d903      	bls.n	800a178 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a176:	e10d      	b.n	800a394 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	2200      	movs	r2, #0
 800a17c:	60bb      	str	r3, [r7, #8]
 800a17e:	60fa      	str	r2, [r7, #12]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	4a8e      	ldr	r2, [pc, #568]	@ (800a3c0 <UART_SetConfig+0x590>)
 800a186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	2200      	movs	r2, #0
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	607a      	str	r2, [r7, #4]
 800a192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a19a:	f7f6 fd13 	bl	8000bc4 <__aeabi_uldivmod>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f04f 0200 	mov.w	r2, #0
 800a1aa:	f04f 0300 	mov.w	r3, #0
 800a1ae:	020b      	lsls	r3, r1, #8
 800a1b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1b4:	0202      	lsls	r2, r0, #8
 800a1b6:	6979      	ldr	r1, [r7, #20]
 800a1b8:	6849      	ldr	r1, [r1, #4]
 800a1ba:	0849      	lsrs	r1, r1, #1
 800a1bc:	2000      	movs	r0, #0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	eb12 0804 	adds.w	r8, r2, r4
 800a1c6:	eb43 0905 	adc.w	r9, r3, r5
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	469a      	mov	sl, r3
 800a1d2:	4693      	mov	fp, r2
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	465b      	mov	r3, fp
 800a1d8:	4640      	mov	r0, r8
 800a1da:	4649      	mov	r1, r9
 800a1dc:	f7f6 fcf2 	bl	8000bc4 <__aeabi_uldivmod>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1ee:	d308      	bcc.n	800a202 <UART_SetConfig+0x3d2>
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1f6:	d204      	bcs.n	800a202 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6a3a      	ldr	r2, [r7, #32]
 800a1fe:	60da      	str	r2, [r3, #12]
 800a200:	e0c8      	b.n	800a394 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a208:	e0c4      	b.n	800a394 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a212:	d167      	bne.n	800a2e4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a214:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d828      	bhi.n	800a26e <UART_SetConfig+0x43e>
 800a21c:	a201      	add	r2, pc, #4	@ (adr r2, 800a224 <UART_SetConfig+0x3f4>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	0800a26f 	.word	0x0800a26f
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	0800a26f 	.word	0x0800a26f
 800a23c:	0800a26f 	.word	0x0800a26f
 800a240:	0800a26f 	.word	0x0800a26f
 800a244:	0800a267 	.word	0x0800a267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a248:	f7fd f8fe 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 800a24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a24e:	e014      	b.n	800a27a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a250:	f7fd f910 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 800a254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a256:	e010      	b.n	800a27a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a258:	4b5a      	ldr	r3, [pc, #360]	@ (800a3c4 <UART_SetConfig+0x594>)
 800a25a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a25c:	e00d      	b.n	800a27a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a25e:	f7fd f885 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800a262:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a264:	e009      	b.n	800a27a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a26c:	e005      	b.n	800a27a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 8089 	beq.w	800a394 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a286:	4a4e      	ldr	r2, [pc, #312]	@ (800a3c0 <UART_SetConfig+0x590>)
 800a288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a28c:	461a      	mov	r2, r3
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	fbb3 f3f2 	udiv	r3, r3, r2
 800a294:	005a      	lsls	r2, r3, #1
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	441a      	add	r2, r3
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	2b0f      	cmp	r3, #15
 800a2ac:	d916      	bls.n	800a2dc <UART_SetConfig+0x4ac>
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b4:	d212      	bcs.n	800a2dc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	f023 030f 	bic.w	r3, r3, #15
 800a2be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	8bfb      	ldrh	r3, [r7, #30]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	8bfa      	ldrh	r2, [r7, #30]
 800a2d8:	60da      	str	r2, [r3, #12]
 800a2da:	e05b      	b.n	800a394 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2e2:	e057      	b.n	800a394 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d828      	bhi.n	800a33e <UART_SetConfig+0x50e>
 800a2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <UART_SetConfig+0x4c4>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a329 	.word	0x0800a329
 800a300:	0800a33f 	.word	0x0800a33f
 800a304:	0800a32f 	.word	0x0800a32f
 800a308:	0800a33f 	.word	0x0800a33f
 800a30c:	0800a33f 	.word	0x0800a33f
 800a310:	0800a33f 	.word	0x0800a33f
 800a314:	0800a337 	.word	0x0800a337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a318:	f7fd f896 	bl	8007448 <HAL_RCC_GetPCLK1Freq>
 800a31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31e:	e014      	b.n	800a34a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a320:	f7fd f8a8 	bl	8007474 <HAL_RCC_GetPCLK2Freq>
 800a324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a326:	e010      	b.n	800a34a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a328:	4b26      	ldr	r3, [pc, #152]	@ (800a3c4 <UART_SetConfig+0x594>)
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a32c:	e00d      	b.n	800a34a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a32e:	f7fd f81d 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800a332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a334:	e009      	b.n	800a34a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a33a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a33c:	e005      	b.n	800a34a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a348:	bf00      	nop
    }

    if (pclk != 0U)
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d021      	beq.n	800a394 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a354:	4a1a      	ldr	r2, [pc, #104]	@ (800a3c0 <UART_SetConfig+0x590>)
 800a356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	085b      	lsrs	r3, r3, #1
 800a368:	441a      	add	r2, r3
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d909      	bls.n	800a38e <UART_SetConfig+0x55e>
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a380:	d205      	bcs.n	800a38e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	b29a      	uxth	r2, r3
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60da      	str	r2, [r3, #12]
 800a38c:	e002      	b.n	800a394 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3730      	adds	r7, #48	@ 0x30
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800b648 	.word	0x0800b648
 800a3c4:	00f42400 	.word	0x00f42400

0800a3c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d4:	f003 0308 	and.w	r3, r3, #8
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45c:	f003 0310 	and.w	r3, r3, #16
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	430a      	orrs	r2, r1
 800a478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47e:	f003 0320 	and.w	r3, r3, #32
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d01a      	beq.n	800a4de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c6:	d10a      	bne.n	800a4de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	605a      	str	r2, [r3, #4]
  }
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b098      	sub	sp, #96	@ 0x60
 800a510:	af02      	add	r7, sp, #8
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a51c:	f7fb fada 	bl	8005ad4 <HAL_GetTick>
 800a520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d12f      	bne.n	800a590 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a538:	2200      	movs	r2, #0
 800a53a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f88e 	bl	800a660 <UART_WaitOnFlagUntilTimeout>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d022      	beq.n	800a590 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a55e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a568:	647b      	str	r3, [r7, #68]	@ 0x44
 800a56a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a570:	e841 2300 	strex	r3, r2, [r1]
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e6      	bne.n	800a54a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2220      	movs	r2, #32
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e063      	b.n	800a658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d149      	bne.n	800a632 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f857 	bl	800a660 <UART_WaitOnFlagUntilTimeout>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d03c      	beq.n	800a632 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	e853 3f00 	ldrex	r3, [r3]
 800a5c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1e6      	bne.n	800a5b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f023 0301 	bic.w	r3, r3, #1
 800a600:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a60a:	61fa      	str	r2, [r7, #28]
 800a60c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	69b9      	ldr	r1, [r7, #24]
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	617b      	str	r3, [r7, #20]
   return(result);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e5      	bne.n	800a5ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e012      	b.n	800a658 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3758      	adds	r7, #88	@ 0x58
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	603b      	str	r3, [r7, #0]
 800a66c:	4613      	mov	r3, r2
 800a66e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a670:	e04f      	b.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a678:	d04b      	beq.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a67a:	f7fb fa2b 	bl	8005ad4 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	429a      	cmp	r2, r3
 800a688:	d302      	bcc.n	800a690 <UART_WaitOnFlagUntilTimeout+0x30>
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e04e      	b.n	800a732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0304 	and.w	r3, r3, #4
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d037      	beq.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b80      	cmp	r3, #128	@ 0x80
 800a6a6:	d034      	beq.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b40      	cmp	r3, #64	@ 0x40
 800a6ac:	d031      	beq.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d110      	bne.n	800a6de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2208      	movs	r2, #8
 800a6c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f000 f920 	bl	800a90a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e029      	b.n	800a732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6ec:	d111      	bne.n	800a712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f906 	bl	800a90a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2220      	movs	r2, #32
 800a702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e00f      	b.n	800a732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4013      	ands	r3, r2
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	429a      	cmp	r2, r3
 800a720:	bf0c      	ite	eq
 800a722:	2301      	moveq	r3, #1
 800a724:	2300      	movne	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d0a0      	beq.n	800a672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b096      	sub	sp, #88	@ 0x58
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	4613      	mov	r3, r2
 800a748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2222      	movs	r2, #34	@ 0x22
 800a764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d02d      	beq.n	800a7ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a778:	4a40      	ldr	r2, [pc, #256]	@ (800a87c <UART_Start_Receive_DMA+0x140>)
 800a77a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a782:	4a3f      	ldr	r2, [pc, #252]	@ (800a880 <UART_Start_Receive_DMA+0x144>)
 800a784:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a78c:	4a3d      	ldr	r2, [pc, #244]	@ (800a884 <UART_Start_Receive_DMA+0x148>)
 800a78e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a796:	2200      	movs	r2, #0
 800a798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3324      	adds	r3, #36	@ 0x24
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	88fb      	ldrh	r3, [r7, #6]
 800a7b0:	f7fb fb54 	bl	8005e5c <HAL_DMA_Start_IT>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d009      	beq.n	800a7ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2210      	movs	r2, #16
 800a7be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e051      	b.n	800a872 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d018      	beq.n	800a808 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7de:	e853 3f00 	ldrex	r3, [r3]
 800a7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fc:	e841 2300 	strex	r3, r2, [r1]
 800a800:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e6      	bne.n	800a7d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3308      	adds	r3, #8
 800a80e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	e853 3f00 	ldrex	r3, [r3]
 800a816:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	f043 0301 	orr.w	r3, r3, #1
 800a81e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3308      	adds	r3, #8
 800a826:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a828:	637a      	str	r2, [r7, #52]	@ 0x34
 800a82a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a82e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a830:	e841 2300 	strex	r3, r2, [r1]
 800a834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e5      	bne.n	800a808 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	613b      	str	r3, [r7, #16]
   return(result);
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3308      	adds	r3, #8
 800a85a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a85c:	623a      	str	r2, [r7, #32]
 800a85e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	69f9      	ldr	r1, [r7, #28]
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	61bb      	str	r3, [r7, #24]
   return(result);
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e5      	bne.n	800a83c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3758      	adds	r7, #88	@ 0x58
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	0800aa8d 	.word	0x0800aa8d
 800a880:	0800abb9 	.word	0x0800abb9
 800a884:	0800abf7 	.word	0x0800abf7

0800a888 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a888:	b480      	push	{r7}
 800a88a:	b08f      	sub	sp, #60	@ 0x3c
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8b0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e6      	bne.n	800a890 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8e2:	61ba      	str	r2, [r7, #24]
 800a8e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6979      	ldr	r1, [r7, #20]
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e5      	bne.n	800a8c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8fe:	bf00      	nop
 800a900:	373c      	adds	r7, #60	@ 0x3c
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b095      	sub	sp, #84	@ 0x54
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a930:	643b      	str	r3, [r7, #64]	@ 0x40
 800a932:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e6      	bne.n	800a912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3308      	adds	r3, #8
 800a94a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	61fb      	str	r3, [r7, #28]
   return(result);
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a95a:	f023 0301 	bic.w	r3, r3, #1
 800a95e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3308      	adds	r3, #8
 800a966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a96a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a96e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a970:	e841 2300 	strex	r3, r2, [r1]
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e3      	bne.n	800a944 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a980:	2b01      	cmp	r3, #1
 800a982:	d118      	bne.n	800a9b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	60bb      	str	r3, [r7, #8]
   return(result);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	f023 0310 	bic.w	r3, r3, #16
 800a998:	647b      	str	r3, [r7, #68]	@ 0x44
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a2:	61bb      	str	r3, [r7, #24]
 800a9a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6979      	ldr	r1, [r7, #20]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e6      	bne.n	800a984 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9ca:	bf00      	nop
 800a9cc:	3754      	adds	r7, #84	@ 0x54
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b090      	sub	sp, #64	@ 0x40
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d137      	bne.n	800aa62 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa04:	e853 3f00 	ldrex	r3, [r3]
 800aa08:	623b      	str	r3, [r7, #32]
   return(result);
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3308      	adds	r3, #8
 800aa18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e5      	bne.n	800a9fa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	61fb      	str	r3, [r7, #28]
 800aa4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	69b9      	ldr	r1, [r7, #24]
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	617b      	str	r3, [r7, #20]
   return(result);
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e6      	bne.n	800aa2e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa60:	e002      	b.n	800aa68 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa64:	f7ff f9a6 	bl	8009db4 <HAL_UART_TxCpltCallback>
}
 800aa68:	bf00      	nop
 800aa6a:	3740      	adds	r7, #64	@ 0x40
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f7ff f9a2 	bl	8009dc8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa84:	bf00      	nop
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b09c      	sub	sp, #112	@ 0x70
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa98:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d171      	bne.n	800ab8c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aaa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aabe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aace:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aad0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aadc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e6      	bne.n	800aab0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf4:	f023 0301 	bic.w	r3, r3, #1
 800aaf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800aafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3308      	adds	r3, #8
 800ab00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab02:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e5      	bne.n	800aae2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	623b      	str	r3, [r7, #32]
   return(result);
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3308      	adds	r3, #8
 800ab34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab36:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab3e:	e841 2300 	strex	r3, r2, [r1]
 800ab42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1e5      	bne.n	800ab16 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d118      	bne.n	800ab8c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 0310 	bic.w	r3, r3, #16
 800ab6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	69b9      	ldr	r1, [r7, #24]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	617b      	str	r3, [r7, #20]
   return(result);
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e6      	bne.n	800ab5a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab8e:	2200      	movs	r2, #0
 800ab90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d107      	bne.n	800abaa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aba0:	4619      	mov	r1, r3
 800aba2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aba4:	f7ff f938 	bl	8009e18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aba8:	e002      	b.n	800abb0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800abaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abac:	f7ff f916 	bl	8009ddc <HAL_UART_RxCpltCallback>
}
 800abb0:	bf00      	nop
 800abb2:	3770      	adds	r7, #112	@ 0x70
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2201      	movs	r2, #1
 800abca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d109      	bne.n	800abe8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	b29b      	uxth	r3, r3
 800abde:	4619      	mov	r1, r3
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff f919 	bl	8009e18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abe6:	e002      	b.n	800abee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff f901 	bl	8009df0 <HAL_UART_RxHalfCpltCallback>
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b086      	sub	sp, #24
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac1e:	2b80      	cmp	r3, #128	@ 0x80
 800ac20:	d109      	bne.n	800ac36 <UART_DMAError+0x40>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b21      	cmp	r3, #33	@ 0x21
 800ac26:	d106      	bne.n	800ac36 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac30:	6978      	ldr	r0, [r7, #20]
 800ac32:	f7ff fe29 	bl	800a888 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac40:	2b40      	cmp	r3, #64	@ 0x40
 800ac42:	d109      	bne.n	800ac58 <UART_DMAError+0x62>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b22      	cmp	r3, #34	@ 0x22
 800ac48:	d106      	bne.n	800ac58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac52:	6978      	ldr	r0, [r7, #20]
 800ac54:	f7ff fe59 	bl	800a90a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac5e:	f043 0210 	orr.w	r2, r3, #16
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac68:	6978      	ldr	r0, [r7, #20]
 800ac6a:	f7ff f8cb 	bl	8009e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac6e:	bf00      	nop
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff f8b9 	bl	8009e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b088      	sub	sp, #32
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	60bb      	str	r3, [r7, #8]
   return(result);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acb6:	61fb      	str	r3, [r7, #28]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	613b      	str	r3, [r7, #16]
   return(result);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e6      	bne.n	800aca2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff f866 	bl	8009db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace8:	bf00      	nop
 800acea:	3720      	adds	r7, #32
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e027      	b.n	800ad92 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2224      	movs	r2, #36	@ 0x24
 800ad4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0201 	bic.w	r2, r2, #1
 800ad68:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2220      	movs	r2, #32
 800ad84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e02d      	b.n	800ae12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2224      	movs	r2, #36	@ 0x24
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0201 	bic.w	r2, r2, #1
 800addc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f850 	bl	800ae98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e02d      	b.n	800ae8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2224      	movs	r2, #36	@ 0x24
 800ae3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 0201 	bic.w	r2, r2, #1
 800ae58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f812 	bl	800ae98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d108      	bne.n	800aeba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aeb8:	e031      	b.n	800af1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeba:	2308      	movs	r3, #8
 800aebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aebe:	2308      	movs	r3, #8
 800aec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	0e5b      	lsrs	r3, r3, #25
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0307 	and.w	r3, r3, #7
 800aed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	0f5b      	lsrs	r3, r3, #29
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	f003 0307 	and.w	r3, r3, #7
 800aee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	7b3a      	ldrb	r2, [r7, #12]
 800aee6:	4911      	ldr	r1, [pc, #68]	@ (800af2c <UARTEx_SetNbDataToProcess+0x94>)
 800aee8:	5c8a      	ldrb	r2, [r1, r2]
 800aeea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeee:	7b3a      	ldrb	r2, [r7, #12]
 800aef0:	490f      	ldr	r1, [pc, #60]	@ (800af30 <UARTEx_SetNbDataToProcess+0x98>)
 800aef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aef4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	7b7a      	ldrb	r2, [r7, #13]
 800af04:	4909      	ldr	r1, [pc, #36]	@ (800af2c <UARTEx_SetNbDataToProcess+0x94>)
 800af06:	5c8a      	ldrb	r2, [r1, r2]
 800af08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af0c:	7b7a      	ldrb	r2, [r7, #13]
 800af0e:	4908      	ldr	r1, [pc, #32]	@ (800af30 <UARTEx_SetNbDataToProcess+0x98>)
 800af10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af12:	fb93 f3f2 	sdiv	r3, r3, r2
 800af16:	b29a      	uxth	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	0800b660 	.word	0x0800b660
 800af30:	0800b668 	.word	0x0800b668

0800af34 <realloc>:
 800af34:	4b02      	ldr	r3, [pc, #8]	@ (800af40 <realloc+0xc>)
 800af36:	460a      	mov	r2, r1
 800af38:	4601      	mov	r1, r0
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	f000 b802 	b.w	800af44 <_realloc_r>
 800af40:	20000020 	.word	0x20000020

0800af44 <_realloc_r>:
 800af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af48:	4680      	mov	r8, r0
 800af4a:	4615      	mov	r5, r2
 800af4c:	460c      	mov	r4, r1
 800af4e:	b921      	cbnz	r1, 800af5a <_realloc_r+0x16>
 800af50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	4611      	mov	r1, r2
 800af56:	f000 b8d1 	b.w	800b0fc <_malloc_r>
 800af5a:	b92a      	cbnz	r2, 800af68 <_realloc_r+0x24>
 800af5c:	f000 f862 	bl	800b024 <_free_r>
 800af60:	2400      	movs	r4, #0
 800af62:	4620      	mov	r0, r4
 800af64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af68:	f000 f954 	bl	800b214 <_malloc_usable_size_r>
 800af6c:	4285      	cmp	r5, r0
 800af6e:	4606      	mov	r6, r0
 800af70:	d802      	bhi.n	800af78 <_realloc_r+0x34>
 800af72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af76:	d8f4      	bhi.n	800af62 <_realloc_r+0x1e>
 800af78:	4629      	mov	r1, r5
 800af7a:	4640      	mov	r0, r8
 800af7c:	f000 f8be 	bl	800b0fc <_malloc_r>
 800af80:	4607      	mov	r7, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d0ec      	beq.n	800af60 <_realloc_r+0x1c>
 800af86:	42b5      	cmp	r5, r6
 800af88:	462a      	mov	r2, r5
 800af8a:	4621      	mov	r1, r4
 800af8c:	bf28      	it	cs
 800af8e:	4632      	movcs	r2, r6
 800af90:	f000 f83a 	bl	800b008 <memcpy>
 800af94:	4621      	mov	r1, r4
 800af96:	4640      	mov	r0, r8
 800af98:	f000 f844 	bl	800b024 <_free_r>
 800af9c:	463c      	mov	r4, r7
 800af9e:	e7e0      	b.n	800af62 <_realloc_r+0x1e>

0800afa0 <memset>:
 800afa0:	4402      	add	r2, r0
 800afa2:	4603      	mov	r3, r0
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d100      	bne.n	800afaa <memset+0xa>
 800afa8:	4770      	bx	lr
 800afaa:	f803 1b01 	strb.w	r1, [r3], #1
 800afae:	e7f9      	b.n	800afa4 <memset+0x4>

0800afb0 <__errno>:
 800afb0:	4b01      	ldr	r3, [pc, #4]	@ (800afb8 <__errno+0x8>)
 800afb2:	6818      	ldr	r0, [r3, #0]
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20000020 	.word	0x20000020

0800afbc <__libc_init_array>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4d0d      	ldr	r5, [pc, #52]	@ (800aff4 <__libc_init_array+0x38>)
 800afc0:	4c0d      	ldr	r4, [pc, #52]	@ (800aff8 <__libc_init_array+0x3c>)
 800afc2:	1b64      	subs	r4, r4, r5
 800afc4:	10a4      	asrs	r4, r4, #2
 800afc6:	2600      	movs	r6, #0
 800afc8:	42a6      	cmp	r6, r4
 800afca:	d109      	bne.n	800afe0 <__libc_init_array+0x24>
 800afcc:	4d0b      	ldr	r5, [pc, #44]	@ (800affc <__libc_init_array+0x40>)
 800afce:	4c0c      	ldr	r4, [pc, #48]	@ (800b000 <__libc_init_array+0x44>)
 800afd0:	f000 f938 	bl	800b244 <_init>
 800afd4:	1b64      	subs	r4, r4, r5
 800afd6:	10a4      	asrs	r4, r4, #2
 800afd8:	2600      	movs	r6, #0
 800afda:	42a6      	cmp	r6, r4
 800afdc:	d105      	bne.n	800afea <__libc_init_array+0x2e>
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe4:	4798      	blx	r3
 800afe6:	3601      	adds	r6, #1
 800afe8:	e7ee      	b.n	800afc8 <__libc_init_array+0xc>
 800afea:	f855 3b04 	ldr.w	r3, [r5], #4
 800afee:	4798      	blx	r3
 800aff0:	3601      	adds	r6, #1
 800aff2:	e7f2      	b.n	800afda <__libc_init_array+0x1e>
 800aff4:	0800b678 	.word	0x0800b678
 800aff8:	0800b678 	.word	0x0800b678
 800affc:	0800b678 	.word	0x0800b678
 800b000:	0800b684 	.word	0x0800b684

0800b004 <__retarget_lock_acquire_recursive>:
 800b004:	4770      	bx	lr

0800b006 <__retarget_lock_release_recursive>:
 800b006:	4770      	bx	lr

0800b008 <memcpy>:
 800b008:	440a      	add	r2, r1
 800b00a:	4291      	cmp	r1, r2
 800b00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b010:	d100      	bne.n	800b014 <memcpy+0xc>
 800b012:	4770      	bx	lr
 800b014:	b510      	push	{r4, lr}
 800b016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b01e:	4291      	cmp	r1, r2
 800b020:	d1f9      	bne.n	800b016 <memcpy+0xe>
 800b022:	bd10      	pop	{r4, pc}

0800b024 <_free_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4605      	mov	r5, r0
 800b028:	2900      	cmp	r1, #0
 800b02a:	d041      	beq.n	800b0b0 <_free_r+0x8c>
 800b02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b030:	1f0c      	subs	r4, r1, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	bfb8      	it	lt
 800b036:	18e4      	addlt	r4, r4, r3
 800b038:	f000 f8e0 	bl	800b1fc <__malloc_lock>
 800b03c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0b4 <_free_r+0x90>)
 800b03e:	6813      	ldr	r3, [r2, #0]
 800b040:	b933      	cbnz	r3, 800b050 <_free_r+0x2c>
 800b042:	6063      	str	r3, [r4, #4]
 800b044:	6014      	str	r4, [r2, #0]
 800b046:	4628      	mov	r0, r5
 800b048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04c:	f000 b8dc 	b.w	800b208 <__malloc_unlock>
 800b050:	42a3      	cmp	r3, r4
 800b052:	d908      	bls.n	800b066 <_free_r+0x42>
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	1821      	adds	r1, r4, r0
 800b058:	428b      	cmp	r3, r1
 800b05a:	bf01      	itttt	eq
 800b05c:	6819      	ldreq	r1, [r3, #0]
 800b05e:	685b      	ldreq	r3, [r3, #4]
 800b060:	1809      	addeq	r1, r1, r0
 800b062:	6021      	streq	r1, [r4, #0]
 800b064:	e7ed      	b.n	800b042 <_free_r+0x1e>
 800b066:	461a      	mov	r2, r3
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	b10b      	cbz	r3, 800b070 <_free_r+0x4c>
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	d9fa      	bls.n	800b066 <_free_r+0x42>
 800b070:	6811      	ldr	r1, [r2, #0]
 800b072:	1850      	adds	r0, r2, r1
 800b074:	42a0      	cmp	r0, r4
 800b076:	d10b      	bne.n	800b090 <_free_r+0x6c>
 800b078:	6820      	ldr	r0, [r4, #0]
 800b07a:	4401      	add	r1, r0
 800b07c:	1850      	adds	r0, r2, r1
 800b07e:	4283      	cmp	r3, r0
 800b080:	6011      	str	r1, [r2, #0]
 800b082:	d1e0      	bne.n	800b046 <_free_r+0x22>
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	6053      	str	r3, [r2, #4]
 800b08a:	4408      	add	r0, r1
 800b08c:	6010      	str	r0, [r2, #0]
 800b08e:	e7da      	b.n	800b046 <_free_r+0x22>
 800b090:	d902      	bls.n	800b098 <_free_r+0x74>
 800b092:	230c      	movs	r3, #12
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	e7d6      	b.n	800b046 <_free_r+0x22>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	1821      	adds	r1, r4, r0
 800b09c:	428b      	cmp	r3, r1
 800b09e:	bf04      	itt	eq
 800b0a0:	6819      	ldreq	r1, [r3, #0]
 800b0a2:	685b      	ldreq	r3, [r3, #4]
 800b0a4:	6063      	str	r3, [r4, #4]
 800b0a6:	bf04      	itt	eq
 800b0a8:	1809      	addeq	r1, r1, r0
 800b0aa:	6021      	streq	r1, [r4, #0]
 800b0ac:	6054      	str	r4, [r2, #4]
 800b0ae:	e7ca      	b.n	800b046 <_free_r+0x22>
 800b0b0:	bd38      	pop	{r3, r4, r5, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001da8 	.word	0x20001da8

0800b0b8 <sbrk_aligned>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	4e0f      	ldr	r6, [pc, #60]	@ (800b0f8 <sbrk_aligned+0x40>)
 800b0bc:	460c      	mov	r4, r1
 800b0be:	6831      	ldr	r1, [r6, #0]
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	b911      	cbnz	r1, 800b0ca <sbrk_aligned+0x12>
 800b0c4:	f000 f8ae 	bl	800b224 <_sbrk_r>
 800b0c8:	6030      	str	r0, [r6, #0]
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 f8a9 	bl	800b224 <_sbrk_r>
 800b0d2:	1c43      	adds	r3, r0, #1
 800b0d4:	d103      	bne.n	800b0de <sbrk_aligned+0x26>
 800b0d6:	f04f 34ff 	mov.w	r4, #4294967295
 800b0da:	4620      	mov	r0, r4
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	1cc4      	adds	r4, r0, #3
 800b0e0:	f024 0403 	bic.w	r4, r4, #3
 800b0e4:	42a0      	cmp	r0, r4
 800b0e6:	d0f8      	beq.n	800b0da <sbrk_aligned+0x22>
 800b0e8:	1a21      	subs	r1, r4, r0
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 f89a 	bl	800b224 <_sbrk_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d1f2      	bne.n	800b0da <sbrk_aligned+0x22>
 800b0f4:	e7ef      	b.n	800b0d6 <sbrk_aligned+0x1e>
 800b0f6:	bf00      	nop
 800b0f8:	20001da4 	.word	0x20001da4

0800b0fc <_malloc_r>:
 800b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b100:	1ccd      	adds	r5, r1, #3
 800b102:	f025 0503 	bic.w	r5, r5, #3
 800b106:	3508      	adds	r5, #8
 800b108:	2d0c      	cmp	r5, #12
 800b10a:	bf38      	it	cc
 800b10c:	250c      	movcc	r5, #12
 800b10e:	2d00      	cmp	r5, #0
 800b110:	4606      	mov	r6, r0
 800b112:	db01      	blt.n	800b118 <_malloc_r+0x1c>
 800b114:	42a9      	cmp	r1, r5
 800b116:	d904      	bls.n	800b122 <_malloc_r+0x26>
 800b118:	230c      	movs	r3, #12
 800b11a:	6033      	str	r3, [r6, #0]
 800b11c:	2000      	movs	r0, #0
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1f8 <_malloc_r+0xfc>
 800b126:	f000 f869 	bl	800b1fc <__malloc_lock>
 800b12a:	f8d8 3000 	ldr.w	r3, [r8]
 800b12e:	461c      	mov	r4, r3
 800b130:	bb44      	cbnz	r4, 800b184 <_malloc_r+0x88>
 800b132:	4629      	mov	r1, r5
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff ffbf 	bl	800b0b8 <sbrk_aligned>
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	4604      	mov	r4, r0
 800b13e:	d158      	bne.n	800b1f2 <_malloc_r+0xf6>
 800b140:	f8d8 4000 	ldr.w	r4, [r8]
 800b144:	4627      	mov	r7, r4
 800b146:	2f00      	cmp	r7, #0
 800b148:	d143      	bne.n	800b1d2 <_malloc_r+0xd6>
 800b14a:	2c00      	cmp	r4, #0
 800b14c:	d04b      	beq.n	800b1e6 <_malloc_r+0xea>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	4639      	mov	r1, r7
 800b152:	4630      	mov	r0, r6
 800b154:	eb04 0903 	add.w	r9, r4, r3
 800b158:	f000 f864 	bl	800b224 <_sbrk_r>
 800b15c:	4581      	cmp	r9, r0
 800b15e:	d142      	bne.n	800b1e6 <_malloc_r+0xea>
 800b160:	6821      	ldr	r1, [r4, #0]
 800b162:	1a6d      	subs	r5, r5, r1
 800b164:	4629      	mov	r1, r5
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ffa6 	bl	800b0b8 <sbrk_aligned>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d03a      	beq.n	800b1e6 <_malloc_r+0xea>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	442b      	add	r3, r5
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	f8d8 3000 	ldr.w	r3, [r8]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	bb62      	cbnz	r2, 800b1d8 <_malloc_r+0xdc>
 800b17e:	f8c8 7000 	str.w	r7, [r8]
 800b182:	e00f      	b.n	800b1a4 <_malloc_r+0xa8>
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	1b52      	subs	r2, r2, r5
 800b188:	d420      	bmi.n	800b1cc <_malloc_r+0xd0>
 800b18a:	2a0b      	cmp	r2, #11
 800b18c:	d917      	bls.n	800b1be <_malloc_r+0xc2>
 800b18e:	1961      	adds	r1, r4, r5
 800b190:	42a3      	cmp	r3, r4
 800b192:	6025      	str	r5, [r4, #0]
 800b194:	bf18      	it	ne
 800b196:	6059      	strne	r1, [r3, #4]
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	bf08      	it	eq
 800b19c:	f8c8 1000 	streq.w	r1, [r8]
 800b1a0:	5162      	str	r2, [r4, r5]
 800b1a2:	604b      	str	r3, [r1, #4]
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f000 f82f 	bl	800b208 <__malloc_unlock>
 800b1aa:	f104 000b 	add.w	r0, r4, #11
 800b1ae:	1d23      	adds	r3, r4, #4
 800b1b0:	f020 0007 	bic.w	r0, r0, #7
 800b1b4:	1ac2      	subs	r2, r0, r3
 800b1b6:	bf1c      	itt	ne
 800b1b8:	1a1b      	subne	r3, r3, r0
 800b1ba:	50a3      	strne	r3, [r4, r2]
 800b1bc:	e7af      	b.n	800b11e <_malloc_r+0x22>
 800b1be:	6862      	ldr	r2, [r4, #4]
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	bf0c      	ite	eq
 800b1c4:	f8c8 2000 	streq.w	r2, [r8]
 800b1c8:	605a      	strne	r2, [r3, #4]
 800b1ca:	e7eb      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	6864      	ldr	r4, [r4, #4]
 800b1d0:	e7ae      	b.n	800b130 <_malloc_r+0x34>
 800b1d2:	463c      	mov	r4, r7
 800b1d4:	687f      	ldr	r7, [r7, #4]
 800b1d6:	e7b6      	b.n	800b146 <_malloc_r+0x4a>
 800b1d8:	461a      	mov	r2, r3
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d1fb      	bne.n	800b1d8 <_malloc_r+0xdc>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6053      	str	r3, [r2, #4]
 800b1e4:	e7de      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	6033      	str	r3, [r6, #0]
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f000 f80c 	bl	800b208 <__malloc_unlock>
 800b1f0:	e794      	b.n	800b11c <_malloc_r+0x20>
 800b1f2:	6005      	str	r5, [r0, #0]
 800b1f4:	e7d6      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1f6:	bf00      	nop
 800b1f8:	20001da8 	.word	0x20001da8

0800b1fc <__malloc_lock>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__malloc_lock+0x8>)
 800b1fe:	f7ff bf01 	b.w	800b004 <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	20001da0 	.word	0x20001da0

0800b208 <__malloc_unlock>:
 800b208:	4801      	ldr	r0, [pc, #4]	@ (800b210 <__malloc_unlock+0x8>)
 800b20a:	f7ff befc 	b.w	800b006 <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	20001da0 	.word	0x20001da0

0800b214 <_malloc_usable_size_r>:
 800b214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b218:	1f18      	subs	r0, r3, #4
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	bfbc      	itt	lt
 800b21e:	580b      	ldrlt	r3, [r1, r0]
 800b220:	18c0      	addlt	r0, r0, r3
 800b222:	4770      	bx	lr

0800b224 <_sbrk_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d06      	ldr	r5, [pc, #24]	@ (800b240 <_sbrk_r+0x1c>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7fa fb7a 	bl	8005928 <_sbrk>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_sbrk_r+0x1a>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_sbrk_r+0x1a>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20001d9c 	.word	0x20001d9c

0800b244 <_init>:
 800b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b246:	bf00      	nop
 800b248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24a:	bc08      	pop	{r3}
 800b24c:	469e      	mov	lr, r3
 800b24e:	4770      	bx	lr

0800b250 <_fini>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr
