
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000010  080048d4  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080048d4  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d93  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da2  00000000  00000000  00019dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4a  00000000  00000000  0001dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214af  00000000  00000000  0001e9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015039  00000000  00000000  0003fe99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c57b1  00000000  00000000  00054ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c8  00000000  00000000  0011a6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004890 	.word	0x08004890

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004890 	.word	0x08004890

08000218 <_ZN8DC_motor12update_speedEi>:
void DC_motor::setspeed(float target_speed){
    sp = target_speed;
}


void DC_motor::update_speed(int sign){
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    int16_t enc ;
    enc = __HAL_TIM_GetCounter(enc_htim);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800022a:	81fb      	strh	r3, [r7, #14]
    speed = sign*(float)enc /(4*resolution*span*reduction_ratio);
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	ee07 3a90 	vmov	s15, r3
 8000232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800023a:	ee07 3a90 	vmov	s15, r3
 800023e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000242:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	ee07 3a90 	vmov	s15, r3
 8000250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800025a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	edc3 7a07 	vstr	s15, [r3, #28]
    total_encoder_count += sign * enc;  // 累加encoder計數，注意正負方向
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800027a:	6839      	ldr	r1, [r7, #0]
 800027c:	fb01 f303 	mul.w	r3, r1, r3
 8000280:	441a      	add	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	651a      	str	r2, [r3, #80]	@ 0x50
    __HAL_TIM_SetCounter(enc_htim,0);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <_ZN8DC_motor5setupEv>:
void DC_motor::setup(){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start_IT(PWM_htim, PWM_TIM_CHANNEL);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ac:	4619      	mov	r1, r3
 80002ae:	4610      	mov	r0, r2
 80002b0:	f002 ff14 	bl	80030dc <HAL_TIM_PWM_Start_IT>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_1);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 f900 	bl	80034c0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(enc_htim, TIM_CHANNEL_2);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80002c4:	2104      	movs	r1, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 f8fa 	bl	80034c0 <HAL_TIM_Encoder_Start>
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f001 f8a1 	bl	800141e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f812 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e0:	f000 fae6 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002e4:	f000 f88e 	bl	8000404 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002e8:	f000 f944 	bl	8000574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002ec:	f000 f990 	bl	8000610 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002f0:	f000 f9e8 	bl	80006c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80002f4:	f000 fa3c 	bl	8000770 <MX_TIM8_Init>
  MX_I2C1_Init();
 80002f8:	f000 f844 	bl	8000384 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80002fc:	f000 fc30 	bl	8000b60 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <main+0x2c>

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	@ 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2238      	movs	r2, #56	@ 0x38
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f004 fa90 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000326:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800032a:	f001 fcf5 	bl	8001d18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032e:	2302      	movs	r3, #2
 8000330:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000336:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2340      	movs	r3, #64	@ 0x40
 800033a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033c:	2300      	movs	r3, #0
 800033e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fd9b 	bl	8001e80 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000350:	f000 fb46 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000358:	2301      	movs	r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f002 f899 	bl	80024a4 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000378:	f000 fb32 	bl	80009e0 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3750      	adds	r7, #80	@ 0x50
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_I2C1_Init+0x74>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	@ (80003fc <MX_I2C1_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800038e:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <MX_I2C1_Init+0x74>)
 8000390:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <MX_I2C1_Init+0x7c>)
 8000392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039a:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <MX_I2C1_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a6:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003be:	480e      	ldr	r0, [pc, #56]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003c0:	f001 fb78 	bl	8001ab4 <HAL_I2C_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ca:	f000 fb09 	bl	80009e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ce:	2100      	movs	r1, #0
 80003d0:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003d2:	f001 fc0a 	bl	8001bea <HAL_I2CEx_ConfigAnalogFilter>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 fb00 	bl	80009e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e0:	2100      	movs	r1, #0
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <MX_I2C1_Init+0x74>)
 80003e4:	f001 fc4c 	bl	8001c80 <HAL_I2CEx_ConfigDigitalFilter>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 faf7 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000002c 	.word	0x2000002c
 80003fc:	40005400 	.word	0x40005400
 8000400:	00503d58 	.word	0x00503d58

08000404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b098      	sub	sp, #96	@ 0x60
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000416:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2234      	movs	r2, #52	@ 0x34
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f004 fa01 	bl	8004838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000436:	4b4d      	ldr	r3, [pc, #308]	@ (800056c <MX_TIM1_Init+0x168>)
 8000438:	4a4d      	ldr	r2, [pc, #308]	@ (8000570 <MX_TIM1_Init+0x16c>)
 800043a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800043c:	4b4b      	ldr	r3, [pc, #300]	@ (800056c <MX_TIM1_Init+0x168>)
 800043e:	220f      	movs	r2, #15
 8000440:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000442:	4b4a      	ldr	r3, [pc, #296]	@ (800056c <MX_TIM1_Init+0x168>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000448:	4b48      	ldr	r3, [pc, #288]	@ (800056c <MX_TIM1_Init+0x168>)
 800044a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800044e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b46      	ldr	r3, [pc, #280]	@ (800056c <MX_TIM1_Init+0x168>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000456:	4b45      	ldr	r3, [pc, #276]	@ (800056c <MX_TIM1_Init+0x168>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045c:	4b43      	ldr	r3, [pc, #268]	@ (800056c <MX_TIM1_Init+0x168>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000462:	4842      	ldr	r0, [pc, #264]	@ (800056c <MX_TIM1_Init+0x168>)
 8000464:	f002 fce3 	bl	8002e2e <HAL_TIM_PWM_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800046e:	f000 fab7 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000472:	2300      	movs	r3, #0
 8000474:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800047e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000482:	4619      	mov	r1, r3
 8000484:	4839      	ldr	r0, [pc, #228]	@ (800056c <MX_TIM1_Init+0x168>)
 8000486:	f004 f883 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000490:	f000 faa6 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000494:	2360      	movs	r3, #96	@ 0x60
 8000496:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049c:	2300      	movs	r3, #0
 800049e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004a0:	2300      	movs	r3, #0
 80004a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	482c      	ldr	r0, [pc, #176]	@ (800056c <MX_TIM1_Init+0x168>)
 80004ba:	f003 f9df 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004c4:	f000 fa8c 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004cc:	2204      	movs	r2, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4826      	ldr	r0, [pc, #152]	@ (800056c <MX_TIM1_Init+0x168>)
 80004d2:	f003 f9d3 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80004dc:	f000 fa80 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004e4:	2208      	movs	r2, #8
 80004e6:	4619      	mov	r1, r3
 80004e8:	4820      	ldr	r0, [pc, #128]	@ (800056c <MX_TIM1_Init+0x168>)
 80004ea:	f003 f9c7 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80004f4:	f000 fa74 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004fc:	220c      	movs	r2, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	481a      	ldr	r0, [pc, #104]	@ (800056c <MX_TIM1_Init+0x168>)
 8000502:	f003 f9bb 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800050c:	f000 fa68 	bl	80009e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000528:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <MX_TIM1_Init+0x168>)
 800054e:	f004 f8a1 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000558:	f000 fa42 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <MX_TIM1_Init+0x168>)
 800055e:	f000 fe41 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 8000562:	bf00      	nop
 8000564:	3760      	adds	r7, #96	@ 0x60
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000080 	.word	0x20000080
 8000570:	40012c00 	.word	0x40012c00

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_TIM2_Init+0x98>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <MX_TIM2_Init+0x98>)
 800059c:	220f      	movs	r2, #15
 800059e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_TIM2_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <MX_TIM2_Init+0x98>)
 80005a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_TIM2_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_TIM2_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ba:	4814      	ldr	r0, [pc, #80]	@ (800060c <MX_TIM2_Init+0x98>)
 80005bc:	f002 fb46 	bl	8002c4c <HAL_TIM_Base_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005c6:	f000 fa0b 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <MX_TIM2_Init+0x98>)
 80005d8:	f003 fa64 	bl	8003aa4 <HAL_TIM_ConfigClockSource>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005e2:	f000 f9fd 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	@ (800060c <MX_TIM2_Init+0x98>)
 80005f4:	f003 ffcc 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005fe:	f000 f9ef 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000cc 	.word	0x200000cc

08000610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000634:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_TIM3_Init+0xac>)
 8000636:	4a22      	ldr	r2, [pc, #136]	@ (80006c0 <MX_TIM3_Init+0xb0>)
 8000638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <MX_TIM3_Init+0xac>)
 800063c:	220f      	movs	r2, #15
 800063e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_TIM3_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_TIM3_Init+0xac>)
 8000648:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800064c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_TIM3_Init+0xac>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <MX_TIM3_Init+0xac>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800065a:	4818      	ldr	r0, [pc, #96]	@ (80006bc <MX_TIM3_Init+0xac>)
 800065c:	f002 fbe7 	bl	8002e2e <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 f9bb 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4810      	ldr	r0, [pc, #64]	@ (80006bc <MX_TIM3_Init+0xac>)
 800067a:	f003 ff89 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000684:	f000 f9ac 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	@ 0x60
 800068a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	4807      	ldr	r0, [pc, #28]	@ (80006bc <MX_TIM3_Init+0xac>)
 80006a0:	f003 f8ec 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f999 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006ae:	4803      	ldr	r0, [pc, #12]	@ (80006bc <MX_TIM3_Init+0xac>)
 80006b0:	f000 fd98 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000118 	.word	0x20000118
 80006c0:	40000400 	.word	0x40000400

080006c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2224      	movs	r2, #36	@ 0x24
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f8b0 	bl	8004838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_TIM4_Init+0xa4>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <MX_TIM4_Init+0xa8>)
 80006e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_TIM4_Init+0xa4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_TIM4_Init+0xa4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_TIM4_Init+0xa4>)
 80006f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_TIM4_Init+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_TIM4_Init+0xa4>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000708:	2301      	movs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000710:	2301      	movs	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000720:	2301      	movs	r3, #1
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_TIM4_Init+0xa4>)
 8000734:	f002 fe1e 	bl	8003374 <HAL_TIM_Encoder_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800073e:	f000 f94f 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_TIM4_Init+0xa4>)
 8000750:	f003 ff1e 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800075a:	f000 f941 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	@ 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000164 	.word	0x20000164
 800076c:	40000800 	.word	0x40000800

08000770 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b098      	sub	sp, #96	@ 0x60
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2234      	movs	r2, #52	@ 0x34
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f84b 	bl	8004838 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007a2:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007a4:	4a41      	ldr	r2, [pc, #260]	@ (80008ac <MX_TIM8_Init+0x13c>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80007a8:	4b3f      	ldr	r3, [pc, #252]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007aa:	220f      	movs	r2, #15
 80007ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b3e      	ldr	r3, [pc, #248]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80007b4:	4b3c      	ldr	r3, [pc, #240]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007c2:	4b39      	ldr	r3, [pc, #228]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007ce:	4836      	ldr	r0, [pc, #216]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007d0:	f002 fb2d 	bl	8002e2e <HAL_TIM_PWM_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f901 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007ee:	4619      	mov	r1, r3
 80007f0:	482d      	ldr	r0, [pc, #180]	@ (80008a8 <MX_TIM8_Init+0x138>)
 80007f2:	f003 fecd 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 f8f0 	bl	80009e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	@ 0x60
 8000802:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	2300      	movs	r3, #0
 800080e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <MX_TIM8_Init+0x138>)
 8000826:	f003 f829 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000830:	f000 f8d6 	bl	80009e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000834:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	@ (80008a8 <MX_TIM8_Init+0x138>)
 800083e:	f003 f81d 	bl	800387c <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000848:	f000 f8ca 	bl	80009e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000872:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <MX_TIM8_Init+0x138>)
 800088a:	f003 ff03 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000894:	f000 f8a4 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <MX_TIM8_Init+0x138>)
 800089a:	f000 fca3 	bl	80011e4 <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3760      	adds	r7, #96	@ 0x60
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200001b0 	.word	0x200001b0
 80008ac:	40013400 	.word	0x40013400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b43      	ldr	r3, [pc, #268]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a42      	ldr	r2, [pc, #264]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b40      	ldr	r3, [pc, #256]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b3d      	ldr	r3, [pc, #244]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a3c      	ldr	r2, [pc, #240]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b3a      	ldr	r3, [pc, #232]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a36      	ldr	r2, [pc, #216]	@ (80009d4 <MX_GPIO_Init+0x124>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x124>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f240 6109 	movw	r1, #1545	@ 0x609
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f001 f89c 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 800091c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0x128>)
 8000934:	f000 fef4 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 8000938:	f240 6309 	movw	r3, #1545	@ 0x609
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f000 fee4 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000958:	2306      	movs	r3, #6
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fed6 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000974:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_GPIO_Init+0x12c>)
 800098c:	f000 fec8 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000990:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <MX_GPIO_Init+0x128>)
 80009a8:	f000 feba 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2017      	movs	r0, #23
 80009b2:	f000 fe80 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b6:	2017      	movs	r0, #23
 80009b8:	f000 fe97 	bl	80016ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2028      	movs	r0, #40	@ 0x28
 80009c2:	f000 fe78 	bl	80016b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f000 fe8f 	bl	80016ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800
 80009dc:	48000400 	.word	0x48000400

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>:
		int maxPulse = 2500;
		int minPulse = 500;


	public:
		Servo(TIM_HandleTypeDef* h, uint32_t ch) {
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a06:	615a      	str	r2, [r3, #20]
			htim = h;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	609a      	str	r2, [r3, #8]
			channel = ch;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	601a      	str	r2, [r3, #0]
		}
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
    void mark_start_position();
    
    // 取得從起始位置走了多少步
    int32_t get_steps_from_start() const;

	DC_motor(TIM_HandleTypeDef *_enc_htim, GPIO_TypeDef *_dirPort, uint16_t _dirPin, TIM_HandleTypeDef *_PWM_htim, uint32_t _PWM_TIM_CHANNEL) {
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	807b      	strh	r3, [r7, #2]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4a2e      	ldr	r2, [pc, #184]	@ (8000af0 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xcc>)
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000af4 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xd0>)
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4a1f      	ldr	r2, [pc, #124]	@ (8000af8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xd4>)
 8000a7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2264      	movs	r2, #100	@ 0x64
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8000a88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a96:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	651a      	str	r2, [r3, #80]	@ 0x50
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	655a      	str	r2, [r3, #84]	@ 0x54
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	@ 0x58
		enc_htim = _enc_htim;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
		dirPort = _dirPort;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	641a      	str	r2, [r3, #64]	@ 0x40
		dirPin = _dirPin;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	887a      	ldrh	r2, [r7, #2]
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
		PWM_htim = _PWM_htim;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	649a      	str	r2, [r3, #72]	@ 0x48
		PWM_TIM_CHANNEL = _PWM_TIM_CHANNEL;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
		total_encoder_count = 0;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	651a      	str	r2, [r3, #80]	@ 0x50
        mm_per_step = 0;  // 初始化每步對應的高度
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	655a      	str	r2, [r3, #84]	@ 0x54
	};
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	3e570a3d 	.word	0x3e570a3d
 8000af4:	3a03126f 	.word	0x3a03126f
 8000af8:	3a83126f 	.word	0x3a83126f

08000afc <_Z9setup_allv>:
int gripperHighest = 0;
int gripperLowest = 0;
int32_t total_steps = 0;  // 用來記錄總步數


void setup_all(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	servo_gripper.setMaxAngle(300);
 8000b00:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000b04:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <_Z9setup_allv+0x4c>)
 8000b06:	f000 f960 	bl	8000dca <_ZN5Servo11setMaxAngleEi>
	servo_gripper.setup(0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <_Z9setup_allv+0x4c>)
 8000b0e:	f000 f947 	bl	8000da0 <_ZN5Servo5setupEi>
	servo_right.setup(0);
 8000b12:	2100      	movs	r1, #0
 8000b14:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <_Z9setup_allv+0x50>)
 8000b16:	f000 f943 	bl	8000da0 <_ZN5Servo5setupEi>
	servo_left.setup(0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <_Z9setup_allv+0x54>)
 8000b1e:	f000 f93f 	bl	8000da0 <_ZN5Servo5setupEi>
	servo_forward.setMaxAngle(1800);
 8000b22:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8000b26:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <_Z9setup_allv+0x58>)
 8000b28:	f000 f94f 	bl	8000dca <_ZN5Servo11setMaxAngleEi>
	servo_forward.setup(90);
 8000b2c:	215a      	movs	r1, #90	@ 0x5a
 8000b2e:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <_Z9setup_allv+0x58>)
 8000b30:	f000 f936 	bl	8000da0 <_ZN5Servo5setupEi>
	servo_turn.setup(0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <_Z9setup_allv+0x5c>)
 8000b38:	f000 f932 	bl	8000da0 <_ZN5Servo5setupEi>
	Motor_updown.setup();
 8000b3c:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <_Z9setup_allv+0x60>)
 8000b3e:	f7ff fbad 	bl	800029c <_ZN8DC_motor5setupEv>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000270 	.word	0x20000270
 8000b4c:	200002a0 	.word	0x200002a0
 8000b50:	20000288 	.word	0x20000288
 8000b54:	200002b8 	.word	0x200002b8
 8000b58:	20000258 	.word	0x20000258
 8000b5c:	200001fc 	.word	0x200001fc

08000b60 <main_function>:
void main_function(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	setup_all();
 8000b64:	f7ff ffca 	bl	8000afc <_Z9setup_allv>

	while(1){
		mission_2();
 8000b68:	f000 f8ea 	bl	8000d40 <_Z9mission_2v>
 8000b6c:	e7fc      	b.n	8000b68 <main_function+0x8>
	...

08000b70 <_Z4waitiP17TIM_HandleTypeDef>:

	}
}


void wait(int time,TIM_HandleTypeDef *htim){//time單位為ms
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]

	HAL_TIM_Base_Start_IT(htim);
 8000b7a:	6838      	ldr	r0, [r7, #0]
 8000b7c:	f002 f8be 	bl	8002cfc <HAL_TIM_Base_Start_IT>
	while(delay_count < time){
 8000b80:	bf00      	nop
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dcfa      	bgt.n	8000b82 <_Z4waitiP17TIM_HandleTypeDef+0x12>
	}

	HAL_TIM_Base_Stop_IT(htim);
 8000b8c:	6838      	ldr	r0, [r7, #0]
 8000b8e:	f002 f91f 	bl	8002dd0 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 8000b92:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <_Z4waitiP17TIM_HandleTypeDef+0x30>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200002d8 	.word	0x200002d8

08000ba4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb4:	d108      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x24>
		delay_count++;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bbe:	6013      	str	r3, [r2, #0]
        Motor_updown.update_speed(1);  // 定期更新encoder計數
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bc4:	f7ff fb28 	bl	8000218 <_ZN8DC_motor12update_speedEi>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200002d8 	.word	0x200002d8
 8000bd4:	200001fc 	.word	0x200001fc

08000bd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000be8:	d01d      	beq.n	8000c26 <HAL_GPIO_EXTI_Callback+0x4e>
 8000bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bee:	d13e      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x96>
		case GPIO_PIN_13:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4820      	ldr	r0, [pc, #128]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000bf6:	f000 ff15 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d02e      	beq.n	8000c68 <HAL_GPIO_EXTI_Callback+0x90>
				speeds = 0;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
				gripperHighest = 1;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
				gripperLowest = 0;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
				high = 100;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c20:	4a1a      	ldr	r2, [pc, #104]	@ (8000c8c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c22:	601a      	str	r2, [r3, #0]
			}
			//Motor_updown.setspeed(speeds);
			break;
 8000c24:	e020      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x90>
		case GPIO_PIN_12:
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c2c:	f000 fefa 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf0c      	ite	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	2300      	movne	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d015      	beq.n	8000c6c <HAL_GPIO_EXTI_Callback+0x94>
				initialized = false;  // 重置初始化狀態
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
				speeds = -1;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c4a:	601a      	str	r2, [r3, #0]
				gripperHighest = 0;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
				gripperLowest = 1;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
				high = 0;
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
				total_steps = 0;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				//HAL_Delay(1000);
			}

			//Motor_updown.setspeed(speeds);
			break;
 8000c66:	e001      	b.n	8000c6c <HAL_GPIO_EXTI_Callback+0x94>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e000      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x96>
			break;
 8000c6c:	bf00      	nop

	}
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	200002d0 	.word	0x200002d0
 8000c80:	200002dc 	.word	0x200002dc
 8000c84:	200002e0 	.word	0x200002e0
 8000c88:	200002d4 	.word	0x200002d4
 8000c8c:	42c80000 	.word	0x42c80000
 8000c90:	20000000 	.word	0x20000000
 8000c94:	bf800000 	.word	0xbf800000
 8000c98:	200002e4 	.word	0x200002e4

08000c9c <_Z41__static_initialization_and_destruction_0ii>:
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d129      	bne.n	8000d00 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d124      	bne.n	8000d00 <_Z41__static_initialization_and_destruction_0ii+0x64>
DC_motor Motor_updown = {&htim4, GPIOA, GPIO_PIN_10, &htim8, TIM_CHANNEL_2};
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cc6:	4911      	ldr	r1, [pc, #68]	@ (8000d0c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000cca:	f7ff feab 	bl	8000a24 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
Servo servo_turn = {&htim3, TIM_CHANNEL_1};
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4910      	ldr	r1, [pc, #64]	@ (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000cd2:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000cd4:	f7ff fe8a 	bl	80009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo_gripper = {&htim1, TIM_CHANNEL_2};
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4910      	ldr	r1, [pc, #64]	@ (8000d1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000cde:	f7ff fe85 	bl	80009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo_left = {&htim1, TIM_CHANNEL_3};
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000ce6:	480f      	ldr	r0, [pc, #60]	@ (8000d24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000ce8:	f7ff fe80 	bl	80009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo_right = {&htim1, TIM_CHANNEL_4};
 8000cec:	220c      	movs	r2, #12
 8000cee:	490b      	ldr	r1, [pc, #44]	@ (8000d1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000cf0:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000cf2:	f7ff fe7b 	bl	80009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>
Servo servo_forward = {&htim1, TIM_CHANNEL_1};
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4908      	ldr	r1, [pc, #32]	@ (8000d1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000cfc:	f7ff fe76 	bl	80009ec <_ZN5ServoC1EP17TIM_HandleTypeDefm>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200001b0 	.word	0x200001b0
 8000d0c:	20000164 	.word	0x20000164
 8000d10:	200001fc 	.word	0x200001fc
 8000d14:	20000118 	.word	0x20000118
 8000d18:	20000258 	.word	0x20000258
 8000d1c:	20000080 	.word	0x20000080
 8000d20:	20000270 	.word	0x20000270
 8000d24:	20000288 	.word	0x20000288
 8000d28:	200002a0 	.word	0x200002a0
 8000d2c:	200002b8 	.word	0x200002b8

08000d30 <_GLOBAL__sub_I_Motor_updown>:
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff ffaf 	bl	8000c9c <_Z41__static_initialization_and_destruction_0ii>
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_Z9mission_2v>:

void mission_1(){

}

void mission_2(){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    servo_forward.write(90);
 8000d44:	215a      	movs	r1, #90	@ 0x5a
 8000d46:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <_Z9mission_2v+0x54>)
 8000d48:	f000 f84d 	bl	8000de6 <_ZN5Servo5writeEi>
	wait(5000, &htim2);
 8000d4c:	4912      	ldr	r1, [pc, #72]	@ (8000d98 <_Z9mission_2v+0x58>)
 8000d4e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d52:	f7ff ff0d 	bl	8000b70 <_Z4waitiP17TIM_HandleTypeDef>
	servo_forward.write(950);
 8000d56:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8000d5a:	480e      	ldr	r0, [pc, #56]	@ (8000d94 <_Z9mission_2v+0x54>)
 8000d5c:	f000 f843 	bl	8000de6 <_ZN5Servo5writeEi>
	wait(5000, &htim2);
 8000d60:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <_Z9mission_2v+0x58>)
 8000d62:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d66:	f7ff ff03 	bl	8000b70 <_Z4waitiP17TIM_HandleTypeDef>

	// 夾咖啡杯
	/*servo_gripper*/
	servo_gripper.write(0);  //off
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <_Z9mission_2v+0x5c>)
 8000d6e:	f000 f83a 	bl	8000de6 <_ZN5Servo5writeEi>
	wait(2000, &htim2);
 8000d72:	4909      	ldr	r1, [pc, #36]	@ (8000d98 <_Z9mission_2v+0x58>)
 8000d74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d78:	f7ff fefa 	bl	8000b70 <_Z4waitiP17TIM_HandleTypeDef>
	servo_gripper.write(300);  //open
 8000d7c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000d80:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <_Z9mission_2v+0x5c>)
 8000d82:	f000 f830 	bl	8000de6 <_ZN5Servo5writeEi>
	wait(2000, &htim2);
 8000d86:	4904      	ldr	r1, [pc, #16]	@ (8000d98 <_Z9mission_2v+0x58>)
 8000d88:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d8c:	f7ff fef0 	bl	8000b70 <_Z4waitiP17TIM_HandleTypeDef>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200002b8 	.word	0x200002b8
 8000d98:	200000cc 	.word	0x200000cc
 8000d9c:	20000270 	.word	0x20000270

08000da0 <_ZN5Servo5setupEi>:
 */

#include "stm32g4xx_hal.h"
#include "servo.h"

void Servo::setup(int startAngle){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4610      	mov	r0, r2
 8000db6:	f002 f891 	bl	8002edc <HAL_TIM_PWM_Start>
	write(startAngle);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f812 	bl	8000de6 <_ZN5Servo5writeEi>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_ZN5Servo11setMaxAngleEi>:

void Servo::setTimer(TIM_HandleTypeDef* h) {
	htim = h;
}

void Servo::setMaxAngle(int ang){
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	maxAng = ang;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	60da      	str	r2, [r3, #12]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <_ZN5Servo5writeEi>:
void Servo::setPulseRange(int min,int max){
	maxPulse = max;
	minPulse = min;
}

void Servo::write(int ang) {
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
	
	angle = ang;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	605a      	str	r2, [r3, #4]
	int pulseRange = maxPulse - minPulse;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	60bb      	str	r3, [r7, #8]
	float pulse = minPulse + (float)pulseRange * (float)ang / (float)maxAng;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e22:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e32:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pulse > maxPulse)pulse = maxPulse;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	dd08      	ble.n	8000e6a <_ZN5Servo5writeEi+0x84>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e64:	edc7 7a03 	vstr	s15, [r7, #12]
 8000e68:	e014      	b.n	8000e94 <_ZN5Servo5writeEi+0xae>
	else if(pulse < minPulse)pulse = minPulse;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	d507      	bpl.n	8000e94 <_ZN5Servo5writeEi+0xae>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e90:	edc7 7a03 	vstr	s15, [r7, #12]
//	p = pulse;
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10a      	bne.n	8000eb2 <_ZN5Servo5writeEi+0xcc>
 8000e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	ee17 2a90 	vmov	r2, s15
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34



}
 8000eb0:	e045      	b.n	8000f3e <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d10a      	bne.n	8000ed0 <_ZN5Servo5writeEi+0xea>
 8000eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	ee17 2a90 	vmov	r2, s15
 8000ecc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000ece:	e036      	b.n	8000f3e <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d10a      	bne.n	8000eee <_ZN5Servo5writeEi+0x108>
 8000ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	ee17 2a90 	vmov	r2, s15
 8000eea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000eec:	e027      	b.n	8000f3e <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	d10a      	bne.n	8000f0c <_ZN5Servo5writeEi+0x126>
 8000ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	ee17 2a90 	vmov	r2, s15
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f0a:	e018      	b.n	8000f3e <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d10a      	bne.n	8000f2a <_ZN5Servo5writeEi+0x144>
 8000f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	ee17 2a90 	vmov	r2, s15
 8000f26:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000f28:	e009      	b.n	8000f3e <_ZN5Servo5writeEi+0x158>
	__HAL_TIM_SET_COMPARE(htim, channel, int(pulse));
 8000f2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	ee17 2a90 	vmov	r2, s15
 8000f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f82:	f000 ff6d 	bl	8001e60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09c      	sub	sp, #112	@ 0x70
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	2244      	movs	r2, #68	@ 0x44
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fc3f 	bl	8004838 <memset>
  if(hi2c->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d154      	bne.n	800106e <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fc4b 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff fd00 	bl	80009e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	4a25      	ldr	r2, [pc, #148]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fec:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001014:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001022:	2304      	movs	r3, #4
 8001024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f000 fb76 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001046:	2304      	movs	r3, #4
 8001048:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800104e:	4619      	mov	r1, r3
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 8001052:	f000 fb65 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800105c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001060:	6593      	str	r3, [r2, #88]	@ 0x58
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800106e:	bf00      	nop
 8001070:	3770      	adds	r7, #112	@ 0x70
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40005400 	.word	0x40005400
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <HAL_TIM_PWM_MspInit+0x80>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10c      	bne.n	80010b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 800109c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010ae:	e022      	b.n	80010f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a15      	ldr	r2, [pc, #84]	@ (800110c <HAL_TIM_PWM_MspInit+0x88>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10c      	bne.n	80010d4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
}
 80010d2:	e010      	b.n	80010f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <HAL_TIM_PWM_MspInit+0x8c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_TIM_PWM_MspInit+0x84>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40012c00 	.word	0x40012c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40000400 	.word	0x40000400
 8001110:	40013400 	.word	0x40013400

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001124:	d113      	bne.n	800114e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	201c      	movs	r0, #28
 8001144:	f000 fab7 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001148:	201c      	movs	r0, #28
 800114a:	f000 face 	bl	80016ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <HAL_TIM_Encoder_MspInit+0x80>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d129      	bne.n	80011d2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6593      	str	r3, [r2, #88]	@ 0x58
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80011c0:	230a      	movs	r3, #10
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f000 faa7 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40000800 	.word	0x40000800
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a33      	ldr	r2, [pc, #204]	@ (80012d0 <HAL_TIM_MspPostInit+0xec>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d11c      	bne.n	8001240 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a32      	ldr	r2, [pc, #200]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800121e:	230f      	movs	r3, #15
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800122e:	2302      	movs	r3, #2
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <HAL_TIM_MspPostInit+0xf4>)
 800123a:	f000 fa71 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800123e:	e043      	b.n	80012c8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a25      	ldr	r2, [pc, #148]	@ (80012dc <HAL_TIM_MspPostInit+0xf8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d11d      	bne.n	8001286 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001262:	2340      	movs	r3, #64	@ 0x40
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001272:	2302      	movs	r3, #2
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f000 fa4e 	bl	8001720 <HAL_GPIO_Init>
}
 8001284:	e020      	b.n	80012c8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <HAL_TIM_MspPostInit+0xfc>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d11b      	bne.n	80012c8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_TIM_MspPostInit+0xf0>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a8:	23c0      	movs	r3, #192	@ 0xc0
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80012b8:	2304      	movs	r3, #4
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <HAL_TIM_MspPostInit+0xf4>)
 80012c4:	f000 fa2c 	bl	8001720 <HAL_GPIO_Init>
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	48000800 	.word	0x48000800
 80012dc:	40000400 	.word	0x40000400
 80012e0:	40013400 	.word	0x40013400

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f8c3 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}

08001342 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001346:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800134a:	f000 fb9b 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800134e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001352:	f000 fb97 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <TIM2_IRQHandler+0x10>)
 8001362:	f002 f93b 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000cc 	.word	0x200000cc

08001370 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001374:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001378:	f000 fb84 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800137c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001380:	f000 fb80 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001384:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001388:	f000 fb7c 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800138c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001390:	f000 fb78 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001394:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001398:	f000 fb74 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800139c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013a0:	f000 fb70 	bl	8001a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013cc:	480d      	ldr	r0, [pc, #52]	@ (8001404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ffea 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fa25 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
bl	main
 80013fe:	f7fe ff69 	bl	80002d4 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   r0, =_estack
 8001404:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001410:	080048c4 	.word	0x080048c4
  ldr r2, =_sbss
 8001414:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001418:	200002ec 	.word	0x200002ec

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>

0800141e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f939 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f80e 	bl	8001450 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	e001      	b.n	8001444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001440:	f7ff fd84 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001444:	79fb      	ldrb	r3, [r7, #7]

}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_InitTick+0x68>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d022      	beq.n	80014aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_InitTick+0x6c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_InitTick+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001470:	fbb1 f3f3 	udiv	r3, r1, r3
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f944 	bl	8001706 <HAL_SYSTICK_Config>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10f      	bne.n	80014a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	d809      	bhi.n	800149e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148a:	2200      	movs	r2, #0
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	f04f 30ff 	mov.w	r0, #4294967295
 8001492:	f000 f910 	bl	80016b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0x70>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e007      	b.n	80014ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e004      	b.n	80014ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e001      	b.n	80014ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000008 	.word	0x20000008

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_IncTick+0x1c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a03      	ldr	r2, [pc, #12]	@ (80014e0 <HAL_IncTick+0x1c>)
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	200002e8 	.word	0x200002e8
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200002e8 	.word	0x200002e8

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff40 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa4 	bl	800165c <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800172e:	e15a      	b.n	80019e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 814c 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a6 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001898:	4a5a      	ldr	r2, [pc, #360]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a0:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_GPIO_Init+0x2e4>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ac:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018d6:	d01f      	beq.n	8001918 <HAL_GPIO_Init+0x1f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4c      	ldr	r2, [pc, #304]	@ (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d019      	beq.n	8001914 <HAL_GPIO_Init+0x1f4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1f0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a49      	ldr	r2, [pc, #292]	@ (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a48      	ldr	r2, [pc, #288]	@ (8001a1c <HAL_GPIO_Init+0x2fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1e4>
 8001900:	2305      	movs	r3, #5
 8001902:	e00a      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001904:	2306      	movs	r3, #6
 8001906:	e008      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001908:	2304      	movs	r3, #4
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 800190c:	2303      	movs	r3, #3
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001918:	2300      	movs	r3, #0
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192a:	4937      	ldr	r1, [pc, #220]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001962:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001986:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019da:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f ae9d 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	48001000 	.word	0x48001000
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f898 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e08d      	b.n	8001be2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fa5a 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	@ 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d108      	bne.n	8001b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	e007      	b.n	8001b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69d9      	ldr	r1, [r3, #28]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d138      	bne.n	8001c72 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e032      	b.n	8001c74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2224      	movs	r2, #36	@ 0x24
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6819      	ldr	r1, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
  }
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d139      	bne.n	8001d0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e033      	b.n	8001d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	@ 0x24
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d141      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d26:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d32:	d131      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d34:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d3a:	4a46      	ldr	r2, [pc, #280]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d44:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d4c:	4a41      	ldr	r2, [pc, #260]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2232      	movs	r2, #50	@ 0x32
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	0c9b      	lsrs	r3, r3, #18
 8001d66:	3301      	adds	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6a:	e002      	b.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d7e:	d102      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f2      	bne.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d86:	4b33      	ldr	r3, [pc, #204]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d92:	d158      	bne.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e057      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d98:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001da8:	e04d      	b.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db0:	d141      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db2:	4b28      	ldr	r3, [pc, #160]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dbe:	d131      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc0:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001de0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2232      	movs	r2, #50	@ 0x32
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9b      	lsrs	r3, r3, #18
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df6:	e002      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0a:	d102      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f2      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1e:	d112      	bne.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e011      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e34:	e007      	b.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e36:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40007000 	.word	0x40007000
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	431bde83 	.word	0x431bde83

08001e60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6e:	6093      	str	r3, [r2, #8]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e2fe      	b.n	8002490 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9e:	4b97      	ldr	r3, [pc, #604]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea8:	4b94      	ldr	r3, [pc, #592]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	2b0c      	cmp	r3, #12
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3e>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e2d9      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b85      	ldr	r3, [pc, #532]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a84      	ldr	r2, [pc, #528]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b7f      	ldr	r3, [pc, #508]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7e      	ldr	r2, [pc, #504]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7b      	ldr	r2, [pc, #492]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b78      	ldr	r3, [pc, #480]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a77      	ldr	r2, [pc, #476]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b75      	ldr	r3, [pc, #468]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a74      	ldr	r2, [pc, #464]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fad6 	bl	80014e8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fad2 	bl	80014e8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e29e      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff fac2 	bl	80014e8 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fabe 	bl	80014e8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e28a      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	4b60      	ldr	r3, [pc, #384]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d075      	beq.n	8002082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b59      	ldr	r3, [pc, #356]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa0:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x136>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_OscConfig+0x13c>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11f      	bne.n	8001ffc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x154>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e25d      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	061b      	lsls	r3, r3, #24
 8001fe2:	4946      	ldr	r1, [pc, #280]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fe8:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <HAL_RCC_OscConfig+0x280>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fa2f 	bl	8001450 <HAL_InitTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d043      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e249      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3c      	ldr	r2, [pc, #240]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fa6a 	bl	80014e8 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7ff fa66 	bl	80014e8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e232      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202a:	4b34      	ldr	r3, [pc, #208]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	492d      	ldr	r1, [pc, #180]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	e01a      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204c:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fa46 	bl	80014e8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fa42 	bl	80014e8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e20e      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002072:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1e0>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d041      	beq.n	8002112 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 8002098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800209c:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff fa1f 	bl	80014e8 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff fa1b 	bl	80014e8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1e7      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ef      	beq.n	80020ae <HAL_RCC_OscConfig+0x22e>
 80020ce:	e020      	b.n	8002112 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_RCC_OscConfig+0x27c>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff fa02 	bl	80014e8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e6:	e00d      	b.n	8002104 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e8:	f7ff f9fe 	bl	80014e8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d906      	bls.n	8002104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1ca      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002104:	4b8c      	ldr	r3, [pc, #560]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ea      	bne.n	80020e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a6 	beq.w	800226c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002124:	4b84      	ldr	r3, [pc, #528]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x2b4>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x2b6>
 8002134:	2300      	movs	r3, #0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a7e      	ldr	r2, [pc, #504]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b7c      	ldr	r3, [pc, #496]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002156:	4b79      	ldr	r3, [pc, #484]	@ (800233c <HAL_RCC_OscConfig+0x4bc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002162:	4b76      	ldr	r3, [pc, #472]	@ (800233c <HAL_RCC_OscConfig+0x4bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	@ (800233c <HAL_RCC_OscConfig+0x4bc>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7ff f9bb 	bl	80014e8 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7ff f9b7 	bl	80014e8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e183      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_RCC_OscConfig+0x4bc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d108      	bne.n	80021ae <HAL_RCC_OscConfig+0x32e>
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	4a65      	ldr	r2, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ac:	e024      	b.n	80021f8 <HAL_RCC_OscConfig+0x378>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d110      	bne.n	80021d8 <HAL_RCC_OscConfig+0x358>
 80021b6:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d6:	e00f      	b.n	80021f8 <HAL_RCC_OscConfig+0x378>
 80021d8:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f972 	bl	80014e8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f96e 	bl	80014e8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e138      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ed      	beq.n	8002208 <HAL_RCC_OscConfig+0x388>
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff f95b 	bl	80014e8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff f957 	bl	80014e8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e121      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ed      	bne.n	8002236 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	4a34      	ldr	r2, [pc, #208]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01c      	beq.n	80022ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002286:	4a2c      	ldr	r2, [pc, #176]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff f92a 	bl	80014e8 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002298:	f7ff f926 	bl	80014e8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0f2      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCC_OscConfig+0x418>
 80022b8:	e01b      	b.n	80022f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff f90d 	bl	80014e8 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d2:	f7ff f909 	bl	80014e8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0d5      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ef      	bne.n	80022d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80c9 	beq.w	800248e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b0c      	cmp	r3, #12
 8002306:	f000 8083 	beq.w	8002410 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d15e      	bne.n	80023d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <HAL_RCC_OscConfig+0x4b8>)
 8002318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7ff f8e3 	bl	80014e8 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002324:	e00c      	b.n	8002340 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff f8df 	bl	80014e8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d905      	bls.n	8002340 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0ab      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ec      	bne.n	8002326 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234c:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4b52      	ldr	r3, [pc, #328]	@ (800249c <HAL_RCC_OscConfig+0x61c>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6a11      	ldr	r1, [r2, #32]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800235c:	3a01      	subs	r2, #1
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002366:	0212      	lsls	r2, r2, #8
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800236e:	0852      	lsrs	r2, r2, #1
 8002370:	3a01      	subs	r2, #1
 8002372:	0552      	lsls	r2, r2, #21
 8002374:	4311      	orrs	r1, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800237a:	0852      	lsrs	r2, r2, #1
 800237c:	3a01      	subs	r2, #1
 800237e:	0652      	lsls	r2, r2, #25
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002386:	06d2      	lsls	r2, r2, #27
 8002388:	430a      	orrs	r2, r1
 800238a:	4943      	ldr	r1, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800239c:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f89e 	bl	80014e8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f89a 	bl	80014e8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e066      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	4b35      	ldr	r3, [pc, #212]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x530>
 80023ce:	e05e      	b.n	800248e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a30      	ldr	r2, [pc, #192]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f884 	bl	80014e8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f880 	bl	80014e8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04c      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f6:	4b28      	ldr	r3, [pc, #160]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002402:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4924      	ldr	r1, [pc, #144]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 8002408:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_RCC_OscConfig+0x620>)
 800240a:	4013      	ands	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
 800240e:	e03e      	b.n	800248e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e039      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800241c:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_RCC_OscConfig+0x618>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	429a      	cmp	r2, r3
 800242e:	d12c      	bne.n	800248a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	3b01      	subs	r3, #1
 800243c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d123      	bne.n	800248a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d11b      	bne.n	800248a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d113      	bne.n	800248a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	3b01      	subs	r3, #1
 8002470:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d109      	bne.n	800248a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	019f800c 	.word	0x019f800c
 80024a0:	feeefffc 	.word	0xfeeefffc

080024a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e11e      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b91      	ldr	r3, [pc, #580]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d910      	bls.n	80024ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 020f 	bic.w	r2, r3, #15
 80024d2:	498c      	ldr	r1, [pc, #560]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b8a      	ldr	r3, [pc, #552]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e106      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d073      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d129      	bne.n	8002554 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002500:	4b81      	ldr	r3, [pc, #516]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0f4      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002510:	f000 f966 	bl	80027e0 <RCC_GetSysClockFreqFromPLLSource>
 8002514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4a7c      	ldr	r2, [pc, #496]	@ (800270c <HAL_RCC_ClockConfig+0x268>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d93f      	bls.n	800259e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800251e:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002532:	2b00      	cmp	r3, #0
 8002534:	d033      	beq.n	800259e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d12f      	bne.n	800259e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800253e:	4b72      	ldr	r3, [pc, #456]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002546:	4a70      	ldr	r2, [pc, #448]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800254c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e024      	b.n	800259e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255c:	4b6a      	ldr	r3, [pc, #424]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0c6      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b66      	ldr	r3, [pc, #408]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0be      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800257c:	f000 f8ce 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8002580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4a61      	ldr	r2, [pc, #388]	@ (800270c <HAL_RCC_ClockConfig+0x268>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d909      	bls.n	800259e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800258a:	4b5f      	ldr	r3, [pc, #380]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002592:	4a5d      	ldr	r2, [pc, #372]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002598:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4957      	ldr	r1, [pc, #348]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe ff9a 	bl	80014e8 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe ff96 	bl	80014e8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e095      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a42      	ldr	r2, [pc, #264]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80025fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002602:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002610:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800261a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800261e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4936      	ldr	r1, [pc, #216]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
 8002632:	e008      	b.n	8002646 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d105      	bne.n	8002646 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800263a:	4b33      	ldr	r3, [pc, #204]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4a32      	ldr	r2, [pc, #200]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 8002640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002644:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002646:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d21d      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002654:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 020f 	bic.w	r2, r3, #15
 800265c:	4929      	ldr	r1, [pc, #164]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002664:	f7fe ff40 	bl	80014e8 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7fe ff3c 	bl	80014e8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e03b      	b.n	80026fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d1ed      	bne.n	800266c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4917      	ldr	r1, [pc, #92]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490f      	ldr	r1, [pc, #60]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ce:	f000 f825 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490c      	ldr	r1, [pc, #48]	@ (8002710 <HAL_RCC_ClockConfig+0x26c>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <HAL_RCC_ClockConfig+0x270>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RCC_ClockConfig+0x274>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe feac 	bl	8001450 <HAL_InitTick>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	04c4b400 	.word	0x04c4b400
 8002710:	080048a8 	.word	0x080048a8
 8002714:	20000004 	.word	0x20000004
 8002718:	20000008 	.word	0x20000008

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002722:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b04      	cmp	r3, #4
 800272c:	d102      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800272e:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e047      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002734:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d102      	bne.n	8002746 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002740:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e03e      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d136      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800275c:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3301      	adds	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d10c      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002770:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	68d2      	ldr	r2, [r2, #12]
 800277c:	0a12      	lsrs	r2, r2, #8
 800277e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
      break;
 8002788:	e00c      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800278a:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4a10      	ldr	r2, [pc, #64]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	0a12      	lsrs	r2, r2, #8
 8002798:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
      break;
 80027a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0e5b      	lsrs	r3, r3, #25
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	3301      	adds	r3, #1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e001      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027c4:	693b      	ldr	r3, [r7, #16]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200

080027e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3301      	adds	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d10c      	bne.n	800281e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800280e:	68d2      	ldr	r2, [r2, #12]
 8002810:	0a12      	lsrs	r2, r2, #8
 8002812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
    break;
 800281c:	e00c      	b.n	8002838 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281e:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	4a0e      	ldr	r2, [pc, #56]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002828:	68d2      	ldr	r2, [r2, #12]
 800282a:	0a12      	lsrs	r2, r2, #8
 800282c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    break;
 8002836:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0e5b      	lsrs	r3, r3, #25
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002852:	687b      	ldr	r3, [r7, #4]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	007a1200 	.word	0x007a1200
 8002868:	00f42400 	.word	0x00f42400

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002874:	2300      	movs	r3, #0
 8002876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002878:	2300      	movs	r3, #0
 800287a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8098 	beq.w	80029ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288e:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b40      	ldr	r3, [pc, #256]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	4a3f      	ldr	r2, [pc, #252]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a6:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b6:	4b3a      	ldr	r3, [pc, #232]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a39      	ldr	r2, [pc, #228]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fe11 	bl	80014e8 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c8:	e009      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ca:	f7fe fe0d 	bl	80014e8 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d902      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	74fb      	strb	r3, [r7, #19]
        break;
 80028dc:	e005      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028de:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ef      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d159      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01e      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	d019      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800290c:	4b23      	ldr	r3, [pc, #140]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002916:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002918:	4b20      	ldr	r3, [pc, #128]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002928:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002938:	4a18      	ldr	r2, [pc, #96]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fdcd 	bl	80014e8 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002950:	e00b      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fdc9 	bl	80014e8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d902      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	74fb      	strb	r3, [r7, #19]
            break;
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ec      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10b      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002994:	e008      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002996:	7cfb      	ldrb	r3, [r7, #19]
 8002998:	74bb      	strb	r3, [r7, #18]
 800299a:	e005      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800299c:	40021000 	.word	0x40021000
 80029a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a8:	7c7b      	ldrb	r3, [r7, #17]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	4aa5      	ldr	r2, [pc, #660]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	499c      	ldr	r1, [pc, #624]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e8:	4b97      	ldr	r3, [pc, #604]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	f023 020c 	bic.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4994      	ldr	r1, [pc, #592]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a0a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	498b      	ldr	r1, [pc, #556]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a2c:	4b86      	ldr	r3, [pc, #536]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	4983      	ldr	r1, [pc, #524]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	497a      	ldr	r1, [pc, #488]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a70:	4b75      	ldr	r3, [pc, #468]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4972      	ldr	r1, [pc, #456]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a92:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4969      	ldr	r1, [pc, #420]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab4:	4b64      	ldr	r3, [pc, #400]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4961      	ldr	r1, [pc, #388]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	4958      	ldr	r1, [pc, #352]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af8:	4b53      	ldr	r3, [pc, #332]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	4950      	ldr	r1, [pc, #320]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b30:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	4942      	ldr	r1, [pc, #264]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	4b3d      	ldr	r3, [pc, #244]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a3c      	ldr	r2, [pc, #240]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b68:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	4934      	ldr	r1, [pc, #208]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba0:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	4926      	ldr	r1, [pc, #152]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	4918      	ldr	r1, [pc, #96]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf8:	4b13      	ldr	r3, [pc, #76]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c10:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	490a      	ldr	r1, [pc, #40]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e049      	b.n	8002cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fa4e 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f001 f82c 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d001      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e04a      	b.n	8002daa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d018      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x6c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d3e:	d013      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x6c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xc0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x6c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x6c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x6c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a19      	ldr	r2, [pc, #100]	@ (8002dc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d115      	bne.n	8002d94 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d015      	beq.n	8002da6 <HAL_TIM_Base_Start_IT+0xaa>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d80:	d011      	beq.n	8002da6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	e008      	b.n	8002da6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e000      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40013400 	.word	0x40013400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	00010007 	.word	0x00010007

08002dd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <HAL_TIM_Base_Stop_IT+0x48>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_Base_Stop_IT+0x48>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e049      	b.n	8002ed4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe f915 	bl	8001084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f000 ff3b 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_TIM_PWM_Start+0x24>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e03c      	b.n	8002f7a <HAL_TIM_PWM_Start+0x9e>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d109      	bne.n	8002f1a <HAL_TIM_PWM_Start+0x3e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e02f      	b.n	8002f7a <HAL_TIM_PWM_Start+0x9e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d109      	bne.n	8002f34 <HAL_TIM_PWM_Start+0x58>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e022      	b.n	8002f7a <HAL_TIM_PWM_Start+0x9e>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d109      	bne.n	8002f4e <HAL_TIM_PWM_Start+0x72>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e015      	b.n	8002f7a <HAL_TIM_PWM_Start+0x9e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d109      	bne.n	8002f68 <HAL_TIM_PWM_Start+0x8c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e008      	b.n	8002f7a <HAL_TIM_PWM_Start+0x9e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e097      	b.n	80030b2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_PWM_Start+0xb6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f90:	e023      	b.n	8002fda <HAL_TIM_PWM_Start+0xfe>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0xc6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa0:	e01b      	b.n	8002fda <HAL_TIM_PWM_Start+0xfe>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0xd6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb0:	e013      	b.n	8002fda <HAL_TIM_PWM_Start+0xfe>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d104      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0xe6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fc0:	e00b      	b.n	8002fda <HAL_TIM_PWM_Start+0xfe>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0xf6>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd0:	e003      	b.n	8002fda <HAL_TIM_PWM_Start+0xfe>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 faae 	bl	8004544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <HAL_TIM_PWM_Start+0x1e0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_TIM_PWM_Start+0x13e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a32      	ldr	r2, [pc, #200]	@ (80030c0 <HAL_TIM_PWM_Start+0x1e4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIM_PWM_Start+0x13e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a30      	ldr	r2, [pc, #192]	@ (80030c4 <HAL_TIM_PWM_Start+0x1e8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_TIM_PWM_Start+0x13e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2f      	ldr	r2, [pc, #188]	@ (80030c8 <HAL_TIM_PWM_Start+0x1ec>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIM_PWM_Start+0x13e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2d      	ldr	r2, [pc, #180]	@ (80030cc <HAL_TIM_PWM_Start+0x1f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <HAL_TIM_PWM_Start+0x142>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_TIM_PWM_Start+0x144>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a20      	ldr	r2, [pc, #128]	@ (80030bc <HAL_TIM_PWM_Start+0x1e0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_TIM_PWM_Start+0x194>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d013      	beq.n	8003070 <HAL_TIM_PWM_Start+0x194>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <HAL_TIM_PWM_Start+0x1f4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_TIM_PWM_Start+0x194>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <HAL_TIM_PWM_Start+0x1f8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_TIM_PWM_Start+0x194>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <HAL_TIM_PWM_Start+0x1e4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIM_PWM_Start+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <HAL_TIM_PWM_Start+0x1e8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d115      	bne.n	800309c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d015      	beq.n	80030ae <HAL_TIM_PWM_Start+0x1d2>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003088:	d011      	beq.n	80030ae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e008      	b.n	80030ae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e000      	b.n	80030b0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40013400 	.word	0x40013400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	00010007 	.word	0x00010007

080030dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_TIM_PWM_Start_IT+0x28>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e03c      	b.n	800317e <HAL_TIM_PWM_Start_IT+0xa2>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d109      	bne.n	800311e <HAL_TIM_PWM_Start_IT+0x42>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e02f      	b.n	800317e <HAL_TIM_PWM_Start_IT+0xa2>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d109      	bne.n	8003138 <HAL_TIM_PWM_Start_IT+0x5c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e022      	b.n	800317e <HAL_TIM_PWM_Start_IT+0xa2>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d109      	bne.n	8003152 <HAL_TIM_PWM_Start_IT+0x76>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e015      	b.n	800317e <HAL_TIM_PWM_Start_IT+0xa2>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d109      	bne.n	800316c <HAL_TIM_PWM_Start_IT+0x90>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <HAL_TIM_PWM_Start_IT+0xa2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0e2      	b.n	800334c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start_IT+0xba>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003194:	e023      	b.n	80031de <HAL_TIM_PWM_Start_IT+0x102>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start_IT+0xca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a4:	e01b      	b.n	80031de <HAL_TIM_PWM_Start_IT+0x102>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start_IT+0xda>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b4:	e013      	b.n	80031de <HAL_TIM_PWM_Start_IT+0x102>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start_IT+0xea>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c4:	e00b      	b.n	80031de <HAL_TIM_PWM_Start_IT+0x102>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start_IT+0xfa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d4:	e003      	b.n	80031de <HAL_TIM_PWM_Start_IT+0x102>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d841      	bhi.n	8003268 <HAL_TIM_PWM_Start_IT+0x18c>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <HAL_TIM_PWM_Start_IT+0x110>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003269 	.word	0x08003269
 80031f4:	08003269 	.word	0x08003269
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003233 	.word	0x08003233
 8003200:	08003269 	.word	0x08003269
 8003204:	08003269 	.word	0x08003269
 8003208:	08003269 	.word	0x08003269
 800320c:	08003245 	.word	0x08003245
 8003210:	08003269 	.word	0x08003269
 8003214:	08003269 	.word	0x08003269
 8003218:	08003269 	.word	0x08003269
 800321c:	08003257 	.word	0x08003257
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0202 	orr.w	r2, r2, #2
 800322e:	60da      	str	r2, [r3, #12]
      break;
 8003230:	e01d      	b.n	800326e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0204 	orr.w	r2, r2, #4
 8003240:	60da      	str	r2, [r3, #12]
      break;
 8003242:	e014      	b.n	800326e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0208 	orr.w	r2, r2, #8
 8003252:	60da      	str	r2, [r3, #12]
      break;
 8003254:	e00b      	b.n	800326e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0210 	orr.w	r2, r2, #16
 8003264:	60da      	str	r2, [r3, #12]
      break;
 8003266:	e002      	b.n	800326e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	bf00      	nop
  }

  if (status == HAL_OK)
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d16a      	bne.n	800334a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f961 	bl	8004544 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <HAL_TIM_PWM_Start_IT+0x278>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a31      	ldr	r2, [pc, #196]	@ (8003358 <HAL_TIM_PWM_Start_IT+0x27c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_TIM_PWM_Start_IT+0x280>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <HAL_TIM_PWM_Start_IT+0x284>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_PWM_Start_IT+0x1d8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_TIM_PWM_Start_IT+0x288>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_PWM_Start_IT+0x1dc>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_TIM_PWM_Start_IT+0x1de>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a20      	ldr	r2, [pc, #128]	@ (8003354 <HAL_TIM_PWM_Start_IT+0x278>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d018      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x22e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e0:	d013      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x22e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a20      	ldr	r2, [pc, #128]	@ (8003368 <HAL_TIM_PWM_Start_IT+0x28c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x22e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_TIM_PWM_Start_IT+0x290>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x22e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <HAL_TIM_PWM_Start_IT+0x27c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_TIM_PWM_Start_IT+0x22e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <HAL_TIM_PWM_Start_IT+0x280>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d115      	bne.n	8003336 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <HAL_TIM_PWM_Start_IT+0x294>)
 8003312:	4013      	ands	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d015      	beq.n	8003348 <HAL_TIM_PWM_Start_IT+0x26c>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003322:	d011      	beq.n	8003348 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	e008      	b.n	8003348 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e000      	b.n	800334a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003348:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40012c00 	.word	0x40012c00
 8003358:	40013400 	.word	0x40013400
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	00010007 	.word	0x00010007

08003374 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e097      	b.n	80034b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fd fedd 	bl	800115c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f000 fc8d 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4313      	orrs	r3, r2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003414:	f023 030c 	bic.w	r3, r3, #12
 8003418:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003420:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	4313      	orrs	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	011a      	lsls	r2, r3, #4
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	031b      	lsls	r3, r3, #12
 8003444:	4313      	orrs	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4313      	orrs	r3, r2
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034f6:	7b7b      	ldrb	r3, [r7, #13]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e069      	b.n	80035d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003510:	e031      	b.n	8003576 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d110      	bne.n	800353a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003518:	7bbb      	ldrb	r3, [r7, #14]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e055      	b.n	80035d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003538:	e01d      	b.n	8003576 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d108      	bne.n	8003552 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003546:	7b7b      	ldrb	r3, [r7, #13]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800354c:	7b3b      	ldrb	r3, [r7, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e03e      	b.n	80035d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_TIM_Encoder_Start+0xc4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d008      	beq.n	8003594 <HAL_TIM_Encoder_Start+0xd4>
 8003582:	e00f      	b.n	80035a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 ffd9 	bl	8004544 <TIM_CCxChannelCmd>
      break;
 8003592:	e016      	b.n	80035c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	2104      	movs	r1, #4
 800359c:	4618      	mov	r0, r3
 800359e:	f000 ffd1 	bl	8004544 <TIM_CCxChannelCmd>
      break;
 80035a2:	e00e      	b.n	80035c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2201      	movs	r2, #1
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 ffc9 	bl	8004544 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	2104      	movs	r1, #4
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 ffc2 	bl	8004544 <TIM_CCxChannelCmd>
      break;
 80035c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fb40 	bl	8003cac <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fb32 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fb43 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0204 	mvn.w	r2, #4
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fb1a 	bl	8003cac <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fb0c 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fb1d 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0208 	mvn.w	r2, #8
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 faf4 	bl	8003cac <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fae6 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 faf7 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 face 	bl	8003cac <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fac0 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fad1 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fa2e 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800376e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f001 f825 	bl	80047c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f001 f81d 	bl	80047d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa8b 	bl	8003cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0220 	mvn.w	r2, #32
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 ffe5 	bl	80047ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00c      	beq.n	8003806 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fff1 	bl	80047e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00c      	beq.n	800382a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 ffe9 	bl	80047fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 ffe1 	bl	8004810 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 ffd9 	bl	8004824 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003896:	2302      	movs	r3, #2
 8003898:	e0ff      	b.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b14      	cmp	r3, #20
 80038a6:	f200 80f0 	bhi.w	8003a8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038aa:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003a8b 	.word	0x08003a8b
 80038b8:	08003a8b 	.word	0x08003a8b
 80038bc:	08003a8b 	.word	0x08003a8b
 80038c0:	08003945 	.word	0x08003945
 80038c4:	08003a8b 	.word	0x08003a8b
 80038c8:	08003a8b 	.word	0x08003a8b
 80038cc:	08003a8b 	.word	0x08003a8b
 80038d0:	08003987 	.word	0x08003987
 80038d4:	08003a8b 	.word	0x08003a8b
 80038d8:	08003a8b 	.word	0x08003a8b
 80038dc:	08003a8b 	.word	0x08003a8b
 80038e0:	080039c7 	.word	0x080039c7
 80038e4:	08003a8b 	.word	0x08003a8b
 80038e8:	08003a8b 	.word	0x08003a8b
 80038ec:	08003a8b 	.word	0x08003a8b
 80038f0:	08003a09 	.word	0x08003a09
 80038f4:	08003a8b 	.word	0x08003a8b
 80038f8:	08003a8b 	.word	0x08003a8b
 80038fc:	08003a8b 	.word	0x08003a8b
 8003900:	08003a49 	.word	0x08003a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa88 	bl	8003e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0208 	orr.w	r2, r2, #8
 800391e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	619a      	str	r2, [r3, #24]
      break;
 8003942:	e0a5      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 faf8 	bl	8003f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	619a      	str	r2, [r3, #24]
      break;
 8003984:	e084      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fb61 	bl	8004054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0208 	orr.w	r2, r2, #8
 80039a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0204 	bic.w	r2, r2, #4
 80039b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69d9      	ldr	r1, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	61da      	str	r2, [r3, #28]
      break;
 80039c4:	e064      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fbc9 	bl	8004164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	021a      	lsls	r2, r3, #8
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	61da      	str	r2, [r3, #28]
      break;
 8003a06:	e043      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc32 	bl	8004278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0208 	orr.w	r2, r2, #8
 8003a22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a46:	e023      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fc76 	bl	8004340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	021a      	lsls	r2, r3, #8
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003a88:	e002      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e0de      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x1da>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003ade:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a63      	ldr	r2, [pc, #396]	@ (8003c88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f000 80a9 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b00:	4a61      	ldr	r2, [pc, #388]	@ (8003c88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f200 80ae 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b08:	4a60      	ldr	r2, [pc, #384]	@ (8003c8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f000 80a1 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b10:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	f200 80a6 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b18:	4a5d      	ldr	r2, [pc, #372]	@ (8003c90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	f000 8099 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b20:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	f200 809e 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b28:	4a5a      	ldr	r2, [pc, #360]	@ (8003c94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	f000 8091 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b30:	4a58      	ldr	r2, [pc, #352]	@ (8003c94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	f200 8096 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b3c:	f000 8089 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b44:	f200 808e 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b4c:	d03e      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0x128>
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b52:	f200 8087 	bhi.w	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5a:	f000 8086 	beq.w	8003c6a <HAL_TIM_ConfigClockSource+0x1c6>
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b62:	d87f      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b64:	2b70      	cmp	r3, #112	@ 0x70
 8003b66:	d01a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0xfa>
 8003b68:	2b70      	cmp	r3, #112	@ 0x70
 8003b6a:	d87b      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b6c:	2b60      	cmp	r3, #96	@ 0x60
 8003b6e:	d050      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x16e>
 8003b70:	2b60      	cmp	r3, #96	@ 0x60
 8003b72:	d877      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b74:	2b50      	cmp	r3, #80	@ 0x50
 8003b76:	d03c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x14e>
 8003b78:	2b50      	cmp	r3, #80	@ 0x50
 8003b7a:	d873      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d058      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x18e>
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d86f      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b84:	2b30      	cmp	r3, #48	@ 0x30
 8003b86:	d064      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b88:	2b30      	cmp	r3, #48	@ 0x30
 8003b8a:	d86b      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d060      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d867      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d05c      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d05a      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0x1ae>
 8003b9c:	e062      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bae:	f000 fca9 	bl	8004504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	609a      	str	r2, [r3, #8]
      break;
 8003bca:	e04f      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bdc:	f000 fc92 	bl	8004504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bee:	609a      	str	r2, [r3, #8]
      break;
 8003bf0:	e03c      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f000 fc04 	bl	800440c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2150      	movs	r1, #80	@ 0x50
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fc5d 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003c10:	e02c      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f000 fc23 	bl	800446a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2160      	movs	r1, #96	@ 0x60
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fc4d 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003c30:	e01c      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f000 fbe4 	bl	800440c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2140      	movs	r1, #64	@ 0x40
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fc3d 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003c50:	e00c      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f000 fc34 	bl	80044ca <TIM_ITRx_SetConfig>
      break;
 8003c62:	e003      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e000      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	00100070 	.word	0x00100070
 8003c8c:	00100040 	.word	0x00100040
 8003c90:	00100030 	.word	0x00100030
 8003c94:	00100020 	.word	0x00100020

08003c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a42      	ldr	r2, [pc, #264]	@ (8003e04 <TIM_Base_SetConfig+0x11c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00f      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d06:	d00b      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e08 <TIM_Base_SetConfig+0x120>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3e      	ldr	r2, [pc, #248]	@ (8003e0c <TIM_Base_SetConfig+0x124>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e10 <TIM_Base_SetConfig+0x128>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a33      	ldr	r2, [pc, #204]	@ (8003e04 <TIM_Base_SetConfig+0x11c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a30      	ldr	r2, [pc, #192]	@ (8003e08 <TIM_Base_SetConfig+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e0c <TIM_Base_SetConfig+0x124>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <TIM_Base_SetConfig+0x128>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e14 <TIM_Base_SetConfig+0x12c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <TIM_Base_SetConfig+0x130>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e1c <TIM_Base_SetConfig+0x134>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <TIM_Base_SetConfig+0x11c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <TIM_Base_SetConfig+0xe8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <TIM_Base_SetConfig+0x128>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_Base_SetConfig+0xe8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a16      	ldr	r2, [pc, #88]	@ (8003e14 <TIM_Base_SetConfig+0x12c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_Base_SetConfig+0xe8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <TIM_Base_SetConfig+0x130>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_Base_SetConfig+0xe8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <TIM_Base_SetConfig+0x134>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d103      	bne.n	8003dd8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f023 0201 	bic.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]
  }
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0302 	bic.w	r3, r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <TIM_OC1_SetConfig+0x10c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_OC1_SetConfig+0x80>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <TIM_OC1_SetConfig+0x110>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_OC1_SetConfig+0x80>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <TIM_OC1_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_OC1_SetConfig+0x80>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a29      	ldr	r2, [pc, #164]	@ (8003f38 <TIM_OC1_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_OC1_SetConfig+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a28      	ldr	r2, [pc, #160]	@ (8003f3c <TIM_OC1_SetConfig+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10c      	bne.n	8003eba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0308 	bic.w	r3, r3, #8
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <TIM_OC1_SetConfig+0x10c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xc2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f30 <TIM_OC1_SetConfig+0x110>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xc2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <TIM_OC1_SetConfig+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xc2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <TIM_OC1_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_OC1_SetConfig+0xc2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <TIM_OC1_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 0210 	bic.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a28      	ldr	r2, [pc, #160]	@ (8004040 <TIM_OC2_SetConfig+0x100>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x6c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a27      	ldr	r2, [pc, #156]	@ (8004044 <TIM_OC2_SetConfig+0x104>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10d      	bne.n	8003fc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <TIM_OC2_SetConfig+0x100>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00f      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xb0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <TIM_OC2_SetConfig+0x104>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <TIM_OC2_SetConfig+0x108>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800404c <TIM_OC2_SetConfig+0x10c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC2_SetConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a19      	ldr	r2, [pc, #100]	@ (8004050 <TIM_OC2_SetConfig+0x110>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d113      	bne.n	8004018 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a27      	ldr	r2, [pc, #156]	@ (8004150 <TIM_OC3_SetConfig+0xfc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x6a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a26      	ldr	r2, [pc, #152]	@ (8004154 <TIM_OC3_SetConfig+0x100>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10d      	bne.n	80040da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004150 <TIM_OC3_SetConfig+0xfc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_OC3_SetConfig+0xae>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <TIM_OC3_SetConfig+0x100>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_OC3_SetConfig+0xae>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <TIM_OC3_SetConfig+0x104>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_OC3_SetConfig+0xae>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <TIM_OC3_SetConfig+0x108>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC3_SetConfig+0xae>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <TIM_OC3_SetConfig+0x10c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d113      	bne.n	800412a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	031b      	lsls	r3, r3, #12
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a28      	ldr	r2, [pc, #160]	@ (8004264 <TIM_OC4_SetConfig+0x100>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_OC4_SetConfig+0x6c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a27      	ldr	r2, [pc, #156]	@ (8004268 <TIM_OC4_SetConfig+0x104>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10d      	bne.n	80041ec <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004264 <TIM_OC4_SetConfig+0x100>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_OC4_SetConfig+0xb0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <TIM_OC4_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_OC4_SetConfig+0xb0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <TIM_OC4_SetConfig+0x108>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_OC4_SetConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1a      	ldr	r2, [pc, #104]	@ (8004270 <TIM_OC4_SetConfig+0x10c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC4_SetConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <TIM_OC4_SetConfig+0x110>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800421a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004222:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a17      	ldr	r2, [pc, #92]	@ (800432c <TIM_OC5_SetConfig+0xb4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00f      	beq.n	80042f2 <TIM_OC5_SetConfig+0x7a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <TIM_OC5_SetConfig+0xb8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <TIM_OC5_SetConfig+0x7a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a15      	ldr	r2, [pc, #84]	@ (8004334 <TIM_OC5_SetConfig+0xbc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_OC5_SetConfig+0x7a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a14      	ldr	r2, [pc, #80]	@ (8004338 <TIM_OC5_SetConfig+0xc0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_OC5_SetConfig+0x7a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a13      	ldr	r2, [pc, #76]	@ (800433c <TIM_OC5_SetConfig+0xc4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d109      	bne.n	8004306 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	051b      	lsls	r3, r3, #20
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <TIM_OC6_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00f      	beq.n	80043bc <TIM_OC6_SetConfig+0x7c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <TIM_OC6_SetConfig+0xbc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_OC6_SetConfig+0x7c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <TIM_OC6_SetConfig+0xc0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_OC6_SetConfig+0x7c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <TIM_OC6_SetConfig+0xc4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC6_SetConfig+0x7c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a14      	ldr	r2, [pc, #80]	@ (8004408 <TIM_OC6_SetConfig+0xc8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d109      	bne.n	80043d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 030a 	bic.w	r3, r3, #10
 8004448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0210 	bic.w	r2, r3, #16
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	031b      	lsls	r3, r3, #12
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800451e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	431a      	orrs	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2201      	movs	r2, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e065      	b.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d018      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d013      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a17      	ldr	r2, [pc, #92]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a13      	ldr	r2, [pc, #76]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10c      	bne.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40014000 	.word	0x40014000

08004694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e073      	b.n	8004798 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d11c      	bne.n	8004786 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	051b      	lsls	r3, r3, #20
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40013400 	.word	0x40013400

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <memset>:
 8004838:	4402      	add	r2, r0
 800483a:	4603      	mov	r3, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4d0d      	ldr	r5, [pc, #52]	@ (8004880 <__libc_init_array+0x38>)
 800484c:	4c0d      	ldr	r4, [pc, #52]	@ (8004884 <__libc_init_array+0x3c>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	2600      	movs	r6, #0
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	4d0b      	ldr	r5, [pc, #44]	@ (8004888 <__libc_init_array+0x40>)
 800485a:	4c0c      	ldr	r4, [pc, #48]	@ (800488c <__libc_init_array+0x44>)
 800485c:	f000 f818 	bl	8004890 <_init>
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	2600      	movs	r6, #0
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	080048b8 	.word	0x080048b8
 8004884:	080048b8 	.word	0x080048b8
 8004888:	080048b8 	.word	0x080048b8
 800488c:	080048c0 	.word	0x080048c0

08004890 <_init>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr

0800489c <_fini>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr
